<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TIL(Today I Learned) - 2023년 4월</title>
      <link href="/2023/04/14/TIL-2023-04/"/>
      <url>/2023/04/14/TIL-2023-04/</url>
      
        <content type="html"><![CDATA[<h1 id="1주"><a href="#1주" class="headerlink" title="1주"></a>1주</h1><h2 id="2023-x2F-04-x2F-03"><a href="#2023-x2F-04-x2F-03" class="headerlink" title="2023&#x2F;04&#x2F;03"></a>2023&#x2F;04&#x2F;03</h2><ul><li><p>검색 기능 구현</p></li><li><p>검색 프로세스 이해</p></li><li><p>검색 - 디바운싱 &amp; 쓰로틀링</p><ul><li><code>디바운싱(debounce, 쿵쾅거리다)</code><ul><li>정의 : <strong>마지막 입력</strong>을 기준으로, <strong>특정 시간 이내에 추가 입력이 없으면 1번 실행하는 것</strong><ul><li>즉, 마지막 한 번 요청</li></ul></li><li><strong>연이어 발생한 이벤트를 하나의 그룹으로 묶어 처리하는 방식</strong></li><li>주로 그룹에서 마지막, 혹은 처음에 처리된 함수를 처리하는 방식으로 사용됩니다.</li><li>마지막 호출이 발생한 후 일정 시간이 지날때까지 추가적 입력이 없을때 실행이 됩니다.</li><li>디바운싱이 사용되는 대표적 예제로는 <code>검색 기능</code>이 있습니다.</li></ul></li><li><code>쓰로틀링(throttling)</code><ul><li>정의 : <strong>최초 입력</strong>을 기준으로, <strong>특정 시간 이내에 발생한 추가 입력을 무시하는 것</strong><ul><li>즉, 먼저 한 번 요청</li></ul></li><li>연이어 발생한 이벤트에 대해 일정한 <code>delay</code>를 포함시켜, <strong>연속적으로 발생하는 이벤트는 무시하는 방식</strong></li><li>즉, 지정한 <code>delay</code>동안 호출된 함수는 무시합니다.</li><li>쓰로틀링이 사용되는 대표적 예제는 <code>무한스크롤 기능</code>이 있습니다</li></ul></li></ul></li><li><p>Lodash 라이브러리 디바운싱 사용법</p></li></ul><h2 id="2023-x2F-04-x2F-04"><a href="#2023-x2F-04-x2F-04" class="headerlink" title="2023&#x2F;04&#x2F;04"></a>2023&#x2F;04&#x2F;04</h2><ul><li><p>이미지 수정</p></li><li><p>graphql-variables의 실체</p></li><li><p>REST-API의 문제점과 endpoint</p><ul><li><code>endpoint</code>란? API가 서버에서 리소스에 접근할 수 있도록 가능하게 하는 URL</li></ul></li><li><p>GraphQL과 REST-API의 관계</p><ul><li>오버페칭(Over Fetching), 언더페칭(Under Fetching)</li></ul></li><li><p>global state의 이해와 fetchpoilcy</p><ul><li>Redux의 문제점 : fetchPolicy 사용이 힘듬</li><li>apollo-client의 fetchPolicy : Apollo-Cache<ul><li>Apollo-Client로 Global State를 만들게되면 <code>Apollo-Cache</code>라는곳에 저장</li><li>이를 Apollo-client의 <code>fetchPolicy(fetch 정책)</code>라고 합니다.</li></ul></li></ul></li><li><p>Recoil 세팅 및 사용</p><ul><li>Recoil State 저장소(store) : atom</li></ul></li><li><p>정규식 (정규표현식)으로 로그인, 비밀번호 등 검증</p></li></ul><h2 id="2023-x2F-04-x2F-05"><a href="#2023-x2F-04-x2F-05" class="headerlink" title="2023&#x2F;04&#x2F;05"></a>2023&#x2F;04&#x2F;05</h2><ul><li><p>로그인의 역사 : 쿠키&#x2F;세션</p><ul><li>메모리 세션(session)을 이용한 로그인</li><li>컴퓨터 여러 대로 접속을 분산</li><li>Redis(임시 DB)에 로그인 정보 저장</li></ul></li><li><p>로그인의 역사 : JWT 로그인</p></li><li><p>암호화와 JWT 토큰</p><ul><li>단방향 암호화(해싱) 양방향 암호화</li></ul></li><li><p>JWT의 이상한 점 : 내용을 확인 가능</p></li></ul><h2 id="2023-x2F-04-x2F-06"><a href="#2023-x2F-04-x2F-06" class="headerlink" title="2023&#x2F;04&#x2F;06"></a>2023&#x2F;04&#x2F;06</h2><ul><li><p>accessToken의 저장과 next.js의 렌더링 원리</p><ul><li>브라우저 저장소의 종류</li></ul></li><li><p>권한 분기와 HOF &#x2F; HOC</p><ul><li>호이스팅, 스코프체인, 클로저</li></ul></li></ul><h2 id="2023-x2F-04-x2F-07"><a href="#2023-x2F-04-x2F-07" class="headerlink" title="2023&#x2F;04&#x2F;07"></a>2023&#x2F;04&#x2F;07</h2><ul><li>비회원 장바구니 구현</li><li>폼 라이브러리(react-hook-form)</li><li>검증 라이브러리(yup)와 공통컴포넌트 재사용</li></ul><hr><h1 id="2주"><a href="#2주" class="headerlink" title="2주"></a>2주</h1><h2 id="2023-x2F-04-x2F-10"><a href="#2023-x2F-04-x2F-10" class="headerlink" title="2023&#x2F;04&#x2F;10"></a>2023&#x2F;04&#x2F;10</h2><ul><li>구조분해 할당, rest 파라미터</li><li>Custom Hooks<ul><li>custom hooks로 useAuth 만들기</li><li>custom hooks로 useMoveToPage 만들기</li></ul></li><li>타입스크립트의 generic<ul><li>any vs unknown</li><li>Generic 타입 응용</li><li>Generic 타입 실무 활용 (HOC)<ul><li>Closure - 기초(Generic)</li><li>Closure - 기초(Generic) - 화살표 함수</li><li>Closure - 기초(Generic) - HOC</li></ul></li></ul></li></ul><h2 id="2023-x2F-04-x2F-11"><a href="#2023-x2F-04-x2F-11" class="headerlink" title="2023&#x2F;04&#x2F;11"></a>2023&#x2F;04&#x2F;11</h2><ul><li>카카오 맵 API (Kakao Map API)</li><li>SPA와 CSR에 대한 이해기반 카카오 CSR 이슈 보완<ul><li>Next.js의 Link 태그</li><li>script 태그의 비동기 작동 이슈</li><li>카카오 맵 Custom</li></ul></li><li>refetch의 문제점과 개선방법<ul><li>refetchQueries - 더이상 사용 x</li><li>cache-state 직접 업데이트</li></ul></li></ul><h2 id="2023-x2F-04-x2F-12"><a href="#2023-x2F-04-x2F-12" class="headerlink" title="2023&#x2F;04&#x2F;12"></a>2023&#x2F;04&#x2F;12</h2><ul><li>웹 에디터 (React-quill) 이해 및 실습<ul><li>dynamic import</li></ul></li><li>크로스 사이트 스크립트(XSS)<ul><li>Dompurify 설치</li></ul></li><li>dompurify 와 하이드레이션<ul><li>OWASP TOP 10</li><li>Hydration Issue</li></ul></li></ul><h2 id="2023-x2F-04-x2F-13"><a href="#2023-x2F-04-x2F-13" class="headerlink" title="2023&#x2F;04&#x2F;13"></a>2023&#x2F;04&#x2F;13</h2><ul><li>결제 프로세스 이해와 개발자의 일정 고려<ul><li>결제 프로세스</li><li>결제의 역사 (카드사, PG (Payment Gateway), 결제 솔루션)</li><li>포인트 충전 과정</li><li>개발자의 일정 고려하기</li></ul></li><li>결제 솔루션 외부 API (아임포트) 사용<ul><li>웹훅노티피케이션 (무통장 입금 프로세스)</li><li>백엔드 API로 결제 데이터 넘겨주기</li><li>모바일 결제</li></ul></li><li>프론트엔드에서의 시간관련 이벤트 및 이벤트 루프<ul><li>시간관련 이벤트</li><li>정기결제 크론탭</li><li>JS의 이벤트 루프 (Event Loop)</li><li>Task Queue</li><li>싱글 스레드</li><li>프로세스와 스레드<ul><li>컨텍스트 스위칭(context-switching, 문맥전환)</li></ul></li><li>블로킹 vs 논블로킹</li></ul></li></ul><h2 id="2023-x2F-04-x2F-14"><a href="#2023-x2F-04-x2F-14" class="headerlink" title="2023&#x2F;04&#x2F;14"></a>2023&#x2F;04&#x2F;14</h2><ul><li>비동기의 진화 과정<ul><li>Callback과 비동기 처리 (콜백 지옥)</li><li>Promise (프로미스 체인)</li><li>Async&#x2F;Await</li></ul></li><li>비동기 실습 및 태스크 큐<ul><li>나만의 axios 만들기<ul><li>callback으로 만들기</li><li>promise로 만들기</li></ul></li><li>매크로 태스크 큐 vs 마이크로 태스크 큐</li><li>태스크 큐들 간의 실행 우선순위</li></ul></li><li>await와 마이크로큐의 관계<ul><li>isSubmitting을 활용한 중복뮤테이션 방지</li><li>await와 마이크로 큐의 관계</li></ul></li></ul><hr><h1 id="3주"><a href="#3주" class="headerlink" title="3주"></a>3주</h1><h2 id="2023-x2F-04-x2F-17"><a href="#2023-x2F-04-x2F-17" class="headerlink" title="2023&#x2F;04&#x2F;17"></a>2023&#x2F;04&#x2F;17</h2><ul><li></li></ul><h2 id="2023-x2F-04-x2F-18"><a href="#2023-x2F-04-x2F-18" class="headerlink" title="2023&#x2F;04&#x2F;18"></a>2023&#x2F;04&#x2F;18</h2><ul><li></li></ul><h2 id="2023-x2F-04-x2F-19"><a href="#2023-x2F-04-x2F-19" class="headerlink" title="2023&#x2F;04&#x2F;19"></a>2023&#x2F;04&#x2F;19</h2><ul><li></li></ul><h2 id="2023-x2F-04-x2F-20"><a href="#2023-x2F-04-x2F-20" class="headerlink" title="2023&#x2F;04&#x2F;20"></a>2023&#x2F;04&#x2F;20</h2><ul><li></li></ul><h2 id="2023-x2F-04-x2F-21"><a href="#2023-x2F-04-x2F-21" class="headerlink" title="2023&#x2F;04&#x2F;21"></a>2023&#x2F;04&#x2F;21</h2><ul><li><hr></li></ul><h1 id="4주"><a href="#4주" class="headerlink" title="4주"></a>4주</h1><h2 id="2023-x2F-04-x2F-24"><a href="#2023-x2F-04-x2F-24" class="headerlink" title="2023&#x2F;04&#x2F;24"></a>2023&#x2F;04&#x2F;24</h2><ul><li></li></ul><h2 id="2023-x2F-04-x2F-25"><a href="#2023-x2F-04-x2F-25" class="headerlink" title="2023&#x2F;04&#x2F;25"></a>2023&#x2F;04&#x2F;25</h2><ul><li></li></ul><h2 id="2023-x2F-04-x2F-26"><a href="#2023-x2F-04-x2F-26" class="headerlink" title="2023&#x2F;04&#x2F;26"></a>2023&#x2F;04&#x2F;26</h2><ul><li></li></ul><h2 id="2023-x2F-04-x2F-27"><a href="#2023-x2F-04-x2F-27" class="headerlink" title="2023&#x2F;04&#x2F;27"></a>2023&#x2F;04&#x2F;27</h2><ul><li></li></ul><h2 id="2023-x2F-04-x2F-28"><a href="#2023-x2F-04-x2F-28" class="headerlink" title="2023&#x2F;04&#x2F;28"></a>2023&#x2F;04&#x2F;28</h2><ul><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 회고 </category>
          
          <category> TIL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIL(Today I Learned) - 2023년 3월</title>
      <link href="/2023/04/02/TIL-2023-03/"/>
      <url>/2023/04/02/TIL-2023-03/</url>
      
        <content type="html"><![CDATA[<h1 id="2주"><a href="#2주" class="headerlink" title="2주"></a>2주</h1><h2 id="2023-x2F-03-x2F-07"><a href="#2023-x2F-03-x2F-07" class="headerlink" title="2023&#x2F;03&#x2F;07"></a>2023&#x2F;03&#x2F;07</h2><ul><li>Emotion으로 디자인 실습</li><li>로그인창에 잘못된 입력값을 넣으면, 밑에 띄워줄 메시지</li></ul><h2 id="2023-x2F-03-x2F-08"><a href="#2023-x2F-03-x2F-08" class="headerlink" title="2023&#x2F;03&#x2F;08"></a>2023&#x2F;03&#x2F;08</h2><ul><li>PlayGround를 이용한 GraphQL 요청</li><li>postman&#x2F;swagger를 이용한 REST API 요청</li><li>API 명세서보고 데이터 요청하는 법</li></ul><h2 id="2023-x2F-03-x2F-09"><a href="#2023-x2F-03-x2F-09" class="headerlink" title="2023&#x2F;03&#x2F;09"></a>2023&#x2F;03&#x2F;09</h2><ul><li>동기&#x2F;비동기</li><li>PlayGround를 이용한 GraphQL 요청을 VSCode에서 구현</li><li>Axios를 이용한 REST API 요청 VSCode에서 구현</li></ul><h2 id="2023-x2F-03-x2F-10"><a href="#2023-x2F-03-x2F-10" class="headerlink" title="2023&#x2F;03&#x2F;10"></a>2023&#x2F;03&#x2F;10</h2><ul><li>Next.js에서 GraphQL 요청을 정적 라우팅, 동적 라우팅</li><li>조건부 렌더링(삼항연산자, &amp;&amp;연산자, 옵셔널 체이닝)</li></ul><hr><h1 id="3주"><a href="#3주" class="headerlink" title="3주"></a>3주</h1><h2 id="2023-x2F-03-x2F-13"><a href="#2023-x2F-03-x2F-13" class="headerlink" title="2023&#x2F;03&#x2F;13"></a>2023&#x2F;03&#x2F;13</h2><ul><li>리액트 폴더 구조 container &#x2F; presentational 패턴</li><li>Atomic 패턴</li><li>Props<ul><li>단방향 데이터 흐름(부모에 &#x3D;&gt; 자식으로만)</li></ul></li><li>src 폴더<ul><li>commmons : 공통 기능</li><li>component : 컴포넌트(기능)<ul><li>commons : 2번 이상 공통으로 쓸 컴포넌트</li><li>units : 1번만 쓸 컴포넌트</li></ul></li></ul></li><li>export vs export default</li></ul><h2 id="2023-x2F-03-x2F-14"><a href="#2023-x2F-03-x2F-14" class="headerlink" title="2023&#x2F;03&#x2F;14"></a>2023&#x2F;03&#x2F;14</h2><ul><li>emotion에 props 던지기<ul><li>입력이 다 작성 완료되면, 버튼 색 변경</li></ul></li><li>setState 원리</li><li>Next router 사용시 주의할 점<ul><li>다이나믹 라우팅 폴더가 있어야만 사용가능</li></ul></li><li>map &amp; filter<ul><li>Map과 HTML 연결</li><li>map의 index를 key로 사용시 발생하는 문제점</li><li>React에서 Key가 필요한 이유</li></ul></li><li>화살표 함수 () &#x3D;&gt; {} vs () &#x3D;&gt; () 차이점<ul><li>소괄호 ()로 감싸진 부분이 return, return문을 작성하지 않아도 리턴</li><li>중괄호{}로 감싸진 함수는 return문이 없다면 반환값이 없음</li></ul></li><li>refetchQueries : 삭제 후 바로 화면에 반영 (mutaion쓸 떄 사용)<ul><li>데이터가 변경 되었을 경우 최신 데이터로 다시 fetch</li></ul></li></ul><h2 id="2023-x2F-03-x2F-15"><a href="#2023-x2F-03-x2F-15" class="headerlink" title="2023&#x2F;03&#x2F;15"></a>2023&#x2F;03&#x2F;15</h2><ul><li>GraphQL 페이지 수정시 폴더 구조</li><li>컴포넌트 재사용성<ul><li>페이지 등록 페이지를 수정 페이지로도 사용</li><li>Emotion props.drilling으로 상태값으로 색상 조정</li></ul></li><li>router.query.number 사용시 주의점</li></ul><h2 id="2023-x2F-03-x2F-16"><a href="#2023-x2F-03-x2F-16" class="headerlink" title="2023&#x2F;03&#x2F;16"></a>2023&#x2F;03&#x2F;16</h2><ul><li>페이지 수정화면에 등록한 정보를 input의 defaultValue와 state로 가져오기</li><li>Next.js TS 세팅법</li></ul><h2 id="2023-x2F-03-x2F-17"><a href="#2023-x2F-03-x2F-17" class="headerlink" title="2023&#x2F;03&#x2F;17"></a>2023&#x2F;03&#x2F;17</h2><ul><li>early-exit 패턴 : if문에서 조건이 거짓이면 무언가를 실행하는 방식</li><li>graphql-codegen 설치 및 graphQL types 자동 생성<ul><li>package.json에 <code>generate : graphql-codegen</code></li></ul></li><li>typescript 심화 (Pick, Omit, Partical, Required, Union, Record)</li></ul><hr><h1 id="4주"><a href="#4주" class="headerlink" title="4주"></a>4주</h1><h2 id="2023-x2F-03-x2F-20"><a href="#2023-x2F-03-x2F-20" class="headerlink" title="2023&#x2F;03&#x2F;20"></a>2023&#x2F;03&#x2F;20</h2><ul><li>이벤트 전파와 버블링<ul><li>버블링 : <strong>특정 화면 요소에서 이벤트가 발생</strong>하였을때, <strong>해당 이벤트가 더 상위의 화면 요소들로 전달되는 특성</strong><ul><li><code>event.target.id</code>가 아닌 <code>event.currentTarget.id</code>를 사용하여 버블링을 막아줄 수 있음</li><li><code>event.stopPropagation()</code> : event가 상위로 올라가는 것(이벤트 버블링)을 막아줌</li></ul></li><li><code>캡쳐링</code>은 <strong>버블링과 반대</strong>로 <strong>상위에서 하위로 이벤트가 전파되는 단계</strong></li></ul></li><li>프로젝트에 ESLint, Prettier 세팅법<ul><li>ESLint 규칙 정하기</li></ul></li></ul><h2 id="2023-x2F-03-x2F-21"><a href="#2023-x2F-03-x2F-21" class="headerlink" title="2023&#x2F;03&#x2F;21"></a>2023&#x2F;03&#x2F;21</h2><ul><li>ant-Design 아이콘</li><li>라이브러리 - Daumpostcode</li><li>state와 prev<ul><li>prev &#x3D;&#x3D;&#x3D; 임시 저장공간</li></ul></li></ul><h2 id="2023-x2F-03-x2F-22"><a href="#2023-x2F-03-x2F-22" class="headerlink" title="2023&#x2F;03&#x2F;22"></a>2023&#x2F;03&#x2F;22</h2><ul><li>Next.js 레이아웃 구조</li><li>레이아웃 폴더구조 분리 및 Hidden영역 설정</li><li>글로벌 스타일 적용하기 (+ 폰트)<ul><li>경량화 폰트 woff, worff2</li><li><code>FOIT(Flash of Invisible Text)</code>: 브라우저가 웹 폰트를 다운로드하기 전에 텍스트가 보이지 않는 현상</li><li><code>FOUT(Flash of Unstyled Text)</code>: 브라우저가 웹 폰트를 다운로드하기 전에 텍스트가 대체 글꼴로 렌더링되는 현상</li></ul></li><li>라이브러리 : 캐러셀 이미지 (React-slick)</li></ul><h2 id="2023-x2F-03-x2F-23"><a href="#2023-x2F-03-x2F-23" class="headerlink" title="2023&#x2F;03&#x2F;23"></a>2023&#x2F;03&#x2F;23</h2><ul><li>페이지네이션</li><li>state 끌어올리기</li></ul><h2 id="2023-x2F-03-x2F-24"><a href="#2023-x2F-03-x2F-24" class="headerlink" title="2023&#x2F;03&#x2F;24"></a>2023&#x2F;03&#x2F;24</h2><ul><li>emotion storybook</li><li>얕은 복사와 깊은 복사 및 댓글수정<ul><li><code>얕은 복사(Shallow Copy)</code>와 <code>깊은 복사(Deep Copy)</code></li><li>얕은복사 (shallow copy,  중첩 객체 복사 with 스프레드 연산자)</li><li>깊은 복사 (deep copy, 깊이가 2 이상 데이터 복사)<ul><li><code>JSON.stringify</code>와 <code>JSON.parse</code>라는 메소드</li></ul></li><li>lodash : 객체를 복사할 때마다 깊은 복사 라이브러리<ul><li><code>_.cloneDeep(value)</code></li></ul></li></ul></li><li>댓글 수정하기</li><li>무한스크롤</li></ul><hr><h1 id="5주"><a href="#5주" class="headerlink" title="5주"></a>5주</h1><h2 id="2023-x2F-03-x2F-27"><a href="#2023-x2F-03-x2F-27" class="headerlink" title="2023&#x2F;03&#x2F;27"></a>2023&#x2F;03&#x2F;27</h2><ul><li>inputs 리팩토링</li><li>클래스 컴포넌트와 생명주기<ul><li>componentDidMount, componentDidUpdate, componentWillUnmount</li></ul></li><li>this 바인딩( .bind (this) )</li><li>함수형 컴포넌트의 생명주기 훅 useEffect</li><li>Dogs 오픈 API 추가<ul><li><a href="https://github.com/public-apis/public-apis">https://github.com/public-apis/public-apis</a></li><li>react-query</li><li>useEffect와 open-api</li></ul></li></ul><h2 id="2023-x2F-03-x2F-28"><a href="#2023-x2F-03-x2F-28" class="headerlink" title="2023&#x2F;03&#x2F;28"></a>2023&#x2F;03&#x2F;28</h2><ul><li>open API 끌어오기</li><li>CORS 에러<ul><li><code>옛날 SOP 정책</code>: 무조건 origin이랑 똑같은 백엔드로만 요청이 가능<ul><li>e.g. 네이버는 네이버 URL만, 다음은 다음 URL만 요청 가능</li><li>cf. <code>SOP, Same-Origin-Policy(동일 출처 정책)</code></li></ul></li><li><code>요즘 CORS 정책</code> : 주소가 달라도 데이터를 허용<ul><li>e.g. 백엔드에서 CORS를 허용할지, 허용안할지 선택</li><li>cf. <code>Cross Origin Resource Sharing, 줄여서 CORS(콜스)</code> 부름</li></ul></li></ul></li><li>백엔드 구조, 웹서비스 구조, 프론트엔드 서버</li><li>DB<ul><li><code>ODM(object document mapping)</code> : 객체 doucemnt(문서형)<ul><li>종류 : mongoose</li></ul></li><li><code>ORM(object relation mapping)</code> : 객체 relation(관계형)<ul><li>종류 : typeORM, sequalize, prisma 등</li></ul></li></ul></li><li>DB 관리 프로그램 : DBeaver</li><li>백엔드 구축</li></ul><h2 id="2023-x2F-03-x2F-29"><a href="#2023-x2F-03-x2F-29" class="headerlink" title="2023&#x2F;03&#x2F;29"></a>2023&#x2F;03&#x2F;29</h2><ul><li>백엔드 ApooloServrer 게시판 CRUD API 만들기</li><li>백엔드 ApooloServrer 상품 CRUD API 만들기</li><li>BaaS : 파이어베이스 세팅 및 공식문서 보고 데이터 추가, 삭제<ul><li><code>BaaS(Backend As A Serveice)</code></li><li><code>SasS(Sofrware As A Service)</code> e.g. 구글 문서, 노션</li><li><code>PaaS(Platform As A Service)</code></li><li><code>IaaS(Infra As A Service)</code></li></ul></li></ul><h2 id="2023-x2F-03-x2F-30"><a href="#2023-x2F-03-x2F-30" class="headerlink" title="2023&#x2F;03&#x2F;30"></a>2023&#x2F;03&#x2F;30</h2><ul><li>이미지 업로드 프로세스 (이미지 서버, 스토리지 포함)<ul><li>DB에 이미지, 영상을 저장</li><li>이미지 검증 실습</li></ul></li><li>이미지 게시글에 등록</li></ul>]]></content>
      
      
      <categories>
          
          <category> 회고 </category>
          
          <category> TIL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CheatSheet-GitHub 단축키</title>
      <link href="/2023/03/24/CheatSheet-GitHub/"/>
      <url>/2023/03/24/CheatSheet-GitHub/</url>
      
        <content type="html"><![CDATA[<h1 id="1-GitHub-단축키"><a href="#1-GitHub-단축키" class="headerlink" title="1. GitHub 단축키"></a>1. GitHub 단축키</h1><ul><li>Repository 안의 파일 검색 : <code>단축키 T</code></li><li>전체 Repository에서 찾기 : <code>단축키 /</code></li><li>소스 수정한 사람 찾기 : <code>단축키 B</code><ul><li>Git Blame 명령어</li></ul></li><li>Command Palette :<ul><li>Mac : <code>Cmd + k</code></li><li>Windows : <code>Ctrl + K</code></li></ul></li><li>Hide Comments : <code>단축키 i</code></li><li>Jump to a Line : <code>단축키 L</code></li><li>Keyboard Shortcuts : <code>?</code></li><li>퍼머링크 : <code>Github 라인넘버 위에 클릭 후 Shift 누른 상태에서 다른 라인넘버를 클릭</code> <ul><li>퍼머링크를 영구적인 URL로 변경</li><li>Canonical URL : <code>단축키 Y</code></li></ul></li><li>cf. <a href="https://www.youtube.com/watch?v=2tK0txsNd6U">(43) 깃허브 사용법 + 단축키 (이것좀 알고 사용하자 🔥) - YouTube</a></li></ul><hr><h1 id="2-확장-기능"><a href="#2-확장-기능" class="headerlink" title="2. 확장 기능"></a>2. 확장 기능</h1><ul><li><a href="https://chrome.google.com/webstore/detail/octotree-github-code-tree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=chrome-ntp-icon">Octotree - GitHub code tree - Chrome 웹 스토어 (google.com)</a><ul><li>Github Repo 폴더 구조를 사이드바로 보여줌</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CheatSheet </category>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CheatSheet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>기술서적 공부법 - 스터디를 이용한 삼색볼펜법</title>
      <link href="/2023/03/09/Info-Reading-Book-Tip/"/>
      <url>/2023/03/09/Info-Reading-Book-Tip/</url>
      
        <content type="html"><![CDATA[<h1 id="1-‘공부’와-‘스터디’"><a href="#1-‘공부’와-‘스터디’" class="headerlink" title="1. ‘공부’와 ‘스터디’"></a>1. ‘공부’와 ‘스터디’</h1><ul><li>study의 뜻은  ‘공부하다’이지만,</li><li>일상생활에서 한국인들은 ‘공부’랑 ‘스터디’를 구분해서 사용합니다.<ul><li>e.g. 스터디 : 여럿이 같이 하는 것</li><li>e.g. 공부 : 혼자 하는 것</li></ul></li><li>보통 스터디에서는 각자 공부해 온 것을 공유하고 남에게 가르쳐주고 배우고, 토론하는 자리라 여깁니다. <ul><li>거기에서 따로 공부를 하지는 않습니다.</li><li>공부는 개인적으로 혼자 하는 것이 전제되어 있습니다.</li></ul></li><li>그러나 우리는 같이 모여서 공부할 수도 있다는 발상을 잘 못합니다.<ul><li>즉, 대다수 사람들은 여럿이 모여서 조용한 걸 못견뎌 합니다.</li></ul></li></ul><hr><h1 id="2-삼색볼펜법"><a href="#2-삼색볼펜법" class="headerlink" title="2. 삼색볼펜법"></a>2. 삼색볼펜법</h1><p>최소 빨강, 파랑, 초록 세 가지 색깔이 있는 볼펜을 하나 들고 책을 읽습니다. </p><ul><li>내가 읽는 부분에서 <strong>정말 핵심이라고 생각되는 부분</strong>에 <code>빨간색</code>으로 밑줄을 긋습니다. <ul><li>단, 빨간색은 <strong>한 페이지에 하나 이상 치지 않습니다</strong>(줄 칠 곳 없으면 건너 뛰어도 됩니다).</li></ul></li><li><strong>핵심은 아니지만 나름 중요하다</strong>고 생각들면 <code>파란색</code> 밑줄을 긋습니다.</li><li><strong>중요하고 아니고를 떠나서 흥미롭다</strong>, 재미있다는 생각이 드는 부분에는 <code>초록색</code>을 긋습니다.</li></ul><p>삼색볼펜법의 설명을 들으면 허접해 보입니다만, 절대 우습게 보면 안됩니다. 매우 강력한 공부법이자 독서법입니다. </p><hr><h1 id="3-볼펜으로-따라읽기"><a href="#3-볼펜으로-따라읽기" class="headerlink" title="3. 볼펜으로 따라읽기"></a>3. 볼펜으로 따라읽기</h1><p>이렇게 개인적으로 책을 읽을 때 두가지 방법이 있습니다.</p><ol><li>순서대로 읽으면서 빨, 파, 녹을 적절히 선택해 가면서 밑줄 칩니다. 기본적으로 <strong>전체를 한 번 읽는 걸 목표</strong>로 합니다.</li><li>우선 <strong>빨간색을 다 치겠다는 마음으로 후르륵 속도를 높혀 읽습니다</strong>. <ol><li>다시 <strong>처음으로 돌아와서 파란색만 치겠다</strong>는 생각으로 재독합니다.</li><li>마지막으로 <strong>삼독하면서 초록색</strong>을 씁니다.</li><li><strong>전체를 세 번 읽는 걸 목표</strong>로 합니다.</li></ol></li></ol><p>사람에 따라 1번으로 읽어서 더 빠른 사람이 있고, 오히려 2번으로 읽어서 더 빠른 사람이 있습니다.<br>그때 그 때 기분에 따라 선택해도 좋습니다.</p><p>그리고 어떤 방법을 쓰든지 읽는 줄 밑에 볼펜을 대고(볼펜촉은 집어넣은 상태로)<br>눈을 따라가면서(사실은 볼펜 끝을 눈이 따라가면서) 읽는 것이 좋습니다.<br>속독법을 따로 훈련받지 않아도 이 방법만 사용하면 독서속도와 집중도가 상당히 높아집니다. </p><hr><h1 id="4-그룹별-공유"><a href="#4-그룹별-공유" class="headerlink" title="4. 그룹별 공유"></a>4. 그룹별 공유</h1><p>다 읽었으면 각 그룹별(같은 챕터를 읽은 사람들끼리)로 모여 앉습니다. 한 사람이 진행자가 됩니다.<br>진행 방식은 다음 2가지가 있습니다. 맘에 드는 것을 고르세요.</p><ol><li>진행자가 한 페이지씩 진행해 나가면서 사람들에게 빨간색으로 줄친 곳을 물어봅니다. <ul><li>사람들은 자신이 빨간색으로 줄친 곳을 소리내어 읽습니다(다른 사람이 이미 읽었던 줄은 건너 뛰고). </li><li>진행자는 모두의 합집합을 구합니다(자기 책에 모두의 빨간색이 다 표시되도록 함).</li><li>이때 여러 사람이 공감한 줄(많은 사람이 같은 부분에 빨간줄을 그었다든지)에 대해서는 특별히 표시를 해둡니다.</li><li>빨간색이 완료되면 그 페이지에 파란색이 있는지 확인하고 역시 같은 방법으로 진행하고,<ul><li>그 다음엔 초록색을 확인합니다. 이제 다음 페이지로 넘어갑니다.</li></ul></li></ul></li><li>전체(해당 챕터)에 대해 빨간색만 확인합니다.<ul><li>빨간색이 다 끝나고 나면, 그 때 처음으로 되돌아가서 파란색을 봅니다.</li><li>마지막으로 초록색을 봅니다.</li><li>아까 읽은 부분을 총 세번에 걸쳐 훑는 셈입니다. 다른 방식은 1번과 유사합니다.</li></ul></li></ol><hr><h1 id="5-전체-공유-및-마무리"><a href="#5-전체-공유-및-마무리" class="headerlink" title="5. 전체 공유 및 마무리"></a>5. 전체 공유 및 마무리</h1><p>이제 그룹을 해체하고 전원이 한자리에 모입니다. 둥그렇게 둘러 앉으면 좋습니다.<br>그룹별 진행자 세명이 돌아가며 발표를 합니다.<br>빨간색과 초록색 위주로 하되, 논쟁이 되었던 부분 등에 대해 추가 언급을 합니다. </p><ul><li>예를 들어 발표자가 몇 페이지 몇 번 째 단락의 몇 번 째 문장에 빨간색을 쳤다고 말하고 소리내어 읽으면,</li><li>각자는 그 부분을 책으로 찾아보면서 따라갑니다 – 그러면서 간접적으로 책을 읽게 되지요.</li><li>각 그룹별로 발표가 끝나면 질답이나 토론을 할 수 있습니다.</li><li>한 그룹당 15분씩 쓰고, 총 3개 그룹이므로 45분을 씁니다.</li></ul><p>마지막으로 10분간 전체 정리 및 회고를 합니다.<br>각자 나는 이런 느낌을 받았고, 뭐가 좋았고, 이런 교훈을 얻었고 등을 공유합니다.<br>그리고 다음 스터디 때 공부할 챕터를 3개 뽑습니다.</p><hr><h1 id="6-적용"><a href="#6-적용" class="headerlink" title="6. 적용"></a>6. 적용</h1><p>따로 시간 내어 책읽는 것이 부담되는 경우 스터디할 엄두를 못내는데, 이 방법을 쓰면 가능합니다.<br>아예 각자 책읽을 시간을 스터디 시간에 포함시키는 겁니다.</p><p>이 방식은 워크샵에도 훌륭히 적용됩니다. 책에 따라 대략 12시간 정도를 쓰면 어지간한 책 한 권 뗄 수 있습니다.<br>설사 아무도 그 책을 미리 읽어오지 않아도 말이죠(물론 미리 준비해 오면 시간이 더 줄겠지만).<br>1박 2일이면 1일차에 8시간 쓰고, 2일차에 4시간 쓰는 식으로 합니다.<br>이걸 제대로 하려면 밤에 술먹고 늦게 자는 것은 하지 말아야 합니다. </p><hr><h1 id="7-참고"><a href="#7-참고" class="headerlink" title="7. 참고"></a>7. 참고</h1><ul><li><a href="http://agile.egloos.com/3684946">애자일 이야기 : 바쁜 직장인을 위한 스터디 비결 (egloos.com)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 정보 </category>
          
          <category> 공부법 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 공부법 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>다이어그램 툴 모음</title>
      <link href="/2023/03/07/Program-Tool-Collection/"/>
      <url>/2023/03/07/Program-Tool-Collection/</url>
      
        <content type="html"><![CDATA[<h1 id="1-다이어그램-툴"><a href="#1-다이어그램-툴" class="headerlink" title="1. 다이어그램 툴"></a>1. 다이어그램 툴</h1><ul><li><a href="https://drawio-app.com/">draw.io</a></li><li><a href="https://miro.com/">Miro</a></li><li><a href="https://whimsical.com/">Whimsical</a></li><li><a href="https://creately.com/">Creately</a></li><li><a href="https://www.flowmapp.com/">Flowmapp</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 정보 </category>
          
          <category> 북마크 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 북마크 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>개발 블로그 종류</title>
      <link href="/2023/03/07/DevBlog-Type/"/>
      <url>/2023/03/07/DevBlog-Type/</url>
      
        <content type="html"><![CDATA[<h1 id="1-개발-블로그-종류"><a href="#1-개발-블로그-종류" class="headerlink" title="1. 개발 블로그 종류"></a>1. 개발 블로그 종류</h1><p>사람들마다 개인 블로그를 가지고 올리는 주제는 다양하지만,<br>개발을 메인 주제로 삼는 블로그는 크게 2종류로 나뉩니다.</p><ul><li>기술 블로그</li><li>TIL(Today I Learned)</li></ul><hr><h1 id="2-기술-블로그"><a href="#2-기술-블로그" class="headerlink" title="2. 기술 블로그"></a>2. 기술 블로그</h1><ul><li>특정한 Stack, Framework, method 등을 주제로 포스트를 작성한 블로그</li><li>다른 사람들에게 설명을 주목적으로 작성</li><li>자신만의 언어, 예시 코드로 정리하여,<ul><li>다른 사람들도 쉽게 이해할 수 있도록 작성하는 것이 좋은 기술 블로그</li></ul></li><li>e.g. <a href="https://tech.kakao.com/">카카오 기술 블로그</a></li><li>e.g. <a href="https://d2.naver.com/home">네이버 기술 블로그</a></li><li>e.g. <a href="https://woowabros.github.io/">우아한형제들 기술 블로그</a></li><li>e.g.<a href="https://velopert.com/">Velopert</a></li><li>e.g. <a href="https://medium.com/coupang-tech/technote/home">쿠팡 기술 블로그</a></li></ul><hr><h1 id="3-TIL-블로그"><a href="#3-TIL-블로그" class="headerlink" title="3. TIL 블로그"></a>3. TIL 블로그</h1><ul><li>Today I Learned의 약자로 “오늘 내가 공부한 것”을 주제로 글을 작성하는 것</li><li>자신이 배운 것을 자신만의 언어로 정리</li><li>일기처럼 느낀점을 작성할 수도 있고, 복습한 내용을 정리해도 됨</li><li>e.g. <a href="https://wayhome25.github.io/til/2017/08/14/TIL-for-6-months/">초보몽키의 개발공부 블로그</a></li><li>e.g. <a href="https://jbee.io/essay/how_do_i_study_2/">JBEE님의 블로그</a></li><li>e.g. <a href="https://milooy.github.io/">진유림님의 블로그</a></li><li>e.g. <a href="http://milooy.github.io/TIL/">진유림님의 TIL</a></li></ul><hr><h1 id="4-블로그-플랫폼"><a href="#4-블로그-플랫폼" class="headerlink" title="4. 블로그 플랫폼"></a>4. 블로그 플랫폼</h1><h2 id="4-1-velog"><a href="#4-1-velog" class="headerlink" title="4.1 velog"></a>4.1 velog</h2><ul><li>장점<ul><li>개발자들을 위한 전용 블로그</li><li>마크다운 사용</li></ul></li><li>단점<ul><li>팔로우 기능이 없어 타인과 소통하기 힘들다.</li><li>댓글 알림 기능이 없다.</li><li>디자인을 바꿀 수 없다.</li></ul></li></ul><hr><h2 id="4-2-Tistory"><a href="#4-2-Tistory" class="headerlink" title="4.2 Tistory"></a>4.2 Tistory</h2><ul><li>장점<ul><li>애드센스 삽입이 가능</li><li>다양한 블로그 스킨과 디자인 변경 가능</li><li>최신댓글, 방문자 수, 깃허브 잔디 등을 보여줄 수 있다.</li></ul></li><li>단점<ul><li>코드 태그가 예쁘지 않다.</li><li>마크다운 안됨</li></ul></li></ul><hr><h2 id="4-3-Notion"><a href="#4-3-Notion" class="headerlink" title="4.3 Notion"></a>4.3 Notion</h2><ul><li>장점<ul><li>자유로운 디자인, 레이아웃</li><li>마크다운 사용</li><li>토글, 링크 삽입 등 다양한 기능을 쉽게 이용</li><li>공동 작업 가능</li></ul></li><li>단점<ul><li>구글 검색이 안 된다.</li><li>다른 사람과 소통이 힘듬</li></ul></li></ul><hr><h2 id="4-4-Medium"><a href="#4-4-Medium" class="headerlink" title="4.4 Medium"></a>4.4 Medium</h2><ul><li>장점<ul><li>세계적으로 큰 사이트이며, 해외 유저가 많다.</li><li>구독 기능이 있다.</li></ul></li><li>단점<ul><li>애드센스가 불가능</li><li>부분 무료화이기 때문에 결제해야 읽을 수 있는 글이 있다.</li></ul></li></ul><hr><h2 id="4-5-github-blog"><a href="#4-5-github-blog" class="headerlink" title="4.5 github blog"></a>4.5 github blog</h2><ul><li>장점<ul><li>다양한 스킨이 있으며, 스킨에 따라 기능도 모두 다르다.</li><li>깃허브 잔디가 생긴다.</li><li>마크다운 사용</li></ul></li><li>단점<ul><li>초보자에게 어렵다.</li><li>개인 공간인 느낌이 크기에 다른 사람과의 소통이 어렵다.</li><li>구글 검색이 힘들다.</li></ul></li></ul><hr><h2 id="4-6-기타"><a href="#4-6-기타" class="headerlink" title="4.6 기타"></a>4.6 기타</h2><ul><li>Naver Blog<ul><li>일반 사용자들도 많이 사용</li><li>개발 외 목적으로도 많이 사용</li></ul></li><li>Google Blog</li></ul>]]></content>
      
      
      <categories>
          
          <category> 회고 </category>
          
          <category> TIL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web 디자인 관련 Link 모음</title>
      <link href="/2023/03/04/Link-Collection/"/>
      <url>/2023/03/04/Link-Collection/</url>
      
        <content type="html"><![CDATA[<h1 id="폰트"><a href="#폰트" class="headerlink" title="폰트"></a>폰트</h1><ul><li><a href="https://noonnu.cc/">눈누</a></li><li><a href="https://googlefonts.github.io/korean/">Google Fonts + 한국어 • Google Fonts + Korean</a></li><li><a href="https://cactus.tistory.com/306">Pretendard 폰트(tistory.com)</a></li></ul><hr><h1 id="이미지"><a href="#이미지" class="headerlink" title="이미지"></a>이미지</h1><ul><li><a href="https://unsplash.com/ko">아름다운 무료 이미지 및 사진 | Unsplash</a></li></ul><hr><h1 id="그라디언트"><a href="#그라디언트" class="headerlink" title="그라디언트"></a>그라디언트</h1><ul><li><a href="https://coolbackgrounds.io/">Cool Backgrounds</a></li><li><a href="https://cssgradient.io/">CSS Gradient — Generator, Maker, and Background</a></li><li><a href="https://uigradients.com/#Sel">uiGradients - Beautiful colored gradients</a></li></ul><hr><h1 id="색상"><a href="#색상" class="headerlink" title="색상"></a>색상</h1><ul><li><a href="https://color.adobe.com/ko/create">https://color.adobe.com/ko/create</a></li></ul><hr><h1 id="아이콘"><a href="#아이콘" class="headerlink" title="아이콘"></a>아이콘</h1><ul><li><a href="https://www.iconfinder.com/">Iconfinder</a></li><li><a href="https://www.flaticon.com/">Flaticon</a><ul><li>왕관이 붙은 것은 역시 금액을 지불</li></ul></li><li><a href="https://icon-icons.com/">icon-icons</a><ul><li>무료 아이콘만 제공</li></ul></li><li><a href="https://iconmonstr.com/">iconmonstr</a><ul><li>저작권없는 완전 무료</li></ul></li><li><a href="https://icooon-mono.com/">ICOOON MONO</a><ul><li>일본에서 만든 사이트로 깔끔하고 간결한 아이콘</li></ul></li></ul><hr><h1 id="웹-디자인-참고"><a href="#웹-디자인-참고" class="headerlink" title="웹 디자인 참고"></a>웹 디자인 참고</h1><ul><li><a href="https://koreawebdesign.com/site/">카테고리 | Korea Web Design</a></li><li><a href="https://www.gdweb.co.kr/main/">GDWEB:지디웹</a> : 국내 최우수 웹 디자인 선정, 웹사이트</li><li><a href="http://rwdb.kr/">RWDB</a> : 반응형웹 사이트를 모아놓은 사이트</li><li><a href="https://design.socar.kr/">쏘카 브랜드 디자인 가이드 (socar.kr)</a></li><li><a href="http://ww25.styleguide.co.kr/?subid1=20230304-1345-081f-ac45-b4d6f5bfdb39">Styleguide.co.kr</a></li></ul><hr><h1 id="HTML-amp-CSS"><a href="#HTML-amp-CSS" class="headerlink" title="HTML &amp; CSS"></a>HTML &amp; CSS</h1><ul><li><a href="https://html.spec.whatwg.org/">HTML Standard (whatwg.org)</a></li><li><a href="http://validator.kldp.org/">The W3C Markup Validation Service (kldp.org)</a> : HTML 마크업 검사기<ul><li><a href="https://validator.w3.org/">The W3C Markup Validation Service</a> : 대체주소</li></ul></li><li><a href="https://css-validator.kldp.org/">W3C CSS 검사 서비스 (kldp.org)</a> : CSS 검사기<ul><li><a href="https://jigsaw.w3.org/css-validator/">W3C CSS 검사 서비스</a> : 대체주소</li></ul></li><li><a href="https://htmlreference.io/">HTML Reference - A free guide to all HTML elements and attributes.</a></li><li><a href="https://cssreference.io/">CSS Reference - A free visual guide to CSS</a></li><li><a href="https://caniuse.com/">Can I use… Support tables for HTML5, CSS3, etc</a></li><li><a href="https://getcssscan.com/css-checkboxes-examples">65 Beautiful CSS checkboxes examples - CSS Scan (getcssscan.com)</a></li></ul><hr><h1 id="CSS-Grid-amp-Flex"><a href="#CSS-Grid-amp-Flex" class="headerlink" title="CSS Grid &amp; Flex"></a>CSS Grid &amp; Flex</h1><ul><li><a href="https://paullabworkspace.notion.site/flex-grid-e5bdea43ba4f427990ff8666ea53ec56">(공개용) 알잘딱깔센 flex &amp; grid (notion.site)</a></li><li><a href="https://flexngrid.com/">flexngrid</a></li><li><a href="http://gridcalculator.dk/">Grid Calculator by Nicolaj Kirkgaard Nielsen</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 정보 </category>
          
          <category> 북마크 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 북마크 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>웹 접근성과 WAI-ARIA</title>
      <link href="/2023/03/01/Front-Start-HTML-WAI-ARIA/"/>
      <url>/2023/03/01/Front-Start-HTML-WAI-ARIA/</url>
      
        <content type="html"><![CDATA[<h1 id="1-웹-접근성"><a href="#1-웹-접근성" class="headerlink" title="1. 웹 접근성"></a>1. 웹 접근성</h1><p>웹 접근성이란 시각장애인들이 웹 페이지를 원활하게 이용할 수 있도록 알려주는 가이드라인이라고 생각하면 됩니다.<br>대표적으로 input 과 label 이 있는데요.</p><ul><li>일반 사람들은 별다른 설명 없이 input, button, a 등등의 태그만 있어도 어느정도 이용할 수 있지만, </li><li><strong>시각장애인들</strong>은 직접 클릭할 수도 없이, <strong>탭 같은 걸로 각 요소를 이동</strong>하는 수밖에 없습니다.<ul><li>따라서 탭을 눌렀을 때, <strong>초점이 어느 순서로 이동</strong>하는지, </li><li><strong>초점이 잡혔을 때의 안내 메시지</strong>가 제대로 나오는지 여부는 굉장히 중요합니다.</li></ul></li></ul><p>이런 설정들을 HTML native 요소만으로는 처리하기 어렵기 때문에, W3C 는 <code>WAI-ARIA</code> 라는 걸 정의했습니다.</p><hr><h1 id="2-WAI-ARIA"><a href="#2-WAI-ARIA" class="headerlink" title="2. WAI-ARIA"></a>2. WAI-ARIA</h1><p><code>WAI-ARIA (Web Accessibility Initiative – Accessible Rich Internet Applications)</code></p><ul><li>W3C 에서 정의한 기술로 웹 접근성을 위해 지원되는 여러 가지 특성들을 의미합니다.</li><li>일반 사용자가 보기에 정상인 화면들도 HTML 요소에 따라서 <ul><li><strong>스크린 리더 등의 보조기기에서 제대로 읽히지 않을 수 있습니다</strong>.</li></ul></li><li>이를 개선하기 위해 웹 애플리케이션에 역할(Role), 속성(Property), 상태(State) 정보를 추가할 수 있습니다.</li></ul><hr><h2 id="2-1-Role"><a href="#2-1-Role" class="headerlink" title="2.1 Role"></a>2.1 Role</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- role example --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;menuitem&quot;</span>&gt;</span>Open file…<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>HTML 요소의 역할을 정의</strong><ul><li>일반적으로는 HTML native 요소만으로 이를 처리하는게 가장 이상적입니다.</li><li>버튼은 button, 링크는 a, 체크박스는 input checkbox 등등 이미 존재하는 요소들로도 충분히 표현할 수 있습니다.</li></ul></li><li>But, 이미지에 버튼 클릭 이벤트를 준다던가 <ul><li>좀더 세세하고 다양한 설정이 하고 싶을 때는 native 요소만으로 부족할 수 있습니다.</li><li>이럴 때 <code>role</code> 을 사용해서 <strong>해당 요소들의 역할을 명시</strong>합니다.</li></ul></li></ul><p>Role 의 종류는 W3C WAI ARIA 의 <a href="https://www.w3.org/TR/wai-aria/#roles_categorization">5.3 Categorization of Roles</a> 에서 확인할 수 있습니다.</p><hr><h2 id="2-2-State-and-Property"><a href="#2-2-State-and-Property" class="headerlink" title="2.2 State and Property"></a>2.2 State and Property</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- property state example 1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">aria-checked</span>=<span class="string">&quot;true&quot;</span>&gt;</span>체크박스 아이템<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- property state example 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;alert&quot;</span> <span class="attr">aria-live</span>=<span class="string">&quot;assertive&quot;</span>&gt;</span>올바르지 않은 입력입니다.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>속성 (Property)</code>는 <strong>해당 요소의 특징이나 상황을 정의</strong>하며 <code>aria-</code> 라는 접두사를 사용합니다.</li><li><code>상태 (State)</code>는 <strong>요소의 현재 상태</strong>를 나타냅니다.</li></ul><hr><h1 id="3-ARIA-속성들"><a href="#3-ARIA-속성들" class="headerlink" title="3. ARIA 속성들"></a>3. ARIA 속성들</h1><h2 id="3-1-role-x3D-”checkbox”-aria-checked-x3D-”true”"><a href="#3-1-role-x3D-”checkbox”-aria-checked-x3D-”true”" class="headerlink" title="3.1. role&#x3D;”checkbox” aria-checked&#x3D;”true”"></a>3.1. role&#x3D;”checkbox” aria-checked&#x3D;”true”</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">role</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">aria-checked</span>=<span class="string">&quot;false&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;0&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;chk1-label&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;chk1-label&quot;</span>&gt;</span>Remember my preferences<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- native 요소로 사용할 수 있는 경우 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;chk1-label&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;chk1-label&quot;</span>&gt;</span>Remember my preferences<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>특정 요소에 체크박스 역할을 부여</strong></li><li><code>aria-checked</code> 를 사용해서 체크 여부를 판단</li><li>focus 되지 않는 요소일 경우 <code>tabindex</code> 를 사용하기도 함</li><li>가능하면 <strong>HTML native checkbox를 사용하는게 권장</strong>되지만, <strong>사용할 수 없는 경우에 ARIA 속성</strong>을 사용</li><li>cf. <a href="https://www.w3.org/TR/wai-aria-practices/examples/checkbox/checkbox-1/checkbox-1.html">w3c - Checkbox Example</a></li><li>cf. <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/checkbox_role">ARIA: checkbox role</a></li></ul><hr><h2 id="3-2-aria-label-aria-labelledby-aria-describedby"><a href="#3-2-aria-label-aria-labelledby-aria-describedby" class="headerlink" title="3.2. aria-label, aria-labelledby, aria-describedby"></a>3.2. aria-label, aria-labelledby, aria-describedby</h2><ul><li>특정 요소를 설명하는 데 사용되는 ARIA 속성들</li><li>cf. <a href="https://developers.google.com/web/fundamentals/accessibility/semantics-aria/aria-labels-and-relationships?hl=ko">ARIA Label</a></li></ul><hr><h3 id="3-2-1-aria-label"><a href="#3-2-1-aria-label" class="headerlink" title="3.2.1 aria-label"></a>3.2.1 aria-label</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">aria-label</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Label 목적을 위한 속성</li><li>특정 요소에 대한 설명을 그대로 적습니다.</li><li>텍스트 대신 그래픽을 사용하는 경우처럼 추가 설명이 필요한 경우 사용할 수 있습니다.</li></ul><hr><h3 id="3-2-2-aria-labelledby"><a href="#3-2-2-aria-labelledby" class="headerlink" title="3.2.2 aria-labelledby"></a>3.2.2 aria-labelledby</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;rg-label&quot;</span>&gt;</span>음료수 옵션<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;radiogroup&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;rg-label&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>aria-label</code> 은 <strong>어떤 요소에 대한 설명을 직접 적는</strong> 반면,</li><li><code>aria-labelledby</code> 은 <strong>다른 요소의 ID 값을 매칭</strong>시킵니다.</li><li><code>aria-labelledby</code> 은 Label 자체를 재정의하기 때문에 <ul><li>다른 모든 Label 속성들, <code>aria-label</code> 또는 HTML native label 과 함께 쓰여도 </li><li>항상 <code>aria-labelledby</code> 을 <strong>우선</strong>합니다.</li></ul></li></ul><hr><h3 id="3-2-3-aria-describedby"><a href="#3-2-3-aria-describedby" class="headerlink" title="3.2.3 aria-describedby"></a>3.2.3 aria-describedby</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;pw&quot;</span>&gt;</span>Password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pw&quot;</span> <span class="attr">aria-describedby</span>=<span class="string">&quot;pw-help&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;pw-help&quot;</span>&gt;</span>비밀번호는 12 자 이상으로 이루어져야 합니다<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>aria-labelledby</code> 와 같은 방식으로 다른 요소의 ID 를 매칭하여 현재 요소에 대한 설명을 나타냅니다.</li><li>둘의 사용법과 쓰임새가 굉장히 비슷하여 헷갈릴 수도 있지만 다른 목적으로 사용됩니다.</li><li>위 예시 코드에서처럼 <code>label</code> 태그와 함께 사용할 수 있습니다.</li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute">MDN Web Docs - Using the aria-describedby attribute</a>에는 다음과 같이 나와있습니다.</p><blockquote><p>This is very similar to aria-labelledby: a label describes the essence of an object, while a description provides more information that the user might need.</p><p><code>label</code> 관련 속성들과의 가장 큰 차이점은 Label 이 요소의 필수 설명이라면<br> <code>aria-describedby</code> 은 어디까지나 부연 설명</p></blockquote><hr><h2 id="3-3-aria-live"><a href="#3-3-aria-live" class="headerlink" title="3.3. aria-live"></a>3.3. aria-live</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;alert&quot;</span> <span class="attr">aria-live</span>=<span class="string">&quot;assertive&quot;</span>&gt;</span>이메일 형식이 올바르지 않습니다.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>JavaScript 를 사용하면 페이지를 새로 로드하지 않고 일부만 동적으로 변경하는게 가능</li><li>But 동적인 변경은 페이지를 볼 수 있는 사용자들은 알 수 있지만, 시각 장애인들은 알아채기 어렵습니다.</li><li>그래서 이런 동적인 (실시간) 변경들을 알려줄 수 있는 <code>aria-live</code> 라는 속성이 제공</li><li>cf. <a href="https://developer.mozilla.org/ko/docs/Web/Accessibility/ARIA/ARIA_Live_Regions">ARIA live regions</a></li><li>cf. <a href="https://developers.google.com/web/fundamentals/accessibility/semantics-aria/hiding-and-updating-content?hl=ko">콘텐츠 숨기기 및 업데이트</a></li></ul><p>회원가입 또는 로그인 페이지에서 사용하는 <code>Email Input</code>은 </p><ul><li>실시간으로 <strong>Email 형식 검사를 하여 올바른 형식이 아니면 빨간색 에러 메시지를 사용자에게 노출</strong>합니다.</li><li>페이지를 볼 수 있는 사용자는 그 정보를 실시간으로 확인할 수 있지만, </li><li><strong>시각장애인은 에러 메시지가 노출되었다는 사실을 모를 수 있습니다</strong>.<ul><li>이럴 때 <code>role=&quot;alert&quot;</code> 로 <strong>경고 역할을 갖고 있는 요소</strong>를 만들고, </li><li><strong>실시간 변화를 감지해서 알려주는</strong> <code>aria-live</code> 속성을 추가할 수 있습니다.</li></ul></li></ul><p><code>aria-live</code> 의 값으로는 다음 값들이 올 수 있습니다.</p><ul><li><code>off (default)</code></li><li><code>polite</code> : 현재 진행중인 음성 또는 타이핑 이후에 알림</li><li><code>assertive</code> : 현재 진행중인 알림을 중단하고 즉시 알림<ul><li><code>assertive</code> 값은 사용자의 현재 작업을 방해할 수 있기 때문에 신중하게 적용해야 합니다.</li></ul></li></ul><hr><h2 id="3-4-role-x3D-”alert”"><a href="#3-4-role-x3D-”alert”" class="headerlink" title="3.4. role&#x3D;”alert”"></a>3.4. role&#x3D;”alert”</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Alert_Role">ARIA: alert role</a></li></ul><p><code>alert</code> 역할은 사용자에게 동적인 변화를 알려줄 때 사용합니다.</p><p>스크린 리더는 <code>alert</code> 역할이 붙은 요소가 업데이트 되면 바로 읽기 시작합니다.</p><p><code>role=&quot;alert&quot;</code> 로 설정한다는 건 <code>aria-live=&quot;assertive&quot; aria-atomic=&quot;true&quot;</code> 와 동일합니다.</p><hr><h2 id="3-5-role-x3D-”timer”"><a href="#3-5-role-x3D-”timer”" class="headerlink" title="3.5. role&#x3D;”timer”"></a>3.5. role&#x3D;”timer”</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/timer_role">ARIA: timer role</a></li><li>현재 요소가 timer로 사용되고 있다는 걸 의미</li><li>초를 계속 세주려면 <code>aria-live</code> 속성을 켜주면 되지만,<ul><li>1초마다 계속 컨텐츠가 갱신되기 때문에 알림이 부자연스럽게 계속 끊기는 이슈가 존재</li></ul></li><li>만약 timer 에 초점이 잡혔을 때의 남은 시간만 읽어주길 바란다면 <code>role=&quot;timer&quot;</code> 설정만 추가</li></ul><hr><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://www.w3.org/WAI/fundamentals/accessibility-intro/ko">W3C - 웹 접근성이란?</a></li><li><a href="https://www.biew.co.kr/entry/WAI-ARIA-%EC%9B%B9%ED%8D%BC%EB%B8%94%EB%A6%AC%EC%8B%B1">WAI-ARIA 웹퍼블리싱</a></li><li><a href="https://www.w3.org/TR/wai-aria">W3C - WAI ARIA</a></li><li><a href="https://bcp0109.tistory.com/348">웹 접근성과 WAI-ARIA :: 뱀귤 블로그 (tistory.com)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML-CSS-JS </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Start-CSS- 11 - CSS Comment(주석) 방법론</title>
      <link href="/2023/03/01/Front-Start-CSS-11-Comment/"/>
      <url>/2023/03/01/Front-Start-CSS-11-Comment/</url>
      
        <content type="html"><![CDATA[<h1 id="1-주석-comment"><a href="#1-주석-comment" class="headerlink" title="1. 주석(comment)"></a>1. 주석(comment)</h1><p>CSS에서 주석은 <code>/*</code>으로 시작하여 <code>*/</code> 끝나며, 이 구문안에 위치한 모든 CSS 코드는 웹 브라우저에서 해석되지 않습니다.<br>주석의 처음과 끝만 정확하다면, 그 안에서는 주석을 어떻게 사용하든 기본적으로 정해진 제약이나 규칙은 없습니다.</p><hr><h1 id="2-기본-사용"><a href="#2-기본-사용" class="headerlink" title="2. 기본 사용"></a>2. 기본 사용</h1><p><strong>주석 본연의 기능에 충실하고, 최대한 사용을 줄이는 것을 선호하는 사람</strong>이면,<br>보통 소스코드를 단독으로 관리하고 다른 사람이 열람하거나 수정할 일이 없다면,<br>본인이 이미 코드의 전체 구조를 잘 파악하고 있기 때문에, 별도로 주석을 달지 않지요.</p><p>특정 구문을 비활성화하 하거나 자주 사용하지 않는 코드를 사용했을 때,<br>다음에도 쉽게 기능을 파악하기 위해 각주를 달아 놓는 정도입니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @import url(&#x27;css/normalize.css&#x27;); */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: cover; <span class="comment">/*Ie9 이상 배경 비율로 곽 채우기*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="3-대분류로-사용"><a href="#3-대분류로-사용" class="headerlink" title="3. 대분류로 사용"></a>3. 대분류로 사용</h1><p>개인이 쓰더라도 문서를 이루고 있는 구조를 쉽게 파악하기 위해 헤더 용도로 사용하는 케이스입니다.<br>클래스명을 직접 작성하지 않은 다른 사람도 어느 정도 주석을 통해,<br>작성자의 네이밍 패턴을 이해할 수 있기 때문에 많이 선호하는 방식입니다.</p><p>사이트 구조, 글 쓰기 페이지, 글 읽기 페이지와 같이 <strong>큰 그룹의 헤더에 주석을 사용</strong>하고,<br>그룹 내의 영역 분할이나 버튼, 썸네일 같은 요소들은 줄 바꿈(개행)을 통해 구분하곤 합니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 목록 */</span></span><br><span class="line"><span class="selector-class">.blog-list</span> &#123;...&#125;</span><br><span class="line"><span class="selector-class">.blog-list</span> &gt; <span class="selector-tag">figure</span> &#123;...&#125;</span><br><span class="line"><span class="selector-class">.blog-list</span> &gt; <span class="selector-tag">figure</span> <span class="selector-tag">figcaption</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.blog-list-header</span> &#123;...&#125;</span><br><span class="line"><span class="selector-class">.blog-list-header</span> &gt; <span class="selector-tag">ul</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.blog-list-content</span> &#123;...&#125;</span><br><span class="line"><span class="selector-class">.blog-list-content</span> &gt; <span class="selector-tag">dt</span> + <span class="selector-tag">dd</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 읽기 */</span></span><br><span class="line"><span class="selector-class">.blog-read</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.blog-read</span> &gt; <span class="selector-tag">figure</span> &#123;...&#125;</span><br><span class="line"><span class="selector-class">.blog-read</span> &gt; <span class="selector-tag">figure</span> <span class="selector-tag">figcaption</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><p>선택자(클래스나 아이디)*의 이름을 의미있고 직관적으로 짓는 것이야 기본이지만,<br><strong>주석을 최소화</strong> 할 때는, <strong>더욱 네이밍에 신경</strong>을 써야 합니다.<br>주석보다는 선택자의 이름으로 그 역할과 의미를 파악하기 때문입니다.</p><hr><h1 id="4-소분류로-사용"><a href="#4-소분류로-사용" class="headerlink" title="4. 소분류로 사용"></a>4. 소분류로 사용</h1><p><strong>스타일시트를 여러 사람과 공유하는 경우</strong>나,<br><strong>선택자 이름을 압축해서 지은 경우</strong>, 각 코드 그룹의 역할을 더 명확하고 빠르게 알기 위해 코드 그룹의 역할별로 사용하기도 합니다.<br>선택자 이름을 압축하는 것은, HTML 문서에서 선택자를 모듈처럼 인라인으로 끼워넣을 때 주로 사용하는데,<br>이름의 의미가 불명확하기 때문에 주석으로 그 역할을 알려줍니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Font Awesome 셋팅 */</span></span><br><span class="line"><span class="selector-class">.fa</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 아이콘 스타일 */</span></span><br><span class="line"><span class="selector-class">.fa-default</span> &#123;...&#125;</span><br><span class="line"><span class="selector-class">.fa-spin</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 버튼 정렬 */</span></span><br><span class="line"><span class="selector-class">.fa-fl</span> &#123;...&#125;</span><br><span class="line"><span class="selector-class">.fa-fr</span> &gt; <span class="selector-tag">input</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="5-서식화하여-사용"><a href="#5-서식화하여-사용" class="headerlink" title="5. 서식화하여 사용"></a>5. 서식화하여 사용</h1><p><strong>주석을 대분류, 중분류, 소분류</strong>로 나누어, <strong>스타일시트 문서 자체를 서식화</strong>하여 사용하기도 합니다.<br>많은 페이지와 요소들을 가지는 각종 CMS의 테마나 스킨에서 사용자의 편의를 고려할 때 많이 사용됩니다.<br><strong>각 분류에 쓰이는 주석의 모양은 다양</strong>합니다. 직접 모양을 만들어서 사용해도 좋습니다.<br>여기서는 흔히 만나게 되는 주석들을 소개해 봅니다.</p><ul><li><code>대분류</code> : 고유 사이트 스타일, 외부 플러그인 스타일 등</li><li><code>중분류</code> : 대분류에 속한 요소들을 페이지나 메뉴, 미디어 쿼리 단위로 분류</li><li><code>소분류</code> : 중분류에 속한 요소들을 역할별로 분류</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ==========================================================================</span></span><br><span class="line"><span class="comment">   대분류용 주석</span></span><br><span class="line"><span class="comment">   ========================================================================== */</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 중분류용 주석</span></span><br><span class="line"><span class="comment"> * --------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 소분류용 주석 */</span></span><br></pre></td></tr></table></figure><hr><h2 id="5-1-예시"><a href="#5-1-예시" class="headerlink" title="5.1 예시"></a>5.1 예시</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ==========================================================================</span></span><br><span class="line"><span class="comment">   사이트 구조</span></span><br><span class="line"><span class="comment">   ========================================================================== */</span></span><br><span class="line"><span class="selector-tag">header</span> &#123;...&#125;</span><br><span class="line"><span class="selector-tag">aside</span></span><br><span class="line"><span class="selector-tag">footer</span> &#123;...&#125;</span><br><span class="line"><span class="selector-id">#container</span> &#123;...&#125;</span><br><span class="line"><span class="selector-tag">section</span><span class="selector-class">.promotion</span> &#123;...&#125;</span><br><span class="line"><span class="selector-tag">section</span><span class="selector-class">.widgets</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 소개 페이지</span></span><br><span class="line"><span class="comment"> * --------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-id">#page-about-us</span> &#123;...&#125;</span><br><span class="line"><span class="selector-id">#page-about-us</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#page-about-us</span><span class="selector-pseudo">:after</span> &#123;...&#125; <span class="comment">/*floating*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 서브메뉴 */</span></span><br><span class="line"><span class="selector-tag">aside</span><span class="selector-class">.about-us</span> &#123;...&#125;</span><br><span class="line"><span class="selector-tag">aside</span><span class="selector-class">.about-us</span> &gt; <span class="selector-tag">ul</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 내 소개 */</span></span><br><span class="line"><span class="selector-tag">figure</span><span class="selector-class">.profile</span> &#123;...&#125;</span><br><span class="line"><span class="selector-tag">figure</span><span class="selector-class">.profile</span> &gt; <span class="selector-tag">img</span> &#123;...&#125;</span><br><span class="line"><span class="selector-tag">figure</span><span class="selector-class">.profile</span> &gt; <span class="selector-tag">figcaption</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="6-스타일시트-인덱싱하기"><a href="#6-스타일시트-인덱싱하기" class="headerlink" title="6. 스타일시트 인덱싱하기"></a>6. 스타일시트 인덱싱하기</h1><p>서식화 된 스타일시트에 목차를 추가해 전체적인 문서 구조를 파악할 수 있도록 인덱싱 할 수도 있습니다.<br>하지만, 문서가 수정되는 와중에 역할에 따라 순서를 바꿔야 하는 경우가 많으므로,<br><strong>최대한 작업이 완료된 후에 배포용도로 사용</strong>하는 것이 좋습니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Table of Contents:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.0 - 사이트 구조</span></span><br><span class="line"><span class="comment"> * 1.1 - 소개 페이지</span></span><br><span class="line"><span class="comment"> * 1.2 - 게시판</span></span><br><span class="line"><span class="comment"> * 2.0 - jQeury 플러그인</span></span><br><span class="line"><span class="comment"> * 3.0 - 미디어 쿼리</span></span><br><span class="line"><span class="comment"> * --------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ==========================================================================</span></span><br><span class="line"><span class="comment">   1.0 사이트 구조</span></span><br><span class="line"><span class="comment">   ========================================================================== */</span></span><br><span class="line"><span class="selector-id">#page-about-us</span> &#123;...&#125;</span><br><span class="line"><span class="selector-id">#page-about-us</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#page-about-us</span><span class="selector-pseudo">:after</span> &#123;...&#125; <span class="comment">/*floating*/</span></span><br></pre></td></tr></table></figure><hr><h1 id="7-각주-달기"><a href="#7-각주-달기" class="headerlink" title="7. 각주 달기"></a>7. 각주 달기</h1><p>단일 선택자나 속성에 각주를 달 수도 있습니다.<br><strong>속성 하나하나의 역할과 의미를 정확히 알아야 하는 경우 사용</strong>되곤 하는데,<br>주로 웹 브라우저에 자체 정의된 User Agent 속성을 초기화하거나,<br>미리 제작된 CSS 코드의 역할을 분명히 알리기 위해 부연설명을 달 때 사용합니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 부모로부터 서체를 상속받지 못하는 브라우저를 해결.</span></span><br><span class="line"><span class="comment"> * 2. 부모로부터 글자 크기를 상속받지 못하는 브라우저를 해결.</span></span><br><span class="line"><span class="comment"> * 3. Firefox 4 이상, 사파리 5와 크롬에서 마진을 다르게 표현하는 문제 해결.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>, <span class="selector-tag">input</span>, select, <span class="selector-tag">textarea</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: inherit; <span class="comment">/* 1 */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100%</span>; <span class="comment">/* 2 */</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>; <span class="comment">/* 3 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="8-마치며"><a href="#8-마치며" class="headerlink" title="8. 마치며"></a>8. 마치며</h2><p>주석을 효율적으로 잘 사용하여 스타일시트 문서를 예쁘게 관리하세요.<br><strong>무엇이든 과하면 안 좋은 법, 문서 자체를 치장하기 보다는 기능적인 면을 잘 살려서 사용</strong>한다면,<br>보는 사람 쓰는 사람 모두에게 기분 좋은 코드가 되겠죠.</p><p>한편, <a href="http://necolas.github.com/normalize.css/">Normalize</a>나 <a href="http://html5boilerplate.com/">HTML Boiler Plate</a>와 같은 초기화 소스의 스타일시트는 원리 이해를 돕고자 주석이 본래 소스보다 더 많이 사용되기도 합니다. 만일 소스 파일의 주석이 거슬리거나 파일 다이어트를 즐기는 사람은 <a href="http://dean.edwards.name/packer/">스크립트 압축 사이트</a>에서 주석 및 공백을 제거한 후, Adobe Dream Weaver의 자동 소스 포맷팅 기능을 통해 다시 보기좋은 상태로 정렬할 수 있습니다.</p><hr><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://beautifulcss.com/archives/296">Beautiful CSS » CSS 주석문 활용하기</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML-CSS-JS </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Start-CSS- 10 - CSS Coding Convention(관습)</title>
      <link href="/2023/03/01/Front-Start-CSS-10-Convention/"/>
      <url>/2023/03/01/Front-Start-CSS-10-Convention/</url>
      
        <content type="html"><![CDATA[<h1 id="1-CSS-작성순서"><a href="#1-CSS-작성순서" class="headerlink" title="1. CSS 작성순서"></a>1. CSS 작성순서</h1><p>기본적으로 스타일시트 속성은 정해진 우선순위가 없고, 올바른 작성법이라고 권고하는 공신력 있는 규칙도 없기 때문에,<br>순전히 스타일시트를 작성하는 개발자가 편한대로 적는 것이 맞는 것입니다.</p><p>사실, 직업적으로 스타일시트를 만지는 사람이라면 누구나 어느정도는 자신만의 규칙을 세우고 그에 맞춰 작성합니다.<br>재미있는 것은, 자기가 세운 규칙을 누가 배낀 마냥 다른 사람들도 크게 다르지 않게 사용하고 있다는 점입니다.</p><hr><h1 id="2-코딩-컨벤션-Coding-Convention"><a href="#2-코딩-컨벤션-Coding-Convention" class="headerlink" title="2. 코딩 컨벤션(Coding Convention)"></a>2. 코딩 컨벤션(Coding Convention)</h1><p>언어를 개발한 단체나 기업에서 딱히 공식적인 규칙으로 지정하지 않은 번외의 내용에 대해 개인의 코딩 습관을 통일하여,<br>작업상의 가독성과 판독능력을 높여, <strong>일의 능률을 증진시키기 위한 내부적인 공동의 약속</strong>을 <code>코딩 컨벤션</code>이라 합니다.<br><a href="http://google-styleguide.googlecode.com/svn/trunk/htmlcssguide.xml">구글 코드 가이드</a>나 <a href="http://nuli.nhncorp.com/data/convention/NHN_Coding_Conventions_for_Markup_Languages-v2.75_open.pdf">NHN 코딩 컨벤션</a> 같은 것들이 그것입니다.</p><p>오랜 노하우를 가진 사람들이 신경써서 만든 것들이기 때문에 참고할 만한 좋은 이야기가 많지만,<br>내부 공동체에 속하지 않은 사람에게는 강제력이 없는 상태에서 규칙이나 제약이 많아,<br>개인에게는 자유로운 기호에 대한 배려가 부족하므로, 이 글에서는 각종 컨벤션의 규칙등을 기준으로 삼지 않습니다.</p><hr><h1 id="3-모질라-CSS-Coding-Convention"><a href="#3-모질라-CSS-Coding-Convention" class="headerlink" title="3. 모질라 CSS Coding Convention"></a>3. 모질라 CSS Coding Convention</h1><p>웹 브라우저 제조사인 모질라(Mozilla) 혹은,<br>여러가지 코딩 컨벤션에서는 CSS 속성을 기술할 때 다음과 같은 순서로 작성할 것을 제안하고 있습니다.</p><ol><li>display</li><li>list-style</li><li>position</li><li>float</li><li>clear</li><li>width &#x2F; height</li><li>padding &#x2F; margin</li><li>border &#x2F; background</li><li>color &#x2F; font</li><li>text-decoration</li><li>text-align &#x2F; vertical-align</li><li>white-space</li><li>other text</li><li>content</li></ol><p>이 순서는 우리가 일상에서 접한 상식 그 자체일 뿐입니다. 그림을 그릴때도 그렇고 건축을 할 때도 그렇습니다.<br>항상 위치 선정, 윤곽 스케치, 외곽 디테일링, 채색, 타이포그라피. 바깥에서 안쪽으로의 흐름은<br>우리가 자연스럽게 느끼고 배운 그대로의 상식이고, 이것이 반영된 것 뿐 아닐까요.<br>그래서 우리는 모두 비슷비슷한 순서대로 속성을 써 내려가는 것이 아닐까요.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.myClass &#123;</span><br><span class="line"> ├── 객체의 노출여부와 표현방식</span><br><span class="line"> │   ├── display</span><br><span class="line"> │   └── list-style</span><br><span class="line"> │</span><br><span class="line"> ├── 위치와 좌표</span><br><span class="line"> │   ├── position</span><br><span class="line"> │   ├── float</span><br><span class="line"> │   └── clear</span><br><span class="line"> │</span><br><span class="line"> ├── 크기와 여백</span><br><span class="line"> │   ├── width / height</span><br><span class="line"> │   └── padding / margin</span><br><span class="line"> │</span><br><span class="line"> ├── 윤곽과 배경</span><br><span class="line"> │   └── border / background</span><br><span class="line"> │</span><br><span class="line"> ├── 글자와 정렬</span><br><span class="line"> │   ├── corlor / font</span><br><span class="line"> │   ├── text-decoration</span><br><span class="line"> │   ├── text-align / vertical-align</span><br><span class="line"> │   └── white-space</span><br><span class="line"> │</span><br><span class="line"> └── 내용</span><br><span class="line">     └── content</span><br></pre></td></tr></table></figure><blockquote><p>💡 content 속성</p><ul><li><code>플로팅 드롭(Floating drop : 단 떨어짐 현상)</code>을 막기 위해 가상선택자 안에서 주로 사용되다 보니, </li><li>많은 부분 속성의 의미를 포지셔닝 쪽으로 인지하는 경우가 있을 수 있지만, </li><li>본래는 HTML 태그 안에 실제로 텍스트와 같은 컨텐츠를 다이나믹하게 삽입해 주거나, </li><li>기존 컨텐츠를 보조하는 역할을 합니다.</li></ul></blockquote><p>순서에 대해 이해가 됐다고 하더라도 너무 이것에 얽메여서 원활한 작업에 방해가 되서는 안되겠죠.<br>때에 따라서는 배경색을 먼저 정의해서 시각적인 도움을 미리 받아야 하는 때도 있습니다.<br>편한 방식대로 쭉쭉 써 내려가고나서 나중에 조금 수고를 들여 순서를 바꿔주는 것으로 충분하다 하겠습니다.</p><hr><h1 id="4-장점"><a href="#4-장점" class="headerlink" title="4. 장점"></a>4. 장점</h1><p>속성에 순서를 정해놓음으로 해서 얻는 이점으로는 역시 <strong>특정 속성을 찾기 쉽다</strong>는 것에 있습니다.<br>이것은 속성을 개행하지 않고, 한 줄에 모두 기술하는 인라인 코딩 방식을 쓰는 작성자에게 특히 효과가 있습니다.<br>순위가 정해진 속성은 처음과 끝만 살펴봐도 대강의 위치를 짐작할 수 있기 때문입니다.</p><p>속성을 써 내려가는 것에 반드시 옳고 그름이 없다는 것은 전제되어 있었습니다.<br>기술방식을 완전히 거꾸로 해 놓아도 그것이 편하다고 생각한다면 맞는 것이겠죠.<br>다만, 다른 사람과 함께 작업해야 한다거나,<br>혹은 다른 사람이 만든 CSS를 판독한다거나 할 때는 분명 좋은 습관이 가져다 주는 이점은 충분히 있습니다.</p><p>아직도 남아있는 속성들이 몇 가지 있습니다.  <code>z-index</code>, <code>line-height</code>, <code>overflow</code>는 어디에 둘 것이고,<br>CSS3에서 새로 생긴 수많은 속성들은 또 어디에 두어야 할까요? 나머지는 당신의 몫입니다.<br>올바른 것도 없고 틀린 것도 없습니다.</p><hr><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://nuli.navercorp.com/data/convention/NHN_Coding_Conventions_for_Markup_Languages.pdf">NHN 코딩 컨벤션 (navercorp.com)</a></li><li><a href="https://beautifulcss.com/archives/203">Beautiful CSS » CSS 속성을 순서대로 정리하기</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML-CSS-JS </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emmet 문법 정리</title>
      <link href="/2023/02/28/Front-Start-HTML-Emmet/"/>
      <url>/2023/02/28/Front-Start-HTML-Emmet/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Emmet-에밋"><a href="#1-Emmet-에밋" class="headerlink" title="1. Emmet (에밋)"></a>1. Emmet (에밋)</h1><p>Emmet은 , XML, XSL 문서 등을 편집할 때 빠른 코딩을 위해 사용하는 플러그인이다.</p><ul><li>원래 젠코딩으로 부르다가 에밋으로 이름을 변경했다. 매우 간단한 몇 가지 코드만 입력하면,</li><li>자동으로 완전한  코드를 생성해 준다. </li><li>Emmet을 사용하면  &amp; CSS의 작업 속도를 엄청나게 향상시킬 수 있다.</li><li>VSCode는 을 기본적으로 지원하고, <code>Tab</code>키를 통해 사용한다.</li></ul><hr><h1 id="2-태그"><a href="#2-태그" class="headerlink" title="2.  태그"></a>2.  태그</h1><h2 id="2-1-자식-하위-요소-gt"><a href="#2-1-자식-하위-요소-gt" class="headerlink" title="2.1 자식(하위) 요소 &gt;"></a>2.1 자식(하위) 요소 &gt;</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&gt;ul&gt;li</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-2-형제-요소"><a href="#2-2-형제-요소" class="headerlink" title="2.2 형제 요소 +"></a>2.2 형제 요소 +</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&gt;p+span</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></table></figure><hr><h2 id="2-3-올라가기"><a href="#2-3-올라가기" class="headerlink" title="2.3 올라가기 ^"></a>2.3 올라가기 ^</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&gt;ul&gt;li^p+a</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-1-두번-올라가기"><a href="#2-3-1-두번-올라가기" class="headerlink" title="2.3.1 두번 올라가기 ^^"></a>2.3.1 두번 올라가기 ^^</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&gt;ul&gt;li^^div</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-4-반복하기"><a href="#2-4-반복하기" class="headerlink" title="2.4 반복하기 *"></a>2.4 반복하기 *</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&gt;ul&gt;li*3</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-5-그룹화"><a href="#2-5-그룹화" class="headerlink" title="2.5 그룹화 ()"></a>2.5 그룹화 ()</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&gt;(header&gt;ul&gt;li*2)+footer</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 그룹화를 통해 `footer`는 `header`의 형제 요소가 되었다. －－＞</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-5-속성"><a href="#2-5-속성" class="headerlink" title="2.5 속성"></a>2.5 속성</h2><h3 id="2-5-1-클래스-class"><a href="#2-5-1-클래스-class" class="headerlink" title="2.5.1 클래스 .class"></a>2.5.1 클래스 .class</h3><ul><li>기본은 div이기 때문에 div를 생략하고 - .container라고 입력해도 결과는 같다</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.container</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></table></figure><hr><h3 id="2-5-2-아이디-id"><a href="#2-5-2-아이디-id" class="headerlink" title="2.5.2 아이디 #id"></a>2.5.2 아이디 #id</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">span#hello</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-5-3-속성-attr"><a href="#2-5-3-속성-attr" class="headerlink" title="2.5.3 속성 [attr]"></a>2.5.3 속성 [attr]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">td[title=&quot;bye&quot; colspan=5]</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">title</span>=<span class="string">&quot;bye&quot;</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br></pre></td></tr></table></figure><hr><h2 id="2-6-넘버링"><a href="#2-6-넘버링" class="headerlink" title="2.6 넘버링 $"></a>2.6 넘버링 $</h2><h3 id="2-6-1-숫자를-순서대로-나열"><a href="#2-6-1-숫자를-순서대로-나열" class="headerlink" title="2.6.1 $ - 숫자를 순서대로 나열"></a>2.6.1 $ - 숫자를 순서대로 나열</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$*5</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-6-2-뒤의-숫자부터-시작"><a href="#2-6-2-뒤의-숫자부터-시작" class="headerlink" title="2.6.2 $@ - 뒤의 숫자부터 시작"></a>2.6.2 $@ - 뒤의 숫자부터 시작</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$@5*5</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item9&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br></pre></td></tr></table></figure><hr><h2 id="2-7-텍스트"><a href="#2-7-텍스트" class="headerlink" title="2.7 텍스트 {}"></a>2.7 텍스트 {}</h2><h3 id="2-7-1-중괄호-안에-넣으려는-텍스트를-입력"><a href="#2-7-1-중괄호-안에-넣으려는-텍스트를-입력" class="headerlink" title="2.7.1 {} - {중괄호} 안에 넣으려는 텍스트를 입력"></a>2.7.1 {} - {중괄호} 안에 넣으려는 텍스트를 입력</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.fruit&#123;banana&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span>banana<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-7-2-응용"><a href="#2-7-2-응용" class="headerlink" title="2.7.2 응용"></a>2.7.2 응용</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.container&gt;ul.list&gt;li.list-item*5&gt;a&#123;list$&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>list1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>list2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>list3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>list4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>list5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></table></figure><hr><h3 id="2-7-3-응용2"><a href="#2-7-3-응용2" class="headerlink" title="2.7.3 응용2"></a>2.7.3 응용2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.container&gt;.item*8&gt;&#123;$&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-CSS-문법"><a href="#3-CSS-문법" class="headerlink" title="3. CSS  문법"></a>3. CSS  문법</h1><p>css는 솔직히 단축문법 외울바에, 그냥 vscode자동완성 기능으로 치는게 나을듯 하다.</p><p>[ 단위 ]</p><ul><li>p → %</li><li>e → em</li><li>w → width</li><li>h → height</li><li>m → margin</li><li>p → padding</li><li>bg → background</li></ul><hr><h2 id="3-1-px-변환"><a href="#3-1-px-변환" class="headerlink" title="3.1 px 변환"></a>3.1 px 변환</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">w100</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  변환 ▼ */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>; <span class="comment">/* 기본이 px단위 */</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-2-p-→-변환"><a href="#3-2-p-→-변환" class="headerlink" title="3.2 p → %변환"></a>3.2 p → %변환</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">w50p</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  변환 ▼ */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">width</span>: <span class="number">50%</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">h100p</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  변환 ▼ */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3-margin"><a href="#3-3-margin" class="headerlink" title="3.3 margin"></a>3.3 margin</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m10p30e5</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  변환 ▼ */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10%</span> <span class="number">30em</span> <span class="number">5px</span>;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bg10p</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  변환 ▼ */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background</span>: <span class="number">10%</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML-CSS-JS </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>용어- 브라우저 동작 원리</title>
      <link href="/2023/02/27/Terminology-Brower/"/>
      <url>/2023/02/27/Terminology-Brower/</url>
      
        <content type="html"><![CDATA[<h1 id="1-웹-브라우저-동작-과정"><a href="#1-웹-브라우저-동작-과정" class="headerlink" title="1. 웹 브라우저 동작 과정"></a>1. 웹 브라우저 동작 과정</h1><p>주소창에 <a href="https://www.naver.com/">https://www.naver.com</a> 등 URL을 검색하여, 해당 웹 페이지에 접속한 경험이 있을 겁니다.<br>그렇다면 어떤 동작 원리로 우리가 입력한 웹 페이지로 접속이 가능할까요?</p><blockquote><p>💡 브라우저</p><ul><li>동기(Synchronous)적으로 (HTML + CSS), Javascript 언어를 해석하여, </li><li>내용을 화면에 보여주는 응용 소프트웨어</li></ul></blockquote><hr><h2 id="1-1-DOM"><a href="#1-1-DOM" class="headerlink" title="1.1 DOM"></a>1.1 DOM</h2><ul><li>JS는 HTML 조작에 특화된 언어</li><li>JS에선 <code>&lt;p&gt;&lt;/p&gt;</code> 이런 HTML을 직접 해석하고 조작할 수 없습니다.</li><li>그런데 어떻게 HTML 태그들을 알아보고 조작할 수 있는 것일까요?</li><li>JS가 HTML 조작을 하기 위해서는, <ul><li><strong>HTML을 자바스크립트가 해석할 수 있는 문법으로 변환해놓으면</strong> 됩니다.</li></ul></li><li>그래서 HTML을 JS가 알아먹는 array 혹은 object 자료형에 담아버립니다.</li><li>그래서 실제로 브라우저는 HTML 페이지를 열어줄 때,<ul><li>HTML을 JS로 쉽게 찾고 바꾸기 위해 object와 비슷한 자료형에 담아줍니다.</li></ul></li></ul><p>예를 들어,</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color : red&quot;</span>&gt;</span>안녕하세요<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>브라우저는 위와 같은 HTML을 발견하면, object 자료로 바꿔서 보관해둡니다.<br>구체적으로는 <code>var document = &#123; &#125;</code> 이런 변수를 하나 만들어서 거기 넣어줍니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable language_">document</span> = &#123;</span><br><span class="line">  div1 : &#123;</span><br><span class="line">    style : &#123;color : <span class="string">&#x27;red&#x27;</span>&#125;</span><br><span class="line">    innerHTML : <span class="string">&#x27;안녕하세요&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 <code>document.div1.innerHTML = &#39;안녕&#39;</code> 이렇게 자바스크립트를 짜면 HTML 조작이 가능합니다.<br>그래서 저렇게 object에 담아두는 것입니다. (물론 실제 DOM과 생김새는 좀 다름)</p><p>위 변수를 <strong>document object</strong>라고 부릅니다.<br>여기다 model이라고 붙여서 <code>DOM (Document Object Model)</code>이라고 합니다.</p><p>cf. <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction">MDN DOM</a></p><hr><h2 id="1-2-CSSOM"><a href="#1-2-CSSOM" class="headerlink" title="1.2 CSSOM"></a>1.2 CSSOM</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Brower_1.png" alt="Brower_1"></p><p><code>CSSOM</code>은 <code>CSS Object Model</code>의 약자입니다.<br>브라우저에서 HTML 파일을 분석하면 HTML 요소들을 DOM으로 변환해서 이해하는데,<br>그러면 정의한 스타일 CSS는 어떻게 이해할까요?<br>브라우저에서 DOM을 만들게 되면, 정의된 CSS를 병합해서 CSSOM을 만듭니다.</p><p><code>CSSOM</code>에서는 <strong>개발자가 정의한 스타일</strong>뿐만 아니라 <strong>브라우저에서 기본적으로 설정된 모든 속성값들</strong>,<br>즉, <strong>cascading 룰에 따라서 합해진 모든 CSS 값들</strong>이 정의되어져 있습니다.<br>이를 <code>Computed Styles</code>라고 부르는데, <strong>모든 것들이 이미 계산된 스타일을</strong> 말합니다.</p><p>cf. <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model">MDN CSSOM</a></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Brower_2.png" alt="Brower_2"></p><p>예를 들어, CSSOM은 위 그림과 같이 표기될 수 있는데,<br>만약 <code>HTML 요소에 font-size: 14px;</code>로 지정하면, <strong>이하 모든 요소들에 각각 14가 적용</strong>됩니다. </p><ul><li>즉, 각각의 태그에서 폰트 사이즈를 지정하지 않았지만, </li><li>최상단 부모인 HTML에서 폰트 사이즈를 지정하면, <ul><li>cascading(폭포) 룰에 의해 따라 body 모든 자식 요소들이 14로 기본 설정됩니다.</li></ul></li><li>그래서 <strong>CSSOM에는 모든 스타일 관련 속성들이 포함</strong>되어 있습니다.</li></ul><hr><h2 id="1-3-Render-Tree"><a href="#1-3-Render-Tree" class="headerlink" title="1.3 Render Tree"></a>1.3 Render Tree</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Brower_3.png" alt="Brower_3"></p><p>그래서 브라우저가 HTML 파일을 읽게 되면, 다음과 같은 절차를 거치게 됩니다.</p><ol><li>DOM으로 변환</li><li>CCSOM을 만들어 최종 스타일을 전부 계산한 다음<ul><li>CSSOM에는 Cascading(폭포) 규칙이 존재하기 때문에 CSS를 따로 정의하지 않아도</li><li>브라우저에 기본 설정된 CSS 파일 등이 전부 적용</li><li>밑에 있는 자식 요소들에도 부모 요소들의 속성값들을 물려받음</li></ul></li><li>Render Tree를 만들어 사용자게 보여준다.</li></ol><blockquote><p>💡 Render Tree에 포함되는 속성과 포함안되는 속성</p><ul><li>span의 <code>opacity: 0, visibility: hidden</code> 으로 설정되었다면,<ul><li>사용자 눈에는 보이지 않지만 요소는 그대로 그 자리에 있습니다. </li><li>다만 투명해질 뿐인거죠. <strong>이런 요소들은 Render Tree에 포함</strong>됩니다.</li></ul></li><li><code>display : none</code>라고 되어있다면, <ul><li>아예 사용자 눈에 보이지 않는 속성값들은 <strong>Render Tree에 포함되지 않습니다</strong>.</li></ul></li></ul></blockquote><hr><h1 id="2-웹-브라우저의-구성요소"><a href="#2-웹-브라우저의-구성요소" class="headerlink" title="2. 웹 브라우저의 구성요소"></a>2. 웹 브라우저의 구성요소</h1><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Brower_4.png" alt="Brower_4" style="zoom:80%;" /><ul><li><code>사용자 인터페이스</code><ul><li><strong>사용자가 접근할 수 있는 영역</strong></li><li>e.g. URI를 입력할 수 있는 주소 표시줄, 이전&#x2F;다음, 북마크, 새로고침, 정지, 홈 버튼 등 <ul><li>요청 페이지를 보여주는 창을 제외한 나머지 모든 부분</li></ul></li></ul></li><li><code>브라우저 엔진</code><ul><li><strong>사용자 인터페이스와 렌더링 엔진 사이의 동작을 제어</strong></li><li>e.g. Data Storage를 참조하며 로컬에 데이터를 쓰고 읽으면서 다양한 작업 수행</li></ul></li><li><code>렌더링 엔진</code><ul><li><strong>웹 서버로부터 응답 받은 자원을 웹 브라우저 상에 표시</strong></li><li>e.g. HTML 문서를 응답받으면 HTML과 CSS를 파싱하여 화면에 표시</li><li>브라우저는 서버로부터 HTML 문서를 응답받으면,</li><li>렌더링 엔진의 HTML 파서와 CSS 파서에 의해 파싱(parsing)되어 </li><li>DOM, CSSOM 트리로 변환되고 렌더 트리로 결합합니다. </li><li>이렇게 생성된 렌더 트리를 기반으로 브라우저는 웹 페이지를 표시</li></ul></li><li><code>자료 저장소</code> : Cookie, Local Storage, Indexed DB 등 브라우저 메모리를 활용하여 저장하는 영역</li><li><code>통신</code> :  HTTP 요청과 같은, 서버와 통신이 가능하게 하는 네트워크 호출에 사용</li><li><code>JS 해석기</code> : JS 코드를 해석하고 실행</li><li><code>UI 백엔드</code> :  select, input 등 기본적인 위젯을 그리는 인터페이스</li></ul><hr><h2 id="2-1-렌더링-엔진"><a href="#2-1-렌더링-엔진" class="headerlink" title="2.1 렌더링 엔진"></a>2.1 렌더링 엔진</h2><p>렌더링 엔진의 종류는 아래와 같습니다. </p><ul><li><code>Blink</code> : 크롬, 오페라<ul><li>cf. 구글이 Webkit을 대체하기 위해 자체적으로 개발한 엔진</li></ul></li><li><code>Webkit</code> : 사파리</li><li><code>Trident</code> : 익스플로어</li><li><code>EdgeHTML</code> : 마이크로소프트 엣지</li></ul><p>각 브라우저마다 렌더링 엔진이 다르기 때문에, 같은 페이지가 다르게 보일 수 있습니다.<br>e.g. Elments 탭에서 아래와 같은 코드</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-ms-<span class="attribute">border-radius</span>: <span class="number">2em</span>; <span class="comment">/* 익스플로어에 적용, 보통 생략 */</span></span><br><span class="line">-moz-<span class="attribute">border-radius</span>: <span class="number">1em</span>; <span class="comment">/* 파이어폭스 브라우저에 적용 */</span></span><br><span class="line">-webkit-<span class="attribute">border-radius</span>: <span class="number">4em</span>; <span class="comment">/* 구글, 사파리 브라우저에 적용 */</span></span><br><span class="line">-o-<span class="attribute">border-radius</span>: <span class="number">3em</span>; <span class="comment">/* 오페라에 적용 */</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-1-1-렌더링-엔진-동작-과정"><a href="#2-1-1-렌더링-엔진-동작-과정" class="headerlink" title="2.1.1 렌더링 엔진 동작 과정"></a>2.1.1 렌더링 엔진 동작 과정</h3><p>렌더링 엔진은 서버로부터 응답받은 HTML 문서를 얻는 것으로 시작합니다.<br>이 문서의 내용은 보통 8KB 단위로 전송됩니다. 다음은 렌더링 엔진의 기본적인 동작 과정입니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Brower_5.png" alt="Brower_5"></p><ol><li><code>렌더링 엔진</code>은 <strong>HTML 문서를 파싱</strong>하여 <strong>DOM 트리를 구축</strong>합니다.</li><li><code>외부 CSS 파일</code>과 함께 포함된 <strong>스타일 요소를 파싱</strong>합니다.</li><li><strong>DOM 트리</strong>와 2의 결과물을 합쳐 <code>렌더 트리</code>를 구축합니다. </li><li><code>렌더 트리 각 노드</code>에 대해 <strong>화면 상에서 배치할 곳을 결정</strong>합니다. </li><li>UI 백엔드에서 <code>렌더 트리</code>의 각 노드를 그립니다.</li></ol><blockquote><p>💡 파싱(parsing)</p><ul><li><strong>구문 분석</strong>이라고 한다. </li><li>문장이 이루고 있는 구성 성분을 분해하고 분해된 성분의 위계 관계를 분석하여 구조를 결정하는 것</li><li>즉, 데이터를 분해 분석하여 원하는 형태로 조립하고 다시 빼내는 프로그램</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Brower_6.png" alt="Brower_6"></p><p>동작 과정의 순서는 위에서 설명한 Render Tree 동작 과정과 같습니다. </p><ol><li>DOM으로 변환</li><li>CCSOM을 만들어 최종 스타일을 전부 계산한 다음<ul><li>CSSOM에는 Cascading(폭포) 규칙이 존재하기 때문에 CSS를 따로 정의하지 않아도</li><li>브라우저에 기본 설정된 CSS 파일 등이 전부 적용</li><li>밑에 있는 자식 요소들에도 부모 요소들의 속성값들을 물려받음</li></ul></li><li>Render Tree를 만들어 사용자게 보여준다.</li></ol><hr><h1 id="3-네트워크-요청-과정"><a href="#3-네트워크-요청-과정" class="headerlink" title="3. 네트워크 요청 과정"></a>3. 네트워크 요청 과정</h1><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Brower_7.png" alt="Brower_7"></p><p>사실 <code>브라우저 주소창</code>은 <strong>HTTP의 GET 요청을 하는 곳</strong>입니다.<br>그러면, <code>클라이언트 PC의 브라우저</code>가 <code>서버 PC</code>에게 데이터를 요청합니다.<br>(cf. <code>GET 요청</code> : 서버에 있는 자원(resorce, 이른바 데이터)를 조회하는 HTTP 메서드 중 하나)</p><hr><h2 id="3-1-패킷-packet"><a href="#3-1-패킷-packet" class="headerlink" title="3.1 패킷(packet)"></a>3.1 패킷(packet)</h2><ul><li><code>패킷(packet)</code><ul><li>번역하면. 소포, 택배라는 뜻</li><li>네트워크를 통해 전송되는 데이터의 작은 조각</li></ul></li><li>e.g. 도로에 우주선, 전차같이 큰 차량을 통째로 운전해서 가면, 도로가 다 막힐 것입니다.<ul><li>그래서, 우주선, 전차같이 큰 차량들은 분해해서 가지고 간 뒤에,</li><li>목적지에 도착하면, 그 부품들을 다시 조립해서 이동합니다.</li></ul></li><li>위 예와 마찬가지로, 네트워크 상에 큰 데이터를 한 번에 보내면, <ul><li>네트워크 대역폭을 너무 많이 차지해서 다른 패킷들이 전송되질 못합니다.</li></ul></li><li>그래서 <strong>용량이 큰 사진 데이터를 패킷으로 나눠 보낼</strong> 때,<ul><li>모두 작은 패킷 단위로 쪼갠 뒤에,</li><li>목적지에 도달하면 패킷에서 원래 사진대로 되돌립니다.</li><li>그냥 보내기만 하면, 늦게 도착하는 패킷도 있을 수 있어서, 원래 사진대로 돌리기 힘드니까</li><li>송신 측에서 수신 측으로 패킷을 보낼 때는 <strong>각 패킷에 순서대로 번호를 붙여서 보냅니다</strong>. </li><li>그러면 번호에 맞춰 정렬하면, 늦게 도착한 패킷도 원래 위치로 돌아갈 수 있다.</li></ul></li></ul><hr><h2 id="3-2-DNS"><a href="#3-2-DNS" class="headerlink" title="3.2 DNS"></a>3.2 DNS</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Brower_8.png" alt="Brower_8"></p><ul><li>요청을 할 떄는, IP 주소를 통해 해당 서버 PC가 위치한 주소를 찾아가지만,</li><li>IP 주소가 숫자로 되어 있어서, 일일히 기억하기가 힘듭니다.</li><li>그래서 <code>DNS(Domain Name System)</code>을 도입했습니다.</li><li>DNS를 도입함으로써, 사용자들은 200.200.200.2 같은 숫자로 해당 웹페이지를 접속하는 것이 아니라,<ul><li>naver.com, google.com 같은 DNS에 등록된 Domain Name으로 검색할 수 있는 것입니다.</li></ul></li><li>e.g. <ul><li><code>클라이언트</code>가 <code>DNS 서버</code>에다가 <strong>도메인에 맞는 IP를 달라고 요청</strong>을 하면 </li><li><code>DNS 서버</code>가 <strong>응답</strong>을 하고, <code>클라이언트</code>는 <strong>서버에 도메인으로 접속</strong>할 수 있다.</li></ul></li></ul><hr><h2 id="3-3-TCP-3-way-handshake"><a href="#3-3-TCP-3-way-handshake" class="headerlink" title="3.3 TCP 3 way handshake"></a>3.3 TCP 3 way handshake</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Brower_9.png" alt="Brower_9"></p><blockquote><ul><li><code>SYN(synchronize)</code> : 접속 요청</li><li><code>ACK(acknowledge)</code> : 요청 수락</li></ul></blockquote><ol><li><p><code>클라이언트</code>에서 먼저 <strong>SYN 메시지를 서버에게 접속을 허락해달라고 요청</strong>한다.</p></li><li><p><code>서버</code>는 접속을 수락하고, </p><ul><li><strong>ACK 메시지를 클라이언트한테</strong> 보낼 때, </li><li>서버도 접속을 허락해달라고 <strong>SYN 메시지와 함께 보낸다.</strong></li></ul></li><li><p><code>클라이언트</code>가 접속을 수락하고 서버에서 <strong>ACK 메시지</strong>를 보낸다.</p><ul><li>참고로 요즘 최적화가 잘 되서 마지막 ACK를 보낼 때 데이터도 전송한다.</li></ul></li><li><p><strong>3단계를 거쳐 연결이 되고나면 데이터를 전송</strong>한다.</p></li></ol><p>위에 TCP 연결이 되었다고 연결이 된 게 아니라 <code>개념적으로 연결되어 있을 뿐</code>이다.<br>인터넷 망에 있는 수 많은 서버들이 연결되어 있는 건지 잘 모른다. </p><hr><h2 id="3-4-웹-브라우저-요청-흐름"><a href="#3-4-웹-브라우저-요청-흐름" class="headerlink" title="3.4 웹 브라우저 요청 흐름"></a>3.4 웹 브라우저 요청 흐름</h2><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Brower_10.png" alt="Brower_10" style="zoom:67%;" /><ol><li><strong>URL을 입력</strong>한다. </li><li><code>DNS 서버</code>로 <strong>IP를 찾아내고 생략된 PORT는 scheme로</strong> 찾아낸다. </li><li><code>웹 브라우저</code>가 <strong>HTTP 요청 메시지가 생성</strong>된다.</li></ol><hr><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Brower_11.png" alt="Brower_11" style="zoom:67%;" /><ol start="4"><li><p><code>SOCKET 라이브러리</code>를 통해서 <code>TCP/IP</code>로 <strong>IP와 PORT 정보를 찾은 거</strong>를</p><ul><li><code>3 way handshake 방식</code>으로 서버랑 연결을 한다.</li></ul></li><li><p><code>HTTP 요청 메시지</code>는 OS에 있는 <code>TCP/IP 계층</code>으로 전달한다.</p></li><li><p><code>TCP/IP 계층</code>에서 <code>HTTP 요청 메시지</code>를 패킷으로 감싼다.</p></li></ol><hr><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Brower_12.png" alt="Brower_12" style="zoom:67%;" /><ol start="7"><li><code>웹 브라우저</code>가 만든 요청 <strong>패킷</strong>을<ul><li><code>서버</code>에서 도착하면 <strong>패킷</strong>을 열어서</li><li><strong>HTTP 요청 메시지</strong>를 확인해서 <code>서버</code>가 해석한다.</li></ul></li></ol><hr><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Brower_13.png" alt="Brower_13" style="zoom:67%;" /><ol start="8"><li><code>서버</code>가 <strong>HTTP 응답 메시지</strong>를 만들어서 <strong>TCP&#x2F;IP 패킷</strong>을 감싸서, <ul><li><code>클라이언트</code>에게 도착하면 <strong>패킷</strong>을 열여서 <strong>HTTP 응답 메시지를 확인</strong>해서 <code>클라이언트</code>가 해석한다.</li></ul></li></ol><hr><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Brower_14.png" alt="Brower_14" style="zoom: 50%;" /><ol start="9"><li><code>웹 브라우저</code>가 <strong>HTML 렌더링</strong>을 해서, <code>클라이언트</code>가 <strong>HTML 결과</strong>를 볼 수 있다.</li></ol><hr><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://d2.naver.com/helloworld/59361">https://d2.naver.com/helloworld/59361</a></li><li>인프런, 김영한, 모든 웹 개발자를 위한 HTTP</li></ul>]]></content>
      
      
      <categories>
          
          <category> 정보 </category>
          
          <category> 원리 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 원리 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 블로그 - 수정후 Github에 재배포시 대소문자 404에러 해결</title>
      <link href="/2023/02/15/Hexo-404/"/>
      <url>/2023/02/15/Hexo-404/</url>
      
        <content type="html"><![CDATA[<p>Hexo를 이용해 블로그 글을 쓰다보면, 대소문자를 잘못 작성하거나, 수정해서<br>제목이 수정되거나, 카테고리 또는 태그가 대소문자 실수로 인해 2개로 나뉘는 경우가 있습니다.<br>또 github에 배포된 Hexo에는 이를 인식하지 못해 404 에러가 발생합니다.</p><p>Hexo를 이용해 Github에 배포 후 별다른 설정을 하지 않았다면,<br><code>_config.yml</code>에서 <code>filename_case</code> 세팅은 기본적으로 0으로 잡혀있습니다. </p><ul><li>1로 세팅하는 경우 파일명&amp;디렉토리명을 소문자로 변환</li><li>2로 세팅하는 경우 파일명&amp;디렉토리명을 대문자로 변환</li></ul><p>cf. 저같은 경우에는 1로 세팅해 전부 소문자로 정했습니다.</p><p>이후 <code>deploy_git</code> 폴더에 들어가서 파일을 한번 다 지워주고, 커밋 한뒤에, Hexo 배포해주면 에러가 해결됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -rf *</span><br><span class="line">git commit -m <span class="string">&quot;모든 파일 삭제&quot;</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Error </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-JS-DataAlgo-17-재귀함수</title>
      <link href="/2023/02/10/CS-JS-DataAlgo-17/"/>
      <url>/2023/02/10/CS-JS-DataAlgo-17/</url>
      
        <content type="html"><![CDATA[<h1 id="1-재귀-함수"><a href="#1-재귀-함수" class="headerlink" title="1. 재귀 함수"></a>1. 재귀 함수</h1><ul><li>재귀 함수는 자기 자신을 호출하는 함수를 말합니다.<ul><li><strong>자기 자신을 호출하는 것</strong>을 <code>재귀 호출(Recursion call)</code>이라고 합니다.</li></ul></li><li>함수 호출은 Call Stack에 쌓이기 때문에 <strong>스택 자료구조와 유사하게 동작</strong>합니다.</li><li>함수형 프로그래밍에선 루프 구현을 재귀로 구현하는 경우가 많습니다.</li><li><strong>잘못 작성하면 무한 루프</strong>에 빠질 수 있습니다.</li></ul><hr><h2 id="1-1-JavaScript에서-재귀함수"><a href="#1-1-JavaScript에서-재귀함수" class="headerlink" title="1.1 JavaScript에서 재귀함수"></a>1.1 JavaScript에서 재귀함수</h2><ul><li><strong>콜 스택에 제한</strong>이 있습니다.<ul><li>자바스크립트 엔진마다 제한 수는 다릅니다.</li><li>따라서 브라우저마다 다르지만 크롬의 경우 약 1만개 입니다.</li></ul></li><li>꼬리 재귀(Tail recursion)가 제공되지 않습니다.</li><li><strong>성능이 좋지 않습니다</strong>.</li></ul><p>그럼에도 불구하고 재귀를 알아둬야 하는 이유는?<br><strong>재귀로 작성하면 쉽게 풀리는 코딩 테스트 문제가 있기 떄문</strong>! (더 효율적인 것은 아님)</p><hr><h2 id="1-2-재귀로-구현해야-편한-알고리즘"><a href="#1-2-재귀로-구현해야-편한-알고리즘" class="headerlink" title="1.2 재귀로 구현해야 편한 알고리즘"></a>1.2 재귀로 구현해야 편한 알고리즘</h2><p>불편함을 무시한다면 더 빠른 성능으로 (JS에서) 작성할 수 있지만,<br>코딩 테스트는 빨리 푸는 것이 중요하기에 추천하지 않는다.</p><ul><li><strong>Union-Find</strong></li><li><strong>DFS</strong></li><li><strong>Backtracking</strong></li></ul><p>재귀 함수를 작성할 떄는 반드시 탈출할 수 있는 조건을 작성해야 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 재귀 호출</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">recursion</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="comment">// 탈출 코드가 없으면 무한 루프에 빠진다.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">resursion</span>(a + <span class="number">1</span>); <span class="comment">// 자기 자신을 호출하지만 탈출 코드가 없다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>보통 if 문 조건을 통해 탈출한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 재귀 호출</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">recursion</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">// 무한 루프 방지를 위해 탈출 코드를 작성해야 한다.</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">recursion</span>(a + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">recursion</span>(<span class="number">5</span>)); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-3-피보나치-수열"><a href="#1-3-피보나치-수열" class="headerlink" title="1.3 피보나치 수열"></a>1.3 피보나치 수열</h2><p>앞 두 항의 합이 뒤 항의 값이 되는 수열</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/JS_Algorithm_17_1.png" alt="JS_Algorithm_17_1"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 피보나치 수열</span></span><br><span class="line"><span class="comment">// 1 1 2 3 5 8 13</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 무한 루프 방지를 위해 탈출 코드를 작성해야 한다.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fibonacci</span>(x - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(x - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacci</span>(<span class="number">7</span>)); <span class="comment">// 13</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/JS_Algorithm_17_2.png" alt="JS_Algorithm_17_2"></p><hr><h2 id="1-4-변수-없는-합병-정렬-Merge-Sort-구현"><a href="#1-4-변수-없는-합병-정렬-Merge-Sort-구현" class="headerlink" title="1.4 변수 없는 합병 정렬(Merge Sort) 구현"></a>1.4 변수 없는 합병 정렬(Merge Sort) 구현</h2><p>합병 정렬이 헷갈린다면 앞 장의 ‘정렬’을 참고하세요.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/JS_Algorithm_17_3.png" alt="JS_Algorithm_17_3"></p><ol><li>요소를 나누는 작업부터 먼저 시작합니다. (Divide)<ul><li>8개의 요소를 절반으로 나누고, 요소가 1개가 남을 떄까지 계속 절반으로 나눈다.</li></ul></li><li>모든 요소를 나눴다면 합치는 작업을 시작합니다. (Conquer)<ul><li>나눈 것을 합치면, 두 요소 중 작은 것을 먼저 배치합니다.</li><li>21과 10의 경우 10이 먼저 배치되고 21이 배치됩니다.</li><li>이어서 2개까지를 합칠 떄도 작은 순으로 배치합니다.</li><li>최종적으로 모두 합치면 정렬된 상태가 됩니다.</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 합병 정렬</span></span><br><span class="line"><span class="comment">// 결합</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (a.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> b;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (b.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (a[<span class="number">0</span>] &lt; b[<span class="number">0</span>]) <span class="keyword">return</span> [a[<span class="number">0</span>], ...<span class="title function_">merge</span>(a.<span class="title function_">slice</span>(<span class="number">1</span>), b)];</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> [b[<span class="number">0</span>], ...<span class="title function_">merge</span>(a, b.<span class="title function_">slice</span>(<span class="number">1</span>))];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 분해</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mergesort</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> &lt; <span class="number">2</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>(arr.<span class="property">length</span> / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">merge</span>(<span class="title function_">mergesort</span>(arr.<span class="title function_">slice</span>(<span class="number">0</span>, mid)), <span class="title function_">mergesort</span>(arr.<span class="title function_">slice</span>(mid)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mergesort</span>([<span class="number">21</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">22</span>]));</span><br><span class="line"><span class="comment">// [10, 12, 13, 15, 20, 21, 22, 25]</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-재귀-함수를-이용한-트리-순회"><a href="#2-재귀-함수를-이용한-트리-순회" class="headerlink" title="2. 재귀 함수를 이용한 트리 순회"></a>2. 재귀 함수를 이용한 트리 순회</h1><p>트리 순회는 트리 자료구조에서 각 노드를 한 번씩 탐색하는 알고리즘을 말합니다. 트리 순회에는 여러 방법이 있지만 재귀를 이용할 수 있는 순회는 <code>전위 순회(Preorder), 중위 순회(Inorder), 후위 순회(Postorder)</code>가 있습니다. 모든 순회는 루트 노드부터 시작하며 어떤 노드를 먼저 방문하는지가 달라집니다. 여기서는 이진 트리를 이용하여 설명드리겠습니다.</p><blockquote><p>루트 노드가 앞, 중간, 뒤에 있냐에 따라 전위, 중위, 후위로 나뉜다.</p></blockquote><hr><h2 id="2-1-전위-순회-Root-→-Left-→-Right"><a href="#2-1-전위-순회-Root-→-Left-→-Right" class="headerlink" title="2.1 전위 순회 (Root → Left → Right)"></a>2.1 전위 순회 (Root → Left → Right)</h2><ul><li><code>노드를 방문</code>한 후 </li><li><code>왼쪽 서브 트리를 전위 순회</code>한 다음 </li><li><code>오른쪽 서브 트리를 전위 순회</code>하는 방식</li></ul><p>다음과 같은 이진 트리가 있다고 가정 해보겠습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">     1</span><br><span class="line">    / \</span><br><span class="line">   /   \</span><br><span class="line">  2     \</span><br><span class="line"> / \     3</span><br><span class="line">4   5   / \</span><br><span class="line">       6   \</span><br><span class="line">            7</span><br><span class="line">           / \</span><br><span class="line">          8   9</span><br></pre></td></tr></table></figure><ul><li>1 → 2 → 4 → 5 → 3 → 6 →7 → 8 → 9 노드 순으로 방문</li></ul><p>이를 의사 코드로 나타내자면 다음과 같습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">preorder(tree) &#123;</span><br><span class="line">  방문(tree.root);</span><br><span class="line">  preorder(tree.left);</span><br><span class="line">  preorder(tree.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-중위-순회-Left-→-Root-→-Right"><a href="#2-2-중위-순회-Left-→-Root-→-Right" class="headerlink" title="2.2 중위 순회 (Left → Root → Right)"></a>2.2 중위 순회 (Left → Root → Right)</h2><ul><li><code>왼쪽 서브 트리를 중위 순회</code>한 다음</li><li><code>노드를 방문</code>한 다음</li><li><code>오른쪽 서브 트리를 중위 순회</code>하는 방식</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">     1</span><br><span class="line">    / \</span><br><span class="line">   /   \</span><br><span class="line">  2     \</span><br><span class="line"> / \     3</span><br><span class="line">4   5   / \</span><br><span class="line">       6   \</span><br><span class="line">            7</span><br><span class="line">           / \</span><br><span class="line">          8   9</span><br></pre></td></tr></table></figure><ul><li>4 →  2 →  5 →  1 →  6 →  3 →  8 →  7 →  9 노드 순으로 방문</li></ul><p>이를 의사 코드로 나타내자면 다음과 같습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inorder(tree) &#123;</span><br><span class="line">  inorder(tree.left);</span><br><span class="line">  방문(tree.root);</span><br><span class="line">  inorder(tree.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-3-후위-순회-Left-→-Right-→-Root"><a href="#2-3-후위-순회-Left-→-Right-→-Root" class="headerlink" title="2.3 후위 순회 (Left → Right → Root)"></a>2.3 후위 순회 (Left → Right → Root)</h2><ul><li><code>왼쪽 서브 트리를 후위 순회</code>한 다음</li><li><code>오른쪽 서브 트리를 후위 순회</code>한 다음</li><li><code>루트 노드를 방문</code>하는 방식</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">     1</span><br><span class="line">    / \</span><br><span class="line">   /   \</span><br><span class="line">  2     \</span><br><span class="line"> / \     3</span><br><span class="line">4   5   / \</span><br><span class="line">       6   \</span><br><span class="line">            7</span><br><span class="line">           / \</span><br><span class="line">          8   9</span><br></pre></td></tr></table></figure><ul><li>4 → 5 → 2 → 6 → 8 → 9 → 7 → 3 → 1 노드 순으로 방문</li></ul><p>이를 의사 코드로 나타내자면 다음과 같습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">postorder(tree) &#123;</span><br><span class="line">  postorder(tree.left);</span><br><span class="line">  postorder(tree.right);</span><br><span class="line">  방문(tree.root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4-구현-코드"><a href="#2-4-구현-코드" class="headerlink" title="2.4 구현 코드"></a>2.4 구현 코드</h2><p>이런 전위, 중위, 후위 순회에 대한 재귀 코드 구현은 다음과 같습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = node;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 전위 순회</span></span><br><span class="line">  <span class="title function_">preorder</span>(<span class="params">currentNode</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(currentNode.<span class="property">value</span>);</span><br><span class="line">    <span class="keyword">if</span> (currentNode.<span class="property">left</span>) <span class="variable language_">this</span>.<span class="title function_">preorder</span>(currentNode.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">if</span> (currentNode.<span class="property">right</span>) <span class="variable language_">this</span>.<span class="title function_">preorder</span>(currentNode.<span class="property">right</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 중위 순회</span></span><br><span class="line">  <span class="title function_">inorder</span>(<span class="params">currentNode</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode.<span class="property">left</span>) <span class="variable language_">this</span>.<span class="title function_">inorder</span>(currentNode.<span class="property">left</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(currentNode.<span class="property">value</span>);</span><br><span class="line">    <span class="keyword">if</span> (currentNode.<span class="property">right</span>) <span class="variable language_">this</span>.<span class="title function_">inorder</span>(currentNode.<span class="property">right</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 후위 순회</span></span><br><span class="line">  <span class="title function_">postorder</span>(<span class="params">currentNode</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode.<span class="property">left</span>) <span class="variable language_">this</span>.<span class="title function_">postorder</span>(currentNode.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">if</span> (currentNode.<span class="property">right</span>) <span class="variable language_">this</span>.<span class="title function_">postorder</span>(currentNode.<span class="property">right</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(currentNode.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tree = <span class="keyword">new</span> <span class="title class_">Tree</span>(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">9</span>));</span><br><span class="line">tree.<span class="property">root</span>.<span class="property">left</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">3</span>);</span><br><span class="line">tree.<span class="property">root</span>.<span class="property">right</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">8</span>);</span><br><span class="line">tree.<span class="property">root</span>.<span class="property">left</span>.<span class="property">left</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>);</span><br><span class="line">tree.<span class="property">root</span>.<span class="property">left</span>.<span class="property">right</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">5</span>);</span><br><span class="line">tree.<span class="property">root</span>.<span class="property">right</span>.<span class="property">right</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">7</span>);</span><br><span class="line">tree.<span class="property">root</span>.<span class="property">left</span>.<span class="property">right</span>.<span class="property">right</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">tree.<span class="title function_">preorder</span>(tree.<span class="property">root</span>);</span><br><span class="line">tree.<span class="title function_">inorder</span>(tree.<span class="property">root</span>);</span><br><span class="line">tree.<span class="title function_">postorder</span>(tree.<span class="property">root</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="3-재귀-함수를-이용한-순열-조합"><a href="#3-재귀-함수를-이용한-순열-조합" class="headerlink" title="3. 재귀 함수를 이용한 순열, 조합"></a>3. 재귀 함수를 이용한 순열, 조합</h1><p><strong>순열과 조합은 코딩 테스트에서 은근히 자주 사용되는 기능</strong>입니다.<br>아쉽게도 자바스크립트에선 자체적으로 제공하는 built-in 함수가 없기에 직접 구현해야 합니다.</p><p><code>순열</code>과 <code>조합</code>은 <strong>재귀 함수를 이용하면 쉽게 만들 수 있습니다</strong>.<br>물론 성능이나 콜 스택 위험으로 인해 스택으로 구현하는 것이 좋지만,<br>순열과 조합 자체가 시간복잡도가 굉장히 크기 때문에 코딩 테스트에서 n이 크게 나오는 경우는 많지 않습니다.<br>따라서 <strong>재귀로 외우는 것이 직관적</strong>이고 편합니다.</p><hr><h2 id="3-1-순열"><a href="#3-1-순열" class="headerlink" title="3.1 순열"></a>3.1 순열</h2><p>순열의 시간복잡도는 $O(n!)$ 입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">permutations</span>(<span class="params">arr, n</span>) &#123;</span><br><span class="line">  <span class="comment">// 1개만 뽑는다면 그대로 순열을 반환한다. 탈출 조건으로도 사용된다.</span></span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> arr.<span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> [v]);</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 요소를 순환한다</span></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fixed, idx, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 현재 index를 제외한 요소를 추출한다.</span></span><br><span class="line">    <span class="comment">// index번째는 선택된 요소</span></span><br><span class="line">    <span class="keyword">const</span> rest = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">_, index</span>) =&gt;</span> index !== idx);</span><br><span class="line">    <span class="comment">// 선택된 요소를 제외하고 재귀 호출한다.</span></span><br><span class="line">    <span class="keyword">const</span> perms = <span class="title function_">permutations</span>(rest, n - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 선택된 요소와 재귀 호출을 통해 구한 순열을 합쳐준다.</span></span><br><span class="line">    <span class="keyword">const</span> combine = perms.<span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> [fixed, ...v]);</span><br><span class="line">    <span class="comment">// 결과 값을 추가한다.</span></span><br><span class="line">    result.<span class="title function_">push</span>(...combine);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-2-조합"><a href="#3-2-조합" class="headerlink" title="3.2 조합"></a>3.2 조합</h2><p>조합의 시간복잡도는 $O(2^n)$입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">combinations</span>(<span class="params">arr, n</span>) &#123;</span><br><span class="line">  <span class="comment">// 1개만 뽑는다면 그대로 조합을 반환한다. 탈출 조건으로도 사용된다.</span></span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> arr.<span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> [v]);</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 요소를 순환한다</span></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fixed, idx, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 현재 index 이후 요소를 추출한다.</span></span><br><span class="line">    <span class="comment">// index번째는 선택된 요소</span></span><br><span class="line">    <span class="keyword">const</span> rest = arr.<span class="title function_">slice</span>(idx + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 선택된 요소 이전 요소들을 제외하고 재귀 호출한다.</span></span><br><span class="line">    <span class="keyword">const</span> combis = <span class="title function_">combinations</span>(rest, n - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 선택된 요소와 재귀 호출을 통해 구한 조합을 합쳐준다.</span></span><br><span class="line">    <span class="keyword">const</span> combine = combis.<span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> [fixed, ...v]);</span><br><span class="line">    <span class="comment">// 결과 값을 추가한다.</span></span><br><span class="line">    result.<span class="title function_">push</span>(...combine);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3-문제-두-개-뽑아서-더하기"><a href="#3-3-문제-두-개-뽑아서-더하기" class="headerlink" title="3.3 문제 : 두 개 뽑아서 더하기"></a>3.3 문제 : 두 개 뽑아서 더하기</h2><ul><li><a href="https://programmers.co.kr/learn/courses/30/lessons/68644?language=javascript">https://programmers.co.kr/learn/courses/30/lessons/68644?language=javascript</a></li></ul><hr><h3 id="3-3-1-문제풀이"><a href="#3-3-1-문제풀이" class="headerlink" title="3.3.1 문제풀이"></a>3.3.1 문제풀이</h3><p>단순히 숫자 중 2개를 뽑은 조합을 구하면 되는 문제입니다.<br>단, 중복을 제거하고 오름차순으로 정렬하는 것을 잊으면 안됩니다.<br>위에서 작성한 조합 함수를 이용하면 쉽게 풀 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">combinations</span>(<span class="params">arr, n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> arr.<span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> [v]);</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fixed, idx, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> rest = arr.<span class="title function_">slice</span>(idx + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> combis = <span class="title function_">combinations</span>(rest, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> combine = combis.<span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> [fixed, ...v]);</span><br><span class="line">    result.<span class="title function_">push</span>(...combine);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">numbers</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 조합을 구한다. n 개중 2개</span></span><br><span class="line">  <span class="comment">// 2. 조합의 합을 구한다.</span></span><br><span class="line">  <span class="comment">// 3. 중복을 제거한다.</span></span><br><span class="line">  <span class="comment">// 4. 오름차순 정렬한다.</span></span><br><span class="line">  <span class="keyword">return</span> [...<span class="keyword">new</span> <span class="title class_">Set</span>(<span class="title function_">combinations</span>(numbers, <span class="number">2</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">combi</span>) =&gt;</span> combi[<span class="number">0</span>] + combi[<span class="number">1</span>]))].<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-3-2-풀이-2"><a href="#3-3-2-풀이-2" class="headerlink" title="3.3.2 풀이 2"></a>3.3.2 풀이 2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">numbers</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> answer = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numbers.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; numbers.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      answer.<span class="title function_">push</span>(numbers[i] + numbers[j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [...<span class="keyword">new</span> <span class="title class_">Set</span>(answer)].<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS-자료구조-알고리즘 </category>
          
          <category> JS-자료구조-알고리즘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS-자료구조-알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-JS-DataAlgo-16-소수 구하기</title>
      <link href="/2023/02/07/CS-JS-DataAlgo-16/"/>
      <url>/2023/02/07/CS-JS-DataAlgo-16/</url>
      
        <content type="html"><![CDATA[<h1 id="1-소수-prime-구하기"><a href="#1-소수-prime-구하기" class="headerlink" title="1. 소수(prime) 구하기"></a>1. 소수(prime) 구하기</h1><blockquote><p>An integer n &gt; 1 is called a <code>prine number</code>, of simply <code>a prime</code>.<br>if its only positive factors are 1 and n.<br>An integer n &gt; 1 that is not a prime is called composite.</p><p>1보다 큰 정수들 중, 약수로 1과 자기 자신을 갖는 것을 소수(prime)<br>그 밖의 수들을 합성수(composite)이라고 한다.</p></blockquote><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Programmers_JS_Algorithm_16_1.png" alt="Programmers_JS_Algorithm_16_1"></p><p>소수는 1 또는 자기 자신만은 약수로 가지는 수를 의미한다.</p><hr><h1 id="2-소수를-구하는-효율적인-방법"><a href="#2-소수를-구하는-효율적인-방법" class="headerlink" title="2. 소수를 구하는 효율적인 방법"></a>2. 소수를 구하는 효율적인 방법</h1><h2 id="2-1-가장-직관적인-방법"><a href="#2-1-가장-직관적인-방법" class="headerlink" title="2.1 가장 직관적인 방법"></a>2.1 가장 직관적인 방법</h2><p>2부터 N-1까지 루프를 돌며 나눠보기</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Programmers_JS_Algorithm_16_2.png" alt="Programmers_JS_Algorithm_16_2"></p><p>다른 방법들에 비해 느린 편에 속한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// O(n)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">is_prime</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; num; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-효율성-개선하기"><a href="#2-2-효율성-개선하기" class="headerlink" title="2.2 효율성 개선하기"></a>2.2 효율성 개선하기</h2><p>그 어떤 소수도 N의 제곱근보다 큰 수로 나눠지지 않는다는 점을 이용</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Programmers_JS_Algorithm_16_3.png" alt="Programmers_JS_Algorithm_16_3"></p><p>이전 방법보다 더 효율적이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// O(루트 n)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">is_prime</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i * i &lt;= num; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-3-에라토스테네스의-체⭐"><a href="#2-3-에라토스테네스의-체⭐" class="headerlink" title="2.3 에라토스테네스의 체⭐"></a>2.3 에라토스테네스의 체⭐</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Programmers_JS_Algorithm_16_4.png" alt="Programmers_JS_Algorithm_16_4"></p><p>고대 그리스 수학자 에라토스테네스가 발견한 소수를 찾는 방법으로 <strong>소수를 판단할 떄, 가장 효율적</strong>인 알고리즘</p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Programmers_JS_Algorithm_16_5.png" alt="Programmers_JS_Algorithm_16_5" style="zoom: 80%;" /><ul><li>2를 제외한 2의 배수가 되는 수들을 모두 체크</li><li>3의 배수가 되는 수들을 모두 체크</li><li>4는 이미 체크되어 있기 떄문에 넘어감</li><li>5의 배수가 되는 수들을 모두 체크</li><li>7의 배수가 되는 수들을 모두 체크</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Programmers_JS_Algorithm_16_6.png" alt="Programmers_JS_Algorithm_16_6"></p><ul><li>8부터는 확인할 필요가 없다</li><li>이후 54까지 체크되지 않은 수들은 모두 소수로 판단</li></ul><p>에라토스테네스의 체는 <strong>1부터 N까지 모든 소수를 구하는 경우 가장 효율적</strong>이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 에라토스테네스의 체</span></span><br><span class="line"><span class="comment">// O(n log log n)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_primes</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="comment">// 0과 1을 제외한 입력값의 나머지 숫자까지 true를 담은 배열</span></span><br><span class="line">  <span class="keyword">const</span> prime = [<span class="literal">false</span>, <span class="literal">false</span>, ...<span class="title class_">Array</span>(num - <span class="number">1</span>).<span class="title function_">fill</span>(<span class="literal">true</span>)];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2 ~ 입력받은 수까지 순회</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i * i &lt;= num; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 2, 3, 4 순으로 배수들을 false로 체크</span></span><br><span class="line">    <span class="keyword">if</span> (prime[i]) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = i * <span class="number">2</span>; j &lt;= num; j += i) &#123;</span><br><span class="line">        prime[j] = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> prime.<span class="title function_">filter</span>(<span class="title class_">Boolean</span>); <span class="comment">// false같은 값을 제거</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-3-1-추가-설명-filter-Boolean"><a href="#2-3-1-추가-설명-filter-Boolean" class="headerlink" title="2.3.1 추가 설명 : filter(Boolean)"></a>2.3.1 추가 설명 : filter(Boolean)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> something = [</span><br><span class="line"> ...some</span><br><span class="line">].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br></pre></td></tr></table></figure><p><strong>왜 이렇게 사용할까?</strong> JS에서 제공되는 배열은 아래와 같이 선언하여 사용할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bad = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">const</span> bomb = [<span class="literal">undefined</span>, <span class="number">5</span>, <span class="literal">null</span>, ,,<span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [bad, <span class="number">1</span>, <span class="number">2</span>, ...bomb];</span><br><span class="line"><span class="comment">// arr = [undefined, 1, 2, undefined, 5, null, undefined, undefined, undefined]</span></span><br></pre></td></tr></table></figure><p>위에서 제공되는 예시와 같이 <code>undefined</code> 또는 <code>null</code>이 의도하지 않게 들어갈 수 있다.<br>이러한 가능성은 반복문에서 문제가 발생될 가능성이 크다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">value</span>);  <span class="comment">// ERROR! Uncaught TypeError: Cannot read property &#x27;item&#x27; of undefined</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>이를 해결하기위해 일반적으로 반복문 내에서 체크하는 로직을 삽입하여 처리하기도 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (item) &#123;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">value</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>하지만 이러한 처리방식은 두가지의 문제점을 야기한다.</p><ol><li>코드가 복잡해진다.</li><li><strong>배열이 또다른 새로운 배열로 확장되는 경우 또는 배열이 재사용되는 경우 동일하게 체크하는 로직을 삽입하여야한다.</strong></li></ol><p>이보다 더 좋은 방법은 없을까? 그 방법이 <code>filter(Boolean)</code>을 사용하여 배열을 <strong>믿을 수 있는 상태</strong>로 만드는 것이다! 심플하고 간단하게 사용할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="literal">false</span>, <span class="number">0</span>, -<span class="number">0</span>, <span class="number">0n</span>, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="title class_">NaN</span>, &#123;<span class="attr">hello</span>: <span class="string">&quot;world&quot;</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)); <span class="comment">// [&#123;hello: &quot;world&quot;&#125;]</span></span><br></pre></td></tr></table></figure><p><code>Boolean</code>을 <code>iterator</code> 로 사용하여 <code>false, 0, -0, 0n, &quot;&quot;, null, undefined, NaN</code>를 제거할 수 있다.</p><blockquote><p>Reference : <a href="https://michaeluloth.com/filter-boolean">https://michaeluloth.com/filter-b</a></p></blockquote><hr><h1 id="3-실습-소수-찾기"><a href="#3-실습-소수-찾기" class="headerlink" title="3. 실습 : 소수 찾기"></a>3. 실습 : 소수 찾기</h1><h2 id="3-1-문제"><a href="#3-1-문제" class="headerlink" title="3.1 문제"></a>3.1 문제</h2><p>1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하는 함수, solution을 만들어 보세요.<br>소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다. (1은 소수가 아닙니다.)</p><p>[제한 조건]</p><ul><li>n은 2이상 1000000이하의 자연수입니다.</li></ul><p>[입출력 예]</p><table><thead><tr><th align="center">n</th><th align="center">result</th></tr></thead><tbody><tr><td align="center">10</td><td align="center">4</td></tr><tr><td align="center">5</td><td align="center">3</td></tr></tbody></table><hr><h2 id="3-2-풀이"><a href="#3-2-풀이" class="headerlink" title="3.2 풀이"></a>3.2 풀이</h2><p>이 문제는 이름 그대로 1부터 입력받은 숫자 n 사이에 있는 소수를 찾는 문제입니다.<br>1부터 n까지 소수를 모두 찾아야할 경우 가장 효율적인 알고리즘은 에라토스테네스의 체라고 말씀드린 것 기억나시나요?<br>이번 문제는 에라토스테네스의 체를 이용하여 쉽게 풀 수 있습니다.</p><p>그렇지만 다른 알고리즘도 이용하여 한 번 비교해보도록 하겠습니다.</p><h3 id="3-2-1-단순-루프로-풀어보기"><a href="#3-2-1-단순-루프로-풀어보기" class="headerlink" title="3.2.1 단순 루프로 풀어보기"></a>3.2.1 단순 루프로 풀어보기</h3><p>단순히 2부터 N까지 루프를 도는 것으로 일단 풀어볼 수 있습니다. 코드는 다음과 같습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// O(n)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isPrime</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; num; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isPrime</span>(i)) &#123;</span><br><span class="line">      answer += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하지만 이 코드의 경우 성능이 느리기 때문에 모든 테스트 케이스를 통과하지 못합니다. 따라서 더 효율적인 방법을 찾아야 합니다.</p><hr><h3 id="3-2-2-제곱근-이후-연산하지-않기"><a href="#3-2-2-제곱근-이후-연산하지-않기" class="headerlink" title="3.2.2 제곱근 이후 연산하지 않기"></a>3.2.2 제곱근 이후 연산하지 않기</h3><p>영상에서 말씀드린 것처럼 N의 제곱근 이후는 체크할 필요가 없습니다. 따라서 다음과 같이 코드를 개선합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// O(sqrt(n))</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isPrime</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i * i &lt;= num; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 이 부분이 변경됩니다.</span></span><br><span class="line">    <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isPrime</span>(i)) &#123;</span><br><span class="line">      answer += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>정확성 테스트는 모두 통과하지만 여전히 효율성 테스트는 통과하지 못합니다. 따라서 더 효율적인 알고리즘을 사용해야 합니다.</p><hr><h3 id="3-2-3-에라토스테네스의-체"><a href="#3-2-3-에라토스테네스의-체" class="headerlink" title="3.2.3 에라토스테네스의 체"></a>3.2.3 에라토스테네스의 체</h3><p>에라토스테네스의 체를 구현한 코드는 다음과 같습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 에라토스테네스의 체</span></span><br><span class="line"><span class="comment">// O(n log log n)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_primes</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="comment">// 0과 1은 소수가 아니기에 미리 false로 체크합니다.</span></span><br><span class="line">  <span class="keyword">const</span> prime = [<span class="literal">false</span>, <span class="literal">false</span>, ...<span class="title class_">Array</span>(num - <span class="number">1</span>).<span class="title function_">fill</span>(<span class="literal">true</span>)];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i * i &lt;= num; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prime[i]) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = i * <span class="number">2</span>; j &lt;= num; j += i) &#123;</span><br><span class="line">        prime[j] = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> prime.<span class="title function_">filter</span>(<span class="title class_">Boolean</span>); <span class="comment">// true만 필터링하고 싶을 경우 이런 방식으로 쓸 수 있습니다.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">get_primes</span>(n).<span class="property">length</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 경우 효율성 테스트를 통과합니다. 정확도 테스트에서 걸린 시간을 확인해보아도 훨씬 빠르다는 것을 알 수 있습니다.</p>]]></content>
      
      
      <categories>
          
          <category> CS-자료구조-알고리즘 </category>
          
          <category> JS-자료구조-알고리즘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS-자료구조-알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Start-CSS- 09 - 미디어쿼리(fMedia Query)</title>
      <link href="/2023/02/06/Front-Start-CSS-09-MediaQuery/"/>
      <url>/2023/02/06/Front-Start-CSS-09-MediaQuery/</url>
      
        <content type="html"><![CDATA[<h1 id="1-반응형-웹과-적응형-웹"><a href="#1-반응형-웹과-적응형-웹" class="headerlink" title="1. 반응형 웹과 적응형 웹"></a>1. 반응형 웹과 적응형 웹</h1><p>과거에는 웹 페이지를 접속할 수 있는 방법이 컴퓨터에 설치된 웹 브라우저에서만 가능했지만, 현대에는 컴퓨터를 비롯해서 휴대폰, 태블릿, 네비게이션 등 다양한 기기를 사용해서 웹 페이지에 접근할 수 있게 되었습니다. 그래서 개발자들이 웹페이지를 만들 떄, 다양한 디바이스 환경에 맞춰 최적화된 웹 페이지를 사용자에게 보여줄 수 있도록 다양한 방법으로 웹 페이지를 제작해야 합니다.</p><p>대표적인 방법으로 크게 <code>반응형 웹(responsive web)</code>과 <code>적응형 웹(adaptive web)</code>이 있습니다. </p><ul><li><code>반응형 웹(responsive web)</code><ul><li><code>다양한 디바이스의 해상도에 반응</code>하여 최적화된 웹 페이지를 보여주는 방법으로 제작한 웹페이지</li><li>e.g. Apple 공식 홈페이지</li></ul></li><li><code>적응형 웹(adaptive web)</code><ul><li><code>디바이스의 종류별로 최적화된 웹 페이지</code>를 보여줄 수 있도록 제작한 웹 페이지</li><li>반응형이 아니기 떄문에, 웹 페이지를 방문할 떄, 사용한 디바이스 종류별(device type)로 다르게 </li><li>보이는 것이 반응형 웹과 구분되는 차이점</li><li>e.g. Naver 포털 사이트 : 네이버의 포털 사이트는 컴퓨터, 휴대폰 등 접속기기에 따라 화면이 변경됨</li></ul></li></ul><hr><h1 id="2-미디어쿼리-Media-Query"><a href="#2-미디어쿼리-Media-Query" class="headerlink" title="2. 미디어쿼리(Media Query)"></a>2. 미디어쿼리(Media Query)</h1><p>미디어쿼리(media query)는 단말기의 유형(출력물, 화면), 어떤 특성이나 수치(해상도, 뷰포트 기준)에 따라 웹 사이트나 앱의 스타일을 수정할 때 유용합니다.</p><ul><li>CSS @media @import 규칙을 사용해 특정 조건에 따라 스타일을 적용할 경우</li><li><code>&lt;style&gt;, &lt;link&gt;, &lt;source&gt;</code> 기타 다양한 HTML 요소에 media 특성을 이용하여 선택할 경우</li><li>window.matchMedia(), MediaQueryList.addListener() JS 메서드를 사용해 미디어 상태를 확인할 경우</li></ul><p>미디어 쿼리(media query)는 다음과 같은 문법을 가집니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> 미디어유형 <span class="keyword">and</span> (조건) &#123;</span><br><span class="line"><span class="comment">/* 📝 미디어 유형의 값 */</span></span><br><span class="line">  <span class="comment">/* - all(모든 기기), print(인쇄형 기기) */</span></span><br><span class="line">  <span class="comment">/* - screen(컴퓨터, 휴대폰, 테프릿 등 스크린 기기), speech(음성이 출력되는 기기) */</span></span><br><span class="line">  <span class="comment">/* 📝 조건 = 어떤 상황에서 미디어쿼리가 적용되어야 하는 지 정의 */</span></span><br><span class="line">  <span class="comment">/* min-width(화면의 최소 넓이), max-width(화면의 최대 넓이), orientation(화면 방향) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>미디어쿼리에 대한 쿼리를 보겠습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>미디어쿼리<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 📝 min-width는 1번만 사용해야 하고, max-width는 여러 번 사용 가능 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 모든 기기에서, 화면의 최소 넓이가 1140px 이상일 떄 */</span></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1140px</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 📝 max-width는 큰 것부터 먼저 작성하고, 그 뒤에 작은 것을 작성해야 함  */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* CSS 적용 우선순위때문 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 모든 기기에서, 화면의 최대 넓이가 1140px 이하일 떄 */</span></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1139px</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 모든 기기에서, 화면의 최대 넓이가 640px 이하일 떄 */</span></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">640px</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 프린트 기기에서, 화면의 최소 넓이가 0px 이하일 떄 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 웹 브라우저에서는 변화가 없고, 프린터에서만 변함 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 📝 인쇄까지 고려하는 경우는 적어서, 보통 all, screen을 많이 사용 */</span></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@media</span> print <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">0px</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Media Query<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>반응형 웹을 구현할 떄 필수로 사용해야 하는 CSS 속성<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-orientation-특정-방향만-미디어쿼리-적용"><a href="#3-orientation-특정-방향만-미디어쿼리-적용" class="headerlink" title="3. orientation 특정 방향만 미디어쿼리 적용"></a>3. orientation 특정 방향만 미디어쿼리 적용</h1><p>미디어 쿼리(media query)의 조건을 지정하는 방법 중 가장 많이 사용하는 법은 <code>min-width와 max-width를 사용</code>하는 것입니다. 다만, 이와 더불어 드물게 <code>화면 방향에 대한 조건</code>도 같이 사용하는 경우가 있습니다. 그럴 떄 사용하는 조건이 <code>orientation</code>입니다.</p><p>태블릿이나 휴대폰을 사용할 경우, 화면을 가로 또는 세로 방향으로 회전하여 화면을 사용합니다. <code>orientation</code>조건을 사용해 화면의 특정 방향에서만 미디어쿼리가 적용되도록 조건을 지정할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>미디어쿼리<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* orientation 값을 따로 지정하지 않은 경우, 모든 방향에 적용 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* orientation 값 : landscape(가로 방향), portrait(세로 방향) */</span></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1139px</span>) <span class="keyword">and</span> (<span class="attribute">orientation</span>: portrait) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Media Query<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>반응형 웹을 구현할 떄 필수로 사용해야 하는 CSS 속성<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-브레이크-포인트"><a href="#4-브레이크-포인트" class="headerlink" title="4. 브레이크 포인트"></a>4. 브레이크 포인트</h1><p>반응형 웹은 결국 미디어 쿼리를 사용해서 특정 화면 조건에서 별도의 스타일을 적용하면서 만들 수 있습니다. 그러다보면 결국  “휴대폰, 태블릿, pc는 각각 화면의 넓이를 얼마를 기준으로 작업해야 하지?”와 같은 의문이 생기기 마련입니다.</p><p>미디어 쿼리에서는 특정 화면 넓이를 기준으로 미디어 쿼리를 나눌 때 사용하는 화면 넓이 기준을  “브레이크 포인트(break points)”라고 하는데, 일반적으로 사용되는 브레이크 포인트는 아래와 같습니다.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Extra small devices (phones, 600px and down) */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Small devices (portrait tablets and large phones, 600px and up) */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">600px</span>) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Medium devices (landscape tablets, 768px and up) */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Large devices (laptops/desktops, 992px and up) */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">992px</span>) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Extra large devices (large laptops and desktops, 1200px and up) */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1200px</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure><p>단, 브레이크 포인트에는 절대적인 기준이 없기 때문에 본인이 작업하는 상황&#x2F;환경에 따라서 충분히 달라질 수 있습니다.</p><ul><li><code>320 ~ 480px</code> : 모바일</li><li><code>481 ~ 768px</code> : 태블릿</li><li><code>769 ~ 1024px</code> : 노트북</li><li><code>1025 ~ 1200px</code> : 데스크탑</li><li><code>1201px ~(이상)</code> : 데스크탑 및 TV 등</li></ul><hr><h1 id="5-뷰포트-viewport"><a href="#5-뷰포트-viewport" class="headerlink" title="5. 뷰포트(viewport)"></a>5. 뷰포트(viewport)</h1><p><code>뷰포트</code>는 <code>웹 페이지가 화면에 보여지는 영역</code>을 의미합니다. PC는 브라우저에서 웹페이지가 보여지기 때문에 웹 브라우저의 크기가 뷰포트의 크기입니다. 그 외의 모바일 디바이스 기기에서는 모바일 디바이스 기기 화면 자체가 뷰포트가 됩니다.</p><p>모든 웹페이지는 가로의 크기가 980px로 뷰포트의 기준이 정해져 있습니다. 따라서 이러한 웹페이지의 뷰포트 기준 크기와 웹페이지에 접속할 때, 사용한 디바이스의 뷰포트가 정확히 일치해야만 최적화된 사이즈의 웹 페이지를 사용자에게 보여줄 수 있습니다.</p><p>웹 브라우저 같은 경우는 웹 브라우저의 크기가 변경될 때마다 웹 페이지의 뷰포트 기준이 웹 브라우저 크기에 맞춰서 재설정됩니다. 그래서 우리가 PC만 사용할 때는 뷰포트와 관련된 부분을 신경쓰지 않아도 됩니다. 하지만 <code>PC를 제외한 나머지 디바이스에서는 문제</code>가 되는데요. </p><p>위에서 언급한 것처럼 웹 페이지의 뷰포트는 가로의 크기가 980px이 기준이 되지만, 다른  디바이스에서는 디바이스마다 정해진 뷰포트의 크기가 있어서 웹 페이지의 기본적인 기준 크기인 980px과 일치하지 않는 경우가 많기 때문입니다.</p><p>그래서 항상 PC를 제외한 다른 디바이스에서도 최적화된 웹 페이지를 보여주기 위해 웹페이지의 기본 뷰포트 크기(980px)를 접속한 디바이스의 뷰포트 크기로 재설정해야 하는데요, 그럴 때 사용할 수 있는 태그가 뷰포트 관련  meta 태그입니다.</p><p>뷰포트는 HTML의 meta 태그를 사용해서 설정할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- px단위로 숫자를 작성하며 단위표시는 생략, e.g.) 300  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width:너비값&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 웹 페이지에 뷰포트가 디바이스의 뷰포트 크기와 일치하게 재설정 ⭐ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 디바이스 높이 기준 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;height=device-height&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 초기 화면 배율 설정 (100%) ⭐ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 최소 / 최대 화면 배율 설정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;maximum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 사용자의 크기 조절 막기 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;user-scaleble=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>예시를 보겠습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- viewport 관련 meta 태그 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- content의 넓이가 접속한 기기에 일치하도록 해줌, 스마트폰 손가락으로 줌 배율을 1배율로 설정 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 이 태그가 없으면 휴대폰에서 웹브라우저 기준 크기 등으로 크기가 맞지 않음 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>미디어쿼리<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1139px</span>) <span class="keyword">and</span> (<span class="attribute">orientation</span>: portrait) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Media Query<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>반응형 웹을 구현할 떄 필수로 사용해야 하는 CSS 속성<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML-CSS-JS </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Start-CSS-08 - Grid 레이아웃</title>
      <link href="/2023/02/06/Front-Start-CSS-08-Grid-Layout/"/>
      <url>/2023/02/06/Front-Start-CSS-08-Grid-Layout/</url>
      
        <content type="html"><![CDATA[<h1 id="1-실습-그리드-워밍업"><a href="#1-실습-그리드-워밍업" class="headerlink" title="1. 실습 - 그리드 워밍업"></a>1. 실습 - 그리드 워밍업</h1><h2 id="1-1-HTML"><a href="#1-1-HTML" class="headerlink" title="1.1 HTML"></a>1.1 HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>grid<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item red-box&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item blue-box&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item green-box&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item grey-box&quot;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-2-초기-CSS"><a href="#1-2-초기-CSS" class="headerlink" title="1.2 초기 CSS"></a>1.2 초기 CSS</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-item</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grey-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: grey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>본격적으로 Grid Layout 속성을 공부하기 전에 워밍업 차원에서 실습 문제를 하나 풀어보겠습니다.<br>코딩창에서 기본으로 제공된 코드를 실행하면 아래와 같이 보입니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_8_1.png" alt="CSS_8_1"></p><p>이를 아래와 같이 보이도록 수정해주세요. 단, HTML 코드는 절대로 수정하면 안되며 오직 CSS 속성만 수정해서 해야 합니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_8_2.png" alt="CSS_8_2"></p><hr><h2 id="1-2-정답-CSS-float"><a href="#1-2-정답-CSS-float" class="headerlink" title="1.2 정답 CSS : float"></a>1.2 정답 CSS : float</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-item</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 정렬을 위한 속성 추가, float 속성을 활용 */</span></span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grey-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: grey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="2-Grid-Layout-이란"><a href="#2-Grid-Layout-이란" class="headerlink" title="2. Grid Layout 이란?"></a>2. Grid Layout 이란?</h1><p>그리드 레이아웃(Grid Layout)은 <code>2차원 방식</code>으로 효과적인 레이아웃을 설계할 수 있도록 고안된 레이아웃 스타일입니다. 여기서 2차원 방식이란 마치 HTML의 테이블(table) 태그처럼 <code>수평(row)과 수직(column) 방향으로 레이아웃을 설계</code>하는 방식을 말합니다.</p><p>이런 2차원 방식이 테이블 태그와 굉장히 유사한 점이 많아서, 보통 그리드 레이아웃에서는 <code>수평을 row</code>, <code>수직을 column</code>이라고 부릅니다. 참고로 그리드 레이아웃은 CSS에 플렉스 박스 레이아웃이 추가될 떄, 같이 추가된 개념으로 <code>플렉스 박스는 1차원</code>, <code>그리드 레이아웃은 2차원</code>이라는 차이가 있습니다. 그리고 그리드 레이아웃도 플렉스 박스 레이아웃 속성 못지 않게 그리드 레이아웃 관련 속성이 굉장히 많습니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_8_3.png" alt="CSS_8_3"></p><hr><h2 id="2-1-grid-용어"><a href="#2-1-grid-용어" class="headerlink" title="2.1 grid 용어"></a>2.1 grid 용어</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_8_4.png" alt="CSS_8_4"></p><ul><li><code>그리드 컨테이너(grid container)</code> : 어떤 HTML 요소에  display: grid를 적용한 해당 요소<ul><li>레이아웃의 전체 내용을 담고 있는 최상위 부모 요소</li></ul></li><li><code>그리드 아이템(grid item)</code> : 컨테이너와 자식 관계에 있는 요소<ul><li>flexbox처럼 자식 요소만 그리드 아이템이 되며, 자손 요소는 아무것도 해당되지 않음</li></ul></li><li><code>그리드 셀(grid cell)</code> : 행과 열이 만나 이루어지는 하나의 공간<ul><li><code>행(row)</code> : 그리드 레이아웃에서 가로줄을 의미</li><li><code>열(column)</code> : 그리드 레이아웃에서 세로줄을 의미</li><li><code>그리드 트랙(grid track)</code> : 행과 열을 합쳐서 부르는 말<ul><li>그리드 라인 사이 공간을 의미</li></ul></li></ul></li><li><code>그리드 라인(grid line)</code> : 그리드 행과 열을 그리는 선</li><li><code>그리드 넘버(grid number)</code> : 그리드 라인에 붙는 번호</li><li><code>그리드 갭(grid gap)</code> : 그리드 셀과 그리드 셀 사이의 간격</li></ul><hr><h3 id="2-2-1-그리드-트랙"><a href="#2-2-1-그리드-트랙" class="headerlink" title="2.2.1 그리드 트랙"></a>2.2.1 그리드 트랙</h3><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_8_5.png" alt="CSS_8_5"></p><ul><li>그리드 라인 사이 공간을 그리드 트랙이라고 합니다.</li><li>방향에 따라 row track 또는 column track 으로 나눠지게 됩니다.</li><li>위 그림에서 강조된 트랙은 <code>row 2 / 3 그리드 라인 사이에 위치한 트랙</code>입니다</li></ul><hr><h2 id="2-2-준비"><a href="#2-2-준비" class="headerlink" title="2.2 준비"></a>2.2 준비</h2><h3 id="2-2-1-index-html"><a href="#2-2-1-index-html" class="headerlink" title="2.2.1 index.html"></a>2.2.1 index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;basic-style.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;grid.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS Grid Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item pink-color&quot;</span>&gt;</span>Item1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item2 blue-color&quot;</span>&gt;</span>Item2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item green-color&quot;</span>&gt;</span>Item3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item yellow-color&quot;</span>&gt;</span>Item4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item red-color&quot;</span>&gt;</span>Item5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item pink-color&quot;</span>&gt;</span>Item6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item blue-color&quot;</span>&gt;</span>Item7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item green-color&quot;</span>&gt;</span>Item8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item yellow-color&quot;</span>&gt;</span>Item9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item red-color&quot;</span>&gt;</span>Item10<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-style-css"><a href="#2-2-2-style-css" class="headerlink" title="2.2.2 style.css"></a>2.2.2 style.css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#181818</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pink-color</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#d7bee2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue-color</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a9c7d8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-color</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#c0df9f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.yellow-color</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2e5a6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red-color</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#e89d9d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-3-grid-css"><a href="#2-2-3-grid-css" class="headerlink" title="2.2.3 grid.css"></a>2.2.3 grid.css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="3-Grid-Containers"><a href="#3-Grid-Containers" class="headerlink" title="3. Grid Containers"></a>3. Grid Containers</h1><h2 id="3-1-display-Grid-선언"><a href="#3-1-display-Grid-선언" class="headerlink" title="3.1 display :  Grid 선언"></a>3.1 display :  Grid 선언</h2><p>rid Container(컨테이너)를 정의합니다. 정의된 컨테이너의 자식 요소들은 자동으로 Grid Items(아이템)로 정의됩니다.</p><blockquote><p>그리드를 사용하기 위해 컨테이너에 필수로 작성합니다!</p></blockquote><table><thead><tr><th align="center">값</th><th>의미</th></tr></thead><tbody><tr><td align="center"><code>grid</code></td><td>Block 특성의 Grid Container를 정의</td></tr><tr><td align="center"><code>inline-grid</code></td><td>Inline 특성의 Grid Container를 정의</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="comment">/* 📝 grid : 그리드 컨테이너를 만들기 위한 속성값, 그리드 레이아웃의 시작  */</span></span><br><span class="line">  <span class="comment">/* grid가 선언된 부모(container) 기준으로 자식(item)까지만 item으로 인식 */</span></span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-2-행과-열"><a href="#3-2-행과-열" class="headerlink" title="3.2 행과 열"></a>3.2 행과 열</h2><h3 id="3-2-1-grid-template-rows-행-크기"><a href="#3-2-1-grid-template-rows-행-크기" class="headerlink" title="3.2.1 grid-template-rows : 행 크기"></a>3.2.1 grid-template-rows : 행 크기</h3><p>명시적 행(Track)의 크기를 정의합니다. 동시에 라인(Line)의 이름도 정의할 수 있습니다.</p><ul><li><code>fr</code>(fraction, 공간 비율) 단위를 사용할 수 있습니다.</li><li><code>repeat()</code> 함수를 사용할 수 있습니다.</li></ul><blockquote><p>사용 방법은 <code>grid-template-columns</code>와 같습니다.</p></blockquote><hr><h3 id="3-2-2-grid-template-columns-열-크기"><a href="#3-2-2-grid-template-columns-열-크기" class="headerlink" title="3.2.2 grid-template-columns : 열 크기"></a>3.2.2 grid-template-columns : 열 크기</h3><p>명시적 열(Track)의 크기를 정의합니다. 동시에 라인(Line)의 이름도 정의할 수 있습니다.</p><ul><li><code>fr</code>(fraction, 공간 비율) 단위를 사용할 수 있습니다.</li><li><code>repeat()</code> 함수를 사용할 수 있습니다.</li></ul><blockquote><p>사용 방법은 <code>grid-template-rows</code>와 같습니다.</p></blockquote><hr><h3 id="3-3-3-예시"><a href="#3-3-3-예시" class="headerlink" title="3.3.3 예시"></a>3.3.3 예시</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/* 📝 행의 높이는 기본적으로 부모의 높이를 따라감 */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span>; <span class="comment">/* 1행 100, 1행 100 */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">150px</span> <span class="number">150px</span>; <span class="comment">/* 1열 150, 2열 150 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 📝 auto 값을 지정 */</span></span><br><span class="line">  <span class="comment">/* 행과 열의 크기를 그리드 컨테이너에 맞춰 자동 지정 */</span></span><br><span class="line">  <span class="comment">/* grid-template-columns : 100px auto; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3-Grid-Function"><a href="#3-3-Grid-Function" class="headerlink" title="3.3 Grid Function"></a>3.3 Grid Function</h2><h3 id="3-3-1-repeat"><a href="#3-3-1-repeat" class="headerlink" title="3.3.1 repeat()"></a>3.3.1 repeat()</h3><p><code>repeat()</code> 함수는 행&#x2F;열(Track)의 크기 정의를 반복합니다. ‘반복되는 횟수’와 ‘행&#x2F;열의 크기 정의’를 인수로 사용합니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/* 📝 일정 값을 row track에 반복하고 싶다면 Repeat() 함수를 사용 */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">100px</span>); <span class="comment">/* 50px을 2개의 행에 반복 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-3-2-minmax"><a href="#3-3-2-minmax" class="headerlink" title="3.3.2 minmax()"></a>3.3.2 minmax()</h3><p><code>minmax()</code> 함수는 행&#x2F;열(Track)의 ‘최소&#x2F;최대 크기’를 정의합니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/* 📝 최소 제한너비와 최대 제한 너비를 minmax() 함수를 이용 */</span></span><br><span class="line">  <span class="comment">/* minmax(최소, 최대) 함수 : 최소, 최대 값을 지정하는 함수 */</span></span><br><span class="line">  <span class="comment">/* 모든 셀 최소 제한 너비 200px / 모든 셀 최대 제한 너비 자동(container의 나머지 공간 모두) */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="built_in">minmax</span>(<span class="number">200px</span>, auto));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-fit-content"><a href="#3-3-3-fit-content" class="headerlink" title="3.3.3 fit-content()"></a>3.3.3 fit-content()</h3><p><code>fit-content()</code> 함수는 행&#x2F;열(Track)의 크기를 그리드 아이템(Item)이 포함하는 내용(Contents) 크기에 맞춥니다. ‘내용의 최대 크기’를 인수로 사용합니다.</p><hr><h2 id="3-4-Grid-Units"><a href="#3-4-Grid-Units" class="headerlink" title="3.4 Grid Units"></a>3.4 Grid Units</h2><h3 id="3-4-1-fr-fraction-분수-부분"><a href="#3-4-1-fr-fraction-분수-부분" class="headerlink" title="3.4.1 fr (fraction: 분수, 부분)"></a>3.4.1 fr (fraction: 분수, 부분)</h3><p><code>fr</code>(fractional unit)은 사용 가능한 공간에 대한 비율을 의미합니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr; <span class="comment">/* 1:1:1 비율로 적용 */</span></span><br><span class="line">  <span class="comment">/* 100px 1fr 1fr = 100px로 지정하고 나머지는 1:1 비율로 적용, 추천❌ */</span></span><br><span class="line">  <span class="comment">/* 단, grid-item이 독립적인 높이와 너비값을 가지고 있는 경우, grid-container를 초과하는 문제 발생 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-4-2-min-content"><a href="#3-4-2-min-content" class="headerlink" title="3.4.2 min-content"></a>3.4.2 min-content</h3><p>그리드 아이템이 포함하는 내용(Contents)의 최소 크기를 의미합니다.</p><h3 id="3-4-3-max-content"><a href="#3-4-3-max-content" class="headerlink" title="3.4.3 max-content"></a>3.4.3 max-content</h3><p>그리드 아이템이 포함하는 내용(Contents)의 최대 크기를 의미합니다.</p><h3 id="3-4-4-auto-fill-auto-fit"><a href="#3-4-4-auto-fill-auto-fit" class="headerlink" title="3.4.4 auto-fill, auto-fit"></a>3.4.4 auto-fill, auto-fit</h3><p>행&#x2F;열(Track)의 개수를 그리드 컨테이너(Container) 및 행&#x2F;열 크기에 맞게 자동으로(암시적) 조정합니다. <code>repeat()</code> 함수와 같이 사용하며, 행&#x2F;열과 아이템(Item) 개수가 명확할 필요가 없거나 명확하지 않은 경우 유용합니다.(반응형 그리드)</p><blockquote><p><code>auto-fill</code>과 <code>auto-fit</code>은 간단한 차이점을 제외하면 동일하게 동작합니다.</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/* 📝 auto-fill : 자동으로 채움 */</span></span><br><span class="line">  <span class="comment">/* 최소 10%의 너비로 자동으로 채우기 */</span></span><br><span class="line">  <span class="comment">/* grid-template-columns: repeat(auto-fill, minmax(10%, auto)); */</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 📝 반응형 웹을 만들 떄, auto-fill이 자주 사용됨 */</span></span><br><span class="line">  <span class="comment">/* 웹 브라우저 크기가 900px보다 크면 3개의 열 */</span></span><br><span class="line">  <span class="comment">/* 900px보다 작다면 보장이 되게끔 2개의 열로, 더 작다면 1개의 열로 줄어듬  */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="built_in">minmax</span>(<span class="number">300px</span>, auto));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>auto-fill</code>과 <code>auto-fit</code>은 차이점은 그리드 컨테이너가 하나의 행&#x2F;열(Track)에 모든 아이템을 수용하고 <strong>남는 공간이 있을 때</strong> 발생합니다.<br>다음과 같이 <code>auto-fill</code>은 남는 공간(빈 트랙)을 그대로 유지하고, <code>auto-fit</code>은 남는 공간을 축소합니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_8_6.png" alt="CSS_8_6"></p><hr><h2 id="3-5-gap-행열-간격-조정"><a href="#3-5-gap-행열-간격-조정" class="headerlink" title="3.5 gap : 행열 간격 조정"></a>3.5 gap : 행열 간격 조정</h2><p>그리드 갭(grid gap)은 <code>gap</code> 속성으로 지정할 수 있습니다. 속성값으로는 크기 단위(px, rem, %, …)를 사용할 수 있습니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="comment">/* 📝 gap : 행과 열을 기준으로 gap 지정 */</span></span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">20px</span> <span class="number">10px</span>; <span class="comment">/* 행간격 20px, 열간격 10px */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 📝 column-gap : 열을 기준으로 gap 지정 */</span></span><br><span class="line">  <span class="comment">/* 📝 row-gap : 행을 기준으로 gap 지정*/</span></span><br><span class="line">  <span class="comment">/* column-gap: 10px; 행간격 10px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_8_7.png" alt="CSS_8_7"></p><hr><h2 id="3-6-자동으로-행열-크기-조정"><a href="#3-6-자동으로-행열-크기-조정" class="headerlink" title="3.6 자동으로 행열 크기 조정"></a>3.6 자동으로 행열 크기 조정</h2><h3 id="3-6-1-grid-auto-rows-grid-auto-columns"><a href="#3-6-1-grid-auto-rows-grid-auto-columns" class="headerlink" title="3.6.1 grid-auto-rows, grid-auto-columns"></a>3.6.1 grid-auto-rows, grid-auto-columns</h3><ul><li><code>grid-auto-rows</code> : 암시적 행(Track)의 크기를 정의합니다.</li><li><code>grid-auto-columns</code> : 암시적 열(Track)의 크기를 정의합니다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="built_in">minmax</span>(<span class="number">150px</span>, auto);</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-7-주축-교차축-정렬"><a href="#3-7-주축-교차축-정렬" class="headerlink" title="3.7 주축, 교차축 정렬"></a>3.7 주축, 교차축 정렬</h2><h3 id="3-7-1-algin-content-justify-content"><a href="#3-7-1-algin-content-justify-content" class="headerlink" title="3.7.1 algin-content, justify-content"></a>3.7.1 algin-content, justify-content</h3><ul><li><code>algin-content</code><ul><li>그리드 콘텐츠(Contents)를 수직(열 축) 정렬합니다.</li><li>그리드 콘텐츠의 세로 너비가 그리드 컨테이너(Container)보다 작아야 합니다.</li></ul></li><li><code>justify-content</code><ul><li>그리드 콘텐츠(Contents)를 수평(행 축) 정렬합니다.</li><li>그리드 콘텐츠의 가로 너비가 그리드 컨테이너(Container)보다 작아야 합니다.</li></ul></li></ul><table><thead><tr><th align="center">값</th><th>의미</th></tr></thead><tbody><tr><td align="center">normal</td><td><code>stretch</code>와 같습니다. (기본값)</td></tr><tr><td align="center">start</td><td>시작점(위쪽) 정렬</td></tr><tr><td align="center">center</td><td>수직 가운데 정렬</td></tr><tr><td align="center">end</td><td>끝점(아래쪽) 정렬</td></tr><tr><td align="center">space-around</td><td>각 행 위아래에 여백을 고르게 정렬</td></tr><tr><td align="center">space-between</td><td>첫 행은 시작점에, 끝 행은 끝점에 정렬되고 나머지 여백으로 고르게 정렬</td></tr><tr><td align="center">space-evenly</td><td>모든 여백을 고르게 정렬</td></tr><tr><td align="center">stretch</td><td>열 축을 채우기 위해 그리드 콘텐츠를 늘림</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_8_8.png" alt="CSS_8_8"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">20%</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">20%</span>);</span><br><span class="line">  <span class="comment">/* 📝 justify-content : 그리드 아이템을 그리드 컨테이너 기준, 가로 방향에서 정렬 */</span></span><br><span class="line">  <span class="comment">/* 📝 align-content : 그리드 아이템을 그리드 컨테이너 기준, 세로 방향에서 정렬 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">  <span class="attribute">align-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-7-2-place-content"><a href="#3-7-2-place-content" class="headerlink" title="3.7.2 place-content"></a>3.7.2 place-content</h3><p><code>align-content</code>와 <code>justify-content</code>의 단축 속성입니다. 하나의 값만 입력하면 두 속성에 모두 적용됩니다.</p><blockquote><p>Edge(IE) 브라우저에서 지원하지 않는 속성입니다.</p></blockquote><hr><h2 id="3-8-주축-교차축-아이템-정렬"><a href="#3-8-주축-교차축-아이템-정렬" class="headerlink" title="3.8 주축, 교차축 아이템 정렬"></a>3.8 주축, 교차축 아이템 정렬</h2><h3 id="3-8-1-align-items-justify-items"><a href="#3-8-1-align-items-justify-items" class="headerlink" title="3.8.1 align-items, justify-items"></a>3.8.1 align-items, justify-items</h3><ul><li><code>align-items</code><ul><li>그리드 아이템(Items)들을 수직(열 축) 정렬합니다. </li><li>그리드 아이템의 세로 너비가 자신이 속한 그리드 행(Track)의 크기보다 작아야 합니다.</li></ul></li><li><code> justify-items</code><ul><li>그리드 아이템(Items)들을 수평(행 축) 정렬합니다.</li><li>그리드 아이템의 가로 너비가 자신이 속한 그리드 열(Track)의 크기보다 작아야 합니다.</li></ul></li></ul><table><thead><tr><th align="center">값</th><th>의미</th></tr></thead><tbody><tr><td align="center">normal</td><td><code>stretch</code>와 같습니다. (기본값)</td></tr><tr><td align="center">start</td><td>시작점(위쪽) 정렬</td></tr><tr><td align="center">center</td><td>수직 가운데 정렬</td></tr><tr><td align="center">end</td><td>끝점(아래쪽) 정렬</td></tr><tr><td align="center">stretch</td><td>열 축을 채우기 위해 그리드 아이템을 늘림</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_8_9.png" alt="CSS_8_9"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="comment">/* 📝 justify-items : 그리드 아이템을 그리드 셀 기준, 가로 방향에서 정렬 */</span></span><br><span class="line">  <span class="comment">/* 📝 align-items : 그리드 아이템을 그리드 셀 기준, 세로 방향에서 정렬 */</span></span><br><span class="line">  justify-items: stretch;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-8-2-place-items"><a href="#3-8-2-place-items" class="headerlink" title="3.8.2 place-items"></a>3.8.2 place-items</h3><p><code>align-items</code>와 <code>justify-items</code>의 단축 속성입니다. 하나의 값만 입력하면 두 속성에 모두 적용됩니다.</p><blockquote><p>Edge(IE) 브라우저에서 지원하지 않는 속성입니다.</p></blockquote><hr><h1 id="4-Grid-Items"><a href="#4-Grid-Items" class="headerlink" title="4. Grid Items"></a>4. Grid Items</h1><h2 id="4-1-주축-교차축-단일-아이템-정렬"><a href="#4-1-주축-교차축-단일-아이템-정렬" class="headerlink" title="4.1 주축, 교차축 단일 아이템 정렬"></a>4.1 주축, 교차축 단일 아이템 정렬</h2><h3 id="4-1-1-align-self-justify-self"><a href="#4-1-1-align-self-justify-self" class="headerlink" title="4.1.1 align-self, justify-self"></a>4.1.1 align-self, justify-self</h3><ul><li><code>align-self</code><ul><li>단일 그리드 아이템(Item)을 수직(열 축) 정렬합니다.</li><li>그리드 아이템의 세로 너비가 자신이 속한 그리드 행(Track)의 크기보다 작아야 합니다.</li></ul></li><li><code>justify-self</code><ul><li>단일 그리드 아이템(Item)을 수평(행 축) 정렬합니다.</li><li>그리드 아이템의 가로 너비가 자신이 속한 그리드 열(Track)의 크기보다 작아야 합니다.</li></ul></li></ul><table><thead><tr><th align="center">값</th><th>의미</th></tr></thead><tbody><tr><td align="center">normal</td><td><code>stretch</code>와 같습니다. (기본값)</td></tr><tr><td align="center">start</td><td>시작점(위쪽) 정렬</td></tr><tr><td align="center">center</td><td>수직 가운데 정렬</td></tr><tr><td align="center">end</td><td>끝점(아래쪽) 정렬</td></tr><tr><td align="center">stretch</td><td>열 축을 채우기 위해 그리드 아이템을 늘림</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_8_10.png" alt="CSS_8_10"></p><h3 id="4-1-2-place-self-단축-속성"><a href="#4-1-2-place-self-단축-속성" class="headerlink" title="4.1.2 place-self 단축 속성"></a>4.1.2 place-self 단축 속성</h3><p><code>align-self</code>와 <code>justify-self</code>의 단축 속성입니다. 하나의 값만 입력하면 두 속성에 모두 적용됩니다.</p><blockquote><p>Edge(IE) 브라우저에서 지원하지 않는 속성입니다.</p></blockquote><hr><h2 id="4-2-Grid-라인으로-통합"><a href="#4-2-Grid-라인으로-통합" class="headerlink" title="4.2 Grid 라인으로 통합"></a>4.2 Grid 라인으로 통합</h2><h3 id="4-2-1-grid-row-start-grid-row-end-grid-column-start-grid-column-end"><a href="#4-2-1-grid-row-start-grid-row-end-grid-column-start-grid-column-end" class="headerlink" title="4.2.1 grid-row-start, grid-row-end, grid-column-start, grid-column-end"></a>4.2.1 grid-row-start, grid-row-end, grid-column-start, grid-column-end</h3><p>그리드 아이템(Item)을 배치하기 위해 그리드 선(Line)의 ‘시작 위치’와 ‘끝 위치’를 지정합니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="built_in">minmax</span>(<span class="number">150px</span>, auto);</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">2</span>; <span class="comment">/* 2 ~ 4 이전까지 (2 ~ 3) */</span></span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-grid-row-grid-column"><a href="#4-2-2-grid-row-grid-column" class="headerlink" title="4.2.2 grid-row, grid-column"></a>4.2.2 grid-row, grid-column</h3><p>이를 짧게 줄여서 사용할 수도 있습니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="built_in">minmax</span>(<span class="number">150px</span>, auto);</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span> / <span class="number">4</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>라인을 카운트하기 귀찮으면 2개의 셀을 합치겠다는 의미로 <code>span</code> 키워드를 사용합니다. <code>span</code> 키워드와 ‘숫자’를 조합하면 ‘숫자’만큼 라인을 확장하는(<code>+</code>) 개념입니다. 명시하지 않으면 <code>span 1</code>이 기본값입니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="built_in">minmax</span>(<span class="number">150px</span>, auto);</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span> / span <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>제일 끝까지 하고 싶다면 -1을 지정하면 됩니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="built_in">minmax</span>(<span class="number">150px</span>, auto);</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span> / -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-3-Grid-area로-통합"><a href="#4-3-Grid-area로-통합" class="headerlink" title="4.3 Grid area로 통합"></a>4.3 Grid area로 통합</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;basic-style.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;grid.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS Grid Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item header pink-color&quot;</span>&gt;</span>Item1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item main blue-color&quot;</span>&gt;</span>Item2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item aside green-color&quot;</span>&gt;</span>Item3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item footer yellow-color&quot;</span>&gt;</span>Item4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-1-grid-template-areas-grid-area"><a href="#4-3-1-grid-template-areas-grid-area" class="headerlink" title="4.3.1 grid-template-areas, grid-area"></a>4.3.1 grid-template-areas, grid-area</h3><ul><li><code>grid-template-areas</code> : Container 적용</li><li><code>grid-area</code> : Item 적용</li></ul><p>지정된 그리드 영역 이름(<code>grid-area</code>)을 참조해 그리드 템플릿을 생성합니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">&#x27;header header header&#x27;</span></span><br><span class="line">    <span class="string">&#x27;main main aside&#x27;</span></span><br><span class="line">    <span class="string">&#x27;footer footer footer&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: header;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: main;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aside</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: aside;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_8_11.png" alt="CSS_8_11"></p><p><code>.</code>(마침표)를 사용하거나 명시적으로 <code>none</code>을 입력해 빈 영역을 정의할 수 있습니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">&#x27;header header header&#x27;</span></span><br><span class="line">    <span class="string">&#x27;main . .&#x27;</span></span><br><span class="line">    <span class="string">&#x27;main . aside&#x27;</span></span><br><span class="line">    <span class="string">&#x27;footer footer footer&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: header;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: main;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aside</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: aside;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_8_12.png" alt="CSS_8_12"></p><hr><h1 id="6-출처"><a href="#6-출처" class="headerlink" title="6. 출처"></a>6. 출처</h1><ul><li><a href="https://heropy.blog/2019/08/17/css-grid/">Heropy Tech CSS Grid 완벽 가이드</a></li></ul><hr><h1 id="7-실습-GRID-GARDEN"><a href="#7-실습-GRID-GARDEN" class="headerlink" title="7. 실습 : GRID GARDEN"></a>7. 실습 : GRID GARDEN</h1><p><a href="https://cssgridgarden.com/#ko">https://cssgridgarden.com/#ko</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML-CSS-JS </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tart-JS - 자바스크립트 DOM으로 조작</title>
      <link href="/2023/02/06/Front-Start-JS-DOM/"/>
      <url>/2023/02/06/Front-Start-JS-DOM/</url>
      
        <content type="html"><![CDATA[<h1 id="1-DOM이란"><a href="#1-DOM이란" class="headerlink" title="1. DOM이란?"></a>1. DOM이란?</h1><p>HTML에서 요소로 불리는 태그 등을 자바스크립트에서는 <code>문서 객체(Document Object)</code>라고 부른다.<br>즉, DOM은 <code>Document Objects Model</code>의 약자로 문서 객체를 조합해서 만든 전체적인 형태로 <strong>문서 객체 모델</strong>이라고 불린다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>보통 스크립트를 선언하는 위치는 head 태그 안에 위치한다.</p><p>그런데 이러한 경우 DOM을 조작하게 되면, 자바스크립트 코드가 실행된 후 HTML 태그들이 불러오므로 문제가 발생한다.<br>문제를 해결하는 방법은 2가지가 있는데</p><hr><h1 id="2-JS-코드-부르는-방법"><a href="#2-JS-코드-부르는-방법" class="headerlink" title="2. JS 코드 부르는 방법"></a>2. JS 코드 부르는 방법</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>첫 번째는 모든 태그들을 작성하고, body 태그 맨 마지막에 자바스크립트를 실행하는 방법</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 코드 작성</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>두 번째는 문서 전체에 해당하는 document에 <code>DOMContentLoaded 이벤트</code>를 사용하는 방법이다.</p><hr><h1 id="3-문서-객체를-가져오려면"><a href="#3-문서-객체를-가져오려면" class="headerlink" title="3. 문서 객체를 가져오려면"></a>3. 문서 객체를 가져오려면</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">head</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>;</span><br></pre></td></tr></table></figure><p>HTML 문서에서 당연히 있는 내용들은 태그별로 가져올 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;태그&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;아이디명&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;클래스명&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>그 외에 태그를 가져오려면 <code>getElementsByTagName</code></li><li>아이디로 가져오려면 <code>getElementById</code></li><li>클래스로 가져오려면 <code>getElementsByClassName</code>을 사용한다.</li></ul><p>그런데 이런 식으로 사용하면 하위 태그에 접근할 때마다 매번 사용해야 해서 불편하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(선택자);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(선택자);</span><br></pre></td></tr></table></figure><p>그래서 CSS 선택자를 사용하는 방식으로 가져오는 <code>querySelector</code>와 <code>querySelectorAll</code>을 사용할 것을 권장한다.</p><ul><li><code>querySelectorAll</code>은 여러 개를 배열로 가져오는 방식으로</li><li>내부에 하나하나 접근하려면 <code>forEach</code>를 같이 사용한다.</li></ul><hr><h1 id="4-문서-객체에-접근했다면"><a href="#4-문서-객체에-접근했다면" class="headerlink" title="4. 문서 객체에 접근했다면"></a>4. 문서 객체에 접근했다면</h1><h2 id="4-1-문자-HTML-형태로-넣기"><a href="#4-1-문자-HTML-형태로-넣기" class="headerlink" title="4.1 문자, HTML 형태로 넣기"></a>4.1 문자, HTML 형태로 넣기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">문서 객체.<span class="property">textContent</span></span><br><span class="line">문서 객체.<span class="property">innerHTML</span></span><br></pre></td></tr></table></figure><p>문서 객체 내에</p><ul><li>문자 그대로 넣는 <code>textContent</code></li><li>HTML 형식으로 넣는 <code>innerHTML</code></li></ul><hr><h2 id="4-2-속성-추가-수정-삭제"><a href="#4-2-속성-추가-수정-삭제" class="headerlink" title="4.2 속성 추가, 수정, 삭제"></a>4.2 속성 추가, 수정, 삭제</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">문서 객체.<span class="title function_">setAttribute</span>(속성 이름, 값)</span><br><span class="line">문서 객체.<span class="title function_">getAttribute</span>(속성 이름)</span><br></pre></td></tr></table></figure><ul><li>문서 객체의 속성을 추가하거나 수정할 때는 <code>setAttribute</code></li><li>문서 객체의 속성을 가져오려면 <code>getAttribute</code></li></ul><hr><h2 id="4-3-스타일-조작"><a href="#4-3-스타일-조작" class="headerlink" title="4.3 스타일 조작"></a>4.3 스타일 조작</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">문서 객체.<span class="property">style</span>.속성 = <span class="string">&quot;값&quot;</span></span><br></pre></td></tr></table></figure><p>문서 객체의 스타일을 조작할 때는 style로 접근할 수 있다.</p><ul><li>style 속성은 만약 <code>background-color</code>는 <code>backgroundColor</code>처럼</li><li><code>-</code> 기호 대신 <strong>카멜 케이스로 사용</strong>해야 한다.</li></ul><hr><h2 id="4-4-스타일-조작-classList"><a href="#4-4-스타일-조작-classList" class="headerlink" title="4.4 스타일 조작 - classList"></a>4.4 스타일 조작 - classList</h2><p>사실 스타일을 조적할 때 style로 접근하는 방식보다 미리 클래스에 스타일을 지정하고</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">문서 객체.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;클래스명&quot;</span>)</span><br><span class="line">문서 객체.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;클래스명&quot;</span>)</span><br><span class="line"></span><br><span class="line">문서 객체.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;클래스명&quot;</span>)</span><br><span class="line">문서 객체.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;클래스명&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>classList</code>로 해당 클래스를 추가, 삭제로 조작하는 것을 추천한다.</p><ul><li><code>contains</code>는 해당 클래스명 유무를 체크하는데,</li><li>있는지 없는지에 따라 if 조건문을 사용해도 되고</li><li>있다면 삭제, 없다면 추가를 알아서 해주는 toggle을 사용해도 된다.</li></ul><hr><h2 id="4-5-문서-객체-추가"><a href="#4-5-문서-객체-추가" class="headerlink" title="4.5 문서 객체 추가"></a>4.5 문서 객체 추가</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 자식 객체 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(문서 객체 이름)</span><br><span class="line">부모 객체.<span class="title function_">appendChild</span>(자식 객체)</span><br></pre></td></tr></table></figure><ul><li><code>createElement</code>로 문서 객체를 생성하고</li><li><code>appendChild</code>로 부모 객체에 자식 객체를 추가할 수 있다.</li></ul><hr><h2 id="4-6-문서-객체-삭제"><a href="#4-6-문서-객체-삭제" class="headerlink" title="4.6 문서 객체 삭제"></a>4.6 문서 객체 삭제</h2><p>반대로,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">부모 객체(문서 객체.<span class="property">parentNode</span>).<span class="title function_">removeChild</span>(자식 객체)</span><br></pre></td></tr></table></figure><p>부모 객체에서 자식 객체를 삭제할 수 있다.<br>만약 부모 객체에 접근해야 한다면 <code>parentNode</code>를 사용한다.</p><hr><h2 id="4-7-이벤트-추가"><a href="#4-7-이벤트-추가" class="headerlink" title="4.7 이벤트 추가"></a>4.7 이벤트 추가</h2><p>모든 문서 객체에는 클릭되거나 마우스를 위에 올리거나 등 이벤트를 가지고 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">문서 객체.<span class="title function_">addEventListener</span>(이벤트 이름, 함수)</span><br></pre></td></tr></table></figure><p><code>addEventListener</code>로 이벤트 이름과 함수를 지정하면, 문서 객체의 해당 이벤트가 실행되면 지정한 함수가 실행된다.</p><hr><h2 id="4-8-이벤트-삭제"><a href="#4-8-이벤트-삭제" class="headerlink" title="4.8 이벤트 삭제"></a>4.8 이벤트 삭제</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">문서 객체.<span class="title function_">removeEventListener</span>(이벤트 이름, 함수)</span><br></pre></td></tr></table></figure><p>반대로, 이벤트를 제거하고 싶다면 <code>removeEventListener</code>를 사용한다.</p>]]></content>
      
      
      <categories>
          
          <category> HTML-CSS-JS </category>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Start-CSS-07 - Flexbox 레이아웃</title>
      <link href="/2023/02/06/Front-Start-CSS-07-Flexible-Layout/"/>
      <url>/2023/02/06/Front-Start-CSS-07-Flexible-Layout/</url>
      
        <content type="html"><![CDATA[<h1 id="1-실습-워밍업"><a href="#1-실습-워밍업" class="headerlink" title="1. 실습 - 워밍업"></a>1. 실습 - 워밍업</h1><p>본격적으로 Flexible Box Layout을 공부하기 전에 워밍업 차원에서 실습 문제를 하나 풀어보겠습니다.<br>기본으로 제공되는 실습 코드를 실행하면 아래와 같이 보입니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_7_1.png" alt="CSS_7_1"></p><p>이를 아래와 같이 보일 수 있도록 CSS 스타일을 적용해주세요.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_7_2.png" alt="CSS_7_2"></p><hr><h2 id="1-1-HTML"><a href="#1-1-HTML" class="headerlink" title="1.1 HTML"></a>1.1 HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>[실습] 워밍업<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 기본 제공 HTML 코드 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item red-box&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item blue-box&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item green-box&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-2-CSS"><a href="#1-2-CSS" class="headerlink" title="1.2 CSS"></a>1.2 CSS</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 기본 제공 CSS 코드 */</span></span><br><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>문제를 푸는 방법은 크게 두 가지가 있습니다.</p><ol><li><code>float 속성을 사용해서 정렬하는 방법</code><ul><li>텍스트는 text-align 속성을 사용해서 center 값으로 지정하면 수평 방향에서 중앙으로 정렬할 수 있습니다.</li><li>그리고 수직 방향에서 중앙 정렬은 line-height 속성의 값을 HTML 요소의 높이 값과 똑같이 지정하면 됩니다.</li><li>(1.3)의 방법</li></ul></li><li><code>display 속성의 값으로 inline-block으로 지정하는 방법</code></li></ol><hr><h2 id="1-3-CSS-정답-float"><a href="#1-3-CSS-정답-float" class="headerlink" title="1.3 CSS 정답 - float"></a>1.3 CSS 정답 - float</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="comment">/* ⭐ 정렬을 위한 속성 추가 */</span></span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="2-Flexible-Box-Layout이란"><a href="#2-Flexible-Box-Layout이란" class="headerlink" title="2. Flexible Box Layout이란?"></a>2. Flexible Box Layout이란?</h1><blockquote><p>MDN Flexbox : <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox">https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox</a></p></blockquote><p><code>Flexible Box Layout</code>은 흔히 <code>Flexible Layout</code>라고도 불리며 <code>1차원 방식</code>으로 효과적으로 레이아웃을 설계할 수 있도록 고안된 레이아웃 스타일입니다. 여기서 <code>1차원</code>이란 <code>수평(가로, row)이나 수직(세로, column) 방향 중 한 방향으로만</code> 레이아웃을 설계하는 방식을 말합니다.</p><p><code>Flexible Box Layout</code>에는 이런 1차원 방식으로 HTML 요소를 디자인하는 속성들이 많이 추가되어서 과거보다 훨씬 간단하게 1차원 레이아웃을 구성할 수 있게 되었습니다. 워밍업으로 풀었던 CSS를 다시 보겠습니다.</p><hr><h2 id="2-1-CSS-정답-Flexbox"><a href="#2-1-CSS-정답-Flexbox" class="headerlink" title="2.1 CSS 정답 - Flexbox"></a>2.1 CSS 정답 - Flexbox</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="comment">/* 자식관계에 있는 요소만 flex되기 떄문에 자식의 자식에서 또 flex 적용 가능 */</span></span><br><span class="line">  <span class="attribute">display</span>: flex; <span class="comment">/* parent의 자식요소인 .box를 수평 정렬 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="comment">/* .box의 자식요소인 text를 정렬 */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="3-Flex-Container"><a href="#3-Flex-Container" class="headerlink" title="3. Flex Container"></a>3. Flex Container</h1><h2 id="3-1-display"><a href="#3-1-display" class="headerlink" title="3.1 display"></a>3.1 display</h2><p><code>display</code> 속성으로 Flex Container를 정의합니다.</p><table><thead><tr><th align="center">값</th><th>의미</th><th align="center">기본값</th></tr></thead><tbody><tr><td align="center">flex</td><td>Block 특성의 Flex Container를 정의</td><td align="center"></td></tr><tr><td align="center">inline-flex</td><td>Inline 특성의 Flex Container를 정의</td><td align="center"></td></tr></tbody></table><p><code>flex</code>와 <code>inline-flex</code>는 차이는 단순합니다.<br><code>display: flex;</code>로 지정된 Flex Container는 Block 요소와 같은 성향(수직 쌓임)을 가지며,<br><code>display: inline-flex</code>로 지정된 Flex Container는 Inline(Inline Block) 요소와 같은 성향(수평 쌓임)을 가집니다.</p><p>여기서 말하는 수직과 수평 쌓임은 Items가 아니라 Container라는 것에 주의합시다.<br>두 값의 차이는 내부에 Items에는 영향을 주지 않습니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_7_3.png" alt="CSS_7_3"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="comment">/* 플렉스 박스 레이아웃이 되고, 관련 속성을 사용할 수 있게 만듬 */</span></span><br><span class="line">  <span class="comment">/* 정렬을 적용하려는 요소의 부모 요소에 flex를 지정 */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-2-메인-축과-교차-축"><a href="#3-2-메인-축과-교차-축" class="headerlink" title="3.2 메인 축과 교차 축"></a>3.2 메인 축과 교차 축</h2><p>이렇게 수평정렬이 되는 이유를 알려면, Flexible Box Layout의 기본 개념이 필요합니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_7_4.png" alt="CSS_7_4"></p><ul><li><code>flex container</code><ul><li>메인축(main axis)과 교차축(cross axis) 개념이 생김</li><li>메인축의 기본값은 왼쪽에서 오른쪽으로</li><li>교차축의 기본값은 위에서 아래로</li></ul></li><li><code>flex item</code><ul><li>flex container의 자식 관계에 있는 아이템</li><li>메인축의 방향으로 배치됨</li><li>메인축의 방향이 바뀌게 되면, flex item의 배치도 변경됨 (<code>flex-direction</code>)</li></ul></li><li><code>시작점(flex-start)</code>과 <code>끝점(flex-end)</code></li></ul><hr><h3 id="3-2-1-flex-direction-메인-축-방향-결정"><a href="#3-2-1-flex-direction-메인-축-방향-결정" class="headerlink" title="3.2.1 flex-direction: 메인 축 방향 결정"></a>3.2.1 flex-direction: 메인 축 방향 결정</h3><p><code>container에 적용하는 속성</code>으로 container안의 item의 메인축 방향을 설정합니다.</p><table><thead><tr><th align="center">값</th><th>의미</th><th align="center">기본값</th></tr></thead><tbody><tr><td align="center">row</td><td>Itmes를 수평축(왼쪽에서 오른쪽으로)으로 표시</td><td align="center"><code>row</code></td></tr><tr><td align="center">row-reverse</td><td>Items를 <code>row</code>의 반대 축으로 표시</td><td align="center"></td></tr><tr><td align="center">column</td><td>Items를 수직축(위에서 아래로)으로 표시</td><td align="center"></td></tr><tr><td align="center">column-reverse</td><td>Items를 <code>column</code>의 반대 축으로 표시</td><td align="center"></td></tr></tbody></table><p>플렉스 박스 레이아웃은 기본으로 flex-direction 속성값이 row로 적용됩니다.<br>flex-direction 속성값에 따라 주축 방향과 플렉스 아이템 배치가 다음 그림처럼 달라집니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_7_5.png" alt="CSS_7_5"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="comment">/* 플렉스 박스 레이아웃이 되고, 관련 속성을 사용할 수 있게 만듬 */</span></span><br><span class="line">  <span class="comment">/* 정렬을 적용하려는 요소의 부모 요소에 flex를 지정 */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* 📝 flex-direction : 플렉스 컨테이너의 주축을 변경할 떄 사용 */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-2-2-justify-content-메인-축-정렬"><a href="#3-2-2-justify-content-메인-축-정렬" class="headerlink" title="3.2.2 justify-content: 메인 축 정렬"></a>3.2.2 justify-content: 메인 축 정렬</h3><p>주 축(main-axis)의 정렬 방법을 설정합니다.</p><table><thead><tr><th align="center">값</th><th>의미</th></tr></thead><tbody><tr><td align="center">flex-start</td><td>Items를 시작점(flex-start)으로 정렬 (기본값)</td></tr><tr><td align="center">flex-end</td><td>Items를 끝점(flex-end)으로 정렬</td></tr><tr><td align="center">center</td><td>Items를 가운데 정렬</td></tr><tr><td align="center">space-between</td><td>시작 Item은 시작점에, 마지막 Item은 끝점에 정렬되고 나머지 Items는 사이에 고르게 정렬됨</td></tr><tr><td align="center">space-around</td><td>Items를 균등한 여백을 포함하여 정렬</td></tr><tr><td align="center">space-evenly</td><td>플렉스 아이템 사이와 양끝의 간격이 균일하도록 정렬합니다.</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_7_6.png" alt="CSS_7_6"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="comment">/* 📝 justify-content : 주축의 방향에서 좌, 우, 중앙 정렬을 할 떄 사용 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-2-3-flex-wrap-줄바꿈"><a href="#3-2-3-flex-wrap-줄바꿈" class="headerlink" title="3.2.3 flex-wrap: 줄바꿈"></a>3.2.3 flex-wrap: 줄바꿈</h3><p>Items의 여러 줄 묶음(줄 바꿈)을 설정합니다.</p><table><thead><tr><th align="center">값</th><th>의미</th><th align="center">기본값</th></tr></thead><tbody><tr><td align="center">nowrap</td><td>모든 Itmes를 여러 줄로 묶지 않음(한 줄에 표시)</td><td align="center"><code>nowrap</code></td></tr><tr><td align="center">wrap</td><td>Items를 여러 줄로 묶음</td><td align="center"></td></tr><tr><td align="center">wrap-reverse</td><td>Items를 <code>wrap</code>의 역 방향으로 여러 줄로 묶음</td><td align="center"></td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_7_7.png" alt="CSS_7_7"></p><p>플렉스 박스 레이아웃은 플렉스 아이템의 개수를 늘려 플렉스 컨테이너를 초과하게 해도 플렉스 아이템이 절대로 줄 바꿈되지 않습니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">101px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3-align-content-교차축-정렬-2줄-이상"><a href="#3-3-align-content-교차축-정렬-2줄-이상" class="headerlink" title="3.3 align-content: 교차축 정렬 (2줄 이상)"></a>3.3 align-content: 교차축 정렬 (2줄 이상)</h2><p>교차 축(cross-axis)의 정렬 방법을 설정합니다. 주의할 점은 <code>flex-wrap</code> 속성을 통해 Items가 여러 줄(2줄 이상)이고 여백이 있을 경우만 사용할 수 있습니다.</p><blockquote><p>Items가 한 줄일 경우 <code>align-items</code> 속성을 사용하세요.</p></blockquote><table><thead><tr><th align="center">값</th><th>의미</th></tr></thead><tbody><tr><td align="center">stretch</td><td>Container의 교차 축을 채우기 위해 Items를 늘림 (기본값)</td></tr><tr><td align="center">flex-start</td><td>Items를 시작점(flex-start)으로 정렬</td></tr><tr><td align="center">flex-end</td><td>Items를 끝점(flex-end)으로 정렬</td></tr><tr><td align="center">center</td><td>Items를 가운데 정렬</td></tr><tr><td align="center">space-between</td><td>시작 Item은 시작점에, 마지막 Item은 끝점에 정렬되고 나머지 Items는 사이에 고르게 정렬됨</td></tr><tr><td align="center">space-around</td><td>Items를 균등한 여백을 포함하여 정렬</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_7_8.png" alt="CSS_7_8"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* 📝 align-content : 2줄 이상일 떄, 교차축 정렬 */</span></span><br><span class="line">  <span class="attribute">align-content</span>: center;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">101px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-4-align-items-교차축-정렬-1줄"><a href="#3-4-align-items-교차축-정렬-1줄" class="headerlink" title="3.4 align-items: 교차축 정렬 (1줄)"></a>3.4 align-items: 교차축 정렬 (1줄)</h2><p>교차 축(cross-axis)에서 Items의 정렬 방법을 설정합니다. Items가 한 줄일 경우 많이 사용합니다.</p><blockquote><p>주의할 점은 Items가 <code>flex-wrap</code>을 통해 여러 줄(2줄 이상)일 경우에는 <code>align-content</code> 속성이 우선합니다.<br>따라서 <code>align-items</code>를 사용하려면 <code>align-content</code> 속성을 기본값(<code>stretch</code>)으로 설정해야 합니다.</p></blockquote><table><thead><tr><th align="center">값</th><th>의미</th></tr></thead><tbody><tr><td align="center">stretch</td><td>Container의 교차 축을 채우기 위해 Items를 늘림 (기본값)</td></tr><tr><td align="center">flex-start</td><td>Items를 각 줄의 시작점(flex-start)으로 정렬</td></tr><tr><td align="center">flex-end</td><td>Items를 각 줄의 끝점(flex-end)으로 정렬</td></tr><tr><td align="center">center</td><td>Items를 가운데 정렬</td></tr><tr><td align="center">baseline</td><td>Items를 문자 기준선에 정렬</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_7_9.png" alt="CSS_7_9"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="comment">/* 📝 align-items : 교차축 방향에서 플렉스 아이템을 정렬할 떄 사용 */</span></span><br><span class="line">  <span class="comment">/* stretch : 교차축 방향을 꽉차게 늘리라는 의미, height가 지정되어 있으면 무시됨 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>; <span class="comment">/* stretch 속성값을 위해 height 지워보기 */</span></span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-5-flex-flow-단축-속성"><a href="#3-5-flex-flow-단축-속성" class="headerlink" title="3.5 flex-flow: 단축 속성"></a>3.5 flex-flow: 단축 속성</h2><p><code>container에 적용하는 속성</code>으로 flex-direction 속성과 flex-wrap 속성을 한 번에 사용할 수 있는 단축 속성입니다.<br>다음처럼 작성된 flex 속성이 있다고 해 봅시다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* flex-direction: column; */</span></span><br><span class="line">  <span class="comment">/* flex-wrap: nowrap; */</span></span><br><span class="line">  <span class="comment">/* flex-direction 속성과 flex-wrap 속성을 한 번에 사용할 수 있는 단축 속성 */</span></span><br><span class="line">  <span class="attribute">flex-flow</span>: column nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">101px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="4-Flex-Items"><a href="#4-Flex-Items" class="headerlink" title="4. Flex Items"></a>4. Flex Items</h1><p>HTML을 다음과 같이 수정하겠습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flexbox<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item red-box&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item blue-box&quot;</span>&gt;</span>BBBBB<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item green-box&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-1-order-Item의-순서를-설정"><a href="#4-1-order-Item의-순서를-설정" class="headerlink" title="4.1 order: Item의 순서를 설정"></a>4.1 order: Item의 순서를 설정</h2><p>Item의 순서를 설정합니다. Item에 숫자를 지정하고 숫자가 클수록 순서가 밀립니다. 음수가 허용됩니다.</p><blockquote><p>HTML 구조와 상관없이 순서를 변경할 수 있기 때문에 유용합니다.</p></blockquote><table><thead><tr><th align="center">값</th><th>의미</th><th align="center">기본값</th></tr></thead><tbody><tr><td align="center">숫자</td><td>Item의 순서를 설정</td><td align="center"><code>0</code></td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_7_10.png" alt="CSS_7_10"></p><hr><h2 id="4-2-flex-단축-속성"><a href="#4-2-flex-단축-속성" class="headerlink" title="4.2 flex 단축 속성"></a>4.2 flex 단축 속성</h2><p>Item의 너비(증가, 감소, 기본)를 설정하는 단축 속성입니다.</p><table><thead><tr><th align="center">값</th><th>의미</th><th align="center">기본값</th></tr></thead><tbody><tr><td align="center">flex-grow</td><td>Item의 증가 너비 비율을 설정</td><td align="center"><code>0</code></td></tr><tr><td align="center">flex-shrink</td><td>Item의 감소 너비 비율을 설정</td><td align="center"><code>1</code></td></tr><tr><td align="center">flex-basis</td><td>Item의 (공간 배분 전) 기본 너비 설정</td><td align="center"><code>auto</code></td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* flex: 증가너비 감소너비 기본너비; */</span></span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> <span class="number">20px</span>;  <span class="comment">/* 증가너비 감소너비 기본너비 */</span></span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span>;  <span class="comment">/* 증가너비 감소너비 */</span></span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span> <span class="number">20px</span>;  <span class="comment">/* 증가너비 기본너비 (단위를 사용하면 flex-basis가 적용됩니다) */</span></span><br></pre></td></tr></table></figure><hr><h3 id="4-2-1-flex-basis-기본-너비-설정"><a href="#4-2-1-flex-basis-기본-너비-설정" class="headerlink" title="4.2.1 flex-basis: 기본 너비 설정"></a>4.2.1 flex-basis: 기본 너비 설정</h3><p>Item이 감소하는 너비의 비율을 설정합니다. 숫자가 크면 더 많은 너비가 감소합니다.<br>Item이 가변 너비가 아니거나, 값이 0이면 효과가 없습니다.</p><table><thead><tr><th>값</th><th>의미</th><th>기본값</th></tr></thead><tbody><tr><td>숫자</td><td>Item의 감소 너비 비율을 설정</td><td><code>1</code></td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_7_11.png" alt="CSS_7_11"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="comment">/* 📝 flex-basis : flex-item의 기본 크기를 50으로 지정 */</span></span><br><span class="line">  <span class="comment">/* flex-item의 너비는 자동으로 content 너비만큼 적용됨 */</span></span><br><span class="line">  <span class="comment">/* 50px이 되지 않는 플렉스 아이템들은 50px로, 50px이 넘는 플렉스 아이템은 콘텐츠 너비만큼 적용  */</span></span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-2-2-flex-grow-증가-너비-비율-설정"><a href="#4-2-2-flex-grow-증가-너비-비율-설정" class="headerlink" title="4.2.2 flex-grow: 증가 너비 비율 설정"></a>4.2.2 flex-grow: 증가 너비 비율 설정</h3><p>Item의 증가 너비 비율을 설정합니다. 숫자가 크면 더 많은 너비를 가집니다. Item이 가변 너비가 아니거나, 값이 <code>0</code>일 경우 효과가 없습니다.</p><table><thead><tr><th align="center">값</th><th>의미</th><th align="center">기본값</th></tr></thead><tbody><tr><td align="center">숫자</td><td>Item의 증가 너비 비율을 설정</td><td align="center"><code>0</code></td></tr></tbody></table><p>모든 Items의 총 증가 너비(<code>flex-grow</code>)에서 각 Item의 증가 너비의 비율 만큼 너비를 가질 수 있습니다. 예를 들어, Item이 3개이고 증가 너비가 각각 <code>1</code>, <code>2</code>, <code>1</code>이라면,</p><ul><li>첫 번째 Item은 총 너비의 25%(1&#x2F;4)을,</li><li>두 번째 Item은 총 너비의 50%(2&#x2F;4)를,</li><li>세 번째 Item은 총 너비의 25%(1&#x2F;4)을 가지게 됩니다.</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_7_12.png" alt="CSS_7_12"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 📝 flex-grow : flex-basis의 크기 값을 제외하고 나머지 여백을 일정한 비율로 나눠가지는 속성 */</span></span><br><span class="line"><span class="comment">/* 속성값으로는 비율에 해당하는 값을 적용 */</span></span><br><span class="line"><span class="comment">/* 자식 요소에 1:2:1 비율로 적용함 */</span></span><br><span class="line"><span class="selector-class">.red-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-2-3-flex-shrink-감소-너비-비율을-설정"><a href="#4-2-3-flex-shrink-감소-너비-비율을-설정" class="headerlink" title="4.2.3 flex-shrink: 감소 너비 비율을 설정"></a>4.2.3 flex-shrink: 감소 너비 비율을 설정</h3><p>Item이 감소하는 너비의 비율을 설정합니다. 숫자가 크면 더 많은 너비가 감소합니다.<br>Item이 가변 너비가 아니거나, 값이 0이면 효과가 없습니다.</p><table><thead><tr><th align="center">값</th><th>의미</th><th align="center">기본값</th></tr></thead><tbody><tr><td align="center">숫자</td><td>Item의 감소 너비 비율을 설정</td><td align="center"><code>1</code></td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_7_13.png" alt="CSS_7_13"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="comment">/* 📝 flex-shrink : flex-item이 flex-basis 속성으로 설정된 크기보다 더 작아질 수 있는지 결정 */</span></span><br><span class="line">  <span class="comment">/* 속성값은 0 또는 1(기본값)을 사용 */</span></span><br><span class="line">  <span class="comment">/* 0은 작아질 수 없다, 1은 작아질 수 있다 */</span></span><br><span class="line">  <span class="comment">/* 브라우저의 너비가 줄어들어, flex-basis의 값이 보장되지 않을 떄 자동으로 줄어듬 */</span></span><br><span class="line">  <span class="comment">/* 이는 flex-shrink의 기본값이 1이기 때문 */</span></span><br><span class="line">  <span class="comment">/* 0으로 지정하면, 브라우저의 넓이가 flex-basis의 값이 보장되지 않을 때, 최소 크기를 보장받습니다. */</span></span><br><span class="line">  <span class="comment">/* 단, flexbox의 전체적인 영역은 브라우저 영역을 빠져나가면서 적용됨 */</span></span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-3-align-self-교차축에서-개별-item-정렬"><a href="#4-3-align-self-교차축에서-개별-item-정렬" class="headerlink" title="4.3 align-self : 교차축에서 개별 item 정렬"></a>4.3 align-self : 교차축에서 개별 item 정렬</h2><p>교차 축(cross-axis)에서 개별 Item의 정렬 방법을 설정합니다.<br><code>align-items</code>는 Container 내 모든 Items의 정렬 방법을 설정합니다.<br>필요에 의해 일부 Item만 정렬 방법을 변경하려고 할 경우 <code>align-self</code>를 사용할 수 있습니다.<br>이 속성은 <code>align-items</code> 속성보다 우선합니다.</p><table><thead><tr><th align="center">값</th><th>의미</th></tr></thead><tbody><tr><td align="center">auto</td><td>Container의 <code>align-items</code> 속성을 상속받음 (기본값)</td></tr><tr><td align="center">stretch</td><td>Container의 교차 축을 채우기 위해 Item을 늘림</td></tr><tr><td align="center">flex-start</td><td>Item을 각 줄의 시작점(flex-start)으로 정렬</td></tr><tr><td align="center">flex-end</td><td>Item을 각 줄의 끝점(flex-end)으로 정렬</td></tr><tr><td align="center">center</td><td>Item을 가운데 정렬</td></tr><tr><td align="center">baseline</td><td>Item을 문자 기준선에 정렬</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_7_14.png" alt="CSS_7_14"></p><hr><h2 id="4-4-word-break-콘텐츠-짤리면-줄넘김"><a href="#4-4-word-break-콘텐츠-짤리면-줄넘김" class="headerlink" title="4.4 word-break: 콘텐츠 짤리면 줄넘김"></a>4.4 word-break: 콘텐츠 짤리면 줄넘김</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-item</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="comment">/* 📝 모든 플렉스 아이템에 강제로 동일한 너비를 갖게하고 싶다면 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="comment">/* 이때, 콘텐츠가 짤리는 경우에 발생하는데, 이를 해결하려면 아래 코드 적용 */</span></span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.red-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="5-출처"><a href="#5-출처" class="headerlink" title="5. 출처"></a>5. 출처</h1><ul><li><a href="https://heropy.blog/2018/11/24/css-flexible-box/">Heropy Tech CSS Flex 완벽가이드</a></li></ul><hr><h1 id="6-Flex-게임-Flexbox-Froggy"><a href="#6-Flex-게임-Flexbox-Froggy" class="headerlink" title="6. Flex 게임 : Flexbox Froggy"></a>6. Flex 게임 : Flexbox Froggy</h1><p><a href="https://flexboxfroggy.com/#ko">https://flexboxfroggy.com/#ko</a></p><hr><h1 id="Level-1-4-justify-content"><a href="#Level-1-4-justify-content" class="headerlink" title="Level 1 ~ 4 : justify-content"></a>Level 1 ~ 4 : <strong>justify-content</strong></h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parent &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start; <span class="comment">/* flex-end, center, space-between, space-around, space-evenly */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>기본 축으로 정렬</strong>한다.</p><p>기본값은 flex-start로 자식 요소의 시작 방향으로 정렬한다.</p><ul><li><code>flex-end</code>은 종료 방향, center는 가운데 방향, </li><li><code>space-between</code>은 좌우 사이 간격을 균일하게, space-around는 주위 간격을 균일하게,</li><li><code>space-evenly</code>는 균일하게 배치하면서 양 끝의 간격에도 여백을 적용한다.</li></ul><hr><h1 id="Level-5-7-align-items"><a href="#Level-5-7-align-items" class="headerlink" title="Level 5 ~ 7 : align-items"></a>Level 5 ~ 7 : <strong>align-items</strong></h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parent &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start; <span class="comment">/* flex-end, center, space-between, space-around, space-evenly */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>반대 축으로 정렬</strong>한다. 값은<code> justy-content</code>와 동일하다.</p><hr><h1 id="Level-8-13-flex-direction"><a href="#Level-8-13-flex-direction" class="headerlink" title="Level 8 ~ 13 : flex-direction"></a>Level 8 ~ 13 : <strong>flex-direction</strong></h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parent &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row; <span class="comment">/* row-reverse, column, column-reverse */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자식 요소의 기본축 정렬 방향을 변경한다. 기본값은 row로 기본축을 가로로 지정한다.</p><ul><li><code>column</code>은 세로,</li><li><code>row-reverse</code>와 <code>column-reverse</code>는 각각 가로, 세로 역순으로 정렬한다.</li></ul><hr><h1 id="Level-14-15-order"><a href="#Level-14-15-order" class="headerlink" title="Level 14, 15 : order"></a>Level 14, 15 : <strong>order</strong></h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">child &#123;</span><br><span class="line">  <span class="attribute">order</span>: 숫자;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자식 요소의 순서를 지정한다.</p><hr><h1 id="Level-16-17-align-self"><a href="#Level-16-17-align-self" class="headerlink" title="Level 16, 17 : align-self"></a>Level 16, 17 : <strong>align-self</strong></h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">child &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: flex-start; <span class="comment">/* flex-end, center, space-between, space-around, space-evenly */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>선택한 자식 요소만 정렬을 바꿀 수 있다.</p><hr><h1 id="Level-18-19-flex-wrap"><a href="#Level-18-19-flex-wrap" class="headerlink" title="Level 18, 19 : flex-wrap"></a>Level 18, 19 : <strong>flex-wrap</strong></h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parent &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap; <span class="comment">/* wrap */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자식 요소에 줄 바꿈을 할지 적용한다. 기본값은 <code>nowrap</code>으로 줄 바꿈을 하지 않는다.<br>값을 <code>wrap</code>으로 하면 자식 요소들이 줄 바꿈을 한다.</p><hr><h1 id="Level-20-flex-flow"><a href="#Level-20-flex-flow" class="headerlink" title="Level 20 : flex-flow"></a>Level 20 : <strong>flex-flow</strong></h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parent &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: flex-direction flex-wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>flex-direction</code>과 <code>flex-wrap</code>을 한꺼번에 적용한다.</p><hr><h1 id="Level-21-24-align-content"><a href="#Level-21-24-align-content" class="headerlink" title="Level 21 ~ 24 : align-content"></a>Level 21 ~ 24 : <strong>align-content</strong></h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parent &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start; <span class="comment">/* flex-end, center, space-between, space-around, space-evenly */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>align-items</code>와 같은 축으로 정렬한다.</p><p>차이점은 <code>align-items</code>은 줄 바꿈이 없을 때 사용하고, <code>align-content</code>는 줄 바꿈이 있을 때 사용한다.</p><hr><h1 id="추가-flex-grow와-flex-shrink"><a href="#추가-flex-grow와-flex-shrink" class="headerlink" title="추가 : flex-grow와 flex-shrink"></a>추가 : flex-grow와 flex-shrink</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">child &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: 숫자;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: 숫자;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>flex-grow</code>는 기본값은 0으로, <ul><li>해당 숫자를 늘리면, 크기를 늘렸을 때 남은 공간만큼 다른 자식 요소들의 크기 대비 더 많이 늘어난다.</li></ul></li><li><code>flex-shrink</code>는 기본값은 1로, </li><li>해당 숫자를 늘리면 크기를 줄였을 때 다른 자식 요소들의 크기 대비 더 많이 줄어든다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML-CSS-JS </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Start-CSS-06 - Transform(변화)</title>
      <link href="/2023/02/06/Front-Start-CSS-06-Transform/"/>
      <url>/2023/02/06/Front-Start-CSS-06-Transform/</url>
      
        <content type="html"><![CDATA[<h1 id="1-transform-2d"><a href="#1-transform-2d" class="headerlink" title="1. transform-2d"></a>1. transform-2d</h1><p><code>transform</code>은 HTML <code>요소에 스타일을 변형시키기 위해서 사용</code>하는 속성입니다. 속성값으로는 함수 형태로 이루어진 translate(), scale(), skew(), rotate() 등을 사용할 수 있습니다.</p><table><thead><tr><th align="center">함수</th><th>설명</th></tr></thead><tbody><tr><td align="center"><code>translate(x, y)</code></td><td>요소를 현재 위치에서 x(x축)와 y(y축)만큼 이동합니다.</td></tr><tr><td align="center"><code>translateX(n)</code></td><td>요소를 현재 위치에서 n만큼 x축으로 이동합니다.</td></tr><tr><td align="center"><code>translateY(n)</code></td><td>요소를 현재 위치에서 n만큼 y축으로 이동합니다.</td></tr><tr><td align="center"><code>scale(x, y)</code></td><td>요소를 x(x축)와 y(y축)만큼 확대 또는 축소합니다.</td></tr><tr><td align="center"><code>scaleX(n)</code></td><td>요소를 n만큼 x축으로 확대 또는 축소합니다.</td></tr><tr><td align="center"><code>scaleY(n)</code></td><td>요소를 n만큼 y축으로 확대 또는 축소합니다.</td></tr><tr><td align="center"><code>skew(xdeg, ydeg)</code></td><td>요소를 x축과 y축으로 xdeg, ydeg(각도)만큼 기울입니다.</td></tr><tr><td align="center"><code>skewX(deg)</code></td><td>요소를 deg(각도)만큼 x축 방향으로 기울입니다.</td></tr><tr><td align="center"><code>skewY(deg)</code></td><td>요소를 주어진 deg(각도)만큼 y축 방향으로 기울입니다.</td></tr><tr><td align="center"><code>rotate(deg)</code></td><td>요소를 deg(각도)만큼 회전합니다.</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>트랜스폼(Transform)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 📝 translate(x, y) : HTML 요소의 위치를 X축 또는 Y축 위치로 이동 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* translateZ() : Z축(3D)으로 이동, translateX(), translateY()  */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* transform: translate(100px, 50px); */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 📝 scale(x축 배율, y축 배율) : HTML 요소의 x축 또는 y축 방향으로 확대, 기본값 1 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* transform: scale(2); */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 📝 skew(x축 각도, y축 각도) : HTML 요소의 x축 또는 y축 기준으로 지정된 각도만큼 비틀기 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 속성값은 각도를 의미하는 deg를 사용, 30deg = 30도 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* transform: skew(30deg); */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 📝 rotate(회전각도deg) HTML 요소의 지정한 각도만큼 시계방향으로 회전 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-1-transform-origin"><a href="#1-1-transform-origin" class="headerlink" title="1.1 transform-origin"></a>1.1 transform-origin</h2><p>앞에서 설명한 rotate() 함수는 작동 원리가 매우 간단합니다. 그런데 여기서 회전의 중심을 눈여겨봐야 합니다. 실행결과를 보면 요소가 회전할 때 요소의  중심을 기준으로 회전합니다. 이처럼 변형 관련 속성값들은 변형을 시작하는 기준점이 있습니다. 이 기준점은 항상 요소의 중심입니다. 그래서 기준점을 바꾸면 변형 효과가 다르게 적용됩니다. 변형 기준점은 transform-origin 속성으로 변경할 수 있습니다.</p><p>속성값에는 x축의 기준 위치와 y축의 기준 위치를 넣습니다. 위치는 % 단위나 정해진 키워드를 넣으면 되는데, 해당 속성에서 사용할 수 있는 키워드는 다음 표와 같습니다.</p><table><thead><tr><th align="center">축</th><th align="center">속성값</th><th>설명</th></tr></thead><tbody><tr><td align="center">x축</td><td align="center">left</td><td>왼쪽을 기준점으로 잡습니다.</td></tr><tr><td align="center">center</td><td align="center">중앙을 기준점으로 잡습니다.</td><td></td></tr><tr><td align="center">right</td><td align="center">오른쪽을 기준점으로 잡습니다.</td><td></td></tr><tr><td align="center">y축</td><td align="center">top</td><td>위쪽을 기준점으로 잡습니다.</td></tr><tr><td align="center">center</td><td align="center">중앙을 기준점으로 잡습니다.</td><td></td></tr><tr><td align="center">bottom</td><td align="center">아래쪽을 기준점으로 잡습니다.</td><td></td></tr></tbody></table><p>왼쪽 위 모서리를 기준으로 삼고 싶다면 다음과 같이 코드를 추가합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>rotate<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>); <span class="comment">/* 오른쪽으로 회전 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform-origin</span>: top left; <span class="comment">/* 왼쪽 위 모서리를 기준점으로 지정 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>코드를 실행하면 변경한 기준점에서 요소가 회전하는 것을 볼 수 있습니다.</p><hr><h1 id="2-transform-3d"><a href="#2-transform-3d" class="headerlink" title="2. transform-3d"></a>2. transform-3d</h1><p><code>transform</code>에는 translateZ(), scaleZ() 등 같은 Z축을 기준으로 다루는 속성값이 있습니다. 이 값들은 HTML 요소가 3D 공간에 있을 떄, 그 변화가 느껴지는 속성값들입니다. 일반적으로 웹 브라우저는 <code>X와 Y축의 좌표만 존재하는 2D 공간</code>에 있기 떄문에 <code>Z축에서 변형</code>되는 것들은 직접 눈으로 확인하기가 어렵습니다.</p><p>그래서 이러한 값들을 확인하기 위해 <code>HTML 요소를 3D 공간에 배치</code>할 필요가 생기는데, 그러기 위해서 사용하는 CSS 속성이 <code>perspective, transform-style</code> 속성입니다.</p><ul><li><code>perspective (원근감)</code> : 부모 요소에 적용하면 원근감을 생기게 합니다.<ul><li>하위 요소들의 transform 속성에 의한 변형이 원근감있게 관찰됨</li></ul></li><li><code>transform-style</code> : 하위 요소들을 3D 공간에 배치해서 다룰 수 있게 해줌</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>perspective, transform-style<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#e9e9e9</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">perspective</span>: <span class="number">1000px</span>; <span class="comment">/* 자식 요소를 바라볼 떄의 시야 거리(=관찰 거리) */</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* translateZ 값이 크면 모니터와 가까워지고, 작으면 모니터와 멀어짐  */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이해를 돕기 위해 예시 사이트로 가봅시다.</p><ul><li><a href="http://tridiv.com/app/">http://tridiv.com/app/</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>perspective, transform-style<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">4px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#e9e9e9</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">perspective</span>: <span class="number">1000px</span>; <span class="comment">/* 자식 요소를 바라볼 떄의 시야 거리(=관찰 거리) */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 크롬 개발자 도구로 rotateY를 조정해봅시다. */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* translateZ 값이 크면 모니터와 가까워지고, 작으면 모니터와 멀어짐  */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이 CSS 강의는 2D의 웹페이지를 만들어내는 것을 목표로 삼기에 여기까지 배우지만 이후에 3D를 배울 떄, 이 장의 개념만 제대로 숙지한다면 큰 도움이 될 것입니다.</p>]]></content>
      
      
      <categories>
          
          <category> HTML-CSS-JS </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Start-CSS-05 - 애니메이션</title>
      <link href="/2023/02/06/Front-Start-CSS-05-Animation/"/>
      <url>/2023/02/06/Front-Start-CSS-05-Animation/</url>
      
        <content type="html"><![CDATA[<h1 id="1-애니메이션이란"><a href="#1-애니메이션이란" class="headerlink" title="1. 애니메이션이란?"></a>1. 애니메이션이란?</h1><p><code>animation</code>이란 HTML <code>요소에 적용된 CSS 스타일이 다른 값으로 부드럽게 변하는 것</code>을 말합니다. 애니메이션을 제대로 이해하기 위해 간단하게 애니메이션 기법에 대해 알아보겠습니다. 웹(Web)에서는 애니메이션을 구현하는 기술적 부분에서 크게 2가지로 구분할 수 있습니다.</p><ul><li><p><code>frame by frame 방식</code></p><ul><li><code>여러 개의 프레임을 하나로 묶어서</code> 애니메이션을 만들어내는 기술적인 방법</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_5_1.png" alt="CSS_5_1"></p><ul><li><p><code>keyframe 방식</code></p><ul><li><code>시작점과 끝점의 애니메이션만 지정</code>하고, 그 사이의 과정은 생략하더라도 자연스럽게 이어줌</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_5_2.png" alt="CSS_5_2"></p><p>구현의 편리함 때문에 <code>CSS에서는 애니메이션 기법을 구현</code>할 떄, <code>keyframe 방식</code>으로 애니메이션으로 구현합니다.<br>애니메이션을 공부할 떄, 가장 중요한 것은 <code>키프레임(keyframe) 룰</code>을 지정하고 사용하는 법을 배우는 것이 핵심입니다.<br>그 외 애니메이션 관련 속성들은 트랜지션과 이름도 일부 비슷하고, 역할도 비슷합니다.</p><hr><h1 id="2-애니메이션-속성-1"><a href="#2-애니메이션-속성-1" class="headerlink" title="2. 애니메이션 속성 - 1"></a>2. 애니메이션 속성 - 1</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>애니메이션(Animation)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 📝 animation-name : 애니메이션을 적용할 키프레임 이름 정의 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-name</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 📝 animation-duration : 애니메이션이 진행되는 시간을 정의 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">3s</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* @keyframes : 애니메이션의 움직임을 정의 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* keyframe뒤에는 고유한 이름(식별자) 지정 */</span></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* &#x27;키프레임 룰&#x27; 또는 &#x27;키프레임 규칙&#x27;이라 부름 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 시작점 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin-left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 종료지점 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin-left</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-1-animation-name"><a href="#2-1-animation-name" class="headerlink" title="2.1 animation-name"></a>2.1 animation-name</h2><p>animation-name 속성은 특정 요소에서 적용할 키 프레임명을 지정합니다. 예를 들어, bgchange라는 이름의 키 프레임을 지정하고 싶다면 다음과 같이 작성합니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-name</span> : bgchange;</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-animation-duration"><a href="#2-2-animation-duration" class="headerlink" title="2.2 animation-duration"></a>2.2 animation-duration</h2><p>animation-duration 속성은 애니메이션을 지속할 시간을 설정합니다. 속성값으로는 초(s)나 밀리초(ms) 단위의 시간을 넣으면 됩니다.</p><hr><h2 id="2-3-animation-delay"><a href="#2-3-animation-delay" class="headerlink" title="2.3 animation-delay"></a>2.3 animation-delay</h2><p>animation-delay 속성을 사용하면 애니메이션 실행을 지연할 수 있습니다. 속성값으로는 초나 밀리초 단위의 시간을 넣으면 됩니다. 예를 들어, 다음 코드를 실행하면 애니메이션을 3초 뒤에 실행합니다.</p><hr><h1 id="3-애니메이션-속성-2"><a href="#3-애니메이션-속성-2" class="headerlink" title="3. 애니메이션 속성 - 2"></a>3. 애니메이션 속성 - 2</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>애니메이션(Animation)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 📝 animation-name : 애니메이션을 적용할 키프레임 이름 정의 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-name</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 📝 animation-duration : 애니메이션이 진행되는 시간을 정의 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">3s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 📝 animation-fill-mode : 애니메이션 종료 후의 동작 상태를 정의 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* none, forwards, backwards, both 값 사용 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* forwards는 애니메이션 종료 시점의 상태를 유지 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-fill-mode</span>: forwards;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 📝 animation-iteration-count : 애니메이션의 반복 횟수 정의 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 숫자나 infinite 값 사용 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-iteration-count</span>: infinite;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 📝 animation-direction : 애니메이션의 진행 방향을 지정 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* normal(기본값), reverse, alternate, alternate-reverse 값 사용 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* alternate : 순방향 -&gt; 역방향 -&gt; 순방향 -&gt; 역방향 -&gt; ..., 가장 자주 사용 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 순방향 : 키프레임의 0% -&gt; 100%방향으로 흘러감, normal */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 역방향 : 키프레임의 100% -&gt; 0%방향으로 흘러감, revesre */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-direction</span>: alternate;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 📝 animation-timing-function : 애니메이션의 진행 속도를 지정하는 속성 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* easy(기본값), linear(일정하게 동작)  */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-timing-function</span>: linear;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 📝 animation-delay : 애니메이션의 지연 시간을 지정하는 속성 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-delay</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 📝 animation-play-state : 애니메이션의 진행 상태를 지정하는 속성 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* paused(멈춤), running(진행, 기본값) */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-play-state</span>: running;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 📝 @keyframes : 애니메이션의 움직임을 정의 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* keyframe뒤에는 고유한 이름(식별자) 지정 */</span></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* from 대신 사용 가능, 시작점 */</span></span></span><br><span class="line"><span class="language-css">        <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin-left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 시작과 종료 사이에 오는 특정 시점들은 무조건 %로만 가능  */</span></span></span><br><span class="line"><span class="language-css">        <span class="number">30%</span> &#123;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* to 대신 사용 가능, 종료지점 */</span></span></span><br><span class="line"><span class="language-css">        <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin-left</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-1-animation-fill-mode"><a href="#3-1-animation-fill-mode" class="headerlink" title="3.1 animation-fill-mode"></a>3.1 animation-fill-mode</h2><p>애니메이션이 끝나도 원래 상태로 돌아가지 않고 애니메이션이 종료된 시점의 상태를 유지하길 원할 수도 있습니다. animation-fill-mode 속성은 애니메이션이 실행되기 전과 후의 스타일을 지정합니다. 사용할 수 있는 속성값은 다음 표와 같습니다.</p><table><thead><tr><th align="center">속성값</th><th align="center">상태</th><th>설명</th></tr></thead><tbody><tr><td align="center">none</td><td align="center">실행 전</td><td>시작 시점(0%, from)의 스타일을 적용하지 않고 대기합니다.</td></tr><tr><td align="center"></td><td align="center">실행 후</td><td>실행되기 전의 스타일 적용 상태로 돌아갑니다.</td></tr><tr><td align="center">forwards</td><td align="center">실행 전</td><td>시작 시점(0%, from)의 스타일을 적용하지 않고 대기합니다.</td></tr><tr><td align="center"></td><td align="center">실행 후</td><td>키 프레임에 정의된 종료 시점(100%, to)의 스타일을 적용하고 대기합니다.</td></tr><tr><td align="center">backwards</td><td align="center">실행 전</td><td>키 프레임에 정의된 시작 시점(0%, from)의 스타일을 적용하고 대기합니다.</td></tr><tr><td align="center"></td><td align="center">실행 후</td><td>실행되기 전의 스타일 적용 상태로 돌아갑니다.</td></tr><tr><td align="center">both</td><td align="center">실행 전</td><td>키 프레임에 정의된 시작 시점(0%, from)의 스타일을 적용하고 대기합니다.</td></tr><tr><td align="center"></td><td align="center">실행 후</td><td>키 프레임에 정의된 종료 시점(100%, to)의 스타일을 적용하고 대기합니다.</td></tr></tbody></table><p>animation-fill-mode 속성은 대부분 애니메이션이 종료된 후에 상태 유지를 목적으로 사용하기 때문에 forwards 속성값을 가장 많이 사용합니다.</p><hr><h2 id="3-2-animation-iterator-count"><a href="#3-2-animation-iterator-count" class="headerlink" title="3.2 animation-iterator-count"></a>3.2 animation-iterator-count</h2><p>애니메이션은 기본으로 1회 실행하고 종료됩니다. 이때 animation-iterator-count 속성을 사용하면 실행 횟수를 조절할 수 있습니다.</p><hr><h2 id="3-4-animation-play-state"><a href="#3-4-animation-play-state" class="headerlink" title="3.4 animation-play-state"></a>3.4 animation-play-state</h2><p>animation-play-state 속성은 애니메이션의 재생 상태를 지정합니다. 속성값으로는 다음 키워드를 사용할 수 있습니다.</p><table><thead><tr><th align="center">속성 값</th><th>설명</th></tr></thead><tbody><tr><td align="center"><code>paused</code></td><td>애니메이션의 실행을 일시 정지합니다.</td></tr><tr><td align="center"><code>running</code></td><td>애니메이션을 실행합니다.</td></tr></tbody></table><p>전환 효과 속성과 다르게 애니메이션 속성은 실행 도중에 일시 정지하거나 일시 정지했다가 다시  재생할 수 있습니다. 하지만 이렇게 작업하려면 순수 HTML과 CSS 코드만으로는 불가능하고 자바스크립트도 함께 사용해야 합니다.</p><hr><h2 id="3-5-animation-direction"><a href="#3-5-animation-direction" class="headerlink" title="3.5 animation-direction"></a>3.5 animation-direction</h2><p>animation-direction 속성은 애니메이션의 진행 방향을 지정합니다.</p><table><thead><tr><th align="center">속성 값</th><th>설명</th></tr></thead><tbody><tr><td align="center"><code>normal</code></td><td>애니메이션의 진행 방향을 키 프레임에 정의된 시간 순서대로 진행합니다(to → from).</td></tr><tr><td align="center"><code>reverse</code></td><td>애니메이션의 진행 방향을 키 프레임에 정의된 시간 순서의 역으로 진행합니다(from → to).</td></tr><tr><td align="center"><code>alternate</code></td><td>애니메이션이 1회 이상 실행될 경우 홀수 번째는 normal로, 짝수 번째는 reverse로 진행합니다.</td></tr><tr><td align="center"><code>alternate-reverse</code></td><td>애니메이션이 1회 이상 실행될 경우 홀수 번째는 reverse로, 짝수 번째는 normal로 진행합니다.</td></tr></tbody></table><p>애니메이션은 키 프레임에 정의한 순서대로 진행됩니다. 그런데 키 프레임을 어떠한 이유로 건드리지 못할 때, 애니메이션의 진행 방향은 수정하고 싶다면 animation-direction 속성을 사용합니다.</p><p>예를 들어, 다음처럼 속성을 정의하면 애니메이션의 진행 방향이 from(100%)에서 to(0%), 즉 키 프레임의 역순이 됩니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-direction</span> : reverse;</span><br></pre></td></tr></table></figure><blockquote><p>💡 animation-timing-function 속성</p><p>이 속성은 애니메이션의 속도를 지정할 때 사용합니다. 작동 방식이 transition-timing-function 속성과 똑같아서 여기서는 자세한 설명을 생략합니다. <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function%EC%9D%84">https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function을</a> 참고해 주세요.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTML-CSS-JS </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Start-CSS-04 - Transition(전환)</title>
      <link href="/2023/02/06/Front-Start-CSS-04-Transition/"/>
      <url>/2023/02/06/Front-Start-CSS-04-Transition/</url>
      
        <content type="html"><![CDATA[<h1 id="1-transition-duration"><a href="#1-transition-duration" class="headerlink" title="1. transition-duration"></a>1. transition-duration</h1><p><code>트랜지션(Transition, 전환)</code>이란 하나의 HTML 요소에 적용된 <code>스타일 속성 값이 다른 값으로 변경</code>되는 것을 말합니다. 트랜지션을 제어하기 위해 트랜지션 관련 속성들을 배워야 합니다.</p><p><code>transition-duration</code>은 트랜지션 효과를 몇 초에 걸쳐서 진행할지에 대한 시간을 지정할 떄 사용하는 속성입니다. 속성값으로 사용하는 시간 값을 적어주면 됩니다.</p><ul><li><code>ms</code> : millisecond (e.g. 1ms)</li><li><code>s</code> : second (e.g. 2s)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>트랜지션(Transition)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* Transition이 발생하는 주체에 작성 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 500ms - 0.5초에 걸쳐서 적용 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-duration</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 마우스를 올렸을 떄 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bar</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-transition-property"><a href="#2-transition-property" class="headerlink" title="2. transition-property"></a>2. transition-property</h1><p>transition-property는 <code>트랜지션 효과의 대상이 되는 CSS 속성을 명시</code>할 떄 사용하는 속성입니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>트랜지션(Transition)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* Transition이 발생하는 주체에 작성 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 500ms - 0.5초에 걸쳐서 적용 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-duration</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 배경색은 즉시 바뀌지만, 넓이는 2초에 걸쳐 변경됨 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 여러 값을 적용하고 싶으면 &#x27;속성, 속성&#x27;으로 작성 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* transition-property의 기본값은 all임 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-property</span>: width; <span class="comment">/* width 속성만 transition 효과 적용 */</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 마우스를 올렸을 떄 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bar</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-transition-timing-function"><a href="#3-transition-timing-function" class="headerlink" title="3. transition-timing-function"></a>3. transition-timing-function</h1><p><code>transition-timing-function</code>을 사용하면 <code>트랜지션 효과의 속도</code>를 지정할 수 있습니다. 속성값은 다음과 같습니다.</p><ul><li><code>ease</code> : 처음에는 속도가 점점 빨라지다가 중간부터 점점 느려집니다. (기본값)</li><li><code>linear</code> : 처음에는 속도가 점점 빨라지다가 중간부터 점점 느려집니다.</li><li><code>ease-in</code> : 처음에는 속도가 느리지만 완료될 때까지 점점 빨라집니다.</li><li><code>ease-out</code> : 처음에는 속도가 빠르지만 완료될 때까지 점점 느려집니다.</li><li><code>ease-in-out</code> : 처음에는 속도가 느리지만 점점 빨라지다가 다시 점점 느려집니다.</li><li><code>cubic-bezier()</code>  : 사용자 정의 속도<ul><li><a href="https://cubic-bezier.com/#.17,.67,.83,.67">https://cubic-bezier.com/#.17,.67,.83,.67</a></li><li>암기해서 사용하는 것은 비효율적이기에 위 사이트를 이용해 사용하는 것이 좋음</li><li>여기서 곡선을 조정하면 cubic-bezier() 값을 확인할 수 있습니다.</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>트랜지션(Transition)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-duration</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-property</span>: all;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.94</span>, -<span class="number">0.02</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bar</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-1-개발자-도구에서-속도-조절하기"><a href="#3-1-개발자-도구에서-속도-조절하기" class="headerlink" title="3.1 개발자 도구에서 속도 조절하기"></a>3.1 개발자 도구에서 속도 조절하기</h2><p>크롬의 개발자 도구에서 transition-timing-function 속성이 적용된 요소를 선택하면 그림과 같이 나옵니다.<br>그림에서 보라색 아이콘을 클릭하면, 사용자가 직접 곡선을 조정할 수 있는 화면이 나옵니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/SU_CSS_4_1.png" alt="SU_CSS_4_1"></p><p>여기서 전환 효과가 완료될 때까지의 속도를 정할 수 있습니다. 곡선의 두 점을 움직일 때마다 화면 위에 결과가 미리 보입니다.<br>원하는 효과대로 곡선을 조정하고 나면 곡선 아래 cubic-bezier() 값이 보이는데, 이 값을 복사해 속성값으로 넣으면 됩니다.</p><hr><h1 id="4-transition-delay"><a href="#4-transition-delay" class="headerlink" title="4. transition-delay"></a>4. transition-delay</h1><p><code>transition-delay</code>속성은 <code>트랜지션 효과가 발생하기 까지의 딜레이 시간</code>을 지정할 수 있습니다. 속성값은 시간값을 사용하여 지정합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>트랜지션(Transition)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-duration</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-property</span>: all;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.94</span>, -<span class="number">0.02</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-delay</span>: <span class="number">2s</span>; <span class="comment">/* 2초에 지연시간을 가진 후에 트랜지션 효과가 발생 */</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bar</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="5-transition-단축-속성"><a href="#5-transition-단축-속성" class="headerlink" title="5. transition 단축 속성"></a>5. transition 단축 속성</h1><p>지금까지 배운 속성들을 한 번에 지정할 수도 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>트랜지션(Transition)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* transition-duration: 2s;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        transition-property: all;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        transition-timing-function: cubic-bezier(0, 1, 0.94, -0.02);</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        transition-delay: 2s; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: <span class="number">2s</span> all <span class="built_in">cubic-bezier</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.94</span>, -<span class="number">0.02</span>) <span class="number">500ms</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bar</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> HTML-CSS-JS </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Start-CSS-03 - Position, Float 레이아웃</title>
      <link href="/2023/02/06/Front-Start-CSS-03-Position-Float/"/>
      <url>/2023/02/06/Front-Start-CSS-03-Position-Float/</url>
      
        <content type="html"><![CDATA[<h1 id="1-static-기본값"><a href="#1-static-기본값" class="headerlink" title="1. static (기본값)"></a>1. static (기본값)</h1><p>우리가 지금까지 배운 CSS 속성들은 HTML 요소를 <code>개별적으로 선택</code>하여 디자인을 변경하거나 꾸미기 위해서 사용한 속성이었습니다. 실제 CSS를 만들다보면 중요하다고 느끼는 것이 스타일이 적용된 <code>HTML 요소를 원하는 위치에 배치</code>하는 방법입니다. </p><p>HTML은 기본적으로 <code>박스 모델의 성격</code>에 따라서 <code>블록 또는 인라인 형태로</code> 요소들이 배치가 됩니다.</p><ul><li><code>블록 형태</code> : 하나의 요소가 웹 브라우저의 가로 한 줄을 차지하는 것</li><li><code>인라인 형태</code> : 웹 브라우저의 가로가 허용하는 범위 내에서 요소들이 한 줄로 배치되는 것</li></ul><p>위 2가지 HTML 요소의 기본 배치만으로는 웹페이지를 만들어 나감에 있어 부족합니다. HTML 요소들을 기본적인 블록 요소와 인라인 요소의 흐름에서 벗어나 조금 더 원하는 위치에 배치하기 위해서 <code>position 속성</code>을 제공하고 있습니다.</p><hr><p>position 속성의 <code>static</code> 값은 <code>모든 HTML 요소의 기본값</code>입니다. 위에서 HTML 요소는 요소가 가지고 잇는 박스 모델의 성격이 블록인지 인라인인지에 따라 결정된다고 했는데, 그 이유가 모든 HTML 요소의 position 속성 값의 기본값 static으로 지정되어 있기 때문입니다. 요컨대, 모든 HTML 요소는 position 속성의 값이 static으로 지정되어 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>position - static<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgray;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-orange</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-yellow</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child bg-red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child bg-orange&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child bg-yellow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>개발자 도구로 확인해보면 기본값으로 <code>position : static;</code>으로 적용된 것을 확인할 수 있습니다.</p><hr><h1 id="2-relative"><a href="#2-relative" class="headerlink" title="2. relative"></a>2. relative</h1><ul><li><code>자기 자신의 현재 위치를 기준으로</code> 움직입니다.</li><li>absolute의 기준으로 부모 위치를 잡을 때도 사용합니다.</li></ul><p><code>기본 위치(position X)</code></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_3_1.png" alt="CSS_3_1"></p><p><code>position : relative; right : 10px; 적용 시</code></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_3_2.png" alt="CSS_3_2"></p><p>position 속성을 <code>static이 아닌 다른 값으로 지정</code>하게 되면,<br><code>원하는 위치에 배치</code>하게 하기 위해 <code>좌표 속성</code>이라 불리는 top, right, bottom, left 속성을 추가로 사용할 수 있습니다.<br>단, position 속성값에 따라 조금씩 다르게 적용됩니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>position - relative<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgray;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 정중앙 정렬이라는 것만 이해, 뒤에서 다시 배움 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* static이 아닌 다른 값으로 지정하면, top, right, bottom, left 속성 사용 가능 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* top 속성값이 양수면 위에서 아래로, 음수면 아래에서 위로 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* right 속성값이 양수면 오른쪽에서 왼쪽으로, 음수면 왼쪽에서 오른쪽으로, left가 우선적용됨 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* right: 200px; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* bottom 속성값이 양수면 아래에서 위쪽으로, 음수면 위에서 아래로, top이 우선적용됨 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* bottom: 100px; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* left 속성값이 양수면 왼쪽에서 오른쪽으로, 음수면 오른쪽에서 왼쪽으로 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-orange</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-yellow</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child bg-red&quot;</span>&gt;</span>100x100<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child bg-orange&quot;</span>&gt;</span>100x100<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child bg-yellow&quot;</span>&gt;</span>100x100<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-absolute"><a href="#3-absolute" class="headerlink" title="3. absolute"></a>3. absolute</h1><ul><li><code>부모 위치를 기준으로 상대적으로</code> 위치를 움직입니다.</li><li>부모 기준은 가장 가까운 부모 기준 position 값을 인식합니다.(모든 position 가능)</li><li>부모 기준의 position 값이 없다면 브라우저의 가장 왼쪽, 맨위(0, 0)가 기준점</li></ul><p><code>기본 위치(position X)</code></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_3_1.png" alt="CSS_3_1"></p><p><code>position : absolute; right : 10px; 적용 시</code></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_3_3.png" alt="CSS_3_3"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>position - absolute<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgray;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 부모 요소의 position의 값이 있다면, (보통 relative로 설정)  */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* absolute는 가장 가까운 위치 지정 요소를 대상으로 기준점이 재설정됨 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 즉, 기준점이 브라우저 왼쪽맨위(0, 0)에서 부모 요소의 왼쪽맨위로 변경됨 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* static이 아닌 다른 값으로 지정하면, top, right, bottom, left 속성 사용 가능 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 공중에 붕 뜬것처럼 다른 요소들이 absolute가 적용된 요소 위치를 찾지 못함 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 좌표 속성의 기준점이 브라우저의 가장 왼쪽, 맨위(0, 0)이 기준이 됨 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 가장 가까운 위치 지정 요소를 대상으로 기준점이 재설정됨 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-orange</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-yellow</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child bg-red&quot;</span>&gt;</span>100x100<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child bg-orange&quot;</span>&gt;</span>100x100<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child bg-yellow&quot;</span>&gt;</span>100x100<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-fixed"><a href="#4-fixed" class="headerlink" title="4. fixed"></a>4. fixed</h1><ul><li>HTML 요소를 <code>좌표 속성으로 설정된 위치에 배치</code>하여 <code>고정</code>시킬 수 있습니다.</li><li>페이지 스크롤 길이와 관계없이 웹 브라우저 위치에 고정됩니다.</li><li>팝업 요소에 주로 사용합니다.</li><li>body를 기준으로 위치가 정해집니다.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>position - fixed<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 스크롤을 보이기 위해 작성 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">5000px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgray;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative; <span class="comment">/* 부모 요소에 또 다른 position */</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 요소가 공중에 붕 뜬것처럼 주변 요소들이 해당 요소들을 인식하지 못함 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 마우스 스크롤 여부와 상관없이 항상 해당 위치에 고정됨 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* absolute와 달리 부모 요소에 또 다른 position이 지정되어도 기준점이 재설정되지 않음  */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-orange</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-yellow</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child bg-red&quot;</span>&gt;</span>100x100<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child bg-orange&quot;</span>&gt;</span>100x100<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child bg-yellow&quot;</span>&gt;</span>100x100<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="5-sticky"><a href="#5-sticky" class="headerlink" title="5. sticky"></a>5. sticky</h1><p><code>sticky</code>는 <code>끈적거리는, 끈적끈적한, 달라붙는</code>라는 뜻으로, position 속성의 값을 sticky로 지정하면, HTML 요소를 <code>좌표 속성으로 설정된 위치에</code> 달라붙듯이 <code>고정</code>시킬 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>position - sticky<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 스크롤을 보이기 위해 작성 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">5000px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgray;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 부모 범위 내에서 마우스 스크롤을 내렸을 떄, 해당 위치로 고정됨 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 즉, 회색 영역인 paraent까지만 fixed처럼 작동함 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 지원하지 않는 브라우저(e.g. IE 등)이 존재 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* https://caniuse.com/?search=sticky */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: sticky;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-orange</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-yellow</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child bg-red&quot;</span>&gt;</span>100x100<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child bg-orange&quot;</span>&gt;</span>100x100<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child bg-yellow&quot;</span>&gt;</span>100x100<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="6-z-index-position-중첩순서-속성"><a href="#6-z-index-position-중첩순서-속성" class="headerlink" title="6. z-index : position 중첩순서 속성"></a>6. z-index : position 중첩순서 속성</h1><ul><li>-999 ~ 0 ~ +999 까지 순서를 정할 수 있습니다.(단위 작성안함)</li><li>중간 숫자가 필요할 시 입력이 편하도록 10단위 ~ 100단위의 큰 숫자를 위주로 많이 사용합니다.</li><li>position 속성이 들어간 대상에 사용할 수 있습니다.</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_3_4.png" alt="CSS_3_4"></p><hr><h1 id="7-float"><a href="#7-float" class="headerlink" title="7. float"></a>7. float</h1><ul><li><code>float : (물이나 공중에서) 뜨다</code></li></ul><p>HTML 요소의 위치를 지정하기 위해서 사용할 수 있는 또 다른 방법으로는 float 속성을 이용하는 방법이 있습니다.<br>float 속성은 HTML 요소의 위치를 <code>기본 위치에서 공중에 뜨게 하여 배치</code>하게 하는 원리입니다.<br>float 속성의 속성값으로는 left, right, none을 지정할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>float<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 📝 HTML요소가 공중으로 뜬 것처럼 적용되어 다른 HTML 요소가 인식하지 못함 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* left 값은 HTML 요소가 이동할 수 있는 왼쪽 끝으로 이동 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* right 값은 HTML 요소가 이동할 수 있는 오른쪽쪽 끝으로 이동 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 절대적인 좌표의 위치로 이동하는 것이 아니라 부모 요소의 왼쪽 끝으로 이동 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-orange</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 레드 박스의 왼쪽에 붙어서 배치됨 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* float이 적용된 요소와 float이 적용되지 않은 요소는 서로의 위치를 인식하지 못함 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 반대로, float이 적용된 요소끼리는 서로의 위치를 인식함 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.bg-green</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 오렌지 박스의 왼쪽에 붙어서 배치됨 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 📝 float 속성 취소, 사용할 일이 극히 적음 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* float: none; */</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-orange&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-green&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML-CSS-JS </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Start-CSS-02 - BEM 방법론과 자주 사용하는 속성</title>
      <link href="/2023/02/06/Front-Start-CSS-02-BEM-attribute/"/>
      <url>/2023/02/06/Front-Start-CSS-02-BEM-attribute/</url>
      
        <content type="html"><![CDATA[<h1 id="1-BEM-이란"><a href="#1-BEM-이란" class="headerlink" title="1. BEM 이란?"></a>1. BEM 이란?</h1><p>Block, Element, Modifier의 약어로 <code>block__element--modifier</code> 규칙으로 클래스명을 정한다.</p><p>각각의 모듈의 단어가 두 단어 이상일 경우 <code>-</code>으로 구분한다.<br>즉, <code>block-name__element-name--modifier-name</code> 이런 식으로!</p><ol><li><code>Block</code> : 어떤 목적으로 사용하는가를 담아야 한다.</li><li><code>Element</code> : Block을 구성하면서 Block 외부에서 독립적으로 사용할 수 없는 것을 의미한다.</li><li><code>Modifier</code>  <ul><li>형태, 상태, 움직임에 관해 지정할 때 사용한다.</li><li>독립적이지 않고 block과 element에서 변경된 사항이 있을 경우 사용한다.</li></ul></li></ol><hr><h1 id="2-reset-CSS"><a href="#2-reset-CSS" class="headerlink" title="2. reset CSS"></a>2. reset CSS</h1><p><a href="https://meyerweb.com/eric/tools/css/reset/">https://meyerweb.com/eric/tools/css/reset/</a></p><p>CSS를 다루기 전 리셋하는 걸 추천한다.<br>브라우저별 기본적으로 들어가는 스타일이 다르므로, 해당 스타일들을 공통적으로 맞추고 시작하는 것이 좋다.</p><hr><h1 id="3-Google-Fonts"><a href="#3-Google-Fonts" class="headerlink" title="3. Google Fonts"></a>3. Google Fonts</h1><p>구글 폰트를 사용하면 기본 폰트를 공통적으로 맞출 수 있으니 사용하는 것을 추천한다.</p><p>HTML 파일에 노출하지 않고 CSS 파일만 수정하면 되는 @import 방식을 추천한다.</p><hr><h1 id="4-CSS-변수-var"><a href="#4-CSS-변수-var" class="headerlink" title="4. CSS 변수 : var()"></a>4. CSS 변수 : var()</h1><p>CSS 변수는 예전에는 Sass나, LESS, Stylus와 같은 CSS 전처리기(CSS preprocessor)를 통해서 접할 수 있었던 기능이었습니다. 하지만 최근에는 CSS 스펙 자체에 CSS 변수 개념이 추가되어 이제 CSS 전처리기 없이도 부담없이 CSS 변수를 사용할 수 있게 되었습니다. CSS 사용자 속성(CSS custom properties)라고도 알려진 CSS 변수(CSS variables)에 대해서 알아보겠습니다.</p><hr><h2 id="4-1-CSS-변수-정의"><a href="#4-1-CSS-변수-정의" class="headerlink" title="4.1 CSS 변수 정의"></a>4.1 CSS 변수 정의</h2><p>CSS 변수가 CSS 사용자 속성이라고 불리는 이유는 CSS 일반 속성과 동일한 문법으로 정의가 가능하기 때문입니다. 기존의 CSS 일반 속성과 눈에 뛰는 차이점이라면 CSS 사용자 속성은 이름이 <code>--</code>로 시작해야 한다는 것입니다.</p><p>예를 들어, 아래 <code>--color</code> 속성은 우리가 새롭게 정의한 속성이며, CSS에 기존에 내장되어 있는 <code>color</code> 속성과는 다른 속성입니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ex</span> &#123;</span><br><span class="line">  <span class="attr">--color</span>: red;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>글자색을 지정해주는 <code>color</code> 속성과 달리 <code>--color</code> 속성은 그 존재만으로는 아무런 스타일 효과를 내지 못합니다.</p><hr><h2 id="4-2-CSS-변수-접근-var"><a href="#4-2-CSS-변수-접근-var" class="headerlink" title="4.2  CSS 변수 접근 var()"></a>4.2  CSS 변수 접근 var()</h2><p>CSS 변수가 스타일하는데 사용되려면 읽어서 일반 CSS 속성에 설정을 해야 합니다. CSS 변수값을 읽으려면 <code>var()</code> 함수를 사용합니다. 예를 들어, 다음과 같이 <code>--gray</code> 속성에 저장된 CSS 변수값을 읽어서 <code>background</code> 속성에 할당할 수 있습니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ex</span> &#123;</span><br><span class="line">  <span class="attr">--gray</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--gray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-3-CSS-변수-기본값"><a href="#4-3-CSS-변수-기본값" class="headerlink" title="4.3 CSS 변수 기본값"></a>4.3 CSS 변수 기본값</h2><p><code>var()</code> 함수는 두번째 인자로 기본값을 받는데요. CSS 변수에 접근할 때 해당 CSS 변수가 이미 정의되어 있는지 확실치 않는 경우에 활용할 수 있습니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ex</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--color, black);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 스타일 정의는 <code>--color</code> 변수가 정의가 되어 있는 경우에는 그 변수값이 <code>color</code> 속성으로 사용되고, 그렇지 않는 경우에는 <code>black</code>이 대신 <code>color</code> 속성값으로 지정됩니다.</p><hr><h2 id="4-4-CSS-전역-변수-root"><a href="#4-4-CSS-전역-변수-root" class="headerlink" title="4.4 CSS 전역 변수 :root"></a>4.4 CSS 전역 변수 :root</h2><p>CSS 변수는 웹사이트에 일관적으로 스타일하기 위해서 많이 사용됩니다. 대표적으로, 웹사이트에서 사용 가능한 모든 색상을 CSS 전역 변수로 정의해놓고, 웹사이트에서 사용되는 색상을 제약하는 경우를 들 수 있습니다.</p><p>CSS 변수를 최상위 엘리먼트에 정의해놓으면 마치 전역 변수처럼 DOM 트리 내에서 어디에서든지 CSS 변수에 접근할 수 있습니다. 보통 <code>:root</code>, <code>html</code>, <code>body</code> 선택자를 이용해서 CSS 전역 변수를 정의합니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--color-success</span>: <span class="number">#23d160</span>;</span><br><span class="line">  <span class="attr">--color-error</span>: <span class="number">#f14668</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 정의한 CSS 변수는 해당 웹사이트의 어떤 엘리먼트에서든지 <code>var()</code> 함수로 접근하여 스타일할 때 사용할 수 있습니다.</p><hr><h2 id="4-5-사용-예시"><a href="#4-5-사용-예시" class="headerlink" title="4.5 사용 예시"></a>4.5 사용 예시</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 변수<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attr">--color-success</span>: <span class="number">#21723d</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attr">--color-error</span>: <span class="number">#f14668</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">li</span><span class="selector-class">.success</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="built_in">var</span>(--color-success);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">li</span><span class="selector-class">.error</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="built_in">var</span>(--color-error);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;success&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>성공<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>오류<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="5-color"><a href="#5-color" class="headerlink" title="5. color"></a>5. color</h1><p>CSS의 스타일 속성 중에서 색상을 값으로 사용하는 속성이 여러 개 있습니다.</p><h2 id="5-1-키워드-표기법"><a href="#5-1-키워드-표기법" class="headerlink" title="5.1 키워드 표기법"></a>5.1 키워드 표기법</h2><p>키워드 표기법은 색상의 영문명을 속성값으로 사용하는 방법입니다.<br>CSS에서 사용할 수 있는 색상 키워드의 종류는 150여 개 이상입니다.<br>VSCode에서 속성값 자동 완성 기능으로 사용 가능한 키워드 색상을 보여 주기  때문에 색상을 모두 외울 필요는 없습니다.</p><blockquote><p><a href="https://www.w3.org/wiki/CSS/Properties/color/keywords">W3C - CSS 사용가능한 키워드 표기법</a></p></blockquote><hr><h2 id="5-2-RGB-색상-표기법"><a href="#5-2-RGB-색상-표기법" class="headerlink" title="5.2 RGB 색상 표기법"></a>5.2 RGB 색상 표기법</h2><p>RGB 색상 표기법에서 <code>RGB</code>는 <code>Red, Green, Blue</code>를 의미하는데,<br>빨간색, 초록색, 파란색을 이용해 특정 색을 표현하는 방법입니다.<br>여기에 추가로 <code>색의 투명도</code>를 의미하는 <code>알파(alpha) 값</code>을 사용할 수도 있습니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_2_1.png" alt="CSS_2_1"></p><ul><li>RGB 값을 256개 숫자(0~255)로 표기합니다. <ul><li>가장 낮은 색 값은 0이고 높은 색 값은 255입니다.</li></ul></li><li>알파 값은 0.1처럼 0부터 1 사이의 소수점으로 표기합니다. <ul><li>이때 앞의 정수 부분  0은 생략할 수 있어서 .1로 표기해도 됩니다.</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">/* 빨간색 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, .<span class="number">5</span>); <span class="comment">/* 0.5의 투명도를 가진 초록색 */</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-3-HEX-표기법"><a href="#5-3-HEX-표기법" class="headerlink" title="5.3 HEX 표기법"></a>5.3 HEX 표기법</h2><p><code>HEX 표기법</code>은 <code>Red, Green, Blue에 해당하는 값을 각각 16진수로 변환해 00~ff로 나타내는 표기법</code>입니다.<br>16진수 표기법이라고도 하며, 실무에서 가장 많이 사용하는 색상 표기법입니다.</p><p>HEX 표기법은 앞에 #을 붙이는 것이 특징입니다.</p><ul><li>00이 가장 낮은 값이고 ff가 가장 높은 값이어서 #ff0000은 빨간색,  #00ff00은 초록색, #0000ff는 파란색을 의미</li><li>R, G, B에 해당하는 16진수가 같다면 줄여서 표기 가능<ul><li>e.g.) #ff0000은 #f00으로, #335533은 #353으로 표기 가능</li></ul></li></ul><blockquote><p>색상 표기법에는 HLS 표기법도 있습니다.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>다양한 색상값 표현법<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: red; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">h2</span> &#123; <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>); &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">h3</span> &#123; <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0.5</span>); &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">h4</span> &#123; <span class="attribute">color</span>: <span class="number">#ff0000</span>; &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>키워드 표현법<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>rgb 표현법<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>rgba 표현법<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>16진수 표현법<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="6-글자"><a href="#6-글자" class="headerlink" title="6. 글자"></a>6. 글자</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">선택자 &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Noto Sans KR&#x27;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--main-color);</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>font-weight</code> : 글자 굵기</li><li><code>font-size</code> : 글자 크기</li><li><code>font-family</code> : 글자 모양</li><li><code>color</code>: 글자 색상</li><li><code>text-align</code> : 정렬</li><li><code>letter-spacing</code> : 자간<ul><li><code>자간</code>은 <u>글자 사이의 간격</u>을 말하며, 속성값으로 normal 또는 크기를 넣을 수 있음</li></ul></li></ul><hr><h2 id="6-1-행간"><a href="#6-1-행간" class="headerlink" title="6.1 행간"></a>6.1 행간</h2><ul><li><code>line-height</code>: 줄 간격, 행간</li></ul><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_2_2.png" alt="CSS_2_2" style="zoom: 80%;" /><ul><li>웹페이지에 텍스트를 쓰게되면 위아래에 임의의 공간이 발생합니다. </li><li>이를 정식 명칭으로 <code>리딩(leading) 영역</code>이라고 합니다. </li><li>리딩 영역이 자동으로 생기는 이유는 여러 줄의 텍스트가 생성되었을 떄, </li><li>글자와 글자 사이에 간격을 주어 가독성을 높이기 위함입니다.</li></ul><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_2_3.png" alt="CSS_2_3" style="zoom:80%;" /><ul><li>line-height의 높이를 임의적으로 조절하고 싶을 떄,</li><li><code>line-height</code> 속성을 사용하면 됩니다. 참고로 <strong>폰트 글꼴의 디자이너가 임의로 만든 공간은 CSS로 제어가 불가능</strong>합니다.</li><li>line-height로 크기를 정할 떄는, px단위보다는 em단위를 사용하는 것을 권장합니다.</li><li>왜냐하면 화면이 줄었을 떄, px단위로 지정하면 글자들이 겹쳐서 보이게 될 수 있기 때문입니다.</li></ul><hr><h1 id="7-크기를-나타내는-단위"><a href="#7-크기를-나타내는-단위" class="headerlink" title="7. 크기를 나타내는 단위"></a>7. 크기를 나타내는 단위</h1><p>폰트 크기를 나타내는 단위는 굉장히 많습니다. em, px, rem 정도만 알아도 충분합니다.</p><blockquote><p><a href="https://developer.mozilla.org/ko/docs/Learn/CSS/Building_blocks/Values_and_units">MDN CSS 값과 단위</a></p></blockquote><p>CSS 속성은 다양한 단위의 값을 사용할 수 있는데, 단위는 절대 단위와 상대 단위로 나뉩니다.</p><ul><li><code>절대 단위</code>는 <u>어떤 환경이라도 동일한 크기로 보이는 단위</u>를 말하고,</li><li><code>상대 단위</code>는 <u>부모 요소 또는 웹 브라우저의 창 크기에 따라 상대적으로 결정되는 단위</u>를 말합니다.</li></ul><hr><h2 id="7-1-절대-단위-px-픽셀"><a href="#7-1-절대-단위-px-픽셀" class="headerlink" title="7.1 절대 단위, px(픽셀)"></a>7.1 절대 단위, px(픽셀)</h2><p>절대 단위는 px(pixel) 한 가지로, 모니터의 화면을 구성하는 사각형 1개의 크기를 의미합니다.<br>CSS에서 사용할 수 있는 크기 단위 중 가장 기본입니다.<br>웹 브라우저에서 다른 단위로 값을 지정하더라도 결국 px 단위로 환산되어 계산됩니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>px<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 화면(브라우저)의 너비가 크든, 줄어들든 텍스트이 크기는 고정적임 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      hello, PX!</span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="7-2-상대-단위"><a href="#7-2-상대-단위" class="headerlink" title="7.2 상대 단위"></a>7.2 상대 단위</h2><p>CSS에서 자주 사용하는 상대 단위는 다음과 같습니다.</p><table><thead><tr><th align="center">단위</th><th>설명</th></tr></thead><tbody><tr><td align="center"><code>%</code></td><td>해당 속성의 <u>상위 요소 속성값에 상대적인 크기</u>를 가집니다.</td></tr><tr><td align="center"><code>em</code></td><td><u>부모 요소의 텍스트 크기에 상대적인 크기</u>를 가집니다.</td></tr><tr><td align="center"><code>rem</code></td><td><u>html 태그의 텍스트 크기에 상대적인 크기</u>를 가집니다.</td></tr><tr><td align="center"><code>vw</code></td><td><u>뷰포트의 너비를 기준으로 상대적인 크기</u>를 가집니다.</td></tr><tr><td align="center"><code>vh</code></td><td><u>뷰포트의 높이를 기준으로 상대적인 크기</u>를 가집니다.</td></tr></tbody></table><p>각 단위의 사용법은 font-size 속성을 예시로 설명하겠습니다. font-size 속성은 텍스트 크기를 지정하는 속성입니다.</p><h3 id="7-2-1"><a href="#7-2-1" class="headerlink" title="7.2.1 %"></a>7.2.1 %</h3><p>% 단위는 부모 요소의 속성값에 따라 상대적인 크기를 가집니다. 그래서 어떤 속성을 사용했는지에 따라 기준이 다르게 잡힙니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span> : <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123; <span class="comment">/* 부모 요소 font-size 속성값의 80%에 해당하는 크기로 설정 */</span></span><br><span class="line">  <span class="attribute">font-size</span> : <span class="number">80%</span>; <span class="comment">/* 16px(부모 font-size 크기) * 0.8 = 12.8px */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child-to-child</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span> : <span class="number">80%</span>; <span class="comment">/* 12.8px(부모 font-size 크기) * 0.8 = 10.24px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-2-em"><a href="#7-2-2-em" class="headerlink" title="7.2.2 em"></a>7.2.2 em</h3><p>부모 태그의 현재 폰트크기에 영향을 받는 상대적인 크기를 의미합니다.<br>em을 배우기 전 사전지식이 필요합니다.<br>보통의 HTML 태그는 브라우저의 기본 스타일 시트 또는 외부 CSS에 의해서 폰트 크기에 영향을 받지 않는다고 가정한다면,<br>HTML 태그의 <code>기본 폰트 크기는 16px</code>입니다.</p><p>em 단위는 부모 요소의 텍스트 크기(font-size)를 기준으로 상대적인 크기를 가집니다.<br>% 단위는 사용되는 속성에 따라 기준이 달라지지만, em 단위는 오로지 텍스트 크기를 기준으로 삼습니다.<br>만약 값을 2em으로 지정했다면 자식 요소의 크기는 부모 요소의 font-size 속성값의 2배가 됩니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span> : <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span> : <span class="number">2em</span>; <span class="comment">/* 16px(부모 font-size 크기) * 2em = 32px */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child-to-child</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span> : <span class="number">2em</span>; <span class="comment">/* 32px(부모 font-size 크기) * 2em = 64px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-3-rem"><a href="#7-2-3-rem" class="headerlink" title="7.2.3 rem"></a>7.2.3 rem</h3><p>rem은 root em의 약자로, em처럼 부모 태그의 폰트 크기에 의해서 상대적으로 결정되는 단위이긴 하지만<br>em과 결정적인 차이점은 부모 태그가 아니라 root(최상단), 즉 최상단 태그인 html태그의 폰트 크기에만 영향을 받는다는 게 다릅니다.</p><p>rem 단위는 html 태그의 텍스트 크기에 대한 상대적인 값으로, 1rem은 html 태그의 텍스트 크기의 1배입니다.<br>현대적인 웹 브라우저는 모두 html 태그의 텍스트 크기가 16px이라서 1rem은 16px과 같습니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span> : <span class="number">1rem</span>; <span class="comment">/* 현대적인 웹 브라우저는 모두 html 태그의 기본 텍스트 크기가 16px⭐ */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span> : <span class="number">1rem</span>; <span class="comment">/* 16px * 1rem = 16px */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span> : <span class="number">2rem</span>; <span class="comment">/* 16px * 2rem = 32px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-4-vw"><a href="#7-2-4-vw" class="headerlink" title="7.2.4 vw"></a>7.2.4 vw</h3><p>vw 단위는 뷰포트 너비를 기준으로 상대적인 크기를 가집니다.<br>뷰포트는 간단히 말해 코드가 보이는 대상이라고 생각하면 됩니다.<br>따라서 웹이나 모바일에서는 웹 브라우저 창의 너비가 뷰포트 너비가 됩니다. 1vw는 뷰포트 너비의  1&#x2F;100 크기를 의미합니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 기준 뷰포트 너비 900px */</span></span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span> : <span class="number">1vw</span>; <span class="comment">/* 900px * 1/100 = 9px */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span> : <span class="number">2vw</span>; <span class="comment">/* 900px * 2/100 = 18px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-5-vh"><a href="#7-2-5-vh" class="headerlink" title="7.2.5 vh"></a>7.2.5 vh</h3><p>vh 단위는 뷰포트 높이를 기준으로 상대적인 크기를 말하며, 1vh는 뷰포트 높이의 1&#x2F;100 크기를 의미합니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 기준 뷰포트 높이 400px */</span></span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span> : <span class="number">1vh</span>; <span class="comment">/* 400px * 1/100 = 4px */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span> : <span class="number">2vh</span>; <span class="comment">/* 400px * 2/100 = 8px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="8-글꼴-및-구글-웹-폰트"><a href="#8-글꼴-및-구글-웹-폰트" class="headerlink" title="8. 글꼴 및 구글 웹 폰트"></a>8. 글꼴 및 구글 웹 폰트</h1><h2 id="8-1-font-family-속성"><a href="#8-1-font-family-속성" class="headerlink" title="8.1 font-family 속성"></a>8.1 font-family 속성</h2><p>font-family 속성을 사용하면 <code>글꼴을 지정</code>할 수 있습니다. 우리가 사용할 수 있는 폰트는 2가지가 있습니다. </p><ul><li><code>시스템 기본 폰트</code> : 시스템에서 기본으로 사용할 수 있는 기본 폰트<ul><li>별도의 폰트 파일 필요없음</li></ul></li><li><code>제작된 폰트</code> : 별도의 폰트 파일 필요함</li></ul><p>우선 시스템 기본 폰트를 알아보겠습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>font-family<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 여러 글꼴을 쉼표로 구분해 나열하면 맨 앞에 작성한 글꼴부터 적용 가능 여부를 판단 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: BatangChe, <span class="string">&quot;Times New Roman&quot;</span>, serif; </span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 시스템 기본 폰트는 글꼴명만 작성 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 한글로 된 글꼴이나 공백이 있는 글꼴명은 큰따옴표(&quot;&quot;)로 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>font-family<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>font-family 속성으로 명시한 글꼴을 불러오지 못할 경우를 대비해 다음과 같이 불러오려고 한 글꼴과 가장 유사한 형태의 글꼴 유형을 마지막에 항상 지정해야 합니다. 그러면 지정한 글꼴을 불러오지 못하더라도 텍스트가 유사한 형태로 보여져 사용자가 웹 사이트에서 느끼는 경험을 최대한 일정하게 유지할 수 있습니다. 사용할 수 있는 글꼴 유형은 표와 같습니다.</p><table><thead><tr><th align="center">글꼴 유형</th><th>설명</th></tr></thead><tbody><tr><td align="center">serif</td><td>삐침이 있는 명조 계열의 글꼴</td></tr><tr><td align="center">sans-serif</td><td>삐침이 없고 굵기가 일정한 고딕 계열의 글꼴</td></tr><tr><td align="center">monospace</td><td>텍스트 폭과 간격이 일정한 글꼴</td></tr><tr><td align="center">fantasy</td><td>화려한 글꼴</td></tr><tr><td align="center">cursive</td><td>손으로 쓴 것 같은 필기체 계열의 글꼴</td></tr></tbody></table><hr><h2 id="8-2-제작된-폰트"><a href="#8-2-제작된-폰트" class="headerlink" title="8.2 제작된 폰트"></a>8.2 제작된 폰트</h2><p>웹 페이지에 표시되는 <code>텍스트의 폰트를 변경</code>하고자 할 떄는 font-family를 사용할 수 있습니다. 우리가 사용할 수 있는 폰트는 크게 2가지로 구분할 수 있습니다.</p><ul><li>시스템 기본 폰트<ul><li>시스템에서 기본으로 사용할 수 있는 기본 폰트</li><li><code>별도의 폰트 파일이 필요없음</code></li></ul></li><li>제작된 폰트<ul><li><code>별도의 폰트 파일이 필요함</code></li></ul></li></ul><p>예를 들어, 네이버에서 제공하는 ‘나눔 고딕’ 폰트를 적용시키기 위해 다음과 같이 작성했다고 가정해봅시다. ‘나눔 고딕’은 네이버에서 별보로 제작된 폰트이기 떄문에 시스템에서 기본으로 지원되지 않습니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-family</span> : <span class="string">&#x27;Nanum Gothic;, sans-serif;</span></span><br></pre></td></tr></table></figure><p>만약 내 사이트에 방문한 사용자의 접속 기기에 ‘나눔 고딕’ 글꼴이 설치되어져 있다면 상관없지만, 만약 설치가 되어져 있지 않다면, 아무리 font-family 속성으로 ‘나눔 고딕’을 적용했다고 하더라도 그 사용자는 접속 기기에 나눔 글꼴이 없기 때문에 해당 사이트를 나눔글꼴로 이용할 수 없습니다.</p><p>그래서 보통 제작된 폰트를 사용할 떄는 <code>내가 지정한 폰트를 직접 사이트에 업로드</code>해서 사이트를 접속한 사용자의 접속 환경에 해당 폰트가 없더라도 내가 <code>업로드한 폰트를 참조</code>하게 해서 보이도록 처리를 해야합니다.</p><ul><li>폰트 파일을 직접 업로드하는 방법</li><li>웹 폰트를 이용하는 방법</li></ul><hr><h3 id="8-2-1-폰트-파일을-직접-업로드"><a href="#8-2-1-폰트-파일을-직접-업로드" class="headerlink" title="8.2.1 폰트 파일을 직접 업로드"></a>8.2.1 폰트 파일을 직접 업로드</h3><p>원하는 폰트를 다운로드받고 assets&#x2F;fonts안에 집어넣습니다.</p><ul><li><a href="https://hangeul.naver.com/font">https://hangeul.naver.com/font</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">project명</span><br><span class="line">┝ index.html</span><br><span class="line">┝ style.css</span><br><span class="line">┝ assets/fonts</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Font File<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&#x27;MyWebFont&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;./assets/font/NanumGothic-Regular&#x27;</span>); <span class="comment">/* IE9 Compat Modes */</span></span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;./assets/font/NanumGothic-Regular?#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">     <span class="built_in">url</span>(<span class="string">&#x27;./assets/font/NanumGothic-Regular.woff2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>),</span><br><span class="line">     <span class="built_in">url</span>(<span class="string">&#x27;./assets/font/NanumGothic-Regular.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">     <span class="built_in">url</span>(<span class="string">&#x27;./assets/font/NanumGothic-Regular.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">     <span class="built_in">url</span>(<span class="string">&#x27;./assets/font/NanumGothic-Regular.svg#svgFontName&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;MyWebFont&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="8-2-2-웹-폰트를-이용"><a href="#8-2-2-웹-폰트를-이용" class="headerlink" title="8.2.2 웹 폰트를 이용"></a>8.2.2 웹 폰트를 이용</h3><p>먼저 많이 사용되는 구글 Web Font에 가서 원하는 폰트의 링크를 가져옵니다. 여기서는 Poppins폰트를 적용합니다.</p><ul><li><a href="https://fonts.google.com/specimen/Poppins?query=poppins">https://fonts.google.com/specimen/Poppins?query=poppins</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preconnect&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preconnect&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.gstatic.com&quot;</span> <span class="attr">crossorigin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Poppins&amp;display=swap&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Google Web Font<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preconnect&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preconnect&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.gstatic.com&quot;</span> <span class="attr">crossorigin</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Poppins&amp;display=swap&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Poppins&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 import 방식으로 적용하고 싶은 경우에는 다음과 같이 적용합니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;https://fonts.googleapis.com/css2?family=Poppins&amp;display=swap&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Poppins&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="9-박스-모델"><a href="#9-박스-모델" class="headerlink" title="9. 박스 모델"></a>9. 박스 모델</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">선택자 &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--default-color);</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>width</code>는 너비,  <code>height</code>은 높이</p></li><li><p><code>margin</code>은 바깥 여백 (<strong>외부 여백</strong>)</p></li><li><p><code>padding</code>은 안쪽 여백 (<strong>내부 여백</strong>)</p><ul><li>헷갈리면 겨울에 입는 패딩(내부 충전재)라고 생각하면 됨</li></ul></li><li><p><code>border</code>는 테두리 (<strong>경계선</strong>)</p></li><li><p><code>box-sizing</code>은 박스 크기를 어디를 기준으로 할 것인지 지정</p></li></ul><hr><h2 id="9-1-박스의-성질"><a href="#9-1-박스의-성질" class="headerlink" title="9.1 박스의 성질"></a>9.1 박스의 성질</h2><p>모든 HTML 요소는 각각의 박스 모델을 가지고 있습니다.</p><ul><li><code>블록 레벨 박스(block-level box)</code> <ul><li>웹 브라우저의 가로 한 줄을 전부 차지하는 박스 형태</li><li>e.g.) h1, p, div</li></ul></li><li><code>인라인 레벨 박스(lnline-level box)</code><ul><li>태그 요소의 콘텐츠 영역 만큼만 차지하는 박스 형태</li><li>e.g.) a, span</li></ul></li></ul><p><code>display</code> 속성을 사용하면 태그가 가지고 있는 박스 모델의 성격을 다른 것으로 변경할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>display<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">h1</span>, <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* inline | block | inline-block */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline; <span class="comment">/* 인라인 레벨로 변경 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">a</span>, <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* inline | block | inline-block */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block; <span class="comment">/* 블록 레벨로 변경 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 블록 레벨 박스(block-level box) | h1, p --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1 tag<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p tag<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 인라인(lnline-level box) | a, span --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>a tag<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span tag<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>lnline-block는 기본적으로 lnline 성격을 가지면서, block 레벨도 혼합되어 있는 상태입니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>display<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">h1</span>, <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* inline | block | inline-block */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block; <span class="comment">/* 인라인-블록 레벨으로 변경 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">a</span>, <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 블록 레벨 박스(block-level box) | h1, p --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1 tag<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p tag<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 인라인(lnline-level box) | a, span --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>a tag<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span tag<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="9-2-object-fit-border-radius"><a href="#9-2-object-fit-border-radius" class="headerlink" title="9.2 object-fit, border-radius"></a>9.2 object-fit, border-radius</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">선택자 &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--main-color);</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그 외에 </p><ul><li><code>background-color</code>는 <strong>배경색을 지정</strong>할 수 있고,</li><li><code>object-fit</code>을 사용하면 <strong>이미지를 특정 크기로</strong> 채울 수 있고,</li><li><code>border-radius</code>를 50%로 하면 <strong>사각형을 원으로</strong> 바꿀 수 있다.</li></ul><hr><h2 id="9-1-margin-겹침-현상"><a href="#9-1-margin-겹침-현상" class="headerlink" title="9.1 margin 겹침 현상"></a>9.1 margin 겹침 현상</h2><p>margin 영역을 다루다 보면 흔하게 겪는 일 중 하나가 바로 <code>margin 겹침 현상(margin collapse)</code>입니다.<br>margin 겹침 현상은 <u>인접한 margin 값이 둘 중 더 큰 값으로 통일되는 것</u>을 말합니다.<br>어떤 두 요소가 있는데 첫 번째 요소에는 margin 값이 아래쪽에 20px이 적용됐고,<br>두 번째 요소에는 margin 값이 위쪽으로 30px이 적용됐다고  가정해 보겠습니다. 이를 그림으로 표현하면 다음과 같습니다.</p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CSS_2_4.png" alt="CSS_2_4" style="zoom:67%;" /><p>두 요소 사이의 간격은 <u>20px과 30px을 합한</u> 50px이 될 것 같지만, 실제로는 <u>30px이 적용</u>됩니다. 이러한 현상이 바로 <code>margin 겹침 현상</code>입니다. 이는 같은 레벨(형제 관계)에 있는 요소들의 margin 영역이 중첩되면 더 큰 값을 가진 margin 영역으로 병합되어 출력되는 현상입니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>margin collpase<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.first</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.second</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>lorem1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;second&quot;</span>&gt;</span>lorem2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>코드를 개발자 도구로 확인해보면, 속성값이 더 큰, 아래 요소의 값이 적용되어 두 요소 사이의 간격은 30px이 됨을 확인할 수 있습니다.</p><hr><h1 id="10-그림자-효과-주기"><a href="#10-그림자-효과-주기" class="headerlink" title="10. 그림자 효과 주기"></a>10. 그림자 효과 주기</h1><p>HTMl 요소가 가지고 있는 박스에 그림자 효과를 주기 위해 사용하는 속성은 <code>box-shadow</code>입니다. </p><ul><li><code>box-shadow: [x-pos] [y-pos] [blur] [spread] [color] inset</code><ul><li><code>x-pos</code> : 그림자의 가로 위치<ul><li>양수면 오른쪽, 음수면 왼쪽에 생성됩니다.</li></ul></li><li><code>y-pos</code> : 그림자의 세로 위치<ul><li>양수면 아래쪽, 음수면 위쪽에 생성됩니다.</li></ul></li><li><code>blur</code> : 번짐(&#x3D;흐림) 정도</li><li><code>spread</code> : 퍼짐 정도</li><li><code>inset</code> : 그림자가 요소 내부에 생기게 할 떄 사용</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>box-shadow<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* box-shadow: [x-pos] [y-pos] [blur] [spread] [color] inset */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* box-shadow: 10px 10px 8px 4px black; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* box-shadow: -10px -10px 8px 4px black; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">0px</span> <span class="number">0px</span> black inset;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="11-배경-이미지"><a href="#11-배경-이미지" class="headerlink" title="11. 배경 이미지"></a>11. 배경 이미지</h1><h2 id="11-1-background-image-배경-이미지"><a href="#11-1-background-image-배경-이미지" class="headerlink" title="11.1 background-image 배경 이미지"></a>11.1 background-image 배경 이미지</h2><p>HTML 요소의 <code>배경에 색상이 아니라 이미지를 지정</code>할 때, 사용하는 속성은 <code>background-image</code>입니다.</p><ul><li>배경이미지는 배경색상보다 우선순위로 높게 처리됩니다.</li><li>e.g.) background-color:yellow; background-image:url(…) 두 가지 값이 적용되었다면, yellow가 아닌 url()이 먼저 나타납니다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span> : <span class="built_in">url</span>(<span class="string">상대경로</span>)</span><br><span class="line">background-image : <span class="built_in">url</span>(<span class="string">절대경로</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 배경이미지 2개 이상 연결하기 */</span></span><br><span class="line">background-image : <span class="built_in">url</span>(<span class="string">경로</span>), <span class="built_in">url</span>(<span class="string">경로</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="11-2-background-repeat-배경-이미지-반복"><a href="#11-2-background-repeat-배경-이미지-반복" class="headerlink" title="11.2 background-repeat 배경 이미지 반복"></a>11.2 background-repeat 배경 이미지 반복</h2><p>기본 값은 repeat(반복)으로 주로 사용하는 값은 no-repeat 이며 결과형태에 따라 반복 종류가 정해집니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span> : repeat; <span class="comment">/* 반복 */</span></span><br><span class="line"><span class="attribute">background-repeat</span> : no-repeat; <span class="comment">/* 반복x */</span></span><br><span class="line"><span class="attribute">background-repeat</span> : repeat-x; <span class="comment">/* x축으로만 반복 */</span></span><br><span class="line"><span class="attribute">background-repeat</span> : repeat-y; <span class="comment">/* y축으로만 반복 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 배경이미지가 2장 이상이상일 경우 개별속성 */</span></span><br><span class="line"><span class="attribute">background-repeat</span> : repeat-x, repeat;</span><br></pre></td></tr></table></figure><hr><h2 id="11-3-background-attachment-배경-이미지-고정"><a href="#11-3-background-attachment-배경-이미지-고정" class="headerlink" title="11.3 background-attachment 배경 이미지 고정"></a>11.3 background-attachment 배경 이미지 고정</h2><p>스크롤 이동 시 배경 이미지가 같이 움직일 지 고정될 지 설정합니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span>: fixed; <span class="comment">/* 고정 */</span></span><br><span class="line"><span class="attribute">background-attachment</span>: scroll; <span class="comment">/* 스크롤 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 배경이미지가 2장 이상이상일 경우 개별속성 */</span></span><br><span class="line"><span class="attribute">background-attachment</span>: scroll, fixed;</span><br></pre></td></tr></table></figure><hr><h2 id="11-4-background-size-배경-이미지-크기"><a href="#11-4-background-size-배경-이미지-크기" class="headerlink" title="11.4 background-size  배경 이미지 크기"></a>11.4 background-size  배경 이미지 크기</h2><ul><li>배경이미지 연결 시 원본 크기가 기본으로 나타납니다.</li><li>배경이미지 삽입 위치와 크기에 따른 값을 설정해야할 때 (아래) 값을 사용합니다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: contain; <span class="comment">/* 이미지를 자리지 않는 선에서 크게 설정 */</span></span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span>; <span class="comment">/* 이미지의 가로 너비100% 설정 */</span></span><br><span class="line"><span class="attribute">background-size</span>: cover; <span class="comment">/* 이미지의 가로세로비를 비교하여 빈공간이 생기지 않도록 크게 설정 */</span></span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">1400px</span>; <span class="comment">/* 강제 크기 입력(가로 세로 동시입력) */</span></span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">1400px</span> <span class="number">200px</span>; <span class="comment">/* 강제 크기 입력(가로 세로 개별 입력) */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 배경이미지가 2장 이상이상일 경우 개별속성 */</span></span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span>, cover;</span><br></pre></td></tr></table></figure><hr><h2 id="11-5-background-position-배경-이미지-위치"><a href="#11-5-background-position-배경-이미지-위치" class="headerlink" title="11.5 background-position 배경 이미지 위치"></a>11.5 background-position 배경 이미지 위치</h2><ul><li>기본 위치는 왼쪽 상단 값으로 위치(left right top bottom center), 값(0%~100%, px)등을 사용합니다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-position</span>: left top;</span><br><span class="line"><span class="attribute">background-position</span>: right bottom;</span><br><span class="line"><span class="attribute">background-position</span>: center;</span><br><span class="line"><span class="attribute">background-position</span>: center top;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">30%</span>;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">100px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*배경이미지가 2장 이상이상일 경우 개별속성*/</span></span><br><span class="line"><span class="attribute">background-position</span>: left top, center bottom;</span><br></pre></td></tr></table></figure><hr><h2 id="11-6-background-배경-통합-속성"><a href="#11-6-background-배경-통합-속성" class="headerlink" title="11.6 background 배경 통합 속성"></a>11.6 background 배경 통합 속성</h2><ul><li>색상, 이미지, 반복, 고정, 위치 순서로 작성해야 합니다.</li><li>필요에 따라 원하는 값만 골라서 작성할 수 있습니다. e.g.) 색상, 이미지, 위치</li><li>웹 브라우저 지원여부에 따라 attachment는 인식 못하는 경우도 있으므로 별도로 작성하는 것이 좋습니다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* background: color image repeat attachment position */</span></span><br><span class="line"><span class="attribute">background</span>: red <span class="built_in">url</span>(<span class="string">..</span>) repeat fixed left top;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">...</span>) scroll right bottom;</span><br><span class="line"><span class="attribute">background</span>: red center;</span><br></pre></td></tr></table></figure><hr><h2 id="11-7-예시"><a href="#11-7-예시" class="headerlink" title="11.7 예시"></a>11.7 예시</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>배경 이미지<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* background-color : url(&#x27;이미지 경로&#x27;) */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 크기보다 작은 이미지  사용 시 좌우로 반복되어서 채워짐 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">480px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;./images/pancake.jpg&quot;</span>);</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* repeat-x (x축으로만 반복) | repeat-y (y축으로만 반복) | no-repeat (반복x) */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-repeat</span>: no-repeat; <span class="comment">/* 이미지가 크기만큼 반복되어지지 않음 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 이미지의 비율을 고려하지 않기 때문에 이미지가 깨질 수 있음 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>; <span class="comment">/* 이미지의 크기를 가로 100%, 세로 100%만큼 채움 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="11-8-contain-cover"><a href="#11-8-contain-cover" class="headerlink" title="11.8 contain, cover"></a>11.8 contain, cover</h2><p>이미지의 크기를 똑같은 것을 준비하는 것이 가장 좋지만, 그것이 안된다면 contain과 cover라는 값을 사용하면 됩니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>배경 이미지<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">480px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;./images/pancake.jpg&quot;</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 📝 cover : HTML 요소의 크기를 가득 채울만큼 비율을 유지한채로 늘림 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 📝 contain :  HTML 요소의 한쪽 크기만큼 비율을 유지한 채로 늘려서 채움 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 그렇지만 cover를 사용하면 이미지가 잘림 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 배경 이미지의 기준점을 변경, 기본값은 왼쪽 맨위(0, 0) */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: center, center; <span class="comment">/* 기준점을 이미지의 정중앙으로 변경 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="12-이미지-맵-image-map"><a href="#12-이미지-맵-image-map" class="headerlink" title="12. 이미지 맵(image map)"></a>12. 이미지 맵(image map)</h1><p>이미지 맵(image map)은 쇼핑몰 프로모션에서 주로 사용하는 기능으로 여러개의 구역으로 나누어 링크를 거는것을 말합니다.</p><p>map 태그 내부에 이미지맵 영역을 설정할 area 태그를 추가로 입력합니다.</p><ul><li><code>shape</code> &#x3D; rect(사각형) circle(원형) poly(다각형) 3가지 중 하나의 선택영역 모양을 설정합니다.</li><li><code>coords</code> &#x3D; 시작점x 시작점y 끝점x 끝점y 순서로 선택영역의 기준점 좌표를 설정합니다.</li><li><code>href</code> &#x3D; 이동되는 외부 링크 주소를 입력합니다.(절대경로&#x2F;상대경로)</li><li><code>alt</code> &#x3D; 이미지맵의 설명문을 작성합니다.(바로가기 링크에 해당하는 정보)</li><li><code>target</code> &#x3D; 클릭 시 이동되는 인터넷 창을 설정합니다. _blank(새창)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;이미지경로&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">usemap</span>=<span class="string">&quot;#이미지맵&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">&quot;이미지맵&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;코드붙여넣기위치&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><p>coords 작성 시 아래 사이트를 이용하시면 됩니다.</p><blockquote><p><a href="http://maschek.hu/imagemap/imgmap/">http://maschek.hu/imagemap/imgmap/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTML-CSS-JS </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Start-CSS-01-선택자 - CSS Diner 1~32</title>
      <link href="/2023/02/06/Front-Start-CSS-01-Selector/"/>
      <url>/2023/02/06/Front-Start-CSS-01-Selector/</url>
      
        <content type="html"><![CDATA[<h1 id="1-HTML에서-CSS-사용"><a href="#1-HTML에서-CSS-사용" class="headerlink" title="1. HTML에서 CSS 사용"></a>1. HTML에서 CSS 사용</h1><p>CSS는 Cascading Style Sheet로 위에서부터 아래로 차례대로 스타일이 적용된다.<br>HTML에서 CSS를 사용하려면 3가지 방법이 있다.</p><h2 id="1-1-태그-안에-style-속성을-사용"><a href="#1-1-태그-안에-style-속성을-사용" class="headerlink" title="1.1 태그 안에 style 속성을 사용"></a>1.1 태그 안에 style 속성을 사용</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span> <span class="attr">style</span>=<span class="string">&quot;속성:값;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br></pre></td></tr></table></figure><p>첫 번째는 태그 안에 style 속성을 사용하는 방법!</p><hr><h2 id="1-2-style-태그-내에-CSS-작성"><a href="#1-2-style-태그-내에-CSS-작성" class="headerlink" title="1.2 style 태그 내에 CSS 작성"></a>1.2 style 태그 내에 CSS 작성</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* CSS */</span></span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>두 번째는 style 태그 내에 CSS 문법을 작성하는 방법! 참고로 style 태그는 head 태그 안에 있어야 한다.</p><hr><h2 id="1-3-파일-따로-만들어서-link-태그로-연결"><a href="#1-3-파일-따로-만들어서-link-태그로-연결" class="headerlink" title="1.3 파일 따로 만들어서 link 태그로 연결"></a>1.3 파일 따로 만들어서 link 태그로 연결</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>마지막은 CSS 파일을 따로 만들어서 link 태그로 연결하는 방법으로 HTML 코드와 CSS 코드를 분리시킬 수 있다.<br><code>href</code>는 css 파일 경로를, <code>rel</code>은 stylesheet를 작성한다.</p><hr><h1 id="2-CSS-문법"><a href="#2-CSS-문법" class="headerlink" title="2. CSS 문법"></a>2. CSS 문법</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">선택자 &#123;</span><br><span class="line">  속성: 값;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>본 구조는 선택자를 지정하고 중괄호 안에  속성과 속성에 해당하는 값을 입력하고 세미콜론(;)으로 마무리하면 끝!</p><p>CSS 문법은 위에 구조에서 보았듯이, 크게 선택자와 속성으로 나누어진다.</p><hr><h1 id="3-선택자-정리"><a href="#3-선택자-정리" class="headerlink" title="3. 선택자 정리"></a>3. 선택자 정리</h1><h2 id="3-1-기본-선택자"><a href="#3-1-기본-선택자" class="headerlink" title="3.1 기본 선택자"></a>3.1 기본 선택자</h2><ul><li><strong>전체</strong> 선택자 : <code>*</code></li><li><strong>태그</strong> 선택자 : <code>태그이름</code></li><li><strong>아이디</strong> 선택자 : <code>#</code></li><li><strong>클래스</strong> 선택자 : <code>.</code></li><li><strong>그룹</strong> 선택자 : <code>태그이름, 태그이름</code></li></ul><hr><h2 id="3-2-심화-선택자"><a href="#3-2-심화-선택자" class="headerlink" title="3.2 심화 선택자"></a>3.2 심화 선택자</h2><h3 id="3-2-1-속성-선택자-문자열-속성-선택자"><a href="#3-2-1-속성-선택자-문자열-속성-선택자" class="headerlink" title="3.2.1 속성 선택자 : 문자열 속성 선택자"></a>3.2.1 속성 선택자 : 문자열 속성 선택자</h3><ul><li>[속성 ~&#x3D; 문자열]</li><li>[속성 |&#x3D; 문자열]</li><li>[속성 ^&#x3D; 문자열]</li><li>[속성 $&#x3D; 문자열]</li><li>[속성 *&#x3D; 문자열]</li></ul><h3 id="3-2-2-조합-선택자"><a href="#3-2-2-조합-선택자" class="headerlink" title="3.2.2 조합 선택자"></a>3.2.2 조합 선택자</h3><ul><li>CSS에서는 기본 선택자(태그, 아이디, 클래스)를 조합해서 사용 가능</li><li><code>그룹 선택자(group selector)</code> : 이미 기본 선택자 시간에 배움, 여러 사용 가능한 태그 나열<ul><li>기본 선택자, 기본 선택자 {}</li></ul></li><li><code>하위 선택자(descendant selector)</code> : 특정 요소의 하위에 있는 요소를 선택할 떄 사용<ul><li>기본 선택자 기본 선택자 {}</li></ul></li><li><code>자식 선택자(Child Selector)</code></li><li><code>형제 선택자</code></li></ul><h3 id="3-2-3-가상-요소-선택자"><a href="#3-2-3-가상-요소-선택자" class="headerlink" title="3.2.3 가상 요소 선택자"></a>3.2.3 가상 요소 선택자</h3><ul><li>HTML 문서에서는 존재하지 않지만, </li><li>요소의 특정 부분을 존재하는 것처럼 가정하고 스타일을 적용할 때 사용하는 선택자 방법</li><li><a href="https://developer.mozilla.org/ko/docs/Web/CSS/Pseudo-elements">MDN 가상 요소 선택자</a></li><li>가상 요소 선택자의 종류는 꽤 여러 가지가 있지만, 대표적으로 4가지 정도만 알아두면 됨</li></ul><table><thead><tr><th align="center">선택자</th><th>설명</th></tr></thead><tbody><tr><td align="center"><code>::first-letter</code></td><td><code>요소의 첫 글자를 선택</code>합니다.</td></tr><tr><td align="center"><code>::first-line</code></td><td><code>요소의 첫 번째 줄(first line)을 선택</code>합니다.</td></tr><tr><td align="center"><code>::before</code></td><td><code>요소의 콘텐츠 영역에서 맨 앞을 선택</code>합니다.</td></tr><tr><td align="center"><code>::after</code></td><td><code>요소의 콘텐츠 영역에서 맨 뒤를 선택</code>합니다.</td></tr></tbody></table><h3 id="3-2-4-가상-클래스-선택자"><a href="#3-2-4-가상-클래스-선택자" class="headerlink" title="3.2.4 가상 클래스 선택자"></a>3.2.4 가상 클래스 선택자</h3><ul><li>link, visisted 링크 가상 클래스 선택자<ul><li><code>:link</code> : <strong>한 번도 방문한 적이 없는 상태</strong>의 링크 요소 선택</li><li><code>:visited</code> : <strong>한 번 이상 방문한 적이 있는 상태</strong>의 링크 요소 선택</li></ul></li><li>hover, active 동적 가상 클래스 선택자<ul><li><code>:hover</code> : 요소에 <strong>마우스를 올리고 있는 상태</strong>를 선택</li><li><code>:active</code> :  요소가 <strong>마우스로 클릭 중인 상태</strong>를 선택</li></ul></li><li>입력 요소 가상 클래스 선택자<ul><li><code>:focus</code> : <strong>입력 요소에 커서가 활성화되면</strong> 선택자로 지정</li><li><code>:checked</code> : <strong>체크박스가 표시되어 있으면 인접한 형제 요소</strong> 선택자로 지정</li><li><code>:disabled</code> : <strong>상호작용 요소가 비활성</strong>되면(disabled 속성이 사용되면) 선택자로 지정</li><li><code>:enabled</code> : <strong>상호작용 요소가 활성화</strong>되면(disabled 속성이 사용되지 않은 상태면) 선택자로 지정</li></ul></li><li>구조적 가상 클래스 선택자<ul><li><code>:nth-child(N)</code> : 부모안에 모든 요소 중 N번째 요소</li><li><code>A:nth-of-type(N)</code> : 부모안에 A라는 요소 중 N번째 요소</li><li><code>:first-child</code> : 부모안에 모든 요소 중 첫번째 요소</li><li><code>:last-child</code> : 부모안에 모든 요소 중 마지막 요소</li><li><code>A:first-of-type</code> : 부모안에 A라는 요소 중 첫번째 요소</li><li><code>A:last-of-type</code> : 부모안에 A라는 요소 중 마지막 요소</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) <span class="comment">/* 첫번째 선택 */</span></span><br><span class="line"><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n) <span class="comment">/* 두번째 마다 선택 */</span></span><br><span class="line"><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n+<span class="number">1</span>) <span class="comment">/* 첫번째 요소부터 2번째 마다 선택 */</span></span><br><span class="line"><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n+<span class="number">5</span>) <span class="comment">/* 다섯번째 부터 2개 마다 선택 */</span></span><br><span class="line"><span class="selector-pseudo">:nth-child</span>(-<span class="number">2</span>n+<span class="number">5</span>) <span class="comment">/* 첫번째 요소부터 5번째 요소까지 2개 마다 선택 */</span></span><br><span class="line"><span class="selector-pseudo">:nth-child</span>(n+<span class="number">5</span>) <span class="comment">/* 5번째 부터 모두 선택 */</span></span><br><span class="line"><span class="selector-pseudo">:nth-child</span>(-n+<span class="number">5</span>) <span class="comment">/* 앞에서부터 5개만 선택 */</span></span><br><span class="line"><span class="selector-pseudo">:nth-child</span>(odd) <span class="comment">/* 홀수 선택 */</span></span><br><span class="line"><span class="selector-pseudo">:nth-child</span>(even) <span class="comment">/* 짝수 선택 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-of-type <span class="comment">/* 부모안에 모든 p요소 중 첫번째 p요소 선택 */</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:last-of-type</span> <span class="comment">/* 부모안에 모든 span요소 중 마지막 span요소 선택 */</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-CSS-Diner-CSS-선택자-게임"><a href="#4-CSS-Diner-CSS-선택자-게임" class="headerlink" title="4. CSS Diner : CSS 선택자 게임"></a>4. CSS Diner : CSS 선택자 게임</h1><ul><li><a href="https://flukeout.github.io/">https://flukeout.github.io/</a></li></ul><h1 id="Level-1-2-태그-선택자"><a href="#Level-1-2-태그-선택자" class="headerlink" title="Level 1, 2 : 태그 선택자"></a>Level 1, 2 : <strong>태그 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그 &#123;&#125;</span><br></pre></td></tr></table></figure><p>태그명을 사용한다.</p><hr><h1 id="Level-3-아이디-선택자"><a href="#Level-3-아이디-선택자" class="headerlink" title="Level 3 : 아이디 선택자"></a>Level 3 : <strong>아이디 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span> <span class="attr">id</span>=<span class="string">&quot;아이디명&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#아이디명 &#123;&#125;</span><br></pre></td></tr></table></figure><p>태그의 id에 지정한 고유한 이름을 <code>#</code>으로 선택할 수 있다.<br>주로 웹 페이지에서 중요하거나 특정 영역을 지정할 때 자주 사용한다.</p><hr><h1 id="Level-4-5-자손-선택자"><a href="#Level-4-5-자손-선택자" class="headerlink" title="Level 4, 5 : 자손 선택자"></a>Level 4, 5 : <strong>자손 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">상위태그</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">하위태그</span>&gt;</span><span class="tag">&lt;/<span class="name">하위태그</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">상위태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">상위태그 하위태그 &#123;&#125;</span><br></pre></td></tr></table></figure><p>상위 태그에 포함된 하위 태그 모두 선택할 수 있다.</p><hr><h1 id="Level-6-7-8-클래스-선택자"><a href="#Level-6-7-8-클래스-선택자" class="headerlink" title="Level 6, 7, 8 : 클래스 선택자"></a>Level 6, 7, 8 : <strong>클래스 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span> <span class="attr">class</span>=<span class="string">&quot;클래스명&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.클래스명 &#123;&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Level-9-그룹-선택자"><a href="#Level-9-그룹-선택자" class="headerlink" title="Level 9 : 그룹 선택자"></a>Level 9 : <strong>그룹 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그1</span>&gt;</span><span class="tag">&lt;/<span class="name">태그1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그2</span>&gt;</span><span class="tag">&lt;/<span class="name">태그2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그1, 태그2 &#123;&#125;</span><br></pre></td></tr></table></figure><p>콤마(,)를 사용하여 여러 태그를 선택할 수 있다.</p><hr><h1 id="Level-10-11-전체-선택자"><a href="#Level-10-11-전체-선택자" class="headerlink" title="Level 10, 11 : 전체 선택자"></a>Level 10, 11 : <strong>전체 선택자</strong></h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* &#123;&#125;</span><br></pre></td></tr></table></figure><p>모든 HTML 태그들을 한꺼번에 선택한다.</p><hr><h1 id="Level-12-형제-선택자-중-하나인-선택자"><a href="#Level-12-형제-선택자-중-하나인-선택자" class="headerlink" title="Level 12 : 형제 선택자 중 하나인 + 선택자"></a>Level 12 : 형제 선택자 중 하나인 <strong>+ 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그1</span>&gt;</span><span class="tag">&lt;/<span class="name">태그2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그2</span>&gt;</span><span class="tag">&lt;/<span class="name">태그2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그1 + 태그2 &#123;&#125;</span><br></pre></td></tr></table></figure><p>바로 뒤에 나오는 태그를 선택할 때 사용한다.</p><hr><h1 id="Level-13-형제-선택자-중-하나인-선택자"><a href="#Level-13-형제-선택자-중-하나인-선택자" class="headerlink" title="Level 13 : 형제 선택자 중 하나인 ~ 선택자"></a>Level 13 : 형제 선택자 중 하나인 <strong>~ 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그1</span>&gt;</span><span class="tag">&lt;/<span class="name">태그1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그2</span>&gt;</span><span class="tag">&lt;/<span class="name">태그2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그3</span>&gt;</span><span class="tag">&lt;/<span class="name">태그3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그1 ~ 태그3 &#123;&#125;</span><br></pre></td></tr></table></figure><p>바로 뒤가 아니어도 형제 태그라면 선택할 수 있다.</p><hr><h1 id="Level-14-자식-선택자"><a href="#Level-14-자식-선택자" class="headerlink" title="Level 14 : 자식 선택자"></a>Level 14 : <strong>자식 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">부모태그</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">자식태그</span>&gt;</span><span class="tag">&lt;/<span class="name">자식태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">부모태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">부모태그 &gt; 자식태그 &#123;&#125;</span><br></pre></td></tr></table></figure><p>직계 자식만 선택할 수 있다.</p><hr><h1 id="Level-15-first-child-선택자"><a href="#Level-15-first-child-선택자" class="headerlink" title="Level 15 : first-child 선택자"></a>Level 15 : <strong>first-child 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그:first-child &#123;&#125;</span><br></pre></td></tr></table></figure><p>여러 개의 태그 중 첫 번째 태그만 선택한다.</p><hr><h1 id="Level-16-only-child-선택자"><a href="#Level-16-only-child-선택자" class="headerlink" title="Level 16 : only-child 선택자"></a>Level 16 : <strong>only-child 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그2</span>&gt;</span><span class="tag">&lt;/<span class="name">태그2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그2</span>&gt;</span><span class="tag">&lt;/<span class="name">태그2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그:only-child &#123;&#125;</span><br></pre></td></tr></table></figure><p>선택한 태그가 유일한 경우 선택할 수 있다.</p><hr><h1 id="Level-17-last-child-선택자"><a href="#Level-17-last-child-선택자" class="headerlink" title="Level 17 : last-child 선택자"></a>Level 17 : <strong>last-child 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그:first-child &#123;&#125;</span><br></pre></td></tr></table></figure><p>여러 태그 중 마지막 태그만 선택한다.</p><hr><h1 id="Level-18-nth-of-child-선택자"><a href="#Level-18-nth-of-child-선택자" class="headerlink" title="Level 18 : nth-of-child 선택자"></a>Level 18 : <strong>nth-of-child 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그:nth-child(n) &#123;&#125;</span><br></pre></td></tr></table></figure><p>n 번째 태그를 선택할 수 있다.</p><p>n에는 숫자 말고도 <strong>짝수</strong>에 해당하는 <code>even 또는 2n</code>, <strong>홀수</strong>에 해당하는 <code>odd 또는 2n+1</code> 등을 사용할 수 있다.</p><hr><h1 id="Level-19-nth-last-child-선택자"><a href="#Level-19-nth-last-child-선택자" class="headerlink" title="Level 19 : nth-last-child 선택자"></a>Level 19 : <strong>nth-last-child 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그:nth-last-child(n) &#123;&#125;</span><br></pre></td></tr></table></figure><p>뒤에서부터 n 번째에 있는 태그를 선택할 수 있다.</p><hr><h1 id="Level-20-first-of-type-선택자"><a href="#Level-20-first-of-type-선택자" class="headerlink" title="Level 20 : first-of-type 선택자"></a>Level 20 : <strong>first-of-type 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그:first-of-type &#123;&#125;</span><br></pre></td></tr></table></figure><p>특정 태그들 중 첫 번째 태그를 선택한다.</p><hr><h1 id="Level-21-22-nth-of-type-선택자"><a href="#Level-21-22-nth-of-type-선택자" class="headerlink" title="Level 21, 22 : nth-of-type 선택자"></a>Level 21, 22 : <strong>nth-of-type 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그:nth-of-type(n) &#123;&#125;</span><br></pre></td></tr></table></figure><p>특정 태그들 중 n 번째 태그를 선택한다. <code>nth-child</code>와 사용하는 방법은 같다.</p><hr><h1 id="Level-23-only-of-type-선택자"><a href="#Level-23-only-of-type-선택자" class="headerlink" title="Level 23 : only-of-type 선택자"></a>Level 23 : <strong>only-of-type 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그2</span>&gt;</span><span class="tag">&lt;/<span class="name">태그2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그2</span>&gt;</span><span class="tag">&lt;/<span class="name">태그2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그:only-of-type &#123;&#125;</span><br></pre></td></tr></table></figure><p>특정 태그가 유일한 경우 선택할 수 있다.</p><hr><h1 id="Level-24-last-of-type-선택자"><a href="#Level-24-last-of-type-선택자" class="headerlink" title="Level 24 : last-of-type 선택자"></a>Level 24 : <strong>last-of-type 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그:last-of-type &#123;&#125;</span><br></pre></td></tr></table></figure><p>특정 태그들 중 마지막 태그만 선택할 수 있다.</p><hr><h1 id="Level-25-empty-선택자"><a href="#Level-25-empty-선택자" class="headerlink" title="Level 25 : empty 선택자"></a>Level 25 : <strong>empty 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그:empty &#123;&#125;</span><br></pre></td></tr></table></figure><p>해당 태그가 비어있는 경우 선택할 수 있다.</p><hr><h1 id="Level-26-not-선택자"><a href="#Level-26-not-선택자" class="headerlink" title="Level 26 : not 선택자"></a>Level 26 : <strong>not 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">태그</span> <span class="attr">id</span>=<span class="string">&quot;아이디&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그:not(#아이디) &#123;&#125;</span><br></pre></td></tr></table></figure><p>특정 태그들 중 해당 태그가 아닌 경우 선택할 수 있다.</p><hr><h1 id="Level-27-28-속성-선택자"><a href="#Level-27-28-속성-선택자" class="headerlink" title="Level 27, 28 : 속성 선택자"></a>Level 27, 28 : <strong>속성 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span> <span class="attr">속성</span>=<span class="string">&quot;값&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그[속성] &#123;&#125;</span><br><span class="line">[속성] &#123;&#125;</span><br></pre></td></tr></table></figure><p>태그의 속성으로 선택할 수 있다. 태그를 생략하고 속성만 선택할 수 있다.</p><hr><h1 id="Level-29-속성-x3D-값-선택자"><a href="#Level-29-속성-x3D-값-선택자" class="headerlink" title="Level 29 : 속성&#x3D;값 선택자"></a>Level 29 : <strong>속성&#x3D;값 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span> <span class="attr">속성</span>=<span class="string">&quot;값&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그[속성=&quot;값&quot;] &#123;&#125;</span><br></pre></td></tr></table></figure><p>태그의 속성과 값을 사용하여 선택할 수 있다.</p><hr><h1 id="Level-30-속성-x3D-선택자"><a href="#Level-30-속성-x3D-선택자" class="headerlink" title="Level 30 : 속성 ^&#x3D; 선택자"></a>Level 30 : <strong>속성 ^&#x3D; 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span> <span class="attr">속성</span>=<span class="string">&quot;abc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그[속성^=&quot;a&quot;] &#123;&#125;</span><br></pre></td></tr></table></figure><p>속성값이 처음에 오는 글자들과 같은 경우 선택할 수 있다.</p><hr><h1 id="Level-31-속성-x3D-선택자"><a href="#Level-31-속성-x3D-선택자" class="headerlink" title="Level 31 : 속성 $&#x3D; 선택자"></a>Level 31 : <strong>속성 $&#x3D; 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span> <span class="attr">속성</span>=<span class="string">&quot;abc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그[속성$=&quot;c&quot;] &#123;&#125;</span><br></pre></td></tr></table></figure><p>속성값이 마지막에 오는 글자들과 같은 경우 선택할 수 있다.</p><hr><h1 id="Level-32-속성-x3D-선택자"><a href="#Level-32-속성-x3D-선택자" class="headerlink" title="Level 32 : 속성 *&#x3D; 선택자"></a>Level 32 : <strong>속성 *&#x3D; 선택자</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span> <span class="attr">속성</span>=<span class="string">&quot;abc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br><span class="line"></span><br><span class="line">태그[속성*=&quot;b&quot;] &#123;&#125;</span><br></pre></td></tr></table></figure><p>속성값에 글자들이 포함되어 있는 경우 선택할 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> HTML-CSS-JS </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Start-HTML 자주 쓰이는 태그 간단 정리</title>
      <link href="/2023/02/06/Front-Start-HTML/"/>
      <url>/2023/02/06/Front-Start-HTML/</url>
      
        <content type="html"><![CDATA[<h1 id="1-많이-쓰이는-HTML-태그"><a href="#1-많이-쓰이는-HTML-태그" class="headerlink" title="1. 많이 쓰이는 HTML 태그"></a>1. 많이 쓰이는 HTML 태그</h1><p>웹 개발을 공부할려고 하면 HTML부터 공부하는 사람이 많습니다.<br>그래서 처음에 책을 전부 읽거나, 강의 전부 들어야 한다고 생각하는데, 그럴 필요없습니다.<br>그리고 이렇게 공부해도 시간지나면 까먹습니다.<br>기본적이고, 많이 쓰는 것만 알고있고, 필요한게 있을 떄마다 검색해서 익히면 됩니다.</p><p><a href="https://www.advancedwebranking.com/seo/html-study/">Advanced Web Ranking HTML Study</a></p><p>해당 사이트를 통해 <strong>많이 쓰이는 HTML 태그</strong>들을 확인할 수 있습니다.<br>여기서 자주 쓰인다는 태그들 정도만 알아도 됩니다.</p><hr><h1 id="2-DOCTYPE"><a href="#2-DOCTYPE" class="headerlink" title="2. DOCTYPE"></a>2. DOCTYPE</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이 문서가 HTML5라고 선언</p><hr><h1 id="3-여는-태그-닫는-태그"><a href="#3-여는-태그-닫는-태그" class="headerlink" title="3. 여는 태그, 닫는 태그"></a>3. 여는 태그, 닫는 태그</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span>&gt;</span>내용<span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br></pre></td></tr></table></figure><p>태그는 기본적으로 여는 태그와 닫는 태그로 이루어져 있다.</p><p>간혹 닫는 태그가 따로 없는 태그들도 있다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>태그들은 모두 html 태그 안에 들어가 있다. html 태그 안에는 크게 head와 body 태그로 나뉜다.</p><ul><li><code>head</code> 에 들어가는 태그는 <strong>문서의 정보를 뜻하므로 화면상에 보이지 않는다.</strong></li><li><code>body</code> 태그 안에 들어간 내용만 <strong>화면상에 보인다</strong>.</li></ul><hr><h1 id="4-head-에서-쓰이는-태그"><a href="#4-head-에서-쓰이는-태그" class="headerlink" title="4. head 에서 쓰이는 태그"></a>4. head 에서 쓰이는 태그</h1><h2 id="4-1-title"><a href="#4-1-title" class="headerlink" title="4.1 title"></a>4.1 title</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><p>title 태그는 문서의 제목이다. 웹 브라우저의 상단 탭에 표시된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">태그</span> <span class="attr">속성</span>=<span class="string">&quot;값&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">태그</span>&gt;</span></span><br></pre></td></tr></table></figure><p>태그에는 여러 속성들이 있고, 속성에는 정해져 있거나 정해져 있지 않은 값들이 들어간다.</p><hr><h2 id="4-2-meta"><a href="#4-2-meta" class="headerlink" title="4.2 meta"></a>4.2 meta</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>meta 태그를 사용할 때 이 세 가지는 거의 모든 HTML 파일에 들어간다고 보면 되는데</p><ul><li>첫 번째는 <strong>웹 문서의 인코딩 방식을 세계 표준 인코딩 방식</strong>인 “UTF-8”로 지정한다는 의미이다.</li><li>두 번째는 <strong>사용자가 익스플로러를 이용한다면 최신 버전인 엣지로 화면을 보여주는 기능</strong>이다.</li><li>세 번째는 <strong>디바이스 종류별로 화면에 출력할 방식을 지정</strong>한다. <ul><li>viewport를 지정하면 반응형 웹 페이지 제작 시 모바일 화면에 대해 설정할 수 있다.</li></ul></li></ul><p>여기까지가 head에 들어가는 기본적인 태그들인데, 사실 VSCode를 사용한다면 <strong>! + Enter</strong>만 하면 된다.</p><hr><h1 id="5-body-에서-쓰이는-태그"><a href="#5-body-에서-쓰이는-태그" class="headerlink" title="5. body 에서 쓰이는 태그"></a>5. body 에서 쓰이는 태그</h1><p>div 태그는 콘텐츠를 그룹화시키는 태그로 body 태그 내에서 가장 많이 쓰인다.</p><h2 id="5-1-div"><a href="#5-1-div" class="headerlink" title="5.1 div"></a>5.1 div</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이런 식으로 고유의 값을 지정하는 id 속성을 사용해서 div로 구분 짓는다. 물론, 시맨틱 태그가 나오기 전까지는!<br>지금은 이렇게 사용하면 안된다.</p><hr><h2 id="5-2-header-nav-footer"><a href="#5-2-header-nav-footer" class="headerlink" title="5.2 header, nav, footer"></a>5.2 header, nav, footer</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>header 태그</code>는 머리말, </li><li><code>nav 태그</code>는 메뉴, </li><li><code>footer 태그</code>는 꼬리말 영역이다.</li></ul><hr><h2 id="5-3-section-article"><a href="#5-3-section-article" class="headerlink" title="5.3 section, article"></a>5.3 section, article</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><p>그 외에 시맨틱 태그로는 section, article도 같이 많이 쓰는 편이다.</p><ul><li><code>section 태그</code>는 특정 영역을 그룹화할 때, </li><li><code>article 태그</code>는 개별 콘텐츠를 담을 때 사용한다.</li></ul><hr><h1 id="6-텍스트-관련-태그"><a href="#6-텍스트-관련-태그" class="headerlink" title="6. 텍스트 관련 태그"></a>6. 텍스트 관련 태그</h1><h2 id="6-1-heading"><a href="#6-1-heading" class="headerlink" title="6.1 heading"></a>6.1 heading</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>제목1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>제목2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>제목3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>제목4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>제목5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>제목6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p>h1~h6 태그들은 문서의 제목을 중요도에 따라 사용한다. 숫자가 커질수록 글자 크기도 작아진다.</p><hr><h2 id="6-2-p"><a href="#6-2-p" class="headerlink" title="6.2 p"></a>6.2 p</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>문단<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>p 태그는 여러 개의 문장을 문단으로 구분할 때 사용한다.</p><hr><h2 id="6-3-a"><a href="#6-3-a" class="headerlink" title="6.3 a"></a>6.3 a</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;URL주소&quot;</span> <span class="attr">target</span>=<span class="string">&quot;blank&quot;</span>&gt;</span>텍스트<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>가장 많이 사용하는 a 태그는 href 속성에 URL 주소를 담아 해당 페이지로 이동하는 링크를 설정한다.</p><p>target&#x3D;”blank”를 추가하면 새로운 탭을 열어서 해당 페이지로 이동한다.</p><hr><h2 id="6-4-span"><a href="#6-4-span" class="headerlink" title="6.4 span"></a>6.4 span</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>앞서 설명한 a 태그도 인라인 요소 태그인데 링크 외에 인라인 요소를 넣고 싶을 때 사용한다.<br>인라인 요소는 앞서 다른 태그들과 달리 줄바꿈이 일어나지 않는다.</p><hr><h1 id="7-메뉴에서-많이-쓰이는-목록-태그"><a href="#7-메뉴에서-많이-쓰이는-목록-태그" class="headerlink" title="7. 메뉴에서 많이 쓰이는 목록 태그"></a>7. 메뉴에서 많이 쓰이는 목록 태그</h1><h2 id="7-1-ul-li"><a href="#7-1-ul-li" class="headerlink" title="7.1 ul, li"></a>7.1 ul, li</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>목록<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>목록<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ul 태그는 순서가 없는 메뉴를 목록으로 만들 때 사용한다. 각각의 항목들은 li 태그를 사용한다.<br>순서가 있는 목록을 만들 때는 ul 대신 ol 태그를 사용한다.</p><hr><h1 id="8-로그인-및-회원가입-화면을-만들-때"><a href="#8-로그인-및-회원가입-화면을-만들-때" class="headerlink" title="8. 로그인 및 회원가입 화면을 만들 때"></a>8. 로그인 및 회원가입 화면을 만들 때</h1><p>로그인 및 회원가입 화면을 만들 때! 검색 기능을 만들 때! 등등 사용자가 입력한 값을 서버에 보낼 때 사용하는 태그들이 있다.</p><h2 id="8-1-form"><a href="#8-1-form" class="headerlink" title="8.1 form"></a>8.1 form</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>form 태그 안에 있는 폼 요소들의 값을 전송 버튼을 클릭할 시 서버에 전송한다.<br>action 속성에는 보낼 서버 주소, method 속성에는 전송 방식을 지정한다.</p><hr><h2 id="8-2-input"><a href="#8-2-input" class="headerlink" title="8.2 input"></a>8.2 input</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>input 태그는 type 속성 값을 다르게 지정하여 다양한 입력 형태로 만들 수 있다.<br>가장 많이 사용하는 text부터 password, checkbox, radio, file, date, submit 등이 있다.</p><hr><h1 id="9-멀티미디어"><a href="#9-멀티미디어" class="headerlink" title="9. 멀티미디어"></a>9. 멀티미디어</h1><p>멀티미디어에 해당하는 자료들을 화면에 보일 수 있도록 하는 태그들을 알아본다.</p><h2 id="9-1-img"><a href="#9-1-img" class="headerlink" title="9.1 img"></a>9.1 img</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;이미지 경로&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>img 태그는 이미지를 넣는 태그다. src 속성에 이미지 파일의 경로를 지정하면 해당 이미지가 화면에 보인다.</p><hr><h2 id="9-2-iframe"><a href="#9-2-iframe" class="headerlink" title="9.2 iframe"></a>9.2 iframe</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>동영상을 넣을 때 사용하는 video 태그도 있지만, 사실 유튜브 영상이 더 많이 사용되는 편이라 iframe 태그를 많이 사용한다.</p><hr><h1 id="10-Font-Awesome-아이콘"><a href="#10-Font-Awesome-아이콘" class="headerlink" title="10. Font Awesome 아이콘"></a>10. Font Awesome 아이콘</h1><p>Font Awesome은 많이 사용하는 곳인데 사용법은 JS만 연결하고 원하는 아이콘을 검색해서 i 태그를 가져다가 붙이면 끝!</p><h2 id="10-1-script"><a href="#10-1-script" class="headerlink" title="10.1 script"></a>10.1 script</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://kit.fontawesome.com/4602e82315.js&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>참고로 스크립트 태그는 자바스크립트 파일와 연결할 때 사용한다.</p><hr><h2 id="10-2-i"><a href="#10-2-i" class="headerlink" title="10.2 i"></a>10.2 i</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa-solid fa-bars&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Font Awesome에서 원하는 아이콘을 검색해서 해당 태그처럼 i 태그를 그대로 사용하면 된다.</p><hr><h2 id="10-3-link"><a href="#10-3-link" class="headerlink" title="10.3 link"></a>10.3 link</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS 과정에서 설명하려고 했지만 잠깐 언급하자면, CSS 파일은 link 태그로 연결한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;이미지 경로&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>link 태그는 위와 같이 파비콘을 지정할 때도 사용할 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> HTML-CSS-JS </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CheatSheet-JS-DataAlgo-Ref</title>
      <link href="/2023/02/06/CheatSheet-JS-DataAlgo-Ref/"/>
      <url>/2023/02/06/CheatSheet-JS-DataAlgo-Ref/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Math"><a href="#1-Math" class="headerlink" title="1. Math"></a>1. Math</h1><h2 id="1-1-Math-floor-내림-바닥"><a href="#1-1-Math-floor-내림-바닥" class="headerlink" title="1.1 Math.floor (내림,바닥)"></a>1.1 Math.floor (내림,바닥)</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Math/floor">MDN Math.floor</a></li><li>바닥, 내림 함수</li><li>주어진 숫자와 같거나 작은 정수 중에서 가장 큰 수를 반환</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">5.95</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">5.05</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">5</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(-<span class="number">5.05</span>)); <span class="comment">// -6</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-2-Math-ceil-올림-천장"><a href="#1-2-Math-ceil-올림-천장" class="headerlink" title="1.2 Math.ceil (올림, 천장)"></a>1.2 Math.ceil (올림, 천장)</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil">MDN Math.ceil</a></li><li>주어진 숫자보다 크거나 같은 숫자 중 가장 작은 숫자를 integer 로 반환</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">0.95</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">4</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">7.004</span>); <span class="comment">// 8</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(-<span class="number">0.95</span>); <span class="comment">// -0</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(-<span class="number">4</span>); <span class="comment">// -4</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(-<span class="number">7.004</span>); <span class="comment">// -7</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-3-Math-sqrt-제곱근"><a href="#1-3-Math-sqrt-제곱근" class="headerlink" title="1.3 Math.sqrt() : 제곱근"></a>1.3 Math.sqrt() : 제곱근</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt">MDN Math.sqrt</a></li></ul><hr><h2 id="1-4-Math-abs-절대값"><a href="#1-4-Math-abs-절대값" class="headerlink" title="1.4 Math.abs() : 절대값"></a>1.4 Math.abs() : 절대값</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Math/abs">MDN Math.abs()</a></li></ul><hr><h1 id="2-Number"><a href="#2-Number" class="headerlink" title="2. Number"></a>2. Number</h1><h2 id="2-1-문자열-파싱-parseInt"><a href="#2-1-문자열-파싱-parseInt" class="headerlink" title="2.1 문자열 파싱, parseInt()"></a>2.1 문자열 파싱, parseInt()</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/parseInt">MDN parseInt()</a></li><li>cf. <code>parse</code> : (문장을 문법적으로) 분석하다</li><li>cf. <code>int</code> : integer의 약어, 숫자</li></ul><hr><h3 id="2-1-1-파라미터"><a href="#2-1-1-파라미터" class="headerlink" title="2.1.1 파라미터"></a>2.1.1 파라미터</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(string, radix);</span><br></pre></td></tr></table></figure><ul><li><strong>string</strong> : 숫자로 변환할 문자열</li><li><strong>radix</strong><ul><li>optional</li><li>string 문자열을 읽을 진법(수의 진법 체계의 진법)</li><li>2~36의 수</li></ul></li></ul><hr><h3 id="2-1-2-리턴"><a href="#2-1-2-리턴" class="headerlink" title="2.1.2 리턴"></a>2.1.2 리턴</h3><p><code>string</code>을 <strong>정수로 변환한 값</strong>을 리턴합니다.<br>만약, string의 첫 글자를 정수로 변경할 수 없으면 <strong>NaN(Not a Number)</strong> 값을 리턴합니다.</p><hr><h3 id="2-1-3-10진법-처리"><a href="#2-1-3-10진법-처리" class="headerlink" title="2.1.3 10진법 처리"></a>2.1.3 10진법 처리</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 문자열을 정수로 리턴, 음수 표현 가능</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>)); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;-10&#x27;</span>)); <span class="comment">// -10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 소수점은 제거 후, 정수값만 리턴</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;10.9&#x27;</span>)); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 문자열이 아닌 다른 타입이 전다뢰면, 문자열로 변환해 리턴</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="number">10</span>)); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 숫자가 아닌 문자 이후의 값은 무시, 그 이전 숫자만 변환</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;10n&#x27;</span>)); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;10nnn13&#x27;</span>)); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 처음에 오는 공백 문자는 허용, 뒤에 공백은 무시</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;    10&#x27;</span>)); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;10      &#x27;</span>)); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 첫 글자가 숫자가 아니면 NaN(Not a Number)을 리턴</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;k10&#x27;</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-1-4-2진법-16진법-처리"><a href="#2-1-4-2진법-16진법-처리" class="headerlink" title="2.1.4 2진법, 16진법 처리"></a>2.1.4 2진법, 16진법 처리</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 10진법 -&gt; 2진법</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;10&#x27;</span>, <span class="number">2</span>)); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 2진법에는 2라는 숫자가 없어서, NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;2&#x27;</span>, <span class="number">2</span>)); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// cf. 16진법을 컴퓨터에서 표현하려면, &#x27;Ox&#x27; 또는 &#x27;OX&#x27;로 시작</span></span><br><span class="line"><span class="comment">// 3. 16진법 -&gt; 10진법</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;0xF&#x27;</span>)); <span class="comment">// 15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;0XF&#x27;</span>)); <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 16진수 범위 0~F, 16진수 범위 밖의 문자는 무시</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;0XFkk&#x27;</span>)); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-String-prototype"><a href="#3-String-prototype" class="headerlink" title="3. String.prototype"></a>3. String.prototype</h1><h2 id="3-1-replaceAll-대체하다-replace"><a href="#3-1-replaceAll-대체하다-replace" class="headerlink" title="3.1 replaceAll (대체하다), replace"></a>3.1 replaceAll (대체하다), replace</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">replace</span>(regexp|substr, newSubstr|<span class="keyword">function</span>)</span><br><span class="line"><span class="comment">// 첫번째 파라미터 : 정규표현식(RegExp) | 문자열 String, </span></span><br><span class="line"><span class="comment">// 두번쨰 파라미터 : 첫번째 파라미터를 대신할 문자열 String | 대신해서 호출할 함수</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">replaceAll</span>(pattern, replacement)</span><br><span class="line"><span class="comment">// 첫번째 파라미터 : 문자열, 또는 symbol.replace메서드가 있는 객체, e.g. 정규표현식</span></span><br><span class="line"><span class="comment">// 두번째 파라미터 : 문자열, 함수</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll">MDN replaceAll</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace">MDN replace</a></li><li>어떤 패턴에 일치하는 일부 또는 모든 부분이 교체된 새로운 문자열을 반환</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="string">&#x27;lazy dog. If the dog reacted, was it really lazy?&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 1. replace() : 첫 번쨰 해당하는 문자열만 치환</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">replace</span>(<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;monkey&#x27;</span>));</span><br><span class="line"><span class="comment">// lazy monkey. If the dog reacted, was it really lazy?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/Dog/i</span>; <span class="comment">// 정규표현식도 사용 가능</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">replace</span>(regex, <span class="string">&#x27;ferret&#x27;</span>));</span><br><span class="line"><span class="comment">// lazy ferret. If the dog reacted, was it really lazy?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 2. replaceAll() : 해당하는 모든 문자열 치환</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">replaceAll</span>(<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;monkey&#x27;</span>));</span><br><span class="line"><span class="comment">// lazy monkey. If the monkey reacted, was it really lazy?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/Dog/gi</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">replaceAll</span>(regex, <span class="string">&#x27;ferret&#x27;</span>));</span><br><span class="line"><span class="comment">// lazy ferret. If the ferret reacted, was it really lazy?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// **** 응용 예시</span></span><br><span class="line"><span class="keyword">const</span> text = <span class="string">&#x27;안녕하세요&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">replace</span>(<span class="string">&#x27;안녕&#x27;</span>, <span class="string">&#x27;안녕#&#x27;</span>)) <span class="comment">// 안녕#하세요</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">replace</span>(<span class="string">&#x27;안녕&#x27;</span>, <span class="string">&#x27;안녕#&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;#&#x27;</span>)) <span class="comment">// [ &#x27;안녕&#x27;, &#x27;하세요&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> text2 = <span class="string">&#x27;철수안녕하세요&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text2.<span class="title function_">replace</span>(<span class="string">&#x27;안녕&#x27;</span>, <span class="string">&#x27;#안녕#&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;#&#x27;</span>)) <span class="comment">// [ &#x27;철수&#x27;, &#x27;안녕&#x27;, &#x27;하세요&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// **** 시크릿 코드를 만들어 겹치지 않게 하는 법</span></span><br><span class="line"><span class="keyword">const</span> text3 = <span class="string">&#x27;철수안녕하세요&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text3.<span class="title function_">replace</span>(<span class="string">&#x27;안녕&#x27;</span>, <span class="string">&#x27;#@$%안녕#@$%&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;#@$%&#x27;</span>)) <span class="comment">// [ &#x27;철수&#x27;, &#x27;안녕&#x27;, &#x27;하세요&#x27; ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-2-substr-☢️"><a href="#3-2-substr-☢️" class="headerlink" title="3.2 substr() ☢️"></a>3.2 substr() ☢️</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/substr">MDN String.prototype.substr()</a></li><li>문자열에서 특정 위치에서 시작하여 특정 문자 수 만큼의 문자들을 반환</li><li>다만, String.prototype.substr()은 바람직한 특징때문에 사용처가 없으면 명세에서 제거될 수 있다고 합니다.</li></ul><hr><h2 id="3-3-localeCompare"><a href="#3-3-localeCompare" class="headerlink" title="3.3 localeCompare()"></a>3.3 localeCompare()</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN String.prototype.localeCompare()</a></li><li>참조 문자열이 정렬 순으로 지정된 문자열 앞 혹은 뒤에 오는지 또는 동일한 문자열인지 나타내는 수치를 반환</li></ul><hr><h2 id="3-4-repeat"><a href="#3-4-repeat" class="headerlink" title="3.4 repeat()"></a>3.4 repeat()</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/repeat">MDN String.prototype.repeat()</a></li><li>문자열을 주어진 횟수만큼 반복해 붙인 새로운 문자열을 반환</li></ul><hr><h2 id="3-5-substring"><a href="#3-5-substring" class="headerlink" title="3.5 substring()"></a>3.5 substring()</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/substring">MDN String.prototype.substring()</a></li><li>string 객체의 시작 인덱스로 부터 종료 인덱스 전 까지 문자열의 부분 문자열을 반환</li><li><code>substring(시작 인덱스, 끝 인덱스-미포함)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;Mozilla&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">1</span>, <span class="number">3</span>)); <span class="comment">// &quot;oz&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">2</span>)); <span class="comment">// &quot;zilla&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-6-padStart"><a href="#3-6-padStart" class="headerlink" title="3.6 padStart()"></a>3.6 padStart()</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/padStart">MDN String.prototype.padStart()</a></li><li>현재 문자열의 시작을 다른 문자열로 채워, 주어진 길이를 만족하는 새로운 문자열을 반환</li><li>채워넣기는 대상 문자열의 시작(좌측)부터 적용</li><li><code>padStart(목표문자열길이, 채워넣을 다른 문자열)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">10</span>); <span class="comment">// &quot;       abc&quot;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">10</span>, <span class="string">&#x27;foo&#x27;</span>); <span class="comment">// &quot;foofoofabc&quot;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">6</span>, <span class="string">&#x27;123465&#x27;</span>); <span class="comment">// &quot;123abc&quot;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>); <span class="comment">// &quot;00000abc&quot;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">1</span>); <span class="comment">// &quot;abc&quot;</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-Array-prototype"><a href="#4-Array-prototype" class="headerlink" title="4. Array.prototype"></a>4. Array.prototype</h1><ul><li>여러 개체(Entity) 값을 순차적으로 나열한 선형 자료구조</li><li>대표 속성(perperty)과 메서드(method)<ul><li><code>배열 크기 및 배열 여부 확인</code> : Array.length, Array.isArray()</li><li><code>배열 추가/삭제</code> : Array,push(), Array.pop(), Array.shift(), Array.unshift(), Array.splice(), Array.slice() 등</li><li><code>배열 탐색</code> : Array.index.Of(), Array.lastindexOf(), Array.includes()</li><li><code>배열 변형</code> : Array.sort(), Array.reverse(), Array.join()</li><li><code>배열 반복</code> : Array.sort(), Array.forEach(), Array.map(), Array.find(), Array.filter(), Array.reduce()</li><li><code>배열 논리연산</code> : Array.some(), Array.every()</li></ul></li><li><code>선언</code> : <code>new Array()</code>혹은 <code>[]</code>를 통해 선언하며, 사이즈 혹은 값을 입력하여 초기화도 가능</li><li><code>접근 방법</code> : <code>Array[index]</code>를 통해, index를 통하여 O(1)에 접근</li><li><code>배열 속성</code> : <code>Array.length</code>를 통해, 배열 요소의 개수 확인 가능</li></ul><hr><h2 id="4-1-JS-배열의-실체"><a href="#4-1-JS-배열의-실체" class="headerlink" title="4.1 JS 배열의 실체"></a>4.1 JS 배열의 실체</h2><ul><li><code>자바스크립트에서 배열</code>은 다른 언어에서 말하는 일반적인 배열이 아닌 <code>Hash 기반의 객체</code></li><li>메모리가 연속적인 밀집 배열(dense array)가 아닌 비 연속적인 희소 배열(sparse array)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [];</span><br><span class="line"></span><br><span class="line">nums.<span class="title function_">push</span>(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">nums.<span class="title function_">push</span>(<span class="string">&#x27;two&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums.<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums); <span class="comment">// [ &#x27;one&#x27;, &#x27;two&#x27; ]</span></span><br><span class="line"></span><br><span class="line">nums[<span class="string">&#x27;once&#x27;</span>] = <span class="string">&#x27;once&#x27;</span>;</span><br><span class="line">nums[<span class="string">&#x27;twice&#x27;</span>] = <span class="string">&#x27;twice&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums.<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums); <span class="comment">// [ &#x27;one&#x27;, &#x27;two&#x27;, once: &#x27;once&#x27;, twice: &#x27;twice&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(nums));</span><br></pre></td></tr></table></figure><hr><h2 id="4-2-Array-isArray-존재-여부"><a href="#4-2-Array-isArray-존재-여부" class="headerlink" title="4.2 Array.isArray() : 존재 여부"></a>4.2 Array.isArray() : 존재 여부</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">123.456</span>;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Here I am!&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;melon&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.isArray : 배열이면 true, 아니면 false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(num)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(str)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(fruits)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-3-delete-array-index-일부-요소-삭제"><a href="#4-3-delete-array-index-일부-요소-삭제" class="headerlink" title="4.3 delete array[index] : 일부 요소 삭제"></a>4.3 delete array[index] : 일부 요소 삭제</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&#x27;🍎&#x27;</span>, <span class="string">&#x27;🍑&#x27;</span>, <span class="string">&#x27;🍌&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [ &#x27;🍎&#x27;, &#x27;🍑&#x27;, &#x27;🍌&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="property">length</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 일부 요소 삭제, 삭제해도 배열 사이즈가 그대로인 문제점이 존재</span></span><br><span class="line"><span class="keyword">delete</span> fruits[<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [ &#x27;🍎&#x27;, &lt;1 empty item&gt;, &#x27;🍌&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="property">length</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-4-unshift-shift-앞에서-추가-삭제"><a href="#4-4-unshift-shift-앞에서-추가-삭제" class="headerlink" title="4.4 unshift, shift : 앞에서 추가, 삭제"></a>4.4 unshift, shift : 앞에서 추가, 삭제</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&#x27;🍎&#x27;</span>, <span class="string">&#x27;🍑&#x27;</span>, <span class="string">&#x27;🍌&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// (1) Array.shift() : 배열 앞에서 삭제</span></span><br><span class="line">ret = fruits.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [ &#x27;🍑&#x27;, &#x27;🍌&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret); <span class="comment">// 🍎</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) Array.unshift(element) : 배열 앞에서 추가</span></span><br><span class="line">ret = fruits.<span class="title function_">unshift</span>(<span class="string">&#x27;🍉&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [ &#x27;🍉&#x27;, &#x27;🍑&#x27;, &#x27;🍌&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-5-push-pop-뒤에서-추가-삭제"><a href="#4-5-push-pop-뒤에서-추가-삭제" class="headerlink" title="4.5 push, pop : 뒤에서 추가, 삭제"></a>4.5 push, pop : 뒤에서 추가, 삭제</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&#x27;🍎&#x27;</span>, <span class="string">&#x27;🍑&#x27;</span>, <span class="string">&#x27;🍌&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.push(element) : 배열 뒤에서 추가</span></span><br><span class="line">ret = fruits.<span class="title function_">push</span>(<span class="string">&#x27;🍉&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [ &#x27;🍎&#x27;, &#x27;🍑&#x27;, &#x27;🍌&#x27;, &#x27;🍉&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.pop() : 배열 뒤에서 삭제</span></span><br><span class="line">ret = fruits.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [ &#x27;🍎&#x27;, &#x27;🍑&#x27;, &#x27;🍌&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret); <span class="comment">// 🍉</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-6-splice-연결-붙이다-배열-삭제-및-변경"><a href="#4-6-splice-연결-붙이다-배열-삭제-및-변경" class="headerlink" title="4.6 splice(연결, 붙이다) : 배열 삭제 및 변경"></a>4.6 splice(연결, 붙이다) : 배열 삭제 및 변경</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">MDN Array.prototype.splice()</a></li><li>배열의 기존 요소를 삭제 또는 교체하거나 새 요소를 추가하여 배열의 내용을 변경</li><li><code>splice(시작인덱스, 제거할 요소의 수, 배열에 추가할 요소)</code><ul><li>deleteCount : 0 이하라면 어떤 요소도 제거X (optional)</li><li>item1, item2, … : 배열에 추가할 요소를 생략하면 제거만 수행 (optional)</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> months = [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;March&#x27;</span>, <span class="string">&#x27;April&#x27;</span>, <span class="string">&#x27;June&#x27;</span>];</span><br><span class="line"></span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;Feb&#x27;</span>); <span class="comment">// 1번 인덱스에 삽입</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(months); <span class="comment">// [ &#x27;Jan&#x27;, &#x27;Feb&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;June&#x27; ]</span></span><br><span class="line"></span><br><span class="line">months.<span class="title function_">splice</span>(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&#x27;May&#x27;</span>); <span class="comment">// 4번 인덱스에 1개 요소 대체</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(months); <span class="comment">// [ &#x27;Jan&#x27;, &#x27;Feb&#x27;, &#x27;March&#x27;, &#x27;April&#x27;, &#x27;May&#x27; ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-7-slice-잘라내기-배열-자르고-새-배열-생성"><a href="#4-7-slice-잘라내기-배열-자르고-새-배열-생성" class="headerlink" title="4.7 slice(잘라내기) : 배열 자르고 새 배열 생성"></a>4.7 slice(잘라내기) : 배열 자르고 새 배열 생성</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">MDN Array.prototype.slice()</a></li><li>어떤 배열의 <code>begin 인덱스</code>부터 <code>end 인덱스</code>까지<ul><li>(<code>end 미포함</code>)에 대한 얕은 복사본을 새로운 배열 객체로 반환합니다.</li></ul></li><li><strong>원본 배열은 바뀌지 않습니다.</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// slice(시작인덱스, end인덱스-미포함)</span></span><br><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&#x27;🍎&#x27;</span>, <span class="string">&#x27;🍓&#x27;</span>, <span class="string">&#x27;🍌&#x27;</span>, <span class="string">&#x27;🍊&#x27;</span>, <span class="string">&#x27;🍇&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2번 인덱스부터</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">slice</span>(<span class="number">2</span>)); <span class="comment">// [ &#x27;🍌&#x27;, &#x27;🍊&#x27;, &#x27;🍇&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2번 인덱스부터 4번 인덱스 이전까지</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">4</span>)); <span class="comment">// [ &#x27;🍌&#x27;, &#x27;🍊&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1번 인덱스부터 5번 인덱스 이전까지</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">5</span>)); <span class="comment">// [ &#x27;🍓&#x27;, &#x27;🍌&#x27;, &#x27;🍊&#x27;, &#x27;🍇&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 뒤에서 2 인덱스까지</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">slice</span>(-<span class="number">2</span>)); <span class="comment">// [ &#x27;🍊&#x27;, &#x27;🍇&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2번 인덱스부터 뒤에서 1 인덱스까지</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">slice</span>(<span class="number">2</span>, -<span class="number">1</span>)); <span class="comment">// [ &#x27;🍌&#x27;, &#x27;🍊&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 원본 배열은 변경되지 않음</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">slice</span>()); <span class="comment">// [ &#x27;🍎&#x27;, &#x27;🍓&#x27;, &#x27;🍌&#x27;, &#x27;🍊&#x27;, &#x27;🍇&#x27; ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-8-concat-배열-병합"><a href="#4-8-concat-배열-병합" class="headerlink" title="4.8 concat : 배열 병합"></a>4.8 concat : 배열 병합</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&#x27;🍎&#x27;</span>, <span class="string">&#x27;🍑&#x27;</span>, <span class="string">&#x27;🍌&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">concat</span>(<span class="string">&#x27;🍓&#x27;</span>)); <span class="comment">// [ &#x27;🍎&#x27;, &#x27;🍑&#x27;, &#x27;🍌&#x27;, &#x27;🍓&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">concat</span>([<span class="string">&#x27;🍒&#x27;</span>, <span class="string">&#x27;🥭&#x27;</span>])); <span class="comment">// [ &#x27;🍎&#x27;, &#x27;🍑&#x27;, &#x27;🍌&#x27;, &#x27;🍒&#x27;, &#x27;🥭&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">concat</span>([<span class="string">&#x27;🍒&#x27;</span>, <span class="string">&#x27;🥭&#x27;</span>], <span class="string">&#x27;🍇&#x27;</span>)); <span class="comment">// [ &#x27;🍎&#x27;, &#x27;🍑&#x27;, &#x27;🍌&#x27;, &#x27;🍒&#x27;, &#x27;🥭&#x27;, &#x27;🍇&#x27; ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-9-배열-반복문⭐"><a href="#4-9-배열-반복문⭐" class="headerlink" title="4.9 배열 반복문⭐"></a>4.9 배열 반복문⭐</h2><ul><li>다양한 반복문 문법을 통해 배열 요소에 접근 가능</li><li>반복문 문법<ul><li><code>for...length(index 접근)</code></li><li><code>for...of (element 접근)</code> : <strong>배열 순회용</strong><ul><li>반복 가능한 객체(iterable)를 순회</li><li>즉, <code>[Symbol.iterator]</code> 속성을 가지는 것들만 사용가능</li></ul></li><li><code>for...in (key 접근)</code> : <strong>객체 순회용</strong><ul><li>cf. 사실 JS에서는 배열도 객체라 <code>for...in</code>을 사용해서 index를 가져올 수 있다.</li><li>즉, key를 리턴 (배열의 경우에는 index)</li></ul></li><li><code>Array.prototype.forEach (element, index, 호출한array 접근)</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&#x27;사과&#x27;</span>, <span class="string">&#x27;오렌지&#x27;</span>, <span class="string">&#x27;바나나&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 💡 1. use for (index)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fruits.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 0 1 2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[i]); <span class="comment">// 사과 오렌지 바나나</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 💡 2. use for...(element) of</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> fruit <span class="keyword">of</span> fruits) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fruit); <span class="comment">//  사과 오렌지 바나나</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 💡 3. use for...(key) in</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> fruits) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// 0 1 2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[key]); <span class="comment">// 사과 오렌지 바나나</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-10-forEach-⭐"><a href="#4-10-forEach-⭐" class="headerlink" title="4.10 forEach()⭐"></a>4.10 forEach()⭐</h2><p>배열 요소 별 콜백 함수 각각에 실행 : <code>Array.forEach(function(item, index, array)&#123;&#125;)</code></p><ul><li><code>item</code> : 배열 요소</li><li><code>index</code> : 배열 위치</li><li><code>array</code> : 배열</li></ul><h3 id="4-10-1-element와-index-출력"><a href="#4-10-1-element와-index-출력" class="headerlink" title="4.10.1 element와 index 출력"></a>4.10.1 element와 index 출력</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">15</span>, <span class="number">23</span>, <span class="number">17</span>, <span class="number">65</span>, <span class="number">78</span>];</span><br><span class="line"></span><br><span class="line">numbers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Value : <span class="subst">$&#123;element&#125;</span>, Index : <span class="subst">$&#123;index&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Value : 15, Index : 0</span></span><br><span class="line"><span class="comment">// Value : 23, Index : 1</span></span><br><span class="line"><span class="comment">// Value : 17, Index : 2</span></span><br><span class="line"><span class="comment">// Value : 65, Index : 3</span></span><br><span class="line"><span class="comment">// Value : 78, Index : 4</span></span><br></pre></td></tr></table></figure><h3 id="4-10-2-호출한-콜백함수-출력"><a href="#4-10-2-호출한-콜백함수-출력" class="headerlink" title="4.10.2 호출한 콜백함수 출력"></a>4.10.2 호출한 콜백함수 출력</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">15</span>, <span class="number">23</span>, <span class="number">17</span>, <span class="number">65</span>, <span class="number">78</span>];</span><br><span class="line"></span><br><span class="line">numbers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [ 15, 23, 17, 65, 78 ]</span></span><br><span class="line"><span class="comment">// [ 15, 23, 17, 65, 78 ]</span></span><br><span class="line"><span class="comment">// [ 15, 23, 17, 65, 78 ]</span></span><br><span class="line"><span class="comment">// [ 15, 23, 17, 65, 78 ]</span></span><br><span class="line"><span class="comment">// [ 15, 23, 17, 65, 78 ]</span></span><br></pre></td></tr></table></figure><hr><h3 id="4-10-3-단점"><a href="#4-10-3-단점" class="headerlink" title="4.10.3 단점"></a>4.10.3 단점</h3><ul><li><code>await</code>을 루프 내부에 쓸 수 없음</li><li><code>forEach()</code> 중간에 루프를 탈출하는 것이 곤란. 다른 문법의 경우엔, <code>break</code>로 가능</li></ul><hr><h3 id="4-10-4-다른-반복문과-forEach"><a href="#4-10-4-다른-반복문과-forEach" class="headerlink" title="4.10.4 다른 반복문과 forEach"></a>4.10.4 다른 반복문과 forEach</h3><ul><li><code>for-of</code>로 다른 순회문에서 할 수 있는 모든 것을 할 수 있어서 가장 좋다.</li><li>성능에 대한 비교는 사실 의미가 X<ul><li>(엄밀히 따지면 <code>forEach</code>가 제일 느리다.)</li><li>그러나 JS에서 성능이 유의미할 정도로 순회문을 돌아야 하면, 웹 어셈블리 등 다른 방법을 알아보는 것이 좋다.</li></ul></li><li>프론트엔드 개발에서 <code>for-of</code>를 돌아야 하는 일은 거의 없고,<ul><li>대부분이 <code>map</code> <code>reduce</code>를 사용해서 해결할 수 있고, 그 쪽이 더 함수형이고 읽기도 간결하다.</li></ul></li></ul><hr><h2 id="4-11-map-사상-대응"><a href="#4-11-map-사상-대응" class="headerlink" title="4.11 map (사상,대응)"></a>4.11 map (사상,대응)</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map">MDN Array.prototype.map()</a></li><li>map(맵)의 사전적 의미<ul><li>지구 표면의 전부나 일부를 일정한 비율로 줄여 약속된 기호를 사용하여 평면에 그린 그림</li><li>어떤 사실이나 주어진 자료 등을 분석하여 그 관계를 알기 쉽게 나타낸 표.</li><li>『물리』 물체에서 나온 빛이 거울에 반사 또는 굴절된 다음에 모여서 생기는 상</li><li>『수학』 어떤 집합의 임의의 원소가 다른 집합의 하나의 원소에 대응할 때, 그 두 집합 간의 대응 관계</li></ul></li><li>mapping는 ’지도를 만든다‘는 뜻이지만, 메모리 맵(memory map)을 제작하는 것을 말함.<ul><li>컴퓨터를 사용해 지도 데이터를 작성하는 일을 말하거나</li><li>롤플레잉 게임 등의 배경이 되는 미로나 지도를 플레이어가 작성하는 것도</li><li>사상(mapping, 베낄 사, 모양 상)이라고 함</li></ul></li><li><code>배열.map((요소, 인덱스, 호출한배열), this로 사용되는 값)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>];</span><br><span class="line"><span class="keyword">const</span> map1 = array1.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map1); <span class="comment">// Array [2, 8, 18, 32]</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-12-sort-정렬"><a href="#4-12-sort-정렬" class="headerlink" title="4.12 sort (정렬)"></a>4.12 sort (정렬)</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">MDN Array.prototype.sort()</a></li><li>배열의 요소를 적절한 위치에 정렬한 후 그 배열을 반환합니다.</li><li><strong>기본 정렬 순서는 문자열의 유니코드 코드</strong> 포인트를 따릅니다.</li><li><strong>문자열 배열인 경우 알파벳순</strong>으로 정렬 (첫글자 기준, A~Z)</li><li><strong>숫자를 문자열로 정렬하면</strong> “2”가 “1”보다 크므로 “25”가 “100”보다 큼⭐<ul><li>때문에 숫자를 정렬할 때 잘못된 결과를 생성</li><li>비교 기능을 제공하여 이 문제를 해결 가능</li></ul></li></ul><hr><h3 id="4-12-1-오른차순-정렬"><a href="#4-12-1-오른차순-정렬" class="headerlink" title="4.12.1 오른차순 정렬"></a>4.12.1 오른차순 정렬</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;); <span class="comment">// 오름차순</span></span><br><span class="line">array.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br></pre></td></tr></table></figure><ul><li>함수는 두 값을 비교할 때 <code>sort()</code>값을 비교 함수로 보내고 반환된(음수, 0, 양수) 값에 따라 값을 정렬합니다.<ul><li>음수면, b 앞에 정렬된다.</li><li>양수면, a 앞에 정렬된다.</li><li>결과가 0이면 두 값의 정렬 순서가 변경되지 않습니다.</li></ul></li></ul><hr><h3 id="4-12-2-내림차순-정렬"><a href="#4-12-2-내림차순-정렬" class="headerlink" title="4.12.2 내림차순 정렬"></a>4.12.2 내림차순 정렬</h3><ul><li>40과 100을 비교할 떄, (40, 100)</li><li><code>(a - b)</code>일 떄 (40 - 100)을 계산하면 결과가 음수(-60)이므로</li><li>sort()는 40을 100보다 작은 값으로 정렬</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a); <span class="comment">// 내림차순</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-13-indexOf-lastIndexOf-인덱스-탐색"><a href="#4-13-indexOf-lastIndexOf-인덱스-탐색" class="headerlink" title="4.13 indexOf, lastIndexOf : 인덱스 탐색"></a>4.13 indexOf, lastIndexOf : 인덱스 탐색</h2><ul><li><p>index 탐색 (앞에서부터) : <code>Array.indexOf(item, from)</code></p><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">MDN Array.prototype.indexOf()</a></li><li>배열에서 지정된 요소를 찾을 수 있는 첫 번째 인덱스를 반환하고 존재하지 않으면 -1을 반환</li></ul></li><li><p>index 탐색(뒤에서부터) : <code>Array.lastIndexOf(item, from)</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;melon&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.indexOf(searchElement[, fromIndex])</span></span><br><span class="line"><span class="comment">// arr.indexOf(배열에서 찾을 요소, 검색을 시작할 색인-option)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">indexOf</span>(<span class="string">&#x27;orange&#x27;</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">indexOf</span>(<span class="string">&#x27;Orange&#x27;</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">indexOf</span>(<span class="string">&#x27;orange&#x27;</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;orange&#x27;</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;orange&#x27;</span>, -<span class="number">3</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;orange&#x27;</span>, <span class="number">0</span>)); <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">includes</span>(<span class="string">&#x27;banana&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">includes</span>(<span class="string">&#x27;Banana&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">includes</span>(<span class="number">0</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-14-indexOf-인덱스-포함여부"><a href="#4-14-indexOf-인덱스-포함여부" class="headerlink" title="4.14 indexOf : 인덱스 포함여부"></a>4.14 indexOf : 인덱스 포함여부</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">MDN Array.prototype.indexOf()</a></li><li>배열에서 지정된 요소를 찾을 수 있는 첫 번째 인덱스를 반환하고 존재하지 않으면 -1을 반환</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arr.indexOf(searchElement[, fromIndex])</span></span><br><span class="line"><span class="comment">// arr.indexOf(배열에서 찾을 요소, 검색을 시작할 색인-option)</span></span><br><span class="line"><span class="keyword">const</span> beasts = [<span class="string">&#x27;ant&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>, <span class="string">&#x27;camel&#x27;</span>, <span class="string">&#x27;duck&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(beasts.<span class="title function_">indexOf</span>(<span class="string">&#x27;bison&#x27;</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(beasts.<span class="title function_">indexOf</span>(<span class="string">&#x27;bison&#x27;</span>, <span class="number">2</span>)); <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(beasts.<span class="title function_">indexOf</span>(<span class="string">&#x27;giraffe&#x27;</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-15-reverse-배열-반전"><a href="#4-15-reverse-배열-반전" class="headerlink" title="4.15 reverse : 배열 반전"></a>4.15 reverse : 배열 반전</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, -<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums.<span class="title function_">sort</span>()); <span class="comment">// [ -1, 0, 1, 2, 4, 5 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums.<span class="title function_">reverse</span>()); <span class="comment">// [ 5, 4, 2, 1, 0, -1 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;melon&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">sort</span>()); <span class="comment">// [ &#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;melon&#x27;, &#x27;orange&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">reverse</span>()); <span class="comment">// [ &#x27;orange&#x27;, &#x27;melon&#x27;, &#x27;banana&#x27;, &#x27;apple&#x27; ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-16-filter-거르다"><a href="#4-16-filter-거르다" class="headerlink" title="4.16 filter (거르다)"></a>4.16 filter (거르다)</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">MDN filter</a></li><li>주어진 배열을 순회하면서 콜백 함수의 반환값이 true에 해당하는 요소로만 구성된 새로운 배열을 생성하여 반환.</li><li>한마디로 find()의 찾아서 값을 반환하는 기능과 map()의 배열 생성 기능의 융합 버젼.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numberArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numberFilterArr = numberArr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item % <span class="number">2</span> === <span class="number">0</span>; <span class="comment">// 해당조건에 부합으면 item을 넣어 배열 반환</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberFilterArr); <span class="comment">// [2, 4]</span></span><br></pre></td></tr></table></figure><h3 id="4-16-1-파라미터"><a href="#4-16-1-파라미터" class="headerlink" title="4.16.1 파라미터"></a>4.16.1 파라미터</h3><p>콜백 함수의 조건을 만족하는 값을 배열로 반환 : <code>Array.filter(function(item, index, array) &#123;&#125;</code></p><ul><li><code>item</code> : 배열 요소</li><li><code>index</code> : 배열 위치</li><li><code>array</code> : 배열</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> users = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;bob&#x27;</span>, <span class="attr">age</span>: <span class="number">17</span>, <span class="attr">job</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;alice&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">job</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;john&#x27;</span>, <span class="attr">age</span>: <span class="number">27</span>, <span class="attr">job</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter : 조건을 만족하는 값을 배열로 반환</span></span><br><span class="line"><span class="keyword">let</span> filter_job = users.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> user.<span class="property">job</span> == <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filter_job);</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123; name: &quot;bob&quot;, age: 17, job: false &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: &quot;alice&quot;, age: 20, job: false &#125;,</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> filter_age = users.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> user.<span class="property">age</span> &gt; <span class="number">19</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filter_age);</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123; name: &quot;alice&quot;, age: 20, job: false &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: &quot;john&quot;, age: 27, job: true &#125;,</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-17-reduce-줄이다"><a href="#4-17-reduce-줄이다" class="headerlink" title="4.17 reduce (줄이다)"></a>4.17 reduce (줄이다)</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">MDN reduce</a></li><li>배열을 순회하면서, callback 함수를 실행하고, 하나의 리턴 값을 반환하는 함수</li><li>누적 계산의 결과 값 반환</li><li>누산기 (acc), 현재 값 (cur), 현재 인덱스 (idx), 원본 배열 (src) 4개의 매개변수를 가짐</li><li>누산기(accumulator) &#x3D; 계산 결과를 저장해놓는 곳 &#x3D; 연산 장치에 일시적으로 저장하는 레지스터 &#x3D; 묶을 누, 셈 산, 그릇 기</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (acc += cur);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result2 = arr2.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (acc += cur);</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">// 25</span></span><br></pre></td></tr></table></figure><hr><h3 id="4-17-1-파라미터"><a href="#4-17-1-파라미터" class="headerlink" title="4.17.1 파라미터"></a>4.17.1 파라미터</h3><ul><li>요소 별 함수 수행 누적 결과값 반환 : <code>Array.reduce(function(accumulator, item, index, array)&#123;&#125;)</code><ul><li><code>accumulator</code> : 이전 함수 결과(initial로 초기값 설정 가능)</li><li><code>item</code> : 배열 요소</li><li><code>index</code> : 배열 위치</li><li><code>array</code> : 배열</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> call_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;result\tvalue\tindex&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> sum = nums.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">accumulator, item, index, array</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(accumulator, <span class="string">&#x27;\t\t&#x27;</span>, item, <span class="string">&#x27;\t\t&#x27;</span>, index);</span><br><span class="line">  call_count++;</span><br><span class="line">  <span class="keyword">return</span> accumulator + item;</span><br><span class="line">&#125;, <span class="number">0</span>); <span class="comment">// initial 없다면 index 1부터 시작</span></span><br><span class="line"><span class="comment">/* 결과</span></span><br><span class="line"><span class="comment">resultvalueindex</span></span><br><span class="line"><span class="comment">0  1  0</span></span><br><span class="line"><span class="comment">1  2  1</span></span><br><span class="line"><span class="comment">3  3  2</span></span><br><span class="line"><span class="comment">6  4  3</span></span><br><span class="line"><span class="comment">10  5  4</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(call_count); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-18-split-나눈다"><a href="#4-18-split-나눈다" class="headerlink" title="4.18 split (나눈다)"></a>4.18 split (나눈다)</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/split">MDN String.prototype.split</a></li><li>e.g. 리그오브레전드(롤)에서 ‘스플릿 푸쉬’(분열되서 나눠서 라인을 민다)</li><li>String 객체를 구분자를 이용하여 여러 개의 문자열로 나눔</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;The quick brown fox jumps over the lazy dog.&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> words = str.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(words[<span class="number">3</span>]); <span class="comment">// &quot;fox&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chars = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chars[<span class="number">8</span>]); <span class="comment">// &quot;k&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> strCopy = str.<span class="title function_">split</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(strCopy); <span class="comment">// Array [&quot;The quick brown fox jumps over the lazy dog.&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// **** 응용 예시</span></span><br><span class="line"><span class="keyword">const</span> text = <span class="string">&#x27;안녕하세요&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">replace</span>(<span class="string">&#x27;안녕&#x27;</span>, <span class="string">&#x27;안녕#&#x27;</span>)) <span class="comment">// 안녕#하세요</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">replace</span>(<span class="string">&#x27;안녕&#x27;</span>, <span class="string">&#x27;안녕#&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;#&#x27;</span>)) <span class="comment">// [ &#x27;안녕&#x27;, &#x27;하세요&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> text2 = <span class="string">&#x27;철수안녕하세요&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text2.<span class="title function_">replace</span>(<span class="string">&#x27;안녕&#x27;</span>, <span class="string">&#x27;#안녕#&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;#&#x27;</span>)) <span class="comment">// [ &#x27;철수&#x27;, &#x27;안녕&#x27;, &#x27;하세요&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// **** 시크릿 코드를 만들어 겹치지 않게 하는 법</span></span><br><span class="line"><span class="keyword">const</span> text3 = <span class="string">&#x27;철수안녕하세요&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text3.<span class="title function_">replace</span>(<span class="string">&#x27;안녕&#x27;</span>, <span class="string">&#x27;#@$%안녕#@$%&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;#@$%&#x27;</span>)) <span class="comment">// [ &#x27;철수&#x27;, &#x27;안녕&#x27;, &#x27;하세요&#x27; ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-19-join-합친다-배열-값을-문자열로-변환"><a href="#4-19-join-합친다-배열-값을-문자열로-변환" class="headerlink" title="4.19 join (합친다) : 배열 값을 문자열로 변환"></a>4.19 join (합친다) : 배열 값을 문자열로 변환</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/join">MDN Array.prototype.join()</a></li><li>배열의 모든 요소를 연결해 하나의 문자열로 만듭니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = [<span class="string">&#x27;Fire&#x27;</span>, <span class="string">&#x27;Air&#x27;</span>, <span class="string">&#x27;Water&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elements.<span class="title function_">join</span>()); <span class="comment">// &quot;Fire,Air,Water&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elements.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// &quot;FireAirWater&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elements.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)); <span class="comment">// &quot;Fire-Air-Water&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-19-1-split-reverse-join-문자열-뒤집기"><a href="#4-19-1-split-reverse-join-문자열-뒤집기" class="headerlink" title="4.19.1 split-reverse-join : 문자열 뒤집기"></a>4.19.1 split-reverse-join : 문자열 뒤집기</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">문자열.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 문자사이에 공백을 기준으로 배열로</span></span><br><span class="line"><span class="comment">// 2. 뒤집고</span></span><br><span class="line"><span class="comment">// 3. 문자사이에 공백을 기준으로 문자열로</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-20-fill"><a href="#4-20-fill" class="headerlink" title="4.20 fill()"></a>4.20 fill()</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/fill">MDN Array.prototype.fill()</a></li><li>배열의 시작 인덱스부터 끝 인덱스의 이전까지 정적인 값 하나로 채움</li></ul><hr><h2 id="4-21-Array-from"><a href="#4-21-Array-from" class="headerlink" title="4.21 Array.from"></a>4.21 Array.from</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/from">MDN Array.from()</a></li><li>문자열 등 유사 배열(Array-like) 객체나 이터러블한 객체를 배열로 만들어주는 메서드</li><li><code>유사 배열 객체</code>란, <strong>키가 인덱스 값</strong>으로 되어있고 길이를 나타내는 length 속성을 갖는 객체를 의미</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 문자열을 배열로 만드는 예시</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">&#x27;Hello&#x27;</span>));</span><br><span class="line"><span class="comment">// [ &#x27;H&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 유사 배열 객체를 배열로 만드는 예시</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="number">0</span>: <span class="string">&#x27;찬민&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;희진&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;태인&#x27;</span>, <span class="attr">length</span>: <span class="number">3</span> &#125;));</span><br><span class="line"><span class="comment">// [ &#x27;찬민&#x27;, &#x27;희진&#x27;, &#x27;태인&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 함수의 매개변수들을 순서대로 배열로 만드는 예시</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">funcA</span> = (<span class="params">...<span class="variable language_">arguments</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">funcA</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><p><code>Array.from()</code> 의 첫 번째 인자는 배열로 만들 이터러블한 객체가 되며, 두 번째 인자는 생성한 배열의 모든 원소에 대해 수행할 맵핑 함수입니다. (<code>Array.map()</code> 이라고 생각하시면 됩니다.)</p><p>한번 <code>Array.from()</code>과 반복문을 활용해 1부터 31까지의 수를 원소로 갖는 배열을 생성해 보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 맵핑 함수의 첫 번째 인자 언더스코어(_) 는 특별한 인자가 아니라,</span></span><br><span class="line"><span class="comment">// 불필요한 인자의 공간을 채우기 위한 용도입니다.</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">31</span>), <span class="function">(<span class="params">_, index</span>) =&gt;</span> index + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><hr><h2 id="4-22-find"><a href="#4-22-find" class="headerlink" title="4.22 find()"></a>4.22 find()</h2><ul><li>콜백 함수의 조건을 만족하는, 단 하나의 값만 반환 : <code>Array.find(function(item, index. array) &#123;&#125;)</code><ul><li><code>item</code> : 배열 요소</li><li><code>index</code> : 배열 위치</li><li><code>array</code> : 배열</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> users = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;bob&#x27;</span>, <span class="attr">age</span>: <span class="number">17</span>, <span class="attr">job</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;alice&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">job</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;john&#x27;</span>, <span class="attr">age</span>: <span class="number">27</span>, <span class="attr">job</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// find : 조건에 맞는 하나의 값만 반환</span></span><br><span class="line"><span class="keyword">let</span> find_job = users.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> user.<span class="property">job</span> == <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(find_job); <span class="comment">// &#123; name: &#x27;bob&#x27;, age: 17, job: false &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> find_age = users.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> user.<span class="property">age</span> &gt; <span class="number">19</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(find_age); <span class="comment">// &#123; name: &#x27;alice&#x27;, age: 20, job: false &#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-23-some"><a href="#4-23-some" class="headerlink" title="4.23 some()"></a>4.23 some()</h2><ul><li>배열 내 단 하나라도 콜백 함수의 조건을 만족하는 요소가 있다면 true, 아니면 false반환 (빈 배열일 경우 false)<ul><li><code>Array.some(function(item, index, array) &#123;&#125;)</code></li><li><code>item</code> : 배열 요소</li><li><code>index</code> : 배열 위치</li><li><code>array</code> : 배열</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> users = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;bob&#x27;</span>, <span class="attr">age</span>: <span class="number">17</span>, <span class="attr">job</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;alice&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">job</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;john&#x27;</span>, <span class="attr">age</span>: <span class="number">27</span>, <span class="attr">job</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// some : 조건을 만족하는 요소가 있다면 true</span></span><br><span class="line"><span class="keyword">let</span> some_job = users.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">users</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> users.<span class="property">job</span> == <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(some_job); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> some_age = users.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">users</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> users.<span class="property">age</span> &lt; <span class="number">16</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(some_age); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> empty = [].<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">16</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(empty); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-24-every"><a href="#4-24-every" class="headerlink" title="4.24 every()"></a>4.24 every()</h2><ul><li>배열 내 모든 요소가 콜백 함수의 조건을 만족하는 요소가 있다면 true, 아니면 false반환 (빈 배열일 경우 false)<ul><li><code>Array.every(function(item, index, array) &#123;&#125;)</code></li><li><code>item</code> : 배열 요소</li><li><code>index</code> : 배열 위치</li><li><code>array</code> : 배열</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> users = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;bob&#x27;</span>, <span class="attr">age</span>: <span class="number">17</span>, <span class="attr">job</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;alice&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">job</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;john&#x27;</span>, <span class="attr">age</span>: <span class="number">27</span>, <span class="attr">job</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> some_job = users.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">users</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> users.<span class="property">job</span> == <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(some_job); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> some_age = users.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">users</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> users.<span class="property">age</span> &gt; <span class="number">16</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(some_age); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> empty = [].<span class="title function_">every</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">16</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(empty); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-25-N차원-배열"><a href="#4-25-N차원-배열" class="headerlink" title="4.25 N차원 배열"></a>4.25 N차원 배열</h2><ul><li>배열 안에 N개 만큼의 배열이 존재하는 객체</li><li>2&#x2F;3차원 지도 정보, RGB를 저장하는 2차원 사진 파일 등을 표현할 떄 활용 가능</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [</span><br><span class="line">  [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>],</span><br><span class="line">  [<span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>],</span><br><span class="line">  [<span class="number">301</span>, <span class="number">302</span>, <span class="number">303</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array[<span class="number">0</span>]); <span class="comment">// [ 101, 102, 103 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array[<span class="number">1</span>][<span class="number">0</span>]); <span class="comment">// 201</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array[<span class="number">2</span>][<span class="number">2</span>]); <span class="comment">// 303</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr_2 = array.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr_2); <span class="comment">// [ 301, 302, 303 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [ [ 101, 102, 103 ], [ 201, 202, 203 ] ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array_num = array.<span class="title function_">push</span>([<span class="number">401</span>, <span class="number">402</span>, <span class="number">403</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="property">length</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array_num); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [ [ 101, 102, 103 ], [ 201, 202, 203 ], [ 401, 402, 403 ] ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; array[i].<span class="property">length</span>; j++) &#123;</span><br><span class="line">    array[i][j] += <span class="number">1000</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(array[i][j]); <span class="comment">// 1101 ... 1403</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CheatSheet </category>
          
          <category> JS-Algo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CheatSheet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Back-Node-01-Intro</title>
      <link href="/2023/02/05/Back-Node-01/"/>
      <url>/2023/02/05/Back-Node-01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Node-js란"><a href="#1-Node-js란" class="headerlink" title="1. Node.js란"></a>1. Node.js란</h1><blockquote><p>Node.js는 Chrom V8 JavaScript 엔진으로 빌드된 JavaScript 런타임</p></blockquote><ul><li><code>런타임</code> : 특정 언어로 개발된 프로그램을 해석하고 실행할 수 있는 환경<ul><li>프로그래밍 넝어가 구동되는 환경</li></ul></li><li><code>JavaScript 런타임</code> : JS로 된 프로그램을 해석하고 실행할 수 있는 환경</li><li><code>Chrom V8 JavaScript 엔진</code><ul><li>Node.js가 등장하기 전 JS는 브라우저에서만 동작</li><li>2008년 구글이 크롬 브라우저를 출시</li><li>크롬 브라우저를 만들면서 V8엔진을 개발했고, 이로 인해 JS 실행 속도가 대폭 개선됨</li></ul></li><li><code>Node.js</code>는 브라우저 밖에서도 JS를 실행할려고 V8엔진을 이용해 만든 것</li></ul><hr><h1 id="2-Node-js의-특징"><a href="#2-Node-js의-특징" class="headerlink" title="2. Node.js의 특징"></a>2. Node.js의 특징</h1><blockquote><p>첫 번쨰 예시</p><ul><li>스레드(Thread)라는 사람이 라면집 개업</li><li>혼자 장사함</li><li>손님이 주문하면, 요리를 다 할 떄까지 주문을 못받음</li></ul><p>두 번째 예시</p><ul><li>여러 명의 직원(Thread)을 뽑음</li><li>장사가 안되면, 직원(Thread)이 놈</li></ul><p>세 번쨰 예시</p><ul><li>첫 번쨰 예시에서 스레드(Thread)가</li><li>논블로킹(Non-blocking) 기계를 샀음 </li><li>논블로킹 기계가 손님 주문을 받음</li><li>스레드는 요리만 함</li></ul></blockquote><p><strong>프로그래밍 언어마다 차이가 있지만, 위 3가지 방식 중 한 가지 형태로 실행</strong>됩니다.</p><ul><li>두 번쨰 예시<ul><li>가지고 있는 자원이 많은 경우</li><li>e.g. Java</li></ul></li><li>세 번쨰 예시<ul><li>가지고 있는 자원이 한정적이고 최대한 효율적이여 햐는 경우</li><li>e.g. Node</li><li>Node는 가볍고, 효율적이고, 높은 성능처리를 위해</li><li>논블로킹I&#x2F;O , 싱글 스레드, 이벤트 루프라는 특징을 가집니다.</li></ul></li></ul><hr><h2 id="2-1-논블로킹-Non-blocking-I-x2F-O"><a href="#2-1-논블로킹-Non-blocking-I-x2F-O" class="headerlink" title="2.1 논블로킹(Non-blocking) I&#x2F;O"></a>2.1 논블로킹(Non-blocking) I&#x2F;O</h2><p>프로그래밍 언어별로 처리하는 방식은 크게 2가지가 있습니다.</p><ul><li><strong>여러 개의 작업을동시에 처리</strong>할 수 있는 언어</li><li><strong>한 번에 하나의 작업만 처리</strong>할 수 있는 언어 (e.g. JavaScript)</li></ul><hr><p>그렇지만 I&#x2F;O 작업의 경우 JS도 동시처리할 수 있습니다.</p><ul><li>e.g. 파일 읽기&#x2F;쓰기같은 파일 시스템 처리</li><li>e.g. DB로 데이터를 전송&#x2F;조회같은 네트워크 요청</li></ul><blockquote><p>cf. I&#x2F;O 작업 &#x3D; 입력(input)과 출력(output)의 줄임말</p></blockquote><h3 id="2-1-1-블로킹-Blocking"><a href="#2-1-1-블로킹-Blocking" class="headerlink" title="2.1.1 블로킹(Blocking)"></a>2.1.1 블로킹(Blocking)</h3><ul><li>함수를 호출하면 호출된 함수가 <strong>작업을 마칠 떄까지 제어권을 돌려주지 않고 함수가 종료될 떄까지 대기</strong>하는 방식</li><li>함수가 완전히 종료되기 전까지는 <strong>다른 작업을 진행하지 못하고 기다리는 것</strong></li><li><strong>동기적 I&#x2F;O</strong></li><li>파일 쓰기가 완료될 떄까지 프로그램이 다음 코드를 실행하지 않고, <ul><li>대기하기 때문에 파일을 쓰는 동안 CPU가 사용되지 않아 비효율적</li></ul></li></ul><hr><h3 id="2-1-2-논블로킹-Non-blocking"><a href="#2-1-2-논블로킹-Non-blocking" class="headerlink" title="2.1.2 논블로킹(Non-blocking)"></a>2.1.2 논블로킹(Non-blocking)</h3><ul><li>함수를 호출하면 호출된 함수에게 <strong>바로 제어권을 넘겨서 다른 작업을 바로 진행</strong>할 수 있도록 하는 방식</li><li>함수를 호출되어 실행되는 중에도 <strong>다른 작업을 진행 가능</strong></li><li><strong>비동기적 I&#x2F;O</strong></li><li>파일 쓰기를 요청한 후 다른 작업을 할 수 있어서 좀 더 효율적</li></ul><p>“논 블로킹이 좋다, 블로킹이 좋다”의 개념이 아니라<br>어떤 경우에는 블로킹 작업을 해야하고, 어떤 경우엔 논블로킹 작업을 해야할 떄도 있습니다.</p><hr><h2 id="2-2-싱글-스레드-Single-Thread"><a href="#2-2-싱글-스레드-Single-Thread" class="headerlink" title="2.2 싱글 스레드(Single Thread)"></a>2.2 싱글 스레드(Single Thread)</h2><ul><li><code>싱글 스레드</code> &#x3D; 스레드를 하나만 사용해, <strong>하나의 작업만 수행</strong><ul><li>즉, 동시에 하나의 작업만 처리할 수 있다는 뜻</li><li>e.g. Node</li></ul></li><li>JS같은 싱글 스레드 언어는 작성된 프로그램이 순차적으로 실행되고, 여러 작업을 동시처리X</li><li>반대로, <code>멀티 스레드</code> &#x3D; 스레드를 여러 개를 두어서 <strong>동시에 여러 작업을 수행</strong><ul><li>e.g. Java</li></ul></li></ul><hr><h3 id="2-2-1-프로세스"><a href="#2-2-1-프로세스" class="headerlink" title="2.2.1 프로세스"></a>2.2.1 프로세스</h3><ul><li>컴퓨터는 <code>프로세스</code>라는 작업 단위를 두고 프로세스를 통해 작업을 처리합니다.</li><li>Node.js를 포함한 여러 프로그램들은 <strong>개별적인 프로세스</strong>로,<ul><li>리소스(CPU, 메모리, 저장공간 등)을 할당받아서 실행됩니다.</li></ul></li><li><code>스레드(Theard)</code>는 프로세스 안에서 작업을 처리하기 위해 실행되는 흐름의 단위</li><li><strong>하나의 프로세스는 여러 개의 스레드를 생성해 여러 작업을 동시에 처리</strong>할 수 있습니다.</li></ul><hr><h3 id="2-2-2-싱글-스레드-vs-멀티-스레드-장단점"><a href="#2-2-2-싱글-스레드-vs-멀티-스레드-장단점" class="headerlink" title="2.2.2 싱글 스레드 vs 멀티 스레드 장단점"></a>2.2.2 싱글 스레드 vs 멀티 스레드 장단점</h3><ul><li>멀티 스레드<ul><li>장점 : 동시에 여러 작업을 수행해 성능이 좋음</li><li>단점 : 많은 자원이 필요하고, 자원이 제대로 사용되지 않는 비효율이 생길 수 있음</li></ul></li><li>싱글 스레드<ul><li>장점 : <ul><li>Node.js는 싱글 스레드의 약저을 극복하기 위해 논블로킹을 사용하여</li><li>파일 쓰기, 네트워크를 통한 DB 처리 등의 작업을 하는 동안 컴퓨터가 쉬지않고,</li><li>다른 작업을 하도록 해서 적은 자원으로 효율아 좋음</li></ul></li></ul></li></ul><hr><h2 id="2-3-이벤트-루프"><a href="#2-3-이벤트-루프" class="headerlink" title="2.3 이벤트 루프"></a>2.3 이벤트 루프</h2><p>Node.js는 V8 JS 엔진과 libuv, llhttp, c-ares,OpenSSL, zlib라는 라이브러리로 구성되어 있습니다.</p><ul><li>이 중 libuv는 이벤트 루프를 통해 JS가 가진 싱글 스레드의 약점을 극복하고</li><li>효율적인 작업을 처리하도록 고안되었습니다.</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/js-14-2.png" alt="js-14-2"></p><hr><h1 id="3-NPM"><a href="#3-NPM" class="headerlink" title="3. NPM"></a>3. NPM</h1><p>NPM은 Node Package Manager로 Node.js 기반으로 개발된 수많은 JS 패키지(라이브러리)가 등록되어 있어<br>개발자들이 쉽게 설치하고, 운영할 수 있도록 해주는 Node.js 패키지 관리자입니다.</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-Docker란</title>
      <link href="/2023/02/04/DevOps-docker01-intro/"/>
      <url>/2023/02/04/DevOps-docker01-intro/</url>
      
        <content type="html"><![CDATA[<h1 id="1-사람들이-많이-사용하는-Dev-Tools"><a href="#1-사람들이-많이-사용하는-Dev-Tools" class="headerlink" title="1. 사람들이 많이 사용하는 Dev Tools"></a>1. 사람들이 많이 사용하는 Dev Tools</h1><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/devops-docker-01_1.png" alt="devops-docker-01_1" style="zoom:67%;" /><p>Git에 이어, 두번째로 많이 사용하는 Dev Tool은 Docker이다.<br><strong>이제는 정말 필수가 되어버린 Docker</strong> </p><hr><h1 id="2-도커가-탄생한-배경"><a href="#2-도커가-탄생한-배경" class="headerlink" title="2. 도커가 탄생한 배경"></a>2. 도커가 탄생한 배경</h1><p>기존, 로컬에서 개발해서 실 서버에 올릴 때 소스파일만 올리는 것으로는 문제가 있었다.<br>js를 예로 든다면, js소스 파일을 구동하기 위해서는 npm, node.js, 각종 Dependencies등 을 설정 해야한다.<br>개발자의 PC마다, 서버마다 이 모든것들을 설치하는것은 번거롭기도 하고, 오류의 발생의 원인이 되곤 한다.</p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/devops-docker-01_2.png" alt="devops-docker-01_2" style="zoom: 50%;" /><p>내 서버에 node.js가 있고 서버에도 node.js가 있으니 내 서버에서 개발한 js 파일을 서버에 배포하면 자동으로 동작하겠지?<br>배포 → <strong>에러가 발생</strong> → 내 PC에선 잘되는데 서버에선 왜 안돼!!! -&gt; <strong>node.js의 버전이 맞지 않기 때문에 발생</strong></p><blockquote><p><strong>이러한 문제점을 해결하기 위해 Docker가 탄생!</strong></p></blockquote><hr><h1 id="3-도커란-무엇인가"><a href="#3-도커란-무엇인가" class="headerlink" title="3. 도커란 무엇인가?"></a>3. 도커란 무엇인가?</h1><p>도커란 어플리케이션을 패키징 할 수 있는 툴</p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/devops-docker-01_3.png" alt="devops-docker-01_3" style="zoom: 50%;" /><p><strong>컨테이너</strong>라고 불리는 하나의 작은 소프트웨어 유닛안에,<br>우리의 <strong>어플리케이션과 그에 필요한 시스템 툴, 환경설정, 모든 디펜던시</strong>를 하나에 묶어서,<br>다른 서버, 다른 PC <strong>그 어떤곳에도 쉽게 배포하고 안정적으로 구동</strong>할 수 있게 도와주는 툴이다.</p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/devops-docker-01_4.png" alt="devops-docker-01_4" style="zoom:50%;" /><p>어플리케이션과 어플리케이션이 구동하는데 필요한 모든 것들을 도커 컨테이너에 담아 저장한 후,<br>어플리케이션을 구동하고 싶은 서버에 해당 도커 컨테이너를 다운받는다면, 어떤 PC에서도 동일하게 구동할 수 있다.</p><ol><li><strong>내 PC에서는 되는데 왜 니 PC에서는 안되니?</strong></li><li><strong>어플리케이션을 구동하는데 필요한 이것 저것들을 설정하고 준비해야하는 번거로움</strong></li></ol><p> 을 해결해주는 정말 <strong>유용한 패키징 툴</strong>이다.</p><hr><h1 id="4-도커-VS-VM"><a href="#4-도커-VS-VM" class="headerlink" title="4. 도커 VS VM"></a>4. 도커 VS VM</h1><blockquote><p>뭐야.. 그럼 VM이랑 비슷한거 아니야?</p></blockquote><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/devops-docker-01_5.png" alt="devops-docker-01_5" style="zoom:50%;" /><p>(좌) VM, (우) Docker</p><ul><li><strong>VM</strong><ul><li>하드웨어 위에 올라가는 <strong>vmware나 VirtualBox 같은 Hypervisor</strong>을 이용해 독립적인 가상의 머신을 만들 수 있다.</li><li>동일한 어플리케이션을 다양한 OS위에서 구동하기 위한 소프트웨어로,</li><li><strong>각각의 VM에는 OS가 포함되어 올라가기 때문에 굉장히 무겁고 느리다.</strong></li></ul></li><li><strong>Docker</strong><ul><li>하드웨어에 설치된 운영체제에 <strong>Container Engine</strong>이라는 소프트웨어를 설치해 개별적인 Container를 만들어,</li><li><strong>각각의 어플리케이션을 고립된 환경에서 구동</strong></li><li>여기서 가장 많이 사용되는 Container Engine이 바로 Docker!</li><li><strong>VM의 경량화 버전</strong>이라고 생각하면 됨.</li></ul></li></ul><hr><h1 id="5-컨테이너를-만드는-방법"><a href="#5-컨테이너를-만드는-방법" class="headerlink" title="5. 컨테이너를 만드는 방법"></a>5. 컨테이너를 만드는 방법</h1><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/devops-docker-01_6.png" alt="devops-docker-01_6" style="zoom: 50%;" /><p>컨테이너 사용하기 위해서는 만들기 위해서는 총 3가지가 필요 : <strong>도커파일, 이미지, 컨테이너</strong><br>도커파일을 만들어서 이걸로 이미지를 만들고 만들어진 이미지로 컨테이너를 구동 할 수 있다.</p><ol><li><code>Dockerfile</code> : <strong>컨테이너를 어떻게 만들어야 하는지에 대한 설명서</strong>. 아래와 같은 내용을 포함<ul><li>어플리케이션을 구동하기 위한 파일은 무엇이 있는가?</li><li>어떤 dependencies를 다운받아야 하는가?</li><li>필요한 환경변수</li><li>어떻게 구동해야하는지에 대한 script</li></ul></li><li><code>Image</code> : 어플리케이션을 <strong>실행하는데 필요한 코드, 런타임, 환경, 시스템 툴, 시스템 라이브러리등이 포함</strong><ul><li>실행되고 있는 어플리케이션의 상태를 찰칵- 해서 이미지로 만들어둔다고 생각하면 된다!</li><li><strong>한번 만들어지면 변경이 불가능</strong></li></ul></li><li><code>Container</code> : <strong>Image를 고립된 환경에서 개별적인 시스템 안에서 실행할 수 있는 공간</strong><ul><li>container 안에서 image를 이용해 우리의 어플리케이션이 구동한다.</li></ul></li></ol><hr><h1 id="6-어떻게-Cotainer-배포할-수-있나"><a href="#6-어떻게-Cotainer-배포할-수-있나" class="headerlink" title="6. 어떻게 Cotainer 배포할 수 있나?"></a>6. 어떻게 Cotainer 배포할 수 있나?</h1><blockquote><p>어떻게 Cotainer 배포할 수 있나? &#x3D; 어떻게 Image를 공유할 수 있나?</p></blockquote><p>Git과 GitHub를 사용해봤다면 익숙할테다.</p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/devops-docker-01_7.png" alt="devops-docker-01_7" style="zoom:50%;" /><ol><li>내 로컬에서 만든 이미지를 Container Registry에 <strong>Push</strong></li><li>서버는 Container Registry에서 이미지를 <strong>Pull</strong>로 당겨와서 사용한다.</li><li>서버에는 Docker 설치 필수!</li></ol><hr><h1 id="7-Docker의-종류"><a href="#7-Docker의-종류" class="headerlink" title="7. Docker의 종류"></a>7. Docker의 종류</h1><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/devops-docker-01_8.png" alt="devops-docker-01_8" style="zoom:50%;" /><p>도커는 <strong>public</strong>과 <strong>private</strong>이 있다.<br>개인 사용자들은 <strong>docker hub</strong>를 가장 많이 사용하고 있지만,<br><strong>회사에서는 private한 docker를 사용</strong>하는데, <strong>aws나 google Cloud등에서 docker 서비스를 제공</strong>하고 있다.</p><hr><h1 id="8-총정리"><a href="#8-총정리" class="headerlink" title="8. 총정리"></a>8. 총정리</h1><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/devops-docker-01_9.png" alt="devops-docker-01_9" style="zoom: 50%;" /><ol><li>사용자는 Local에 Docker를 설치한 후 Dockerfile을 만든다.</li><li>Dockerfile을 build 시켜 Image로 만든다.</li><li>만든 Image를 Container Registry에 Push</li><li>실서버에 Docker를 설치한 후 Container Registry에서 Image를 Pull 한다.</li><li>Docker에서 Image를 run한다.</li></ol><hr><h1 id="실습-및-참고"><a href="#실습-및-참고" class="headerlink" title="실습 및 참고"></a>실습 및 참고</h1><p><a href="https://www.youtube.com/watch?v=LXJhA3VWXFA&t=553s">https://www.youtube.com/watch?v=LXJhA3VWXFA&amp;t=553s</a></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-DOM-08-textContent, innerText, innerHTML 차이</title>
      <link href="/2023/01/30/Front-JS-DOM-08-textContent/"/>
      <url>/2023/01/30/Front-JS-DOM-08-textContent/</url>
      
        <content type="html"><![CDATA[<p>요소에 접근해 데이터를 설정하거나 가져올 때 사용하는 프로퍼티인 <code>textContent, innerText, innerHTML</code>를 사용합니다.</p><h1 id="1-textContent"><a href="#1-textContent" class="headerlink" title="1. textContent"></a>1. textContent</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">onClick</span>=<span class="string">&quot;(check(event))&quot;</span>&gt;</span></span><br><span class="line">  click</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span>child1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">    child2</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;4&quot;</span>&gt;</span>grandchild<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">check</span> = (<span class="params">event</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">textContent</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-innerText"><a href="#2-innerText" class="headerlink" title="2. innerText"></a>2. innerText</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">onClick</span>=<span class="string">&quot;(check(event))&quot;</span>&gt;</span></span><br><span class="line">  click</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span>child1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">    child2</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;4&quot;</span>&gt;</span>grandchild<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">check</span> = (<span class="params">event</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-innerHTML"><a href="#3-innerHTML" class="headerlink" title="3. innerHTML"></a>3. innerHTML</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">onClick</span>=<span class="string">&quot;(check(event))&quot;</span>&gt;</span></span><br><span class="line">  click</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span>child1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">    child2</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;4&quot;</span>&gt;</span>grandchild<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">check</span> = (<span class="params">event</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">innerHTML</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-정리"><a href="#4-정리" class="headerlink" title="4. 정리"></a>4. 정리</h1><ul><li><code>textContent</code><ul><li><strong>text&#x2F;plain으로 파싱하여 모든 요소를 반환</strong></li><li>script, style 요소를 포함해 CSS를 사용해 숨겨진 요소도 함께 반환하며,</li><li>요소의 원시 텍스트를 사용하므로 <strong>성능이 좋습니다.</strong></li></ul></li><li><code>innerText</code><ul><li><strong>text&#x2F;plain으로 파싱하여 렌더링 후의 요소를 반환</strong></li><li>script, style 요소는 반환하지 않으며 숨겨진 요소도 반환하지 않음</li><li>자식 노드를 모두 제거하고 하나의 텍스트로 반환되며 <strong>성능은 보통</strong></li></ul></li><li><code>innerHTML</code><ul><li><strong>text&#x2F;html로 파싱하여 요소의 html, xml 전체를 반환</strong></li><li>html을 다루므로 보안 이슈 중 하나인 XSS(Cross Site Scripting)에 취약</li><li>HTML5에서는 innerHTML에 삽입된 script 태그는 실행되지 않도록 변경되었지만, </li><li>img등 다른 태그를 통해 접근하면 여전히 취약점이 남습니다.</li><li>따라서 innerHTML은 별도로 문제 방지를 위한 설정이 없다면 <strong>사용을 권장하지 않습니다</strong>.</li></ul></li></ul><hr><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://choonse.com/2022/02/13/924/">https://choonse.com/2022/02/13/924/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> DOM-Event </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-DOM-07-이벤트 버블링, 이벤트 위임</title>
      <link href="/2023/01/29/Front-JS-DOM-07-EventBubbling/"/>
      <url>/2023/01/29/Front-JS-DOM-07-EventBubbling/</url>
      
        <content type="html"><![CDATA[<h1 id="1-이벤트의-흐름"><a href="#1-이벤트의-흐름" class="headerlink" title="1. 이벤트의 흐름"></a>1. 이벤트의 흐름</h1><p>계층적 구조에 포함되어 있는 HTML 요소에 이벤트가 발생할 경우 연쇄적 반응이 일어난다.<br>즉, 이벤트가 전파(Event Propagation)되는데 전파 방향에 따라 다음과 같이 2개로 구분합니다.</p><ul><li><code>버블링(Event Bubbling)</code><ul><li>자식 요소에서 발생한 이벤트가 부모 요소로 전파</li><li>cf. 거품이 퐁퐁퐁퐁 일어나듯이 이벤트가 퐁퐁퐁퐁 일어나 ‘버블링(Bubbling)’이라는 이름을 갖게 됨</li><li>이벤트 발생 요소에서부터 순서대로 최상위 부모 요소까지 퐁퐁퐁퐁 이벤트가 연달아 발생</li></ul></li><li><code>캡처링(Event Capturing)</code><ul><li>자식 요소에서 발생한 이벤트가 부모 요소부터 시작하여 이벤트를 발생시킨 자식 요소까지 도달</li></ul></li></ul><blockquote><p>cf. 버블링과 캡처링은 둘 중에 하나만 발생하는 것이 아니라 캡처링부터 시작하여 버블링으로 종료합니다.</p></blockquote><p>즉, 이벤트가 발생했을 때 캡처링과 버블링은 순차적으로 발생합니다.</p><hr><h1 id="2-이벤트-버블링"><a href="#2-이벤트-버블링" class="headerlink" title="2. 이벤트 버블링"></a>2. 이벤트 버블링</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>이벤트 버블링<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.upper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: gold;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: orange;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.lower</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upper&quot;</span> <span class="attr">onClick</span>=<span class="string">&quot;clicked(event)&quot;</span> <span class="attr">id</span>=<span class="string">&quot;물&quot;</span>&gt;</span>물</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">onClick</span>=<span class="string">&quot;clicked(event)&quot;</span> <span class="attr">id</span>=<span class="string">&quot;고&quot;</span>&gt;</span>고</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lower&quot;</span> <span class="attr">onClick</span>=<span class="string">&quot;clicked(event)&quot;</span> <span class="attr">id</span>=<span class="string">&quot;기&quot;</span>&gt;</span>기<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">clicked</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(event.<span class="property">currentTarget</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 코드를 실행하면 다음 그림과 같은 결과가 나옵니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/js-dom-7-1.png" alt="js-dom-7-1"></p><p>여기서 가장 내부에 자리 잡고 있는 <code>기</code>를 클릭하면 어떤 순서대로 이벤트가 실행될까요?<br>이벤트 버블링이 default로 설정되어 있으므로 <code>기, 고, 물</code>의 순서대로 이벤트가 발생합니다.<br>그러므로 위 코드라면 <code>‘기’ -&gt; ‘고’ -&gt; ‘물’</code>의 순서대로 알림창이 뜹니다.<br><code>고</code>를 클릭하면 <code>‘고’ -&gt; ‘물’</code>의 순서로 알림창이 뜹니다.</p><p>그렇다면 순서를 <code>‘물’ -&gt; ‘고’ -&gt; ‘기’</code>으로 만들려면 어떻게 해야 할까요? 바로 <strong>이벤트 캡쳐</strong>를 사용하면 됩니다.</p><hr><h1 id="3-이벤트-캡처링"><a href="#3-이벤트-캡처링" class="headerlink" title="3. 이벤트 캡처링"></a>3. 이벤트 캡처링</h1><p><strong>이벤트 캡쳐</strong>를 사용하려면 addEventListener 내부에 capture 값을 명시적으로 true로 변경해줘야 합니다.<br>기본값은 false이며, false는 이벤트 버블링, true는 이벤트 캡쳐를 의미합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>이벤트 캡처링<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 생략 --&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 생략 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">clicked</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(event.<span class="property">currentTarget</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      divs.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">div</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, clicked, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">capture</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>capture:true</code>로 설정해주고 다시 <code>기</code>를 클릭하면 이번에는 <strong>반대 순서인 위에서 아래로 이벤트가 발생</strong>합니다.<br>이제는 <code>‘물’ -&gt; ‘고’ -&gt; ‘기’</code> 의 순서로 알림이 뜹니다.</p><hr><h1 id="4-이벤트-전파-방지-stopPropagation"><a href="#4-이벤트-전파-방지-stopPropagation" class="headerlink" title="4. 이벤트 전파 방지 : stopPropagation"></a>4. 이벤트 전파 방지 : stopPropagation</h1><p>그렇다면 ‘**이벤트 버블링도 싫고, 이벤트 캡쳐도 싫으니 둘 다 하지마!**’라고 명령하려면?</p><ul><li>이벤트와 함께 실행될 함수 내부에 <code>event.stopPropagation()</code>을 넣어주면 됩니다.</li><li>cf. 프로파간다(propaganda)를 닮은 그 단어 ‘propagation’은 ‘번식, 증식, 전파’등의 의미를 갖고 있음</li></ul><p>따라서 ‘이벤트의 증식 또는 전파를 멈추겠다’는 의미로 <code>event.stopPropagation()</code>를 사용하면 됩니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>이벤트 전파 방지<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 생략 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upper&quot;</span> <span class="attr">onClick</span>=<span class="string">&quot;clicked(event)&quot;</span> <span class="attr">id</span>=<span class="string">&quot;물&quot;</span>&gt;</span>물</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">onClick</span>=<span class="string">&quot;clicked(event)&quot;</span> <span class="attr">id</span>=<span class="string">&quot;고&quot;</span>&gt;</span>고</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lower&quot;</span> <span class="attr">onClick</span>=<span class="string">&quot;clicked(event)&quot;</span> <span class="attr">id</span>=<span class="string">&quot;기&quot;</span>&gt;</span>기<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">clicked</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        event.<span class="title function_">stopPropagation</span>(); <span class="comment">// 추가</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(event.<span class="property">currentTarget</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이제 더 이상 ‘물고기’ 또는 ‘기고물’같은 단어를 완성하지 않습니다.<br>그저 <code>기</code>를 누르면,  <code>기</code>처럼 해당 문자만 띄웁니다.</p><hr><h1 id="5-target과-currentTarget-차이"><a href="#5-target과-currentTarget-차이" class="headerlink" title="5. target과 currentTarget 차이"></a>5. target과 currentTarget 차이</h1><ul><li><code>target</code>은 <strong>이벤트가 발생한 바로 그 요소</strong>를 직접 가리키고,</li><li><code>currentTarget</code>은 <strong>이벤트 리스너</strong>(EventListener)<strong>를 가진 요소</strong>를 가리킵니다.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>target과 currentTarget 차이<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.upper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: gold;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.lower</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upper&quot;</span> <span class="attr">onClick</span>=<span class="string">&quot;clicked(event)&quot;</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;lower&quot;</span> <span class="attr">id</span>=<span class="string">&quot;span&quot;</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">clicked</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">id</span> + <span class="string">&#x27; clicked&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 코드를 실행하면 다음 그림과 같은 결과가 나옵니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/js-dom-7-2.png" alt="js-dom-7-2"></p><p>노랑은 div, 핑크는 span이며, 핑크가 노란색 위에 앉아있습니다.<br>그런데 onClick 이벤트는 div에서 설정했지만 <strong>노랑을 눌러도, 핑크를 눌러도 모두 이벤트가 발생</strong>합니다.<br>div에만 이벤트를 설정했는데, 왜 자식인 span도 이벤트를 상속받는 것일까요?<br>바로 <strong>이벤트 버블링, 이벤트 캡쳐링과 연관</strong>이 있습니다.</p><p>이벤트 발생에 따른 target은 다음과 같습니다.</p><ul><li>핑크 부분을 클릭<ul><li><code>target</code> : 핑크 (핑크를 눌렀으므로 핑크가 이벤트 발생 시점이 됨)</li><li><code>currentTarget</code> : 노랑 (onClick 이벤트는 노랑이 갖고 있음)</li></ul></li><li>노란 부분을 클릭<ul><li><code>target</code> : 노랑(노랑을 눌렀으므로 노랑이 이벤트 발생 시점이 됨)<br><code>currentTarget</code> : 노랑(onClick 이벤트는 노랑이 갖고 있음)</li></ul></li></ul><p>따라서 노랑을 누르면 ‘div clicked’, 핑크를 누르면 ‘span clicked’ 알림창을 띄웁니다.</p><p>만약 핑크를 눌러도 이벤트를 가진 노랑의 속성에 접근하고 싶다면, <code>currentTarget</code>과 <code>getAttribute</code>를 사용하면 됩니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>target과 currentTarget 차이2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.upper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: gold;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.lower</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upper&quot;</span> <span class="attr">onClick</span>=<span class="string">&quot;clicked(event)&quot;</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;lower&quot;</span> <span class="attr">id</span>=<span class="string">&quot;span&quot;</span>&gt;</span> span <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">clicked</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(event.<span class="property">currentTarget</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>) + <span class="string">&#x27; clicked&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 코드는 핑크, 노랑 둘 다 이벤트를 가진 노랑 속성에만 접근합니다.</p><ul><li><code>target</code>은 <strong>누른 바로 그 것</strong></li><li><code>currentTarget</code>은 <strong>이벤트를 실행하는 바로 그 것</strong>으로 이해하면 됩니다.</li></ul><hr><h1 id="6-이벤트리스너-안에서-쓰는-이벤트-함수들"><a href="#6-이벤트리스너-안에서-쓰는-이벤트-함수들" class="headerlink" title="6. 이벤트리스너 안에서 쓰는 이벤트 함수들"></a>6. 이벤트리스너 안에서 쓰는 이벤트 함수들</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.black-bg&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  e.<span class="property">target</span>; <span class="comment">// 유저가 실제로 누른거</span></span><br><span class="line">  e.<span class="property">currentTarget</span>; <span class="comment">// 이벤트리스너 달린곳, 여기서는 querySelector(&#x27;.black-bg&#x27;), this와 동일</span></span><br><span class="line">  e.<span class="title function_">preventDefault</span>(); <span class="comment">// 이벤트 기본동작 막아줌</span></span><br><span class="line">  e.<span class="title function_">stopPropagation</span>(); <span class="comment">// 내 상위요소로 이벤트 버블링 막아줌</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>이벤트리스너의 콜백함수에 파라미터 아무거나 추가하면, 이벤트관련 유용한 함수들을 사용가능합니다.<br>파라미터 이름은 아무렇게나 작명하면 됩니다. 보통 대충 e라고 함</p><ul><li><p><code>e.target</code> :  <strong>실제 클릭한 요소</strong> 알려줌 (<strong>이벤트 발생한 곳</strong>)</p></li><li><p><code>e.currentTarget</code> :  <strong>지금 이벤트리스너가 달린 곳</strong> 알려줌 (cf. <strong>this라고 써도 똑같음</strong>)</p><ul><li>검은배경이 나오기 때문에 <code>e.target == e.currentTarget</code> 이렇게 써도 됨</li><li>아니면 <code>e.target == this</code> 이렇게 써도 됨</li></ul></li><li><p><code>e.preventDefault()</code> 실행하면 <strong>이벤트 기본 동작을 막아줌</strong></p></li><li><p><code>e.stopPropagation()</code> 실행하면 <strong>내 상위요소로의 이벤트 버블링을 중단</strong>해줌</p></li></ul><p>여기서 중요한건 <code>e.target</code>인데, 이벤트 버블링이 일어난다고 해도<br>사용자가 실제로 클릭한 그 요소는 저 문법으로 찾아낼 수 있습니다.</p><hr><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://choonse.com/2022/01/14/651/">https://choonse.com/2022/01/14/651/</a></li><li><a href="https://choonse.com/2022/01/14/605/">https://choonse.com/2022/01/14/605/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> DOM-Event </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-DOM-06-이벤트 헨들러(Event Handler)</title>
      <link href="/2023/01/29/Front-JS-DOM-06-EventHandler/"/>
      <url>/2023/01/29/Front-JS-DOM-06-EventHandler/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Event-종류"><a href="#1-Event-종류" class="headerlink" title="1. Event 종류"></a>1. Event 종류</h1><p>브라우저 위에 발생할 수 있는 이벤트는 굉장히 다양합니다.</p><ul><li>mouse click</li><li>keyboard</li><li>resizing window</li><li>close window</li><li>page loading</li><li>form submission : 사용자가 입력한 내용을 제출할 때</li><li>video is being played</li><li>error 등등</li><li>cf. <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events">MDN Events 개념</a></li><li>cf. <a href="https://developer.mozilla.org/en-US/docs/Web/Events">MDN Events 종류</a></li></ul><p>웹 브라우저에서 사용자와의 상호작용으로 발생하는 이벤트는 200여 가지가 넘기 때문에 모든 이벤트를 다루기는 불가능합니다.<br>그래서 여기에서는 꼭 알아야 하는 중요한 이벤트를 몇 가지만 살펴보겠습니다.<br>실무에서는 상황에 맞는 이벤트 종류를 확인하고 사용해 보세요.</p><table><thead><tr><th align="center">구분</th><th align="center">이벤트</th><th>설명</th></tr></thead><tbody><tr><td align="center">마우스 이벤트</td><td align="center">onclick</td><td>마우스로 클릭하면 발생합니다.</td></tr><tr><td align="center"></td><td align="center">ondblclick</td><td>마우스로 빠르게 두 번 클릭하면 발생합니다.</td></tr><tr><td align="center"></td><td align="center">onmouseover</td><td>마우스 포인터를 올리면 발생합니다.</td></tr><tr><td align="center"></td><td align="center">onmouseout</td><td>마우스 포인터가 빠져나가면 발생합니다.</td></tr><tr><td align="center"></td><td align="center">onmousemove</td><td>마우스 포인터가 움직이면 발생합니다.</td></tr><tr><td align="center"></td><td align="center">onwheel</td><td>마우스 휠(wheel)을 움직이면 발생합니다.</td></tr><tr><td align="center">키보드 이벤트</td><td align="center">onkeypress</td><td>키보드 버튼을 누르고 있는 동안 발생합니다.</td></tr><tr><td align="center"></td><td align="center">onkeydown</td><td>키보드 버튼을 누른 순간 발생합니다.</td></tr><tr><td align="center"></td><td align="center">onkeyup</td><td>키보드 버튼을 눌렀다가 뗀 순간 발생합니다.</td></tr><tr><td align="center">포커스 이벤트</td><td align="center">onfocus</td><td>요소에 포커스가 되면 발생합니다.</td></tr><tr><td align="center"></td><td align="center">onblur</td><td>요소가 포커스를 잃으면 발생합니다.</td></tr><tr><td align="center">폼 이벤트</td><td align="center">onsubmit</td><td>폼이 전송될 때 발생합니다.</td></tr><tr><td align="center">리소스 이벤트</td><td align="center">onload</td><td>웹 브라우저의 리소스 로드가 끝나면 발생합니다.</td></tr></tbody></table><hr><h2 id="1-1-이벤트-등록하는-법"><a href="#1-1-이벤트-등록하는-법" class="headerlink" title="1.1 이벤트 등록하는 법"></a>1.1 이벤트 등록하는 법</h2><p><strong>이벤트가 발생할 때 어떤 작업을 할지 자바스크립트 코드로 작성하는 것</strong>을 <code>이벤트 등록</code>이라고 합니다.<br>이벤트를 등록하는 방법은 크게 3가지로 정리할 수 있습니다.<br>인라인, 프로퍼티 리스너, 이벤트 등록 메서드로 이벤트를 등록하는 것을 자세히 알아봅시다.</p><h3 id="1-1-1-인라인-방식"><a href="#1-1-1-인라인-방식" class="headerlink" title="1.1.1 인라인 방식"></a>1.1.1 인라인 방식</h3><p>인라인 방식은 HTML 태그에 속성으로 이벤트를 등록하는 방법입니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>inline event<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 📝 인라인 방식 : HTML 태그에 속성으로 이벤트를 등록하는 방법 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 속성값으로는 이벤트가 발생할 때 실행될 함수를 지정 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;clickEvent()&quot;</span>&gt;</span>클릭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 웹 브라우저에 경고창이 출력</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">clickEvent</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;click&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이벤트를 여러 가지 사용하면 사용한 만큼 이벤트를 제어할 수 있습니다.<br>예를 들어, 다음 코드는 입력창을 클릭해서 커서를 활성화하면 onfocus 이벤트가 발생합니다.<br>그리고 입력창 외부 영역을 클릭하면 onblur 이벤트가 발생해 커서가 빠져나가면서 블러(focus out) 상태가 됩니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>inline event2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 입력창을 클릭해서 커서를 활성화하면 onfocus 이벤트가 발생 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 입력창 외부 영역을 클릭하면 onblur 이벤트가 발생해 블러(focus out) 상태 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;focusEvent()&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;blurEvent()&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">focusEvent</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;focus on&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">blurEvent</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;focus out&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>💡 포커스 이벤트 사용 시 주의할 점</p><p>포커스 이벤트를 사용할 때 코드 내부에 경고창을 나타내는 alert() 메서드를 사용하면 안 됩니다.<br>경고창을 클릭하는 순간 입력창에서 커서가 빠져나갔다고 판단해 onblur 이벤트가 발생합니다.<br>그리고 경고창이 닫히면 다시 커서가 입력창으로 들어가서 onfocus 이벤트가 발생합니다.<br>따라서 경고창이 무한으로 뜨는 현상이 발생할 수 있습니다.</p></blockquote><hr><h3 id="1-1-2-프로퍼티-리스너-방식"><a href="#1-1-2-프로퍼티-리스너-방식" class="headerlink" title="1.1.2 프로퍼티 리스너 방식"></a>1.1.2 프로퍼티 리스너 방식</h3><p>프로퍼티 리스너(property listener)는 요소 노드에 직접 속성으로 이벤트를 등록하는 방법입니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>property listener<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>클릭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 📝 버튼을 클릭했을 때 요소 노드에 등록된 이벤트 속성에 할당된 함수가 실행</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> btnEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      btnEl.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;click&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 📝 화살표 함수로 작성 가능</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// btnEl.onclick = () =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   alert(&#x27;arrow click&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 📝 함수를 별도로 정의하고 함수명을 이용해 이벤트와 연결</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// btnEl.onclick = clickEvent;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// function clickEvent() &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   alert(&#x27;click&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="1-1-3-이벤트-등록-메서드⭐"><a href="#1-1-3-이벤트-등록-메서드⭐" class="headerlink" title="1.1.3 이벤트 등록 메서드⭐"></a>1.1.3 이벤트 등록 메서드⭐</h3><p><code>addEventListener()</code>를 사용해서 이벤트를 등록할 수도 있습니다. 3가지 방법 중 가장 권장하는 방식입니다.<br><code>addEventListener()</code>의 매개변수에 이벤트 타입과 이벤트 함수를 전달하면 되는데,<br>이벤트 타입은 이벤트 종류에서 on만 빼면 됩니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>addEventListener<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>클릭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> btnEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 📝 노드.addEventListener(&quot;이벤트타입&quot;, 이벤트함수)</span></span></span><br><span class="line"><span class="language-javascript">      btnEl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;button Click&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 📝 이벤트 함수에 화살표 함수도 사용 가능</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 또는 함수 선언문이나 함수 표현식으로 정의한 함수명으로 연결 가능</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// const clickEvent = () =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   alert(&#x27;button Click&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// btnEl.addEventListener(&#x27;click&#x27;, clickEvent);</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>함수 표현식으로 정의된 함수는 호이스팅에 의해 선언과 할당이 분리되므로<br>참조하려는 함수가 addEventListener() 메서드보다 반드시 위에 작성되어야 합니다.</p><hr><h1 id="2-연습-1"><a href="#2-연습-1" class="headerlink" title="2. 연습 1"></a>2. 연습 1</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;Hello&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  el.<span class="property">onclick</span> = sayHello;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 이때 함수에 괄호가 없어야 함. 괄호가 있다면 반환값이 할당</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  el.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, sayHello);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 이런 식으로 addEventListener(감지하는 이벤트, 실행할 함수) 를 활용해 작성을 많이 함</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  el.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;hi&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 함수를 직접 작성할 수도 있음</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-DOMcontentLoaded-문서-로드가-완료되었을-때-이벤트"><a href="#3-DOMcontentLoaded-문서-로드가-완료되었을-때-이벤트" class="headerlink" title="3. DOMcontentLoaded : 문서 로드가 완료되었을 때 이벤트"></a>3. DOMcontentLoaded : 문서 로드가 완료되었을 때 이벤트</h1><p>문서 로드가 완료되었을 때 이벤트 <code>DOMcontentLoaded</code> 는 아래 처럼 작성해야 동작합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DomcontentLoaded&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>자주 사용하는 이벤트를 살펴보면 더블클릭, <code>dblclick</code> 과 키를 눌렀다 땔 때 <code>keyup</code> 이 있습니다.</p><p>모든 이벤트는 이벤트 값들을 객체의 모양으로 반환합니다. 아래처럼 콘솔을 찍어보면 확인할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input.<span class="title function_">addEventLietener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>아래처럼 <code>event.key</code> 를 하면 해당 이벤트의 <code>key</code> 에 해당하는 값이 반환됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input.<span class="title function_">addEventLietener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">key</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>focus</code> 는 인풋창에 포커스가 되었을 대 <code>blur</code> 는 포커스를 잃었을 때 사용합니다.<br>마우스 무브 이벤트로 <code>mousemove</code> 는 해당 영역에서 마우스가 이동할 때마다 값이 찍힙니다.<br><code>clientX</code> 와 <code>clientY</code> 값을 사용하면 현재 마우스 위치 확인할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">circle.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;$&#123;event.clientY&#125;px&#x27;</span>(백틱);</span><br><span class="line">circle.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&#x27;$&#123;event.clientX&#125;px&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// box 위에 마우스가 움직일 때 circle 이 마우스 이벤트로 위치값을 받아서 같이 움직인다. box 와 circle 은 position 으로 연결되어 있어서 top, left 값으로 조정한 것</span></span><br></pre></td></tr></table></figure><p>윈도우 리사이즈 이벤트는 아래처럼 적용할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerText</span> = <span class="string">&#x27;현재 창 크기는 $&#123;window.innerWidth&#125; x $&#123;window.innerHeight&#125;&#x27;</span>; (백틱)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> DOM-Event </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-DOM-05-DOM Node CSS style, class 제어</title>
      <link href="/2023/01/29/Front-JS-DOM-05-StyleClass.md/"/>
      <url>/2023/01/29/Front-JS-DOM-05-StyleClass.md/</url>
      
        <content type="html"><![CDATA[<h1 id="1-스타일-조작"><a href="#1-스타일-조작" class="headerlink" title="1. 스타일 조작"></a>1. 스타일 조작</h1><p>선택된 노드의 타입이 요소 노드라면 style 속성으로 요소에 스타일(CSS)을 지정할 수 있습니다.</p><ul><li><code>노드.style.css속성명 = 속성값;</code></li><li>주의할 점은 CSS 속성 중의 <code>대시(-)가 들어있는 속성은 카멜표기법으로</code> 작성<ul><li>자바스크립트에서 -를 뺄셈 연산자(-)로 인식해서</li><li>속성명에 대시(-)가 있는 속성은 <strong>backgroundColor처럼 카멜 표기법으로 변경해서 작성</strong></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span>BOX<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;#fff&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;100px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&#x27;10px solid #000&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//css 속성 그대로 적어주고 싶다면</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">style</span>[<span class="string">&#x27;margin-left&#x27;</span>] = <span class="string">&#x27;30px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-클래스-속성-조작"><a href="#2-클래스-속성-조작" class="headerlink" title="2. 클래스 속성 조작"></a>2. 클래스 속성 조작</h1><p>style 속성으로 스타일을 조작하면 속성을 하나씩 적어야 해서 불편합니다.<br>이때 지정해야 하는 스타일이 명확하다면 자바스크립트로 속성을 하나씩 지정하지 않고,<br>p 태그에 class 속성을 추가하고 클래스 선택자로 지정하는 편이 훨씬 더 깔끔합니다.</p><p>선택한 요소 노드에 class 속성을 지정할 때는 classList 속성의 add(), remove(), toggle() 메서드를 사용합니다.</p><ul><li><code>노드.classList.add(&quot;class 속성값&quot;)</code>  : 추가</li><li><code>노드.classList.remove(&quot;class 속성값&quot;)</code> : 삭제</li><li><code>노드.classList.replace(&quot;class 속성값1&quot;, &quot;class 속성값2&quot;)</code> : 속성값1을 속성값2로 수정</li><li><code>노드.classList.toggle(&quot;class 속성값&quot;)</code> : 추가와 삭제 반복</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box bg-red&quot;</span>&gt;</span>BOX<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">classList</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 하면 해당 클래스 관련 배열처럼 보이는 데이터 묶음과 사용할 수 있는 메소드들을 제공</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;txt-white&#x27;</span>); <span class="comment">// 클래스 추가</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;txt-white&#x27;</span>); <span class="comment">// 클래스 제거</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;bg-green&#x27;</span>, <span class="string">&#x27;txt-yellow&#x27;</span>); <span class="comment">// 클래스 여러개는 쉼표로 구분해서 추가</span></span></span><br><span class="line"><span class="language-javascript">  box.<span class="property">classList</span>.<span class="title function_">replace</span>(<span class="string">&#x27;bg-red&#x27;</span>, <span class="string">&#x27;bg-blue&#x27;</span>); <span class="comment">// 첫번째 클래스 네임을 두번째 클래스 네임으로 수정</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1초에 한번씩 클래스를 넣었다 뺐다 해준다.</span></span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;bg-red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>클릭으로 발생한 이벤트의 <code>target</code> 에 클래스를 넣거나 빼주는 예제</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;color&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Red<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> color = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;color&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  color.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> target = e.<span class="property">target</span>; <span class="comment">// 클릭해서 발생한 이벤트의 target</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (target.<span class="property">tagName</span> !== <span class="string">&#x27;LI&#x27;</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">    target.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;txt-pink&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 그 타겟에 해당 클래스가 없으면 넣어주고 있으면 빼주는</span></span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-데이터-속성-조작"><a href="#3-데이터-속성-조작" class="headerlink" title="3. 데이터 속성 조작"></a>3. 데이터 속성 조작</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dataset 속성<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-cnt</span>=<span class="string">&quot;10&quot;</span>&gt;</span>가방 구매<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-cnt</span>=<span class="string">&quot;0&quot;</span>&gt;</span>신발 구매<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> buttonEls = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      buttonEls.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(el.<span class="property">dataset</span>); <span class="comment">// DOMStringMap &#123; cnt → &quot;10&quot; &#125;, DOMStringMap &#123; cnt → &quot;0&quot; &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//  📝 data-cnt 속성의 값만 가져오고 싶으면</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//  console.log(el.dataset.cnt); // 10 0</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 📝 ata-cnt 속성의 값 변경</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// el.dataset.cnt = 50;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-메서드로-속성-조작"><a href="#4-메서드로-속성-조작" class="headerlink" title="4. 메서드로 속성 조작"></a>4. 메서드로 속성 조작</h1><table><thead><tr><th align="center">메서드 형식</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center"><code>&lt;노드&gt;.getAttribute(&quot;속성명&quot;);</code></td><td align="center">속성값을 가져옴</td></tr><tr><td align="center"><code>&lt;노드&gt;.setAttribute(&quot;속성명&quot;, &quot;속성값&quot;);</code></td><td align="center">속성값을 설정</td></tr><tr><td align="center"><code>&lt;노드&gt;.removeAttribute(&quot;속성명&quot;);</code></td><td align="center">속성을 삭제</td></tr></tbody></table><blockquote><p>💡 classList 속성과 setAttribute() 메서드</p><p>classList 속성으로 class 속성값을 추가하거나 삭제하면 기존 요소가 가지고 있던 class 속성값을 보존하면서 추가하거나 삭제한다는 특징이 있습니다. 그래서 다음 코드처럼 a 태그에 class 속성이 이미 있었다면 여기에 단순히 추가되는 형태로 코드가 작동합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;fz20&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> aEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// a 태그의 기존 class 속성값을 보존하면서 red-color 값 추가</span></span></span><br><span class="line"><span class="language-javascript">aEl.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;red-color&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 실행결과</span></span><br><span class="line"><span class="comment">&lt;a href=&quot;#&quot; class=&quot;fz20 red-color&quot;&gt;link&lt;/a&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>하지만 setAttribute() 메서드는 아예 속성값을 새로 설정하는 것이어서 기존 class 속성값을 보존하지 않습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;fz20&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> aEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// a 태그의 기존 class 속성값을 보존하지 않고 red-color 값 설정</span></span></span><br><span class="line"><span class="language-javascript">aEl.<span class="title function_">setAttribute</span>(<span class="string">&quot;red-color&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 실행결과</span></span><br><span class="line"><span class="comment">&lt;a href=&quot;#&quot; class=&quot;red-color&quot;&gt;link&lt;/a&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>이는 classList 속성의 remove() 메서드와 removeAttribute() 메서드에서도 똑같습니다. remove() 메서드는 기존 속성을 보존하면서 매개변수로 전달된 속성만 삭제하지만, removeAttribute() 메서드는 속성 자체를 삭제합니다.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> DOM-Event </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-DOM-04-DOM Node 생성, 추가, 복제, 삭제</title>
      <link href="/2023/01/29/Front-JS-DOM-04-Node-CRUD/"/>
      <url>/2023/01/29/Front-JS-DOM-04-Node-CRUD/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Node-콘텐츠-생성"><a href="#1-Node-콘텐츠-생성" class="headerlink" title="1. Node 콘텐츠 생성"></a>1. Node 콘텐츠 생성</h1><table><thead><tr><th align="center">속성</th><th>설명</th></tr></thead><tbody><tr><td align="center"><code>textContent</code></td><td>요소 노드의 모든 텍스트에 접근</td></tr><tr><td align="center"><code>innerText</code></td><td>요소 노드의 텍스트 중 웹 브라우저에 표시되는 텍스트에만 접근</td></tr><tr><td align="center"><code>innerHTML</code></td><td>요소 노드의 텍스트 중 HTML 태그를 포함한 텍스트에만 접근</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>콘텐츠 조작<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Hello, <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;title&#x27;</span>).<span class="property">textContent</span>; <span class="comment">// Hello, Javascript!</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;title&#x27;</span>).<span class="property">innerText</span>; <span class="comment">// Hello,</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;title&#x27;</span>).<span class="property">innerHTML</span>; <span class="comment">// Hello, &lt;span style=&quot;display: none;&quot;&gt;JavaScript&lt;/span&gt;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;title&#x27;</span>).<span class="property">textContent</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;title&#x27;</span>).<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;title&#x27;</span>).<span class="property">innerHTML</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>콘텐츠 조작 속성은 접근한 노드의 콘텐츠를 가져올 뿐만 아니라 속성에 값을 할당하면,<br>각 노드의 콘텐츠를 바꿀 수도 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM Modify Set<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;textContent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;innerText&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;innerHTML&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 단순히 텍스트로 취급해서 값을 그대로 노드의 콘텐츠에 적용</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#textContent&#x27;</span>).<span class="property">textContent</span> = <span class="string">`&lt;strong&gt;textContent&lt;/strong&gt; 속성`</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#innerText&#x27;</span>).<span class="property">innerText</span> = <span class="string">`&lt;strong&gt;innerText&lt;/strong&gt; 속성`</span>;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 태그로 인식해 노드의 콘텐츠에 적용</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#innerHTML&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">`&lt;strong&gt;innerHTML&lt;/strong&gt; 속성`</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>아래와 같은 <code>li</code> 태그가 있을 때, </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> blue = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;blue&#x27;</span>); <span class="comment">// 아이디로 태그를 선택</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  blue.<span class="property">firstChild</span>; <span class="comment">// &quot;Blue&quot; - 모든 노드를 반환하므로, text 노드만 가져옴</span></span></span><br><span class="line"><span class="language-javascript">  blue.<span class="property">firstElementChild</span>; <span class="comment">// &quot;null&quot; - 노드의 요소만 반환</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> blueTextNode = blue.<span class="property">firstChild</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  blueTextNode.<span class="property">nodeName</span>; <span class="comment">// &#x27;#text&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  blueTextNode.<span class="property">nodeType</span>; <span class="comment">// 3</span></span></span><br><span class="line"><span class="language-javascript">  blueTextNode.<span class="property">nodeValue</span>; <span class="comment">// &#x27;Blue&#x27; - 특정 노드의 텍스트를 가져옴</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  blueTextNode.<span class="property">nodeValue</span> = <span class="string">&#x27;파랑&#x27;</span>; <span class="comment">// 이렇게 입력도 가능</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>firstChild, firstElementChild</code> 로 해당 노드 및 해당 노드의 요소를 반환</li><li><code>nodeName, nodeType, nodeValue</code> 를 사용하면 해당 노드의 값들을 불러옴</li></ul><hr><h2 id="1-1-innerHTML-방법"><a href="#1-1-innerHTML-방법" class="headerlink" title="1.1 innerHTML 방법"></a>1.1 innerHTML 방법</h2><p><code>ul</code> 태그 안에 <code>글자를 넣은 li</code> 태그를 만들고 싶다면,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newLi = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>); <span class="comment">// li 태그 만들고</span></span><br><span class="line">newLi.<span class="property">innerHTML</span> = <span class="string">&#x27;green&#x27;</span>; <span class="comment">// 만든 li 태그 안에 글자 넣고</span></span><br><span class="line"><span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;color&#x27;</span>); <span class="comment">// ul 태그 만들고</span></span><br><span class="line">ul.<span class="title function_">appendChild</span>(newLi); <span class="comment">// 만든 ul 태그 안에 li 태그를 넣는다. </span></span><br></pre></td></tr></table></figure><hr><h2 id="1-2-createTextNode-방법"><a href="#1-2-createTextNode-방법" class="headerlink" title="1.2 createTextNode 방법"></a>1.2 createTextNode 방법</h2><p><code>innerHTML</code> 사용하지 않고 만든다면, 아래처럼 <code>createTextNode</code> 를 쓸 수도 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newLi2 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>); <span class="comment">// li 태그 생성</span></span><br><span class="line"><span class="keyword">const</span> newText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;pink&#x27;</span>); <span class="comment">// 텍스트 노드만 생성</span></span><br><span class="line">newLi2.<span class="title function_">appendChild</span>(newText); <span class="comment">// 텍스트 노드를 생성한 li 태그에 넣는다.</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-Node-추가"><a href="#2-Node-추가" class="headerlink" title="2. Node 추가"></a>2. Node 추가</h1><ul><li>노드 생성<ul><li><code>createElement()</code> : 요소 노드를 생성</li><li><code>createTextNode()</code> : 텍스트 노드를 생성</li><li><code>createAttribute()</code> : 속성 노드를 생성</li></ul></li><li>노드 연결<ul><li><code>&lt;기준 노드&gt;.appendChild(&lt;자식 노드&gt;)</code><ul><li>기준 노드에 자식 노드를 연결</li></ul></li><li><code>&lt;기준 노드&gt;.setAttributeNode(&lt;속성 노드&gt;)</code><ul><li>기준 노드에 속성 노드를 연결</li></ul></li></ul></li></ul><p>특정 요소 앞에 리스트를 추가하고 싶다면 <code>insertBefore</code> 를 사용합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ul.<span class="title function_">insertBefore</span>(newLi2, red)</span><br><span class="line"><span class="comment">// ul 에 newLi2 를 추가하는데 red 로 선택한 요소 앞에 넣어라</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-Node-복제"><a href="#3-Node-복제" class="headerlink" title="3. Node 복제"></a>3. Node 복제</h1><p>노드 복제할 때는 <code>cloneNode()</code> 를 사용합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newBlack = newLi.<span class="title function_">cloneNode</span>() <span class="comment">// 빈 노드만 복제</span></span><br><span class="line"><span class="keyword">const</span> newBlack = newLi.<span class="title function_">cloneNode</span>(ture) <span class="comment">// 노드의 요소까지 복제</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-Node-삭제"><a href="#4-Node-삭제" class="headerlink" title="4. Node 삭제"></a>4. Node 삭제</h1><ul><li>삭제 노드는 항상 부모 노드에서 <code>removeChild()</code> 메서드를 사용</li><li>따라서 부모 노드를 반환하는 parentNode 속성으로 부모 노드에 접근해서 삭제</li><li><code>parentNode.removeChild.(자식노드)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ul.<span class="title function_">removeChild</span>(red);</span><br><span class="line"></span><br><span class="line">ul.<span class="title function_">removeChild</span>(ul.<span class="property">firstElementChild</span>); <span class="comment">// ul 의 첫번째 자식요소</span></span><br><span class="line">ul.<span class="title function_">removeChild</span>(ul.<span class="property">lastElementChild</span>); <span class="comment">// ul 의 마지막 자식요소</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> DOM-Event </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-DOM-03-DOM Node 접근</title>
      <link href="/2023/01/29/Front-JS-DOM-03-Node/"/>
      <url>/2023/01/29/Front-JS-DOM-03-Node/</url>
      
        <content type="html"><![CDATA[<h1 id="1-노드-접근"><a href="#1-노드-접근" class="headerlink" title="1. 노드 접근"></a>1. 노드 접근</h1><p><code>DOM</code> 은 <code>Document Object Model</code> 의 약자입니다.<br><code>html</code> 문서의 각 요소들을 <code>tree</code> 형식으로 표현해주는 데 이를 <code>DOM TREE</code> 라고 합니다.</p><p>트리구조에서 하나의 개체를 <code>노드(Node)</code>라고 부릅니다.<br>트리에서 위쪽은 부모노드, 아래쪽은 자식노드라고 합니다.<br>도큐먼트를 제외한 최상단의 <code>html</code> 은 <code>root node</code> 가 됩니다.</p><p>모든 <code>html</code> 태그는 <code>document</code> 객체로 접근하고 제어할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span> <span class="comment">// html 에 접근</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span> <span class="comment">// body 태그에 접근</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">head</span> <span class="comment">// head 태그에 접근</span></span><br></pre></td></tr></table></figure><ul><li><code>document.body.style</code>: 스타일이 담긴 객체 확인</li><li><code>document.body.style.backgroundColor = &quot;red&quot;</code>: 배경 색 변경</li><li><code>document.body.style.opacity = &quot;0&quot;;</code>: 투명도 조절</li><li><code>document.body.style.padding = &quot;100px&quot;;</code>: 패딩 조절</li></ul><hr><h2 id="1-1-get-메서드-속성값과-태그명"><a href="#1-1-get-메서드-속성값과-태그명" class="headerlink" title="1.1 get 메서드 : 속성값과 태그명"></a>1.1 get 메서드 : 속성값과 태그명</h2><ul><li><code>getElementById( id 속성값 )</code> : id 접근</li><li><code>getElementsByClassName( class 속성값 )</code> : 클래스 이름 접근</li><li><code>getElemenetsByTagName( 태그명 )</code> : 태그 이름 접근</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>요소 노드 선택하기<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>text-1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>text-2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// id 속성값이 title인 요소 노드 선택</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;title&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(el); <span class="comment">// &lt;h1 id=&quot;title&quot;&gt;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// class 속성값이 text인 요소 노드 모두 선택</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> classEl = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;text&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(classEl); <span class="comment">// HTMLCollection &#123; 0: p.text, 1: p.text, length: 2 &#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(classEl[<span class="number">0</span>]); <span class="comment">// &lt;p class=&quot;text&quot;&gt;text-1&lt;/p&gt;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(classEl[<span class="number">1</span>]); <span class="comment">// &lt;p class=&quot;text&quot;&gt;text-2&lt;/p&gt;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// p 태그에 해당하는 요소 노드 모두 선택</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> tagEls = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(tagEls); <span class="comment">// HTMLCollection &#123; 0: p.text, 1: p.text, length: 2 &#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(tagEls[<span class="number">0</span>]); <span class="comment">// &lt;p class=&quot;text&quot;&gt;text-1&lt;/p&gt;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(tagEls[<span class="number">1</span>]); <span class="comment">// &lt;p class=&quot;text&quot;&gt;text-2&lt;/p&gt;</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>getElementById()</code>로 선택하는 요소 노드<ul><li><strong>무조건 1개이기 때문에 해당 요소 하나만을 보여줌</strong></li></ul></li><li><code>getElementsByClassName(), getElementsByTagName()</code>로 선택하는 요소 노드<ul><li><strong>HTMLCollection 객체로 여러 요소를 한꺼번에 선택</strong></li></ul></li></ul><hr><h2 id="1-2-query-메서드-CSS-선택자⭐"><a href="#1-2-query-메서드-CSS-선택자⭐" class="headerlink" title="1.2 query 메서드 : CSS 선택자⭐"></a>1.2 query 메서드 : CSS 선택자⭐</h2><p>document 객체의 get 메서드와 query 메서드는 둘 다 원하는 요소 노드를 선택한다는 점은 같습니다.<br>하지만 query 메서드는 매개변수로 CSS 선택자를 전달받기 때문에 get 메서드보다 범용성이 더 좋습니다.<br>그래서 <strong>대부분 query 메서드를 주로 사용</strong>합니다.</p><ul><li><code>querySelector( CSS 선택자 )</code><ul><li>매개변수로 넘어오는 CSS 선택자에 해당하는 노드를 1개만 선택</li></ul></li><li><code>querySelectorAll( CSS 선택자 )</code><ul><li>매개변수로 넘어오는 CSS 선택자에 해당하는 노드를 모두 선택</li></ul></li></ul><blockquote><p>💡 이론적으로만 따지자면,</p><ul><li><strong>성능</strong>은 특정 매개변수만 전달받는 <strong>get 메서드가 query 메서드보다 좋습니다</strong>.</li><li>현대 웹에서는 신경쓰지 않아도 될 정도의 차이라서 query 메서드를 사용하는 것이 더 나음</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>querySelector-*<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>text-1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>text-2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>text-3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>text-4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 📝 class 속성값이 box-1인 요소 노드를 선택</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> el1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box-1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(el1); <span class="comment">// &lt;div class=&quot;box-1&quot;&gt;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// get 메서드로 class 속성값이 box-1인 요소의 하위에 있는 p 태그</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> el2 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box-1&#x27;</span>)[<span class="number">0</span>].<span class="property">children</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(el2); <span class="comment">// HTMLCollection &#123; 0: p.text, 1: p.text, length: 2 &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// query 메서드로 class 속성값이 box-1인 요소의 하위에 있는 p 태그</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> el3 = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.box-1 .text&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(el3); <span class="comment">// NodeList [ p.text, p.text ]</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-3-응용-여러-개-선택"><a href="#1-3-응용-여러-개-선택" class="headerlink" title="1.3 응용 : 여러 개 선택"></a>1.3 응용 : 여러 개 선택</h2><p>여러개의 p 값을 선택하면 해당 값을 배열 모양을 반화하는데 배열은 아닙니다.<br>배열처럼 생긴 리터럴한 컬렉션이라서 배열처럼 호출하거나 갯수를 확인할 수 있습니다.</p><ul><li><code>pList[1]</code> - 이렇게 호출할 수 있고</li><li><code>pList.length</code> - 갯수도 알 수 있긴 함</li></ul><p>array 메소드는 사용할 수 없어서 아래처럼 <code>for of</code> 로 순회하며 값을 적용할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (p <span class="keyword">of</span> pList) &#123;</span><br><span class="line">p.<span class="property">style</span>.<span class="property">fontsize</span> = <span class="string">&#x27;30px&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (p <span class="keyword">of</span> pList) &#123;</span><br><span class="line">p.<span class="property">style</span>.<span class="property">opacity</span> = <span class="title class_">String</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래와 같은 선택 방법도 많이 사용합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.link&#x27;</span>) <span class="comment">// class 명으로 선택 가능</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#first&#x27;</span>); <span class="comment">// id 는 앞에 #을 붙여서</span></span><br><span class="line">                       </span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h3:nth-of-type(2)&#x27;</span>) </span><br><span class="line"><span class="comment">// 이렇게 하면 두번째 h3 태그만 선택</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h3:nth-of-type(2)&#x27;</span>).<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="comment">// 이렇게 색 변경 가능</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p:nth-of-type(2n)&#x27;</span>) </span><br><span class="line"><span class="comment">// 2n 이라고 하면 짝수번째 것들만 선택</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-부모-자식-형제-노드-접근"><a href="#2-부모-자식-형제-노드-접근" class="headerlink" title="2. 부모, 자식, 형제 노드 접근"></a>2. 부모, 자식, 형제 노드 접근</h1><p>document 객체는 트리를 탐색하면서 원하는 노드를 선택할 수 있는 속성을 제공합니다.</p><table><thead><tr><th align="center"></th><th align="center">모든 모드</th><th align="center">요소 노드만</th></tr></thead><tbody><tr><td align="center">부모</td><td align="center">parentNode</td><td align="center">parentElement</td></tr><tr><td align="center">자식</td><td align="center">childNodes<br />firstChild<br />lastChild</td><td align="center">children<br />firstElementChild<br />lastElementChild</td></tr><tr><td align="center">형제</td><td align="center">previousSibling<br />nextSibling</td><td align="center">previousElementSibling<br />nextElementSibling</td></tr></tbody></table><hr><h2 id="2-1-부모노드-접근"><a href="#2-1-부모노드-접근" class="headerlink" title="2.1 부모노드 접근"></a>2.1 부모노드 접근</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> red = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"><span class="comment">// id 가 red 인 태그 선택하고</span></span><br><span class="line"></span><br><span class="line">red.<span class="property">parentNode</span>;</span><br><span class="line"><span class="comment">// 부모노드 선택</span></span><br><span class="line"></span><br><span class="line">red.<span class="property">parentElement</span>; </span><br><span class="line"><span class="comment">// 이렇게 요소만 접근도 가능</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">parentNode</span>; </span><br><span class="line"><span class="comment">// document 반환</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">parentElement</span>;</span><br><span class="line"><span class="comment">// nuul 반환. 부모 노드에게 엘리먼트가 없으므로</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-2-자식노드-접근"><a href="#2-2-자식노드-접근" class="headerlink" title="2.2 자식노드 접근"></a>2.2 자식노드 접근</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;color&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ul.<span class="property">childNodes</span>; <span class="comment">// 자식 노드 (안의 요소, 텍스트 등등 따로) 반환</span></span><br><span class="line">ul.<span class="property">children</span>; <span class="comment">// html 요소만 반환 li 태그들의 데이터 집합으로.</span></span><br><span class="line"></span><br><span class="line">ul.<span class="property">firstChild</span>; <span class="comment">// 첫번째 노드의 모든 타입</span></span><br><span class="line">ul.<span class="property">lastChild</span>; <span class="comment">// 마지막 노드의 모든 타입</span></span><br><span class="line"></span><br><span class="line">ul.<span class="property">firstElementChild</span>; <span class="comment">// 첫번재 요소만</span></span><br><span class="line">ul.<span class="property">lastElementChild</span>; <span class="comment">// 마지막 요소만</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-3-형제노드-접근"><a href="#2-3-형제노드-접근" class="headerlink" title="2.3 형제노드 접근"></a>2.3 형제노드 접근</h2><p>형재 노드는 이전과 이후로 선택할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이전과 이후 요소의 모든 타입</span></span><br><span class="line">blue.<span class="property">previousSibling</span>; </span><br><span class="line">blue.<span class="property">nextSibling</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 해당 요소만 반환</span></span><br><span class="line">blue.<span class="property">prebiousElementSibling</span>; </span><br><span class="line">blue.<span class="property">nextElementSibling</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> DOM-Event </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-DOM-02-DOM의 기본개념(CSSOM, Render Tree, CRP)</title>
      <link href="/2023/01/29/Front-JS-DOM-02-DOM/"/>
      <url>/2023/01/29/Front-JS-DOM-02-DOM/</url>
      
        <content type="html"><![CDATA[<h1 id="1-DOM이란"><a href="#1-DOM이란" class="headerlink" title="1. DOM이란?"></a>1. DOM이란?</h1><ul><li>Document Object Model의 약자</li><li>JS는 HTML 조작에 특화된 언어</li></ul><p>JS에선 <code>&lt;p&gt;&lt;/p&gt;</code> 이런 HTML을 직접 해석하고 조작할 수 없습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="comment">&lt;!-- 에러남 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>.innerHTML = &#x27;안녕&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JS는 <code>&lt;p&gt;</code> 이런건 못알아듣습니다. 그런데 어떻게 HTML 태그들을 알아보고 조작할 수 있는 것일까요?<br>JS가 HTML 조작을 하기 위해서는, <strong>HTML을 자바스크립트가 해석할 수 있는 문법으로 변환해놓으면</strong> 됩니다.<br>그래서 HTML을 JS가 알아먹는 array 혹은 object 자료형에 담아버립니다.</p><p>그래서 실제로 브라우저는 HTML 페이지를 열어줄 때,<br>HTML을 JS로 쉽게 찾고 바꾸기 위해 object와 비슷한 자료형에 담아줍니다. </p><p>예를 들어, </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color : red&quot;</span>&gt;</span>안녕하세요<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>브라우저는 위와 같은 HTML을 발견하면, object 자료로 바꿔서 보관해둡니다.<br>구체적으로는 <code>var document = &#123; &#125;</code> 이런 변수를 하나 만들어서 거기 넣어줍니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable language_">document</span> = &#123;</span><br><span class="line">  div1 : &#123;</span><br><span class="line">    style : &#123;color : <span class="string">&#x27;red&#x27;</span>&#125;</span><br><span class="line">    innerHTML : <span class="string">&#x27;안녕하세요&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 <code>document.div1.innerHTML = &#39;안녕&#39;</code> 이렇게 자바스크립트를 짜면 HTML 조작이 가능합니다.<br>그래서 저렇게 object에 담아두는 것입니다. (물론 실제 DOM과 생김새는 좀 다름)</p><p>위 변수를 <strong>document object</strong>라고 부릅니다.<br>여기다 model이라고 붙여서 <code>DOM (Document Object Model)</code>이라고 합니다.</p><hr><h1 id="2-브라우저는-위에서부터-읽음"><a href="#2-브라우저는-위에서부터-읽음" class="headerlink" title="2. 브라우저는 위에서부터 읽음"></a>2. 브라우저는 위에서부터 읽음</h1><p>브라우저는 HTML문서를 위에서 부터 차례로 읽어내려갑니다.<br>읽을 때 마다 HTML을 발견하면 DOM에 추가해줍니다. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;안녕&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span>임시글자<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위와 같이 코드짜면 에러가 납니다. 왜냐면 브라우저는 HTML을 위에서부터 한줄한줄 읽습니다.<br>그런데 갑자기 JS로 <code>&lt;p id=&quot;test&quot;&gt;</code>인 요소를 DOM에서 찾고 바꾸라고 해서 에러가 날 뿐입니다.<br>왜냐면 아직 <code>&lt;p id=&quot;test&quot;&gt;</code>를 읽기 전이라 p태그에 대한 DOM이 아직 생성되지 않았으니까요.<br>이렇듯 <strong>자바스크립트는 DOM이 생성된 경우에만 HTML을 변경</strong>할 수 있습니다.</p><hr><h2 id="2-1-DOMContentLoaded-이벤트-리스너"><a href="#2-1-DOMContentLoaded-이벤트-리스너" class="headerlink" title="2.1 DOMContentLoaded 이벤트 리스너"></a>2.1 DOMContentLoaded 이벤트 리스너</h2><p>“이 코드는 HTML 전부 다 읽고 실행해주세요” 라고 코드짜놓을 수 있습니다. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &quot;HTML을 다 읽어들였는지&quot;를 알려주는 이벤트리스너</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123; </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;안녕&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span>임시글자<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JS를 <code>&lt;body&gt;</code>태그 끝나기 전에 전부 작성하기 때문에, JS 위치를 내가 정할 수 없을 경우에만 유용한 방법</p><hr><h2 id="2-2-load-이벤트-리스너"><a href="#2-2-load-이벤트-리스너" class="headerlink" title="2.2 load 이벤트 리스너"></a>2.2 load 이벤트 리스너</h2><p><code>load 이벤트리스너</code>를 사용하면 <strong>DOM 생성뿐만 아니라 이미지, css, js파일이 로드가 됐는지도 체크가능</strong>합니다.</p><ul><li>외부 자바스크립트 파일에 저걸 적어놓으면, </li><li>js 파일보다 이미지가 더 먼저 로드되는 경우도 있으니 이벤트 발생체크를 못할 수도 있음</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// document 안의 이미지, js 파일 포함 전부 로드가 되었을 경우 실행할 코드</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="3-CSSOM"><a href="#3-CSSOM" class="headerlink" title="3. CSSOM"></a>3. CSSOM</h1><p><code>CSSOM</code>은 CSS Object Model의 약자입니다.<br>브라우저에서 HTML 파일을 분석하면 HTML 요소들을 DOM으로 변환해서 이해하는데, 그러면 정의한 스타일 CSS는 어떻게 이해할까요? 브라우저에서 DOM을 만들게 되면, 정의된 CSS를 병합해서 CSSOM을 만듭니다.<br><code>DOM + CSS = CSSOM</code></p><p>CSSOM에서는 개발자가 정의한 스타일뿐만 아니라 브라우저에서 기본적으로 설정된 모든 속성값들,<br>즉 cascading 룰에 따라서 합해진 모든 CSS 값들이 정의되어져 있습니다.<br>이를 <code>Computed Styles</code>라고 부르는데, 모든 것들이 이미 계산된 스타일을 말합니다.</p><p>cf. <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model">MDN CSSOM</a></p><hr><h1 id="4-Render-Tree"><a href="#4-Render-Tree" class="headerlink" title="4. Render Tree"></a>4. Render Tree</h1><p><code>DOM + CSSOM = Render Tree</code></p><p>브라우저가 HTML 파일을 읽게 되면, 제일 처음 DOM 트리가 만들어지고,<br>그 다음에 CSS 파일을 읽은 다음 전부 계산해서 최종적으로 확정된 CSSOM을 만들게 됩니다.<br>그리고 이거 다음에 DOM과 CSSOM을 합해서<br>즉, 최종적으로 브라우저에 표기될 요소들만 <code>Render Tree</code>에 선별되어서 표기가 됩니다.</p><p>Render Tree에 body태그만 있는 것을 확인할 수 있는데,<br>왜냐하면 DOM의 head 태그는 사용자들에게 보여지지 않기 떄문입니다.</p><p>예를 들면, span의 <code>opacity: 0, visibility: hidden</code> 으로 설정되었다면,<br>사용자 눈에는 보이지 않지만 요소는 그대로 그 자리에 있습니다.<br>다만 투명해질 뿐인거죠. 이런 요소들은 Render Tree에 포함됩니다. </p><p>반대로, <code>display : none</code>라고 되어있다면,<br>아예 사용자 눈에 보이지 않는 속성값들은 Render Tree에 포함되지 않습니다.</p><p>지금까지 브라우저가 아무리 간단한 HTML 페이지라도 사용자에게 보여주기까지는 많은 절차가 진행됩니다.</p><ol><li>DOM으로 변환</li><li>CCSOM을 만들어 최종 스타일을 전부 계산한 다음<ul><li>CSSOM에는 Cascading(폭포) 규칙이 존재하기 때문에 CSS를 따로 정의하지 않아도</li><li>브라우저에 기본 설정된 CSS 파일 등이 전부 적용</li><li>밑에 있는 자식 요소들에도 부모 요소들의 속성값들을 물려받음</li></ul></li><li>Render Tree를 만들어 사용자게 보여준다.</li></ol><hr><h1 id="5-성능-보장-렌더링-순서-Critical-Rendering-Path"><a href="#5-성능-보장-렌더링-순서-Critical-Rendering-Path" class="headerlink" title="5. 성능 보장 렌더링 순서(Critical Rendering Path)"></a>5. 성능 보장 렌더링 순서(Critical Rendering Path)</h1><p>웹 페이지나 웹 어플리케이션을 브라우저가 사용자에게 보여주기까지 어떤 과정을 거치는지에 대해서 알아볼 것입니다.<br>이 과정을 이해해야 성능이 좋은 웹 어플리케이션을 만들 수 있습니다.<br>나중에 다른 JavaScript 프레임워크나 라이브러리를 쓰던, 다른 CSS 전처리기를 쓰던, 애니메이션을 CSS로 하던,<br>기본적인 내용이 잘 정리되어야 성능좋은 웹페이지를 만들 수 있습니다.</p><p>브라우저에서 URL을 입력하게 되면 다음와 같은 순서로 진행됩니다.</p><ol><li>브라우저가 서버에게 HTML 파일을 요청 : <code>Requests/Response</code></li><li>HTML 파일을 서버에게 받아서 로딩 : <code>Loading</code></li><li>로딩받은 HTML 파일을 한 줄씩 읽어서 : <code>Scripting</code><ol><li>DOM 요소로 변환</li><li>CSS 요소를 CSSOM으로 변환</li></ol></li><li>변환한 CSSOM을 브라우저 window에 표기하기 위해 Rendering Tree를 준비 : <code>Rendering</code></li><li>각각의 요소들이 어떤 위치에 얼마나 크게 표기될 건지 계산 : <code>Layout</code></li><li>그림을 그린다. : <code>Painting</code></li></ol><p>이것을 조금 더 어떤 일을 하냐를 카테고리로 나눠서 생각해보면, 크게 2가지 파트로 나눌 수 있습니다.</p><ul><li><code>Construction 파트</code><ul><li>HTML 페이지에서 브라우저가 이해할 수 있도록 브라우저만의 언어로 바꾸는 부분</li><li>DOM요소로 변환하고, CSSOM을 만들고, Render Tree를 최종적으로 만드는 것까지를 의미</li></ul></li><li><code>Operation 파트</code><ul><li>브라우저가 이해할 수 있는 Rendering Tree를 이용해서 구조를 작성하고, 어디에다 배치할 건지 계산한 다음에 실제 브라우저에 그림을 그려주는(redering) 부분</li><li>layout, paint, composition을 통해 최종적으로 사용자에게 웹페이지 내용이 보여지기까지를 의미</li></ul></li></ul><hr><h2 id="5-1-layout"><a href="#5-1-layout" class="headerlink" title="5.1 layout"></a>5.1 layout</h2><p>Layout이란 무엇일까요? Render Tree에는 DOM 요소뿐만 아니라 최종적으로 계산된 CSS 스타일이 포함되어 있습니다.<br>이제 이 정보를 기반으로 window 위에서 해당 요소가 어느 위치에 어느 크기로 배치할 지 등의 레이아웃을 구상하게 됩니다.<br>X와 Y, 너비과 높이 등의 크기들을 계산하겠죠.<br>이제 이런 레이아웃을 맞춰야지 정확하게 어디에다가 얼마만큼 크게 그림을 그려야 될지 계산이 됩니다.</p><hr><h2 id="5-2-paint"><a href="#5-2-paint" class="headerlink" title="5.2 paint"></a>5.2 paint</h2><p>그 다음 paint 과정이 일어나는데, 계산한 요소들을 바로 브라우저에 그림을 그리는 것이 아니라 이 요소들을 어떻게 배치했느냐에 따라서 paint 부분에서는 각각 부분을 조금씩 잘게 나누어서 이미지를 준비해 놓습니다. 각각의 요소들의 이미지를 <code>비트맵</code>이라고 하는데, 즉 컴퓨터가 이해할 수 있는 이미지를 비트맵 데이터 형태로 변환하게 됩니다. CSS에서 Z-index를 쓰게 되면 paint 부분이 요소들을 묶어서 레이어 단계를 만들어 레이어 별로 paint를 준비해놓습니다.</p><blockquote><p>꼭 Z-index 별로 아니라 다양한 속성값에 따라 브라우저 엔진마다 성능 개선을 위해 레이어를 만듭니다.</p></blockquote><p>그러면  왜 브라우저는 한 번에 그리지 않고 레이어 기능을 이용해 각 레이어 별로 준비할까요? 이것은 브라우저가 자체적으로 성능 개선을 위해 준비를 해놓는 것입니다. 만약 레이어 기능을 이용하지 않고 개발자가 요소의 위치를 움직이거나 투명도를 변환하다면, 브라우저는 매번 그림을 처음부터 다시 그려야 합니다. 하지만 이렇게 레이어 단위로 그리게 되면, 해당 요소가 변화되면 해당 요소의 레이어만 다시 그리면 됩니다. </p><p>이는 PhotoShop의 레이어 기능과 똑같은 원리로 동작하는 것입니다. 레이어를 만들고 그 위에 또 다른 레이어를 만들어 겹치면서 그림을 그리는 것이죠. 이렇게 만들다 무언가 잘못되었다면 제일 위에 있는 레이어만 지우면 되겠죠? 그리고 다시 새로운 레이어를 만들어서 그림을 그리면 됩니다. 이런 식으로 브라우저도 성능 개선을 위해 레이어 기능을 사용합니다. </p><p>그래서 CSS에 <code>willchange</code>라는 속성값이 있는데, 이는 브라우저에게 opacity(투명도)가 변화될지도 모른다고 애기를 해서, 새 레이어에다 추가를 해놓으라는 의미입니다. 그래서 <code>willchange</code>라는 속성값을 너무 많이 쓰지 마라고도 말합니다. 왜냐하면 불필요하게 너무 많이 쓰면 브라우저가 쓸데없이 불필요하게 레이어를 너무 많이 만들기 때문입니다. 각각 요소마다 새로운 레이어를 만들게 되면 너무 많은 레이어가 존재해도 성능이 나빠질 수 있습니다.</p><hr><h2 id="5-3-composition"><a href="#5-3-composition" class="headerlink" title="5.3 composition"></a>5.3 composition</h2><p>미리 준비한 레이어를 순서대로 차곡차곡 브라우저 위에다가 표기하면 됩니다.<br>z-index가 제일 높은 레이어를 제일 먼저하는 등 composition(구성 요소)를 함께 모아서 표기하게 됩니다.</p><hr><h2 id="5-4-Critical-Rendering-Path-성능"><a href="#5-4-Critical-Rendering-Path-성능" class="headerlink" title="5.4 Critical Rendering Path 성능"></a>5.4 Critical Rendering Path 성능</h2><p>HTML 페이지에서 브라우저가 표기할 수 있는 단계까지를 <code>Critical Rendering Path</code>라고 부릅니다. </p><h3 id="5-4-1-Construction-파트"><a href="#5-4-1-Construction-파트" class="headerlink" title="5.4.1 Construction 파트"></a>5.4.1 Construction 파트</h3><p>DOM(HTML)에서 어떻게 Render Tree를 빠르게 만들 수 있을까요? 당연히 DOM 요소가 작으면 작을 수록, CSS 규칙이 작으면 작을 수록 Tree가 작아지기 때문에 빠르게 만들 수 있겠죠? 그래서 불필요한 태그를 쓰거나, 불필요하게 div태그를 남용한다든지, 쓸데없이 wrapping 클래스나 wrapping 요소를 만든다든지 이런 것들을 자제해야 합니다. 그래서 요소들을 최대한 작게 만드는 것이 중요합니다.</p><h3 id="5-4-2-Operation-파트"><a href="#5-4-2-Operation-파트" class="headerlink" title="5.4.2 Operation 파트"></a>5.4.2 Operation 파트</h3><p>Operation Time에는 처음에 사용자에게 표기하는 것도 중요하지만 나중에 사용자가 클릭을 통해 요소를 움직이거나 애니메이션을 쓸 떄, paint가 자주 일어나지 않도록 만드는 것이 중요하겠죠? 예를 들어, 요소의 위치를 옮기는데 무언가 다시 그림을 그려야 한다면 paint가 다시 발생하기 때문에 성능에 좋지 않겠죠. 최악의 경우는 layout을 수정해서 다른 요소들의 position도 바뀌는 경우 다시 처음부터 그림을 그려야 하기 때문에 성능에 가장 좋지 않습니다. 그래서 우리가 JavaScript나 CSS로 DOM 요소를 조작할 때, composition만 일어나면 성능이 가장 좋습니다. point가 디시 일어난다면 나쁘지도 썩 좋지도 않겠지만, layout이 다시 일어난다면 최악의 경우가 됩니다.</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> DOM-Event </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-DOM-01-Web API</title>
      <link href="/2023/01/29/Front-JS-DOM-01-Web%20API/"/>
      <url>/2023/01/29/Front-JS-DOM-01-Web%20API/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Web-APIs란"><a href="#1-Web-APIs란" class="headerlink" title="1. Web APIs란?"></a>1. Web APIs란?</h1><p>브라우저 자체에서 제공하는 API이 굉장히 많습니다.</p><ul><li><code>DOM APIs</code><ul><li>Document Object Model의 약자</li><li>웹 페이지에 있는 요소들을 생성하거나 삭제하거나 또는 스타일은 이런 조작하는 기능을 제공</li></ul></li><li><code>Network APIs</code> :  서버와 통신할 수 있는 기능들을 제공</li><li><code>Graphics APIs</code> : Canvas나 WebGL같은 그래픽에 관련된 API들도 제공</li><li><code>Audio/Video APIs</code> : 오디오나 비디오를 재생하거나 중지하는 등 다양한 멀티미디어에 관련 API 제공</li><li><code>Device APIs</code> : 디바이스 사용자가 온라인인지 오프라인인지 디바이스의 상태 정보를 받아올 수 있는 API 제공</li><li><code>File APIs</code> : 사용자의 파일을 읽거나 저장하는 API</li><li><code>Storage APIs</code> : 사용자의 정보를 저장할 수 있는 스토리지에 관련된 API</li></ul><blockquote><p>cf</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Introduction">MDN Web API</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API">MDN Web API collection</a></li></ul></blockquote><hr><h1 id="2-HTTP와-HTTPS"><a href="#2-HTTP와-HTTPS" class="headerlink" title="2. HTTP와 HTTPS"></a>2. HTTP와 HTTPS</h1><p><code>HTTP</code>는 웹 클라이언트와 서버가 어떻게 통신할지에 대한 통신 규약을 정해놓은 것으로, Hypertext Transfer Protocol의 약자로써 클라이언트가 서버에게 정보를 요청하고, 다시 서버에서 정보를 받아오는 request를 하고 respence를 받아오는 방식으로 이루어져 있습니다.</p><p><code>HTTPS</code>는 HTTP에 S가 더해진 것으로 Hypertext Transfer Protocal Secure의 약자입니다. 즉, 정보를 주고받는 것들이 보안 처리가 된 http라는 뜻입니다.</p><p><code>HTTP</code>에서 패스워드를 입력해서 서버에게 보내게 되면, 아무런 encryption이 일어나지 않고, 즉 아무런 보안처리가 되지 않아서 ‘dream’이라는 글자가 그대로 전송되어서 해커가 네트워크가 어떻게 전송됐는지를 들여다볼 수 있는 반면에, <code>HTTPS</code>는 secure하게 encrypt가 되어서, 즉 ‘drame’이라는 글자가 사용자가 알아볼 수 없는 ‘암호키’를 이용해서 보안 처리가 되기 때문에 해커가 함부로 볼 수가 없습니다. </p><p>그래서 HTTP는 보안 처리가 되지 않고 HTTPS는 보안 처리가 되어 있기 때문에, 몇몇 Web APIs는 HTTPS 환경에서만 동작합니다. 이러한 부분은 MDN 사이트에서 확인해서 찾아서 쓰면 되고, 이런 Web APIs에서 제공하는 API 뿐만 아니라, 트위터, 트렐러, 유튜브, 핀터레스 등의 서비스, 나아가 굉장히 다양한 회사에서 자신들의 백엔드 API를 제공합니다.</p><hr><h1 id="3-Browser-구조"><a href="#3-Browser-구조" class="headerlink" title="3. Browser 구조"></a>3. Browser 구조</h1><p>브라우저에서 웹 페이지를 열게 되면 <code>Window</code>라는 전체적인 오브젝트가 존재하고, <code>Window</code>는 여러분들의 페이지뿐만 아니라 브라우저에서 현재 열려있는 전체적인 창을 의미합니다.</p><p>그리고 Window 안에 즉 페이지가 표기되는 부분이 <code>Document</code> 오브젝트입니다. 즉, <code>Document</code>는 HTML에서 작성한 요소들이 표기되는 부분이라고 볼 수 있습니다. 그리고 사용자 눈에는 보이진 않지만 전체적으로 윈도우에 관련된 즉 브라우저 자체에 관련된 정보들이 담겨 있는 <code>Navigator</code>라는 오브젝트도 있습니다.</p><table><thead><tr><th align="center">종류</th><th>설명</th></tr></thead><tbody><tr><td align="center">window</td><td>웹 브라우저가 열릴 때마다 생성되는 최상위 관리 객체 <code>(브라우저 창)</code></td></tr><tr><td align="center">document</td><td>웹 브라우저에 표시되는 HTML 문서 정보가 포함된 객체 <code>(브라우저 내용)</code></td></tr><tr><td align="center">location</td><td>웹 브라우저에 현재 표시된 페이지에 대한 URL 정보가 포함된 객체</td></tr><tr><td align="center">history</td><td>웹 브라우저에 저장된 방문 기록이 포함된 객체</td></tr><tr><td align="center">navigator</td><td>웹 브라우저 정보가 포함된 객체</td></tr><tr><td align="center">screen</td><td>웹 브라우저의 화면 정보가 포함된 객체</td></tr></tbody></table><p>그래서 HTML, CSS, JavaScript를 포함한 웹 페이지를 브라우저에서 실행되면 <code>Window</code>라는 전체적인 오브젝트가 있고, <code>Window</code> 안에는 <code>DOM(Document 모델)</code>이 들어있고, DOM을 이용해서 새로운 요소를 추가하고, 빼거나 움직이고 이런 것들이 가능하게 됩니다. 또 <code>BOM</code>은 Browser Object Model의 약자로 브라우저에 관련된 Navigator나 Location이나 Fetch나 Storage같은 Web APIs 등이 들어있습니다. MDN 사이트에서 Web APIs와 관련된 모든 오브젝트들이 BOM에 해당됩니다.</p><p>그리고 이제 작성한 자바스크립트가 함께 포함이 되어져 있습니다. 그래서 자바스크립트로 브라우저 위에서 동작하는 걸 만들 때는 이런 DOM 관련 API도 쓸 수 있고, BOM 관련 API도 쓸 수 있습니다.</p><p>실제로 브라우저 콘솔 창에서 다음 명령어를 작성하고 확인해보세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ document</span><br><span class="line">$ window</span><br></pre></td></tr></table></figure><p>콘솔창을 이용해서 확인해도 되지만 MDN Window에 가면 더 자세히 알 수 있습니다. Window는 인터페이스인데, DOM의 document가 포함된 Window를 나타내는 것이라 설명하면서, Window는 무엇이고, 그 안에 어떤 것들이 들어있는 지도 확인해볼 수 있습니다.</p><p>cf. <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window">MDN Window</a></p><hr><h1 id="4-window-객체"><a href="#4-window-객체" class="headerlink" title="4. window 객체"></a>4. window 객체</h1><h2 id="4-1-window-객체-기본-속성"><a href="#4-1-window-객체-기본-속성" class="headerlink" title="4.1 window 객체 기본 속성"></a>4.1 window 객체 기본 속성</h2><table><thead><tr><th align="center">속성</th><th>설명</th></tr></thead><tbody><tr><td align="center">innerWidth</td><td>웹 브라우저 화면의 너비를 px(픽셀) 단위로 나타냄</td></tr><tr><td align="center">innerHeight</td><td>웹 브라우저 화면의 높이를 px 단위로 나타냄</td></tr><tr><td align="center">outerWidth</td><td>웹 브라우저 창의 너비를 px 단위로 나타냄</td></tr><tr><td align="center">outerHeight</td><td>웹 브라우저 창의 높이를 px 단위로 나타냄</td></tr><tr><td align="center">screenTop &#x2F; screenY</td><td>웹 브라우저 위쪽 면과 모니터의 간격을 px 단위로 나타냄</td></tr><tr><td align="center">screenLeft &#x2F; screenX</td><td>웹 브라우저 왼쪽 면과 모니터의 간격을 px 단위로 나타냄</td></tr><tr><td align="center">pageXOffset &#x2F; scrollX</td><td>웹 브라우저의 수평 스크롤 위치를 px 단위로 나타냄</td></tr><tr><td align="center">pageYOffset &#x2F; scrollY</td><td>웹 브라우저의 수직 스크롤 위치를 px 단위로 나타냄</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;printInfo()&quot;</span>&gt;</span>window 객체 속성<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">printInfo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`웹 브라우저의 너비: <span class="subst">$&#123;<span class="variable language_">window</span>.innerWidth&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`웹 브라우저의 높이: <span class="subst">$&#123;<span class="variable language_">window</span>.innerHeight&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`웹 브라우저 창의 너비: <span class="subst">$&#123;<span class="variable language_">window</span>.outerWidth&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`웹 브라우저 창의 높이: <span class="subst">$&#123;<span class="variable language_">window</span>.outerHeight&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`웹 브라우저 창 위쪽 면과 모니터 사이의 간격: <span class="subst">$&#123;<span class="variable language_">window</span>.screen Top&#125;</span>/<span class="subst">$&#123;<span class="variable language_">window</span>.screenY&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`웹 브라우저 창 왼쪽 면과 모니터 사이의 간격: <span class="subst">$&#123;<span class="variable language_">window</span>.screen Left&#125;</span>/<span class="subst">$&#123;<span class="variable language_">window</span>.screenX&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`웹 브라우저 창의 스크롤 가로 위치: <span class="subst">$&#123;<span class="variable language_">window</span>.scrollX&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`웹 브라우저 창의 스크롤 세로 위치: <span class="subst">$&#123;<span class="variable language_">window</span>.scrollY&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>코드를 웹 브라우저로 실행하고 개발자 도구를 엽니다.<br>웹 브라우저를 가로와 세로 방향으로 어느 정도 스크롤한 다음 화면에 보이는 window 객체 속성 버튼을 눌러보면,<br>콘솔창에 속성값이 출력되는 것을 볼 수 있습니다.</p><hr><h1 id="5-window-객체-기본-메서드"><a href="#5-window-객체-기본-메서드" class="headerlink" title="5. window 객체 기본 메서드"></a>5. window 객체 기본 메서드</h1><table><thead><tr><th align="center">메서드</th><th>설명</th></tr></thead><tbody><tr><td align="center">alert()</td><td>알림창을 표시함</td></tr><tr><td align="center">confirm()</td><td>확인창을 표시함</td></tr><tr><td align="center">prompt()</td><td>입력창을 표시함</td></tr><tr><td align="center">open()</td><td>새로운 웹 브라우저 창을 연다.</td></tr><tr><td align="center">close()</td><td>웹 브라우저 창을 닫음</td></tr><tr><td align="center">setTimeout()</td><td>일정 시간(ms) 뒤에 콜백 함수를 한 번만 실행함</td></tr><tr><td align="center">setInterval()</td><td>일정 시간(ms)마다 콜백 함수를 반복적으로 실행함</td></tr><tr><td align="center">clearInterval</td><td>setInterval() 메서드로 반복 실행되는 함수를 중지함</td></tr><tr><td align="center">scrollTo()</td><td>웹 브라우저의 스크롤을 특정 위치만큼 이동함</td></tr><tr><td align="center">scrollBy()</td><td>웹 브라우저의 스크롤을 현재 위치에서 상대적 위치로 이동함</td></tr></tbody></table><hr><h2 id="5-1-open-웹-브라우저에서-새-창-제어"><a href="#5-1-open-웹-브라우저에서-새-창-제어" class="headerlink" title="5.1 open() : 웹 브라우저에서 새 창 제어"></a>5.1 open() : 웹 브라우저에서 새 창 제어</h2><p>코드를 실행해 보면 팝업 버튼이 보입니다. 버튼을 클릭하면 popup() 함수가 호출되어 window 객체의 open() 메서드가 실행됩니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- open.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;popup()&quot;</span>&gt;</span>팝업<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">popup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// window.open(경로, 이름, 속성);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;popup.html&#x27;</span>, <span class="string">&#x27;팝업&#x27;</span>, <span class="string">&#x27;width=200, height=100&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// popup.html : 새창에서 열릴 파일의 경로</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 팝업 : 브라우저 탭의 이름이 아니라 open()에서 내부적으로 구분하는 용도로 사용하는 이름</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// width=200, height=100 : 새창의 속성 값</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>window.open() 메서드로 열리는 새 창을 ‘팝업창’이라고도 합니다.</p></blockquote><p>이렇게 열린 창은 window 객체의 <code>close()</code>로 닫을 수 있습니다.<br>보통 <code>open()</code>로 열린 새로운 창을 닫는 용도로 사용합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- popup.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;window.close()&quot;</span>&gt;</span>팝업 닫기<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="5-2-scrollTo-웹-브라우저의-스크롤-이동"><a href="#5-2-scrollTo-웹-브라우저의-스크롤-이동" class="headerlink" title="5.2 scrollTo() : 웹 브라우저의 스크롤 이동"></a>5.2 scrollTo() : 웹 브라우저의 스크롤 이동</h2><ul><li><code>scrollTo()</code> : 웹 브라우저의 스크롤을 특정 위치만큼 이동함</li><li><code>scrollBy()</code> :  웹 브라우저의 스크롤을 현재 위치에서 상대적 위치로 이동함</li></ul><p>두 메서드는 기본으로 매개변수에 x좌표와 y좌표를 전달받습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 📌 몇 번을 호출하더라도 가로는 100px, 세로는 200px의 위치로 스크롤이 이동됨</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">100</span>, <span class="number">200</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 웹 브라우저 스크롤의 현재 위치에서 상대적인 위치로 움직이기 때문에</span></span><br><span class="line"><span class="comment">// 호출할 때마다 웹 브라우저의 스크롤이 가로 방향으로 100px, 세로 방향으로 200px씩 계속 이동</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollBy</span>(<span class="number">100</span>, <span class="number">200</span>); <span class="comment">// window.scrollBy(x좌표, y좌표);</span></span><br></pre></td></tr></table></figure><p>또는 다음처럼 객체 리터럴을 전달받을 수도 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(&#123;<span class="attr">left</span>:<span class="number">100</span>, <span class="attr">top</span>:<span class="number">200</span>&#125;);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollBy</span>(&#123;<span class="attr">left</span>:<span class="number">100</span>, <span class="attr">top</span>:<span class="number">200</span>&#125;);</span><br></pre></td></tr></table></figure><p>scrollTo() 메서드나 scrollBy() 메서드의 매개변수에 객체 리터럴을 전달할 때,<br>behavior 속성을 전달할 수 있습니다.<br>behavior 속성값을 smooth로 하면 웹 브라우저 스크롤이 해당 위치로 마우스 휠을 굴리듯이 부드럽게 이동합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(&#123;<span class="attr">top</span>:<span class="number">4000</span>, <span class="attr">behavior</span>:<span class="string">&#x27;smooth&#x27;</span>&#125;);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollBy</span>(&#123;<span class="attr">top</span>:<span class="number">600</span>, <span class="attr">behavior</span>:<span class="string">&#x27;smooth&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>다른 브라우저 모델 객체는 <a href="https://developer.mozilla.org/ko/docs/Web/API">https://developer.mozilla.org/ko/docs/Web/API</a> 참고</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> DOM-Event </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-network-모두의 네트워크-01-네트워크 첫걸음</title>
      <link href="/2023/01/24/CS-Network-basic01/"/>
      <url>/2023/01/24/CS-Network-basic01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>모두의 네트워크 책을 읽고 요약, 정리한 글입니다.</p></blockquote><h1 id="1-네트워크-구조"><a href="#1-네트워크-구조" class="headerlink" title="1. 네트워크 구조"></a>1. 네트워크 구조</h1><h2 id="1-1-네트워크란"><a href="#1-1-네트워크란" class="headerlink" title="1.1 네트워크란?"></a>1.1 네트워크란?</h2><ul><li>네트워크라는 용어는 컴퓨터뿐만 아니라 <ul><li>사람과 사람의 네트워크, 도로와 철도의 네트워크, 물류 네트워크와 같이 다양한 네트워크가 존재</li></ul></li><li>IT에서는 컴퓨터 2대 이상이 연결되어 있는 <strong>컴퓨터 네트워크</strong>를 의미</li></ul><h2 id="1-2-패킷-x3D-택배"><a href="#1-2-패킷-x3D-택배" class="headerlink" title="1.2 패킷 &#x3D; 택배"></a>1.2 패킷 &#x3D; 택배</h2><ul><li>네트워크나 인터넷에서 데이터를 주고받으려면 규칙이 있어야 한다. <ul><li>e.g. 우리가 쇼핑몰을 볼 때 옷의 사진과 옷에 대한 설명</li></ul></li><li>이 사진과 문자를 보여주기 위해 필요한 규칙이 있는데, 이 규칙에는 <strong>패킷</strong>(packet)을 이용</li></ul><hr><p><code>패킷</code>은 컴퓨터 간의 데이터를 주고받을 때 <strong>네트워크를 통해 전송되는 데이터의 작은 조각</strong></p><ul><li><p>패킷은 큰 데이터가 있더라도 <strong>작게 나누어서 보내는 게 규칙</strong></p></li><li><p>작게 나누지 않고 큰 상태 그대로 보내면 번거롭지도 않고 오히려 더 편할 수 있지만,</p></li><li><p>큰 데이터를 한번에 보내면</p><ul><li>그 데이터가 네트워크의 <strong>대역폭</strong>을 너무 많이 차지(점유) 해서 <strong>다른 패킷의 흐름을 막을 위험</strong>이 존재</li></ul></li><li><p>e.g. 네트워크는 도로와 같다.</p><ul><li>큰 데이터를 네트워크에 보내면 도로와 마찬가지로 네트워크에 정체가 발생함</li></ul></li><li><p>작게 분할한 패킷은 목적지에서 <strong>원래 상태로 되돌리는 작업</strong>이 필요</p><ul><li>목적지에 도착한 패킷들은 전송한 순서대로 도착하지 않음</li><li>네트워크가 지연되어 늦게 도착하거나 패킷이 누락되기도 함</li><li>그래서 송신 측에서 수신 측으로 패킷을 보낼 떄는 <strong>각 패킷에 수선대로 번호를 붙여서 보냄</strong></li><li>그러면 번호에 맞춰 정렬하면 늦게 도착한 패킷도 원래 위치로 돌아갈 수 있음</li></ul></li></ul><hr><h1 id="2-정보의-양을-나타내는-단위"><a href="#2-정보의-양을-나타내는-단위" class="headerlink" title="2. 정보의 양을 나타내는 단위"></a>2. 정보의 양을 나타내는 단위</h1><h2 id="2-1-비트와-바이트"><a href="#2-1-비트와-바이트" class="headerlink" title="2.1 비트와 바이트"></a>2.1 비트와 바이트</h2><p>모든 컴퓨터는 숫자 0과 1만을 다루는데, 그 0과 1의 집합을 **디지털 데이터(digital data)**라고 함</p><ul><li><strong>비트(bit)</strong> : 0과 1의 정보를 나타내는 최소 단위</li><li><strong>바이트(byte)</strong> : 0과 1을 표현하는 1비트는 8개를 모아 표시 가능</li></ul><hr><h2 id="2-2-문자코드"><a href="#2-2-문자코드" class="headerlink" title="2.2 문자코드"></a>2.2 문자코드</h2><p>컴퓨터는 모든 것을 0과 1의 집합으로만 다룬다고 했다. 그러면 문자는 어떻게 입력되나?</p><ul><li><strong>숫자와 문자의 대응표</strong>를 미리 만들어 두면 된다.</li><li>이 대응표를 <code>문자 코드(character code)</code>라고 한다.</li><li>문자 코드중 하나인 <code>ASCII(아스키) 코드</code>는 알파벳, 기호, 숫자 등을 다룰 수 있는 <strong>기본적인 문자코드</strong></li></ul><hr><h1 id="3-랜과-왠"><a href="#3-랜과-왠" class="headerlink" title="3. 랜과 왠"></a>3. 랜과 왠</h1><p>네트워크는 접속할 수 있는 범위에 따라 크게 두 가지 종류로 나눌 수 있다.</p><ul><li><code>랜(LAN)</code> : 지리적으로 제한된 곳에서 컴퓨터와 프린터를 연결할 수 있는 네트워크<ul><li>e.g. 사무실, 가정</li></ul></li><li><code>왠(WAN)</code> : 지리적으로 넓은 범위에 구축된 네트워크<ul><li>e.g. **인터넷 서비스 제공자(ISP)**가 제공하는 서비스를 사용하여 구축된 네트워크<ul><li>ISP &#x3D; 인터넷 사용 서비스 사업을 하고 있는 KT, U+, SK브로드밴드와 같은 통신 회사</li></ul></li><li>e.g. 부산 사무실과 서울 사무실을 연결</li><li>즉, 랜과 랜을 연결한 것</li></ul></li></ul><hr><h1 id="4-가정에서-하는-랜-구성"><a href="#4-가정에서-하는-랜-구성" class="headerlink" title="4. 가정에서 하는 랜 구성"></a>4. 가정에서 하는 랜 구성</h1><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/cs-all-network-basic_1_1.png" alt="cs-all-network-basic_1_1"></p><p>가정에서 구성하는 네트워크는 주로 랜</p><ul><li>인터넷을 사용하기 위해서는 결정해야 할 2가지가 있는데, **인터넷 서비스 제공자(ISP)**와 <strong>인터넷 회선</strong>이다. </li><li>현재는 대부분 <strong>광랜</strong>(광케이블 X)을 사용하는 사람이 많다.</li><li>cf. <strong>인터넷 공유기</strong>는 인터넷 서비스 제공자와 네트워크를 연결</li><li>보통 위 그림처럼 인터넷 공유기를 중심으로 내부 인터넷망(사설망)을 구성하고, 다양한 기기를 연결함</li><li>연결 방식은 크게 <code>유선 랜</code>과 <code>무선 랜</code>으로 나뉨<ul><li><code>유선 랜(유선)</code> : 랜 케이블이 필요</li><li><code>무선 랜(무선)</code> : 랜 케이블이 필요X, (e.g. WIFI)</li></ul></li></ul><hr><h1 id="5-회사에서-하는-랜-구성"><a href="#5-회사에서-하는-랜-구성" class="headerlink" title="5. 회사에서 하는 랜 구성"></a>5. 회사에서 하는 랜 구성</h1><h2 id="5-1-작은-기업"><a href="#5-1-작은-기업" class="headerlink" title="5.1 작은 기업"></a>5.1 작은 기업</h2><ul><li>소호 기업(SOHO)는 Small Office&#x2F;Home Office의 약어이며, 소호기업은 소규모 회사를 의미</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/cs-all-network-basic_1_2.png" alt="cs-all-network-basic_1_2"></p><p>가정에서 랜 구성과 다르게 **DMZ(DeMilitarized Zone)**라는 네트워크 영역이 있음</p><ul><li><code>DMZ</code> : 외부에 공개하기 위한 네트워크<ul><li><strong>서버</strong>를 공개하는데 주로 웹 서버, 메일 서버, DNS 서버를 공개</li><li>웹 사이트를 불특정 다수의 외부 사용자에게 공개하려면 <strong>웹 서버</strong>를 외부에 공개</li><li>외부 사용자와 메일을 주고받으려면 <strong>메일 서버</strong>를 외부에 공개</li><li>외부에서 도메인 이름을 사용하여 회사의 서버에 접속하려면 <strong>DNS 서버</strong>를 외부에 공개</li></ul></li></ul><p>회사에서는 서버를 운영하는 방법은 3가지가 있다</p><ol><li>서버를 <strong>사내에 설치</strong>하거나<ul><li>사내에서 서버를 운영하는 경우에는 회사 내에 서버 장비실을 두고 그곳에 랙(선반)을 설치한다.</li><li>cf. 구글에 “서버 렉” 검색</li><li>사내 또는 데이터 센터에 서버를 두고 운영하는것을 **온프레미스(on-premise)**라고 한다</li></ul></li><li><strong>데이터 센터</strong>에 두거나</li><li>**클라우드(cloud)**에 둔다.</li></ol>]]></content>
      
      
      <categories>
          
          <category> CS-네트워크 </category>
          
          <category> 모두의 네트워크 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 네트워크 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode - 자주 쓰는 단축키 &amp; 기능</title>
      <link href="/2023/01/21/VSCode-Shortcuts/"/>
      <url>/2023/01/21/VSCode-Shortcuts/</url>
      
        <content type="html"><![CDATA[<h1 id="1-VSCode-명령어"><a href="#1-VSCode-명령어" class="headerlink" title="1. VSCode 명령어"></a>1. VSCode 명령어</h1><p><a href="https://demun.github.io/vscode-tutorial/shortcuts/">Visual Studio Code tutorial 단축키</a></p><p>Preferences &gt; Keyboard Shortcut(바로 가기 키) 에서 단축키를 확인하거나 변경할 수 있습니다.</p><hr><h1 id="2-VSCode-기능"><a href="#2-VSCode-기능" class="headerlink" title="2. VSCode 기능"></a>2. VSCode 기능</h1><h2 id="2-1-peek"><a href="#2-1-peek" class="headerlink" title="2.1 peek"></a>2.1 peek</h2><ul><li>CSS Peek</li><li>HTML CSS Support</li></ul><p>위 확장 기능을 설치하고, <code>Alt + F12</code>를 누르면, 해당 파일로 가지 않고 수정 가능</p><hr><h2 id="2-2-Refactoring"><a href="#2-2-Refactoring" class="headerlink" title="2.2 Refactoring"></a>2.2 Refactoring</h2><p><code>Ctrl + Shift + R</code> 함수로 if, try 등 싸매기</p><hr><h2 id="2-3-rename-symbol"><a href="#2-3-rename-symbol" class="headerlink" title="2.3 rename symbol"></a>2.3 rename symbol</h2><p>변수나 함수 등을 클릭해서, <code>F2</code>누르거나, 우클릭해서 <code>Rename Symbol</code> 누르거나 하면,<br>연관된 해당 이름을 모두 바꿔줌</p><hr><h2 id="2-4-snippets"><a href="#2-4-snippets" class="headerlink" title="2.4 snippets"></a>2.4 snippets</h2><p>확장 기능에 snippets를 클릭해서 쓰기</p><hr><h2 id="2-5-debugger"><a href="#2-5-debugger" class="headerlink" title="2.5 debugger"></a>2.5 debugger</h2><p>for문 행동이 어떻게 돌아가는지 궁금하면, vscode에 왼쪽 break point 찍고 run and debug하기</p><hr><h2 id="2-6-multi-cursor"><a href="#2-6-multi-cursor" class="headerlink" title="2.6 multi cursor"></a>2.6 multi cursor</h2><p><code>Ctrl + Alt</code> 누르고 아래 방향키, <code>Alt + 마우스</code> 클릭해서 수정</p><hr><h2 id="2-7-emmet"><a href="#2-7-emmet" class="headerlink" title="2.7 emmet"></a>2.7 emmet</h2><hr><h2 id="2-8-shortcuts"><a href="#2-8-shortcuts" class="headerlink" title="2.8 shortcuts"></a>2.8 shortcuts</h2><ul><li><code>Ctrl + L</code> : 코드 줄 선택</li><li><code>Ctrl + 아래방향키</code> : 아래 줄로 이동</li><li><code>Ctrl + P</code> : 프로젝트 파일 이동</li></ul><hr><h2 id="2-9-wrap"><a href="#2-9-wrap" class="headerlink" title="2.9 wrap"></a>2.9 wrap</h2><p>감쌀 코드를 드래그하고, <code>Ctrl + Shipt + P</code> 하고 <code>wrap</code>까지만 치면</p><ul><li><code>Emmet: Wrap with Abbreviation (약어로 래핑)</code>누르고 래핑할 단어 입력</li></ul>]]></content>
      
      
      <categories>
          
          <category> 정보 </category>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode - extention 쓰는 것 정리</title>
      <link href="/2023/01/20/VSCode-Extention/"/>
      <url>/2023/01/20/VSCode-Extention/</url>
      
        <content type="html"><![CDATA[<h1 id="1-기본"><a href="#1-기본" class="headerlink" title="1. 기본"></a>1. 기본</h1><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier - Code formatter</a>⭐</li><li><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a>⭐</li><li><a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">Live Server</a>⭐</li><li><a href="https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview">Image preview</a>⭐</li><li><a href="https://marketplace.visualstudio.com/items?itemName=goessner.mdmath">Svg Preview</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow">indent-rainbow</a>⭐<ul><li>들여쓰기 한 부분에 무지개색으로 칠해줘서 들여쓰기가 명확하게 되서 가독성을 높여줌</li></ul></li><li><a href="https://marketplace.visualstudio.com/items?itemName=JakeWilson.vscode-cdnjs">cdnjs</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=chunsen.bracket-select">Bracket Select</a>⭐<ul><li><code>alt + a</code>로 괄호 안의 문자열을 선택</li></ul></li><li><a href="https://marketplace.visualstudio.com/items?itemName=yatki.vscode-surround">Surround</a>⭐<ul><li>코드를 선택하고 <code>ctrl + shift + T</code>를 누르고 제어문을 선택하면 자동완성</li></ul></li><li><a href="https://marketplace.visualstudio.com/items?itemName=tomasvergara.vscode-fontawesome-gallery">Font Awesome Gallery</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager">Project Manager</a>⭐</li><li><a href="https://marketplace.visualstudio.com/items?itemName=zhucy.project-tree">project-tree</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=tldraw-org.tldraw-vscode">tldraw</a> : 그림 그릴 떄</li></ul><hr><h1 id="2-번역"><a href="#2-번역" class="headerlink" title="2. 번역"></a>2. 번역</h1><ul><li><p><a href="https://marketplace.visualstudio.com/items?itemName=jaehyeon48.kortoeng">korToEng</a> : 변수 지을 떄, ⭐</p><ul><li>Window : <code>Ctrl + F12</code>로 한 -&gt; 영 번역</li><li>MacOS : <code>Cmd + F12</code></li></ul></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=hancel.google-translate">Google Translate</a></p><ul><li>번역할 거 드래그하고, <code>Ctrl + Shift + T</code>누르면, 밑에 줄에 번역해줌</li><li>번역할 거 드래그하고, <code>Shift + Alt + T</code>누르면, 번역 결과 후보 단어 선택 뜸</li><li>설정에서 <code>First Language를 zh-cn(중국어)에서 ko로 변경</code></li></ul></li></ul><hr><h1 id="3-설정-User-setting-json"><a href="#3-설정-User-setting-json" class="headerlink" title="3. 설정(User.setting.json)"></a>3. 설정(User.setting.json)</h1><h2 id="주석-색-변경-이탤릭체-해제"><a href="#주석-색-변경-이탤릭체-해제" class="headerlink" title="주석 색 변경, 이탤릭체 해제"></a>주석 색 변경, 이탤릭체 해제</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 주석 색상, litalic font 해제 설정 */</span></span><br><span class="line"><span class="attr">&quot;editor.tokenColorCustomizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;textMateRules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;comment&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;comment.block&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;comment.block.documentation&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;comment.line&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;constant&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;constant.character&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;constant.character.escape&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;constant.numeric&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;constant.numeric.integer&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;constant.numeric.float&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;constant.numeric.hex&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;constant.numeric.octal&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;constant.other&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;constant.regexp&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;constant.rgb-value&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;emphasis&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;entity&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;entity.name&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;entity.name.class&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;entity.name.function&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;entity.name.method&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;entity.name.section&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;entity.name.selector&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;entity.name.tag&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;entity.name.type&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;entity.other&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;entity.other.attribute-name&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;entity.other.inherited-class&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;invalid&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;invalid.deprecated&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;invalid.illegal&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;keyword.control&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;keyword.operator&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;keyword.operator.new&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;keyword.operator.assignment&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;keyword.operator.arithmetic&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;keyword.operator.logical&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;keyword.other&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;markup&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;markup.bold&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;markup.changed&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;markup.deleted&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;markup.heading&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;markup.inline.raw&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;markup.inserted&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;markup.italic&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;markup.list&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;markup.list.numbered&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;markup.list.unnumbered&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;markup.other&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;markup.quote&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;markup.raw&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;markup.underline&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;markup.underline.link&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;meta&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;meta.block&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;meta.cast&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;meta.class&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;meta.function&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;meta.function-call&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;meta.preprocessor&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;meta.return-type&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;meta.selector&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;meta.tag&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;meta.type.annotation&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;meta.type&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;punctuation.definition.string.begin&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;punctuation.definition.string.end&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;punctuation.separator&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;punctuation.separator.continuation&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;punctuation.terminator&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;storage&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;storage.modifier&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;storage.type&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;string.interpolated&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;string.other&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;string.quoted&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;string.quoted.double&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;string.quoted.other&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;string.quoted.single&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;string.quoted.triple&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;string.regexp&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;string.unquoted&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;strong&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;support&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;support.class&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;support.constant&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;support.function&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;support.other&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;support.type&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;support.type.property-name&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;support.variable&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;variable&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;variable.language&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;variable.name&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;variable.other&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;variable.other.readwrite&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;variable.parameter&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;fontStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot; &quot;</span> <span class="punctuation">&#125;</span> <span class="comment">// 주석과 키워드, 파라미터에 적용된 이탤릭 폰트스타일 해제</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#5b9463&quot;</span> <span class="comment">// 주석 색상변경</span></span><br></pre></td></tr></table></figure><hr><h2 id="괄호-색상"><a href="#괄호-색상" class="headerlink" title="괄호 색상"></a>괄호 색상</h2><p>옵션에 bracket pair 다 키기</p><p>괄호 색상 커스터마이징</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.bracketPairColorization.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;workbench.colorCustomizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editorBracketHighlight.foreground1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#5caeef&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editorBracketHighlight.foreground2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#dfb976&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editorBracketHighlight.foreground3&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#c172d9&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editorBracketHighlight.foreground4&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#4fb1bc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editorBracketHighlight.foreground5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#97c26c&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editorBracketHighlight.foreground6&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#abb2c0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editorBracketHighlight.unexpectedBracket.foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#db6165&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-코드편집"><a href="#4-코드편집" class="headerlink" title="4. 코드편집"></a>4. 코드편집</h1><ul><li>문(if, try)으로 감쌀려는 코드를 드래그한 후 <code>Ctrl + Shipft + P</code> 누르고, surround 검색<ul><li>if, try 문 등을 감쌀 떄(wrap) 사용</li></ul></li><li><a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight">TODO Highlight</a><ul><li>주석 쓸 떄 <code>// TODO:</code>, <code>// FIXME:</code>로 쓰면 하이라이트 해줌</li></ul></li></ul><hr><h1 id="5-마크다운"><a href="#5-마크다운" class="headerlink" title="5. 마크다운"></a>5. 마크다운</h1><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one">Markdown All in One</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=goessner.mdmath">Markdown+Math</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=yzane.markdown-pdf">Markdown PDF</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=tomoki1207.pdf">vscode-pdf</a></li></ul><hr><h1 id="6-테마-및-아이콘"><a href="#6-테마-및-아이콘" class="headerlink" title="6. 테마 및 아이콘"></a>6. 테마 및 아이콘</h1><ul><li>테마<ul><li><a href="https://marketplace.visualstudio.com/items?itemName=akamud.vscode-theme-onedark">Atom One Dark Theme</a>⭐</li><li><a href="https://marketplace.visualstudio.com/items?itemName=DanMeeusen.deep-default-dark-vscode-theme">Deep Default Dark+ VScode Theme</a>⭐</li></ul></li><li>아이콘<ul><li><a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons">vscode-icons</a>⭐</li><li><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">Material Icon Theme</a></li></ul></li></ul><hr><h1 id="7-HTML-CSS"><a href="#7-HTML-CSS" class="headerlink" title="7. HTML, CSS"></a>7. HTML, CSS</h1><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag">Auto Rename Tag</a> : 자동으로 태그 열고 닫고 해주는 확장툴</li><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">Auto Close Tag</a> : HTML 같은 앞의 태그의 이름을 지정하면 뒤에 태그도 자동으로 바꿔주는 확장툴</li><li><a href="https://marketplace.visualstudio.com/items?itemName=ecmel.vscode-html-css">HTML CSS Support</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=anteprimorac.html-end-tag-labels">HTML End Tag Labels</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=solnurkarim.html-to-css-autocompletion">HTML to CSS autocompletion</a> : CSS 파일에서 HTMl의 class나 id에 이름을 띄워주는 확장 프로그램</li><li><a href="https://marketplace.visualstudio.com/items?itemName=cipchk.cssrem">px to rem &amp; rpx &amp; vw (cssrem)</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-autoprefixer">Autoprefixer</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek">CSS Peek</a><ul><li>HTML 같은 파일에서 class에 적용된 CSS 속성으로 바로 이동하게 해주는 확장툴</li><li><code>&lt;Ctrl&gt; + &lt;마우스 클릭&gt;</code>을 하면 해당 CSS로 이동</li></ul></li></ul><hr><h1 id="8-JS"><a href="#8-JS" class="headerlink" title="8. JS"></a>8. JS</h1><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner">Code Runner</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets">JavaScript (ES6) code snippets</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=chamboug.js-auto-backticks">Javascript Auto Backticks</a></li></ul><hr><h1 id="9-Git"><a href="#9-Git" class="headerlink" title="9. Git"></a>9. Git</h1><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph">Git Graph</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=seatonjiang.gitmoji-vscode">Gitmoji</a></li></ul><hr><h1 id="10-React-x2F-Native"><a href="#10-React-x2F-Native" class="headerlink" title="10. React &#x2F; Native"></a>10. React &#x2F; Native</h1><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=NuclleaR.vscode-extension-auto-import">Auto Import ES6, TS, JSX, TSX</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets">ES7+ React&#x2F;Redux&#x2F;React-Native snippets</a><ul><li><code>rfc</code> : 함수형 컴포넌트 생성⭐</li><li><code>rcc</code> : 클래스형 컴포넌트 생성</li><li><code>rsi</code> : 화살표함수 컴포넌트 생성</li><li><code>uses</code> : useState 스니펫⭐</li><li><a href="https://github.com/ults-io/vscode-react-javascript-snippets/blob/HEAD/docs/Snippets.md">다른 Snippet 명령어</a></li></ul></li></ul><hr><h1 id="11-TailwindCSS"><a href="#11-TailwindCSS" class="headerlink" title="11. TailwindCSS"></a>11. TailwindCSS</h1><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss">Tailwind CSS IntelliSense</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=ellreka.tailwindcss-highlight">Tailwind CSS Highlight</a></li></ul><hr><h1 id="12-Styled-components"><a href="#12-Styled-components" class="headerlink" title="12. Styled-components"></a>12. Styled-components</h1><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=styled-components.vscode-styled-components">vscode-styled-components</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 정보 </category>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>읽은 책 정리 -다른 분야</title>
      <link href="/2023/01/16/Reading-Other-01/"/>
      <url>/2023/01/16/Reading-Other-01/</url>
      
        <content type="html"><![CDATA[<p>필사를 하면서 읽은 것을 추천합니다.</p><p>⭐ - 추천 </p><ul><li><input checked="" disabled="" type="checkbox"> 흔들리지 않는 돈의 법칙 (세계 0.001% 부의 거인들의 머니 시크릿) |  토니 로빈스⭐⭐⭐</li><li><input checked="" disabled="" type="checkbox"> 구글의 미래(디지털 시대 너머 그들이 꿈꾸는 세계) | 토마스 슐츠⭐</li><li><input checked="" disabled="" type="checkbox"> 사람을 얻는 기술  | 레일 라운즈⭐</li><li><input checked="" disabled="" type="checkbox"> 기획의 정석 | 박신영⭐</li><li><input checked="" disabled="" type="checkbox"> 도시는 무엇으로 사는가 | 유현준 ⭐</li><li><input checked="" disabled="" type="checkbox"> 어디서 살 것인가 | 유현준⭐</li><li><input checked="" disabled="" type="checkbox"> 실패하지 않는 내 집 짓기 | 유현준, 조성익, 김양길, 윤재선, 심영규</li><li><input checked="" disabled="" type="checkbox"> 도시는 왜 불평등한가 | 리처드 플로리다⭐</li><li><input checked="" disabled="" type="checkbox"> 인공지능과 딥러닝 | 마쓰오 유타카</li><li><input checked="" disabled="" type="checkbox"> 젊음의 법칙 | 사토 도미오 ⭐</li><li><input checked="" disabled="" type="checkbox"> 영원히 사는 법 | 레이 커즈와일⭐</li><li><input checked="" disabled="" type="checkbox"> 스마트한 생각들 | 롤프 도벨리</li><li><input checked="" disabled="" type="checkbox"> 버리드라이프(왜 죽기 전에 하고싶은 일을 목록에만 적어두는가) | 조니, 덩컨, 밴, 데이브 ⭐</li><li><input checked="" disabled="" type="checkbox"> 스티브 잡스 이야기 | 짐 코리건</li><li><input checked="" disabled="" type="checkbox"> 한국인만 모르는 다른 대한민국 | 이만열</li><li><input checked="" disabled="" type="checkbox"> COLOR IMAGE PLANNING 어떤색이 좋을까? (배색과 기획의 Color Coaching Book) | 아이알아이 색채연구소</li><li><input checked="" disabled="" type="checkbox"> 세상에서 가장 짧은 세계사 | 존허스트</li><li><input checked="" disabled="" type="checkbox"> 좋아보이는 것들의 비밀 | 이량주 ⭐</li><li><input checked="" disabled="" type="checkbox"> 최고의 설득 | 카민 갤로⭐</li><li><input checked="" disabled="" type="checkbox"> 인사담당자 100명의 비밀녹취록 | 제갈현열</li><li><input checked="" disabled="" type="checkbox"> 마케팅 불변의 법칙 | 알 리스, 잭 트라우트⭐</li><li><input checked="" disabled="" type="checkbox"> 시민의 교양 | 채사장</li><li><input checked="" disabled="" type="checkbox"> 뉴스의 시대 (뉴스에 대해 우리가 알아야 할 모든 것) | 알랭 드 보통</li><li><input checked="" disabled="" type="checkbox"> 실행력 강한 사람들의 5가지 생각 습관 | 사소 쿠니타케</li><li><input checked="" disabled="" type="checkbox"> 나는 몇 살까지 살까? (1,500명의 인생을 80년간 추적한 사상초유의 수명연구 프로젝트) | 하워드 S. 프리드먼, 레슬리 R. 마틴⭐</li><li><input checked="" disabled="" type="checkbox"> 나는 얼마일까? | 노구치 마히토</li><li><input checked="" disabled="" type="checkbox"> 제로 투 원 (스탠퍼드 대학교 스타트업 최고 명강의) | 피터 틸, 블레이크 매스터스⭐</li><li><input checked="" disabled="" type="checkbox"> 라이프 핵스 Life Hacks (유연하고 단순한 라이프스타일 만들기) | 고야마 류스케</li><li><input checked="" disabled="" type="checkbox"> 타이탄의 도구들 | 팀 페리스</li><li><input checked="" disabled="" type="checkbox"> 어떤 사람이 최고의 자리에 오르는가 | 존 네핑저, 매튜 코헛</li><li><input checked="" disabled="" type="checkbox"> 해피니스 트랙 (스탠퍼드대학교가 주목한 행복프레임) | 에마 세팔라⭐</li><li><input checked="" disabled="" type="checkbox"> 페이스북 심리학 (페이스북은 우리 삶과 우정, 사랑을 어떻게 지배하고 있는가) | 수재나 E. 플로레스</li><li><input checked="" disabled="" type="checkbox"> 버리지 않아도 정리가 된다 | 이토 유지</li><li><input checked="" disabled="" type="checkbox"> 넥스트 구글은 어디인가? | 곽동훈, 김민주, 박승호, 박현덕, 신지나</li><li><input checked="" disabled="" type="checkbox"> 발성과 발음 그리고 노래 부르기 | 최은영</li><li><input checked="" disabled="" type="checkbox"> 오리지널스 (어떻게 순응하지 않는 사람들이 세상을 움직이는가) | 애덤 그랜트⭐</li><li><input checked="" disabled="" type="checkbox"> 스무 살에 알았더라면 좋았을 것들 (스탠퍼드 대학교 최고의 인생 설계 강의) | 티나 실리그</li><li><input checked="" disabled="" type="checkbox"> 구글의 배신 (당신이 꼭 알아둬야 할) 시바 바이디야나단</li><li><input checked="" disabled="" type="checkbox"> 피트니스가 내 몸을 망친다 | 송영규⭐</li><li><input checked="" disabled="" type="checkbox"> 나는 100배 큰 글로벌 마켓에서 창업한다 (500만 원으로 시작해 400억 매출 올리는 해외 시장 공략법) | 강남영</li><li><input checked="" disabled="" type="checkbox"> 내 인생의 로드맵 1인창업 | 황윤정</li><li><input checked="" disabled="" type="checkbox"> 대한민국 풍경사진 레시피 69(봄여름가을겨울 여행 베스트 포토존) | 문철진</li><li><input checked="" disabled="" type="checkbox"> 만화 스토리 창작의 모든 것 (아이디어에서 대본, 시놉시스까지 완벽한 가이드)  | 마크 니스</li><li><input checked="" disabled="" type="checkbox"> 블록체인 혁명 (4차 산업혁명 시대를 이끄는 혁신적 패러다임) | 돈 탭스콧,알렉스 탭스콧</li><li><input checked="" disabled="" type="checkbox"> 십대를 위한 롤모델 빌 게이츠 이야기(꿈꾸는 청소년에게 빌 게이츠가 들려주는 창의적인 삶과 행복한 성공) | 임원기</li><li><input checked="" disabled="" type="checkbox"> 상처받을 용기(모두에게 사랑받을 필요는 없다) | 이승민</li><li><input checked="" disabled="" type="checkbox"> 내가 미래를 앞서가는 이유(스타트업 1위 천재사업가의 미래 통찰) | 사토 가츠아키⭐</li><li><input checked="" disabled="" type="checkbox"> 천재가 아닌 당신이 빅 아이디어 만드는 법(아이디어 때문에 머리 좀 쥐어뜯어 본 당신을 위하여!) | 카지 아쓰시</li><li><input checked="" disabled="" type="checkbox"> 지금 하지 않으면 언제 하겠는가(세계 최고 멘토들의 인생 수업) | 팀 페리스⭐</li><li><input checked="" disabled="" type="checkbox"> 노트지능 (생각을 연결하고 문제를 해결하는 노트 쓰기) | 아이작 유⭐</li><li><input checked="" disabled="" type="checkbox"> 정해진 미래(인구학이 말하는 10년 후 한국 그리고 생존전략) | 조영태⭐</li><li><input checked="" disabled="" type="checkbox"> 유튜브의 신(1인 크리에이터들의 롤모델 대도서관이 들려주는 억대 연봉 유튜버 이야기) | 대도서관⭐</li><li><input checked="" disabled="" type="checkbox"> 나는 직원 없이도 10억 번다(직원 없이 사무실 없이 저절로 굴러가는 사업 시스템 만들기) | 일레인 포펠트</li><li><input checked="" disabled="" type="checkbox"> 최고의 교육(4차 산업혁명 시대 미래형 인재를 만드는, 2018 세종도서 교양부문 선정 도서) | 로베르타 골린코프,캐시 허시-파섹</li><li><input checked="" disabled="" type="checkbox"> 살고 싶은 그곳, 흥미로운 대구여행(지리학자가 바라 본 내 고향 이야기) | 전영권</li><li><input checked="" disabled="" type="checkbox"> 마음에 새기는 명품 명언 | 김옥림</li><li><input checked="" disabled="" type="checkbox"> 더 나은 세상 (우리 미래를 가치 있게 만드는 83가지 질문, 2018 세종도서 교양부문 선정 도서) | 피터 싱어⭐</li><li><input checked="" disabled="" type="checkbox"> 인조인 도쿄 | 세계여행정보센터</li><li><input checked="" disabled="" type="checkbox"> 지적 생활 습관(죽는 순간까지 지적으로 살고 싶다) | 도야마 시게히코⭐</li><li><input checked="" disabled="" type="checkbox"> 나는 생각이 너무 많아 (넘치는 생각 때문에 삶이 피곤한 사람들을 위한 심리 처방) | 크리스텔 프리콜랭⭐</li><li><input checked="" disabled="" type="checkbox"> 한국 경제의 진실 | 이의춘⭐</li><li><input checked="" disabled="" type="checkbox"> 기적을 일으키는 베개의 힘 | 야마다 슈오리⭐</li><li><input checked="" disabled="" type="checkbox"> 의사를 믿지 마라 | 이혁재</li><li><input checked="" disabled="" type="checkbox"> 자본주의 사용설명서(EBS 다큐프라임)  | 고희정,정지은</li><li><input checked="" disabled="" type="checkbox"> 0원에서 시작하는 재테크 (버는 것 적고 모은 것 없는 서민들을 위한 진짜 재테크) | 김경신</li><li><input checked="" disabled="" type="checkbox"> 3시간 수면법 (수험생과 직장인의 두뇌를 100% 활용케하는)  | 후지모도 겐고</li><li><input checked="" disabled="" type="checkbox"> 동물 상식을 뒤집는 책 | 존 로이드, 존 미친슨</li><li><input checked="" disabled="" type="checkbox"> 직업으로서의 소설가 | 무라카미 하루키⭐</li><li><input checked="" disabled="" type="checkbox"> 대한민국 최고의 명의가 들려주는 요통과 디스크  | 정선근⭐</li><li><input checked="" disabled="" type="checkbox"> 나는 1인 기업가다 | 홍순성</li><li><input checked="" disabled="" type="checkbox"> 한국의 젊은 부자들(무일푼에서 100억 원대 회사 만든 61인의 현재 진행형 성공기)  | 이신영⭐</li><li><input checked="" disabled="" type="checkbox"> 최진기의 교실밖 인문학(소크라테스부터 한나 아렌트까지)  | 최진기,서선연⭐</li><li><input checked="" disabled="" type="checkbox"> 3D 프린터, 창업을 출력하라 | 이승준,진동환</li><li><input checked="" disabled="" type="checkbox"> 사피엔스 | 유발 하라리⭐</li><li><input checked="" disabled="" type="checkbox"> 호모 데우스 | 유발 하라리⭐</li><li><input checked="" disabled="" type="checkbox"> 21세기를 위한 21가지 제언 (더 나은 오늘은 어떻게 가능한가) | 유발 하라리⭐</li><li><input checked="" disabled="" type="checkbox"> 눈은 1분만에 좋아진다 | 콘노 세이시⭐</li><li><input checked="" disabled="" type="checkbox"> 지금은 당연한 것들의 흑역사 | 엘버트 잭</li><li><input checked="" disabled="" type="checkbox"> 맛 이야기(음식에 숨겨진 맛있는 과학) | 최낙연</li><li><input checked="" disabled="" type="checkbox"> 합법적으로 세금안내는 110가지 방법 | 신빙수</li><li><input checked="" disabled="" type="checkbox"> 세상을 바꾼 컴퓨터의 거장들 | 조영경, 김태광</li><li><input checked="" disabled="" type="checkbox"> 한글의 탄생(인간에게 문자란 무엇인가) | 노마 히데키 ⭐</li><li><input checked="" disabled="" type="checkbox"> FBI 관찰의 기술(몸의 신호로 상대를 꿰뚫어 보는 실전 매뉴얼) | 조 내버로⭐</li><li><input checked="" disabled="" type="checkbox"> 정의란 무엇인가 | 마이클 샌델⭐</li><li><input checked="" disabled="" type="checkbox"> 날씨가 바꾼 어메이징 세계사(날씨는 인류의 역사를 만들고 지배한다)  | 반기성</li><li><input checked="" disabled="" type="checkbox"> 메모 습관의 힘(하루 5분 나를 성장시키는) | 신정철⭐</li><li><input checked="" disabled="" type="checkbox"> 소프트 엣지(위대한 기업의 비밀) | 리치 칼가아드⭐</li><li><input checked="" disabled="" type="checkbox"> 어떻게 다시 성장할 것인가 | 박광기</li><li><input checked="" disabled="" type="checkbox"> 검색의 경제학 | 빌 탠서</li><li><input checked="" disabled="" type="checkbox"> 나는 죽을 때까지 재미있게 살고 싶다 - 멋지게 나이 들고 싶은 사람들을 위한 인생의 기술 53  | 이근후</li><li><input checked="" disabled="" type="checkbox"> 최고의 공부 - 창의성의 천재들에 대한 30년간의 연구보고서 | 켄 베인⭐</li><li><input checked="" disabled="" type="checkbox"> 맘마미아 월급 재테크 실천법 - 이 책대로 하면 당신도 월급쟁이 부자가 된다! | 맘마미아⭐</li><li><input checked="" disabled="" type="checkbox"> 자연에서 발견한 위대한 아이디어 39  | 김은기</li><li><input checked="" disabled="" type="checkbox"> 독불장군 상대하기 - 집과 직장에 꼭 있는  | 가타다 다마미⭐</li><li><input checked="" disabled="" type="checkbox"> 최고의 팀은 무엇이 다른가 | 대니얼 코일</li></ul><hr><h1 id="소설"><a href="#소설" class="headerlink" title="소설"></a>소설</h1><ul><li><input checked="" disabled="" type="checkbox"> 너의 췌장을 먹고싶어 | 스미노 요루</li><li><input checked="" disabled="" type="checkbox"> 나미야 잡화점의 기적 | 히가시노 게이고</li></ul>]]></content>
      
      
      <categories>
          
          <category> 독서 </category>
          
          <category> 다른 분야 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 독서 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>영단어 뉘앙스-동사</title>
      <link href="/2023/01/16/En-Voca-03/"/>
      <url>/2023/01/16/En-Voca-03/</url>
      
        <content type="html"><![CDATA[<h1 id="1-동사"><a href="#1-동사" class="headerlink" title="1. 동사"></a>1. 동사</h1><p><strong>동사가 가지는 그림은 대부분이 한 가지</strong>이며,<br>이것이 (문화적 이유든, 시대의 변화에 따라 언어가 변한 것이든 등등) 여러 개로 파생되어<br>사전에 등재되어있는 여러가지 의미로도 해석이 되는 것일 뿐</p><ul><li>새 차 샀어, (뽑았어).</li><li>잡초를 잡아댕겼어, (뽑았어).</li><li>나 피를 채취했어, (뽑았어). </li><li>그는 국가대표로 선발되었어, (뽑혔어).</li><li>뽑다  &#x3D; <strong>뭔가 안에 있는걸 끄집어낼때 쓰는 단어</strong></li></ul><p><strong>언어</strong>는 사람의 생각을 글자로 표현하는 과정이기에 ‘주관’이 섞일 수 밖에 없다.</p><p>모든 동사는 자동사, 타동사로도 쓰일 수 있다는 것을 받아들이고, 동사 ‘고유의 이미지’를 이해하고 나서 그 단어가 사용되는 대표 문장들을 자주자주 읽어야 함</p><hr><h1 id="2-Get-x3D-무언이든-움직이는"><a href="#2-Get-x3D-무언이든-움직이는" class="headerlink" title="2. Get &#x3D; (무언이든) 움직이는"></a>2. Get &#x3D; (무언이든) 움직이는</h1><ul><li><strong>뭔가 아니였다가 이제 되고 있는 걸 보고 표현해주는 동사</strong></li><li>모든 종류의 움직임을 표현</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(맑은 하늘의 구름을 보다가 먹구릉이 오는 상황)</span><br><span class="line">Look at the sky, so clean, The sky is covered with white clouds.</span><br><span class="line">It is getting dark.</span><br><span class="line"></span><br><span class="line">Got up early in the morning.</span><br><span class="line"></span><br><span class="line">How can i get to Seoul City Hall?</span><br><span class="line"></span><br><span class="line">I am getting better now.</span><br><span class="line"></span><br><span class="line">I got it. (이해를 안한 상태에서 이해를 한 상태로 이동)</span><br><span class="line"></span><br><span class="line">I dont&#x27; get it. (이해가 안돼)</span><br><span class="line"></span><br><span class="line">I got on A+ on the math exam last week</span><br><span class="line"></span><br><span class="line">Let&#x27;s get on the train!</span><br></pre></td></tr></table></figure><hr><h1 id="2-Like-x3D-무엇이든-비슷한"><a href="#2-Like-x3D-무엇이든-비슷한" class="headerlink" title="2. Like &#x3D; (무엇이든) 비슷한"></a>2. Like &#x3D; (무엇이든) 비슷한</h1><ul><li>사람은 비슷한 것을 좋아한다. 그래서 좋아한다는 의미가 나옴</li><li>e.g. 유유상종, 끼리끼리 어울린다</li><li>Like 는, 고대 독일어 leika-  에서 유래<ul><li>어떤 ‘대상’이 가지고 있는 속성과 같은 형태를 띈 어떤 ‘것’을 표현해주는 단어</li><li>어떤 것과 같은 형태를 띄고 가깝다는 의미에서 come near to 라는 의미까지 추가됨</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">They are like my brothers (내 형제**같은** 사람들이다)</span><br><span class="line"></span><br><span class="line">I feel Like (난 느껴, 기분을 내고있는 ===&gt; 뭔가를 하고싶어)</span><br><span class="line"></span><br><span class="line">How you like that?</span><br><span class="line">(어떤 상태로 너는 할거냐? | </span><br><span class="line">이거나 먹어라, 어때? | 어떻게 그럴수가 있냐 등 부정적 의미)</span><br><span class="line"></span><br><span class="line">It doesn&#x27;t look like we can drink outside. (밖에서 술마실 것 같지 않아 보여.)</span><br><span class="line"></span><br><span class="line">I love playing sports like soccer, baseball.</span><br><span class="line"></span><br><span class="line">⭐ Would ( &#x27;~할 것이다&#x27;라는 가능성의 의미)</span><br><span class="line">would like to = 비슷하게 ~할 것이다 = ~하고싶다</span><br><span class="line"></span><br><span class="line">How would you like your coffee?</span><br><span class="line">(&#x27;너&#x27;는 너의 커피에 대해 어떤 식의 상태로 가까워지는거야?)</span><br><span class="line">당신의 커피가 어떻게 되는 것이 좋겠어요?</span><br><span class="line"></span><br><span class="line">Mr.Kim was like. &quot;Turn off your cell phone&quot; (킴이 그러셨어, &quot;휴대폰 끄라고&quot;)</span><br><span class="line"></span><br><span class="line">It looks like cancer.</span><br><span class="line"></span><br><span class="line">This place looks like a haunted house.</span><br><span class="line"></span><br><span class="line">I would like to stay here for one more night.</span><br><span class="line"></span><br><span class="line">I like your new haircut.</span><br><span class="line">(나라는 대상의 &#x27;마음&#x27;이, 쏠리고 있다. 너의 new haircut으로)</span><br><span class="line"></span><br><span class="line">Something bad thing is likely to happen.</span><br><span class="line">(뭔가 안 좋은 일이 우연히 발생하는 쪽으로 쏠려하는 느낌)</span><br><span class="line">안 좋은 무언가가 일어날 것만 같아</span><br><span class="line"></span><br><span class="line">LIKE WHAT?</span><br><span class="line">(너가 말하는 사항, 너가 말하고자 하는 바) 가 무엇/what 과 비슷하다는거야?</span><br><span class="line">도대체 무슨 말하는거야? </span><br><span class="line">너가 말하고자 하는 바가뭐야?</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br><span class="line">* you said about having accountability.</span><br><span class="line">But I mean, I do like what you said about having accountability.</span><br><span class="line"> 근데, 나는 너가 &#x27;having accountablilty&#x27; 관련한 사항에 대해 말한 것처럼 했어요!</span><br></pre></td></tr></table></figure><hr><h2 id="2-1-likewise"><a href="#2-1-likewise" class="headerlink" title="2.1 likewise"></a>2.1 likewise</h2><p>어떤 대상이 가는 쏠리고 가까워져 가는 방향과 똑같은 길에 있다는걸 표현해주는 단어</p><ul><li>똑같이, 비슷하게, 마찬가지</li></ul><hr><h1 id="3-Look-See-Watch"><a href="#3-Look-See-Watch" class="headerlink" title="3. Look, See, Watch"></a>3. Look, See, Watch</h1><ul><li><code>Look</code> : to direct your eyes in order to see<ul><li><strong>겉으로 보이는</strong> 찰나의 순간에 보인 모습</li><li><strong>눈동자를 어디로 향해서 보는 것</strong></li></ul></li><li><code>See</code> : to be concious of what is around you by using your eyes<ul><li><strong>내 눈을 통해 주변에 뭐가 있는지 아는 상태를 표현</strong></li></ul></li><li><code>Watch</code> : to look at something for a period of time, especially something that is changing or moving<ul><li><strong>어느 기간동안 뭔가에 내 눈을 향해서 지켜보는 것</strong></li><li>무언가 감시하는 그림</li></ul></li></ul><p>cf. <a href="https://dictionary.cambridge.org/ko/%EC%82%AC%EC%A0%84/%EC%98%81%EC%96%B4/watch">CambridgeDictionary</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">hey, what are you looking for ~? </span><br><span class="line">(야, 무엇에 눈을 향하게 하는거야?)</span><br><span class="line"></span><br><span class="line">I am looking for drinks, i am thirsty. You know, i&#x27;ve played soccer just before.</span><br><span class="line"></span><br><span class="line">------- 상황 : 유니폼 입고있는걸 보니</span><br><span class="line">I See.</span><br><span class="line">알겠네</span><br><span class="line"></span><br><span class="line">------- * isotonic drinks = 이온음료</span><br><span class="line">Anyway, Do you know where isotonic drinks is ?</span><br><span class="line"></span><br><span class="line">I&#x27;m not sure, let&#x27;s find it out together.</span><br><span class="line"> </span><br><span class="line"> ------- 상황 : 음료수 찾으러 가는 중간에, 뭔가 날카로운 칼 장난감이 있음</span><br><span class="line"> </span><br><span class="line"> Okay, hey hey, on your way watch out.</span><br><span class="line"> (야야, 가는 길에 뭔가 날카로운거 있으니 쳐다보면서 가)</span><br></pre></td></tr></table></figure><p>이로 인해</p><ul><li><strong>look 뒤에 at, for 이 붙는 것이고,</strong></li><li><strong>See 뒤에는 바로 내가 감지하는 대상의 목적어가 오는 것</strong></li></ul><hr><h1 id="4-Walk-x3D-무엇이든-앞으로-나아가는"><a href="#4-Walk-x3D-무엇이든-앞으로-나아가는" class="headerlink" title="4. Walk &#x3D; (무엇이든) 앞으로 나아가는"></a>4. Walk &#x3D; (무엇이든) 앞으로 나아가는</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I walk my dog everyday.</span><br><span class="line">(매일 강아지랑 산책해)</span><br></pre></td></tr></table></figure><hr><h1 id="5-Do-x3D-무엇이든-할-수-있는"><a href="#5-Do-x3D-무엇이든-할-수-있는" class="headerlink" title="5. Do &#x3D;(무엇이든) 할 수 있는"></a>5. Do &#x3D;(무엇이든) 할 수 있는</h1><hr><h1 id="6-Play-x3D-욕망을-가진채-행동"><a href="#6-Play-x3D-욕망을-가진채-행동" class="headerlink" title="6. Play &#x3D; 욕망을 가진채 행동"></a>6. Play &#x3D; 욕망을 가진채 행동</h1><hr><h1 id="7-Run-x3D-무엇이든-진행하는"><a href="#7-Run-x3D-무엇이든-진행하는" class="headerlink" title="7. Run &#x3D; (무엇이든) 진행하는"></a>7. Run &#x3D; (무엇이든) 진행하는</h1><hr><h1 id="8-Have-x3D-무엇이든-소유하면-할-수-있는"><a href="#8-Have-x3D-무엇이든-소유하면-할-수-있는" class="headerlink" title="8. Have &#x3D; (무엇이든) 소유하면 할 수 있는"></a>8. Have &#x3D; (무엇이든) 소유하면 할 수 있는</h1><hr><h1 id="9-Take-x3D-강한-소유욕"><a href="#9-Take-x3D-강한-소유욕" class="headerlink" title="9. Take &#x3D; (강한) 소유욕"></a>9. Take &#x3D; (강한) 소유욕</h1><hr><h1 id="10-Make-x3D-무엇이든-해내는"><a href="#10-Make-x3D-무엇이든-해내는" class="headerlink" title="10. Make &#x3D; (무엇이든) 해내는"></a>10. Make &#x3D; (무엇이든) 해내는</h1><hr><h1 id="11-Come-x3D-무엇이든-가까이-다가가는"><a href="#11-Come-x3D-무엇이든-가까이-다가가는" class="headerlink" title="11. Come &#x3D; (무엇이든) 가까이 다가가는"></a>11. Come &#x3D; (무엇이든) 가까이 다가가는</h1><hr><h1 id="12-Bring-x3D-무엇이든-결과를-일으키는"><a href="#12-Bring-x3D-무엇이든-결과를-일으키는" class="headerlink" title="12. Bring &#x3D; (무엇이든) 결과를 일으키는"></a>12. Bring &#x3D; (무엇이든) 결과를 일으키는</h1><hr><h1 id="13-Break-x3D-무엇이든-변화하는"><a href="#13-Break-x3D-무엇이든-변화하는" class="headerlink" title="13. Break &#x3D; (무엇이든) 변화하는"></a>13. Break &#x3D; (무엇이든) 변화하는</h1><hr><h1 id="14-Turn-x3D-무엇이든-돌아서-변화하는"><a href="#14-Turn-x3D-무엇이든-돌아서-변화하는" class="headerlink" title="14. Turn &#x3D; (무엇이든) 돌아서 변화하는"></a>14. Turn &#x3D; (무엇이든) 돌아서 변화하는</h1><hr><h1 id="15-Help-x3D-무엇이든-책임지는"><a href="#15-Help-x3D-무엇이든-책임지는" class="headerlink" title="15. Help &#x3D; (무엇이든) 책임지는"></a>15. Help &#x3D; (무엇이든) 책임지는</h1><hr><h1 id="16-Find-x3D-무엇이든-몰랐던-상태에서-아는-상태로"><a href="#16-Find-x3D-무엇이든-몰랐던-상태에서-아는-상태로" class="headerlink" title="16. Find &#x3D; (무엇이든) 몰랐던 상태에서 아는 상태로"></a>16. Find &#x3D; (무엇이든) 몰랐던 상태에서 아는 상태로</h1><hr><h1 id="17-Mean-x3D-무슨-의도와-목적이-있는"><a href="#17-Mean-x3D-무슨-의도와-목적이-있는" class="headerlink" title="17. Mean &#x3D; (무슨) 의도와 목적이 있는"></a>17. Mean &#x3D; (무슨) 의도와 목적이 있는</h1><hr><h1 id="18-Stay-x3D-무엇이든-상태를-유지하는"><a href="#18-Stay-x3D-무엇이든-상태를-유지하는" class="headerlink" title="18. Stay &#x3D; (무엇이든) 상태를 유지하는"></a>18. Stay &#x3D; (무엇이든) 상태를 유지하는</h1><hr><h1 id="19-Charge-x3D-무엇이든-채우는"><a href="#19-Charge-x3D-무엇이든-채우는" class="headerlink" title="19. Charge &#x3D; (무엇이든) 채우는"></a>19. Charge &#x3D; (무엇이든) 채우는</h1><hr><h1 id="20-Travel-x3D-무엇이든-움직이고-이동하는"><a href="#20-Travel-x3D-무엇이든-움직이고-이동하는" class="headerlink" title="20. Travel &#x3D; (무엇이든) 움직이고 이동하는"></a>20. Travel &#x3D; (무엇이든) 움직이고 이동하는</h1><hr><h1 id="21-Let"><a href="#21-Let" class="headerlink" title="21. Let"></a>21. Let</h1><hr><h1 id="22-Leave"><a href="#22-Leave" class="headerlink" title="22. Leave"></a>22. Leave</h1>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> 단어뉘앙스 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 단어뉘앙스 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>영단어 뉘앙스-조동사</title>
      <link href="/2023/01/16/En-Voca-04/"/>
      <url>/2023/01/16/En-Voca-04/</url>
      
        <content type="html"><![CDATA[<h1 id="1-조동사"><a href="#1-조동사" class="headerlink" title="1. 조동사"></a>1. 조동사</h1><ul><li>말의 강도(힘)를 조절하는 역할</li></ul><hr><h1 id="2-may-x2F-might-x3D-힘을-가지는"><a href="#2-may-x2F-might-x3D-힘을-가지는" class="headerlink" title="2. may &#x2F; might &#x3D; 힘을 가지는"></a>2. may &#x2F; might &#x3D; 힘을 가지는</h1><ul><li>고대 영어 maeg에서 유래, 힘을 가지는(to have power)</li><li>might를 명사로 쓰면 힘, 권력</li><li>may &#x3D; 40%정도 </li><li>might &#x3D; 35%정도</li></ul>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> 단어뉘앙스 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 단어뉘앙스 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>영단어 뉘앙스-전치사</title>
      <link href="/2023/01/16/En-Voca-05/"/>
      <url>/2023/01/16/En-Voca-05/</url>
      
        <content type="html"><![CDATA[<h1 id="1-전치사"><a href="#1-전치사" class="headerlink" title="1. 전치사"></a>1. 전치사</h1><hr>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> 단어뉘앙스 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 단어뉘앙스 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-NextJS 공식문서 영단어</title>
      <link href="/2023/01/16/En-Voca-02/"/>
      <url>/2023/01/16/En-Voca-02/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h1><p><a href="https://nextjs.org/learn/foundations/about-nextjs">https://nextjs.org/learn/foundations/about-nextjs</a></p><table><thead><tr><th align="center">단어</th><th align="left">의미</th><th align="center">발음</th></tr></thead><tbody><tr><td align="center">vast</td><td align="left">방대한, 막대한</td><td align="center">배스트</td></tr><tr><td align="center">Foundations</td><td align="left">기초</td><td align="center">파운데이션즈</td></tr><tr><td align="center">example-led course</td><td align="left">예제 주도 과정</td><td align="center"></td></tr><tr><td align="center">prerequisite</td><td align="left">전제 조건, 필요가 되는</td><td align="center">프리레쿼젓</td></tr><tr><td align="center">migrate</td><td align="left">(한 곳에서 다른 곳으로) 옮기다[이동하다]</td><td align="center">마이그레이트</td></tr><tr><td align="center">assumes</td><td align="left">가정하다</td><td align="center">어숨즈</td></tr><tr><td align="center">Conversation</td><td align="left">대화, 회담</td><td align="center">칸버세이션</td></tr></tbody></table><hr><h1 id="2-What-is-Next-js"><a href="#2-What-is-Next-js" class="headerlink" title="2. What is Next.js?"></a>2. What is Next.js?</h1><p><a href="https://nextjs.org/learn/foundations/about-nextjs/what-is-nextjs">https://nextjs.org/learn/foundations/about-nextjs/what-is-nextjs</a></p><blockquote><p>Next.js is a flexible <strong>React framework</strong> that gives you building blocks to create fast <strong>web applications</strong>.</p></blockquote><table><thead><tr><th align="center">단어</th><th align="left">의미</th><th align="center">발음</th></tr></thead><tbody><tr><td align="center">Such as</td><td align="left">예를 들어, ~와 같은</td><td align="center"></td></tr><tr><td align="center">consume</td><td align="left">(무언가) 소모, 소비하다 <br />(감정을) 사로잡다</td><td align="center"></td></tr><tr><td align="center">where your data lives</td><td align="left">데이터 저장 위치</td><td align="center"></td></tr><tr><td align="center">rendering</td><td align="left">(웹페이지를) 새로 만들다</td><td align="center"></td></tr><tr><td align="center">render</td><td align="left">(어떤 상태가 되게) 만들다[하다] (&#x3D;make)</td><td align="center"></td></tr><tr><td align="center">Integrations</td><td align="left">통합</td><td align="center">인터그레이션즈</td></tr><tr><td align="center">CMS</td><td align="left">Contents Management System<br />웹페페이지를 만들고 운영할 수 있는 툴</td><td align="center"></td></tr><tr><td align="center">auth</td><td align="left">인증</td><td align="center">오쓰</td></tr><tr><td align="center">Infrastructure</td><td align="left">(무언가의) 기반, 토대</td><td align="center">인프러스트럭처</td></tr><tr><td align="center">optimize</td><td align="left">최적화</td><td align="center"></td></tr><tr><td align="center">end-users</td><td align="left">최종 사용자</td><td align="center"></td></tr><tr><td align="center">Scalability</td><td align="left">확장성</td><td align="center">스칼러빌리티</td></tr><tr><td align="center">adapts</td><td align="left">적응하다</td><td align="center">어댑트스</td></tr><tr><td align="center">traffic</td><td align="left">(무언가) 이동하는 량<br />e.g. 데이터, 교통</td><td align="center">트래픽</td></tr><tr><td align="center">experience</td><td align="left">경험, 경험v</td><td align="center"></td></tr><tr><td align="center">maintain</td><td align="left">(무언가) 유지v</td><td align="center"></td></tr><tr><td align="center">relatively</td><td align="left">상대적으로</td><td align="center">렐러티블리</td></tr><tr><td align="center">unopinionat</td><td align="left">에 대한 의견이 없는</td><td align="center">어너피녀넛</td></tr><tr><td align="center">aspect</td><td align="left">측면</td><td align="center">애스펙트</td></tr><tr><td align="center">flourishing</td><td align="left">번창하는</td><td align="center">플러리슁</td></tr><tr><td align="center">third-party tools</td><td align="left">타사 도구<br />제3자로 중간 다리의 역할을 하는 것<br />e.g. 플러그인, 라이브러리, 프레임워크</td><td align="center"></td></tr><tr><td align="center">ground</td><td align="left">지면, 땅<br />ground up</td><td align="center"></td></tr><tr><td align="center">effort</td><td align="left">노력</td><td align="center">에퍼트</td></tr><tr><td align="center">reinvente</td><td align="left">재창조하다</td><td align="center">리인벤티</td></tr><tr><td align="center">require<br />requirements</td><td align="left">요구v, 요구사항</td><td align="center">리콰일먼트스</td></tr><tr><td align="center">handle</td><td align="left">(무언가를) 다루다, 처리하다<br />e.g. 손잡이</td><td align="center"></td></tr><tr><td align="center">configuration</td><td align="left">환경설정, 배열 형태</td><td align="center"></td></tr><tr><td align="center">feature</td><td align="left">어떤 뭐든간에 구별가능한 부분<br />e.g. 특징, 특생, 기능</td><td align="center">피처</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> NextJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 단어뉘앙스 </tag>
            
            <tag> NextJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-NextJs-Intro</title>
      <link href="/2023/01/13/Front-NextJS-basic01/"/>
      <url>/2023/01/13/Front-NextJS-basic01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-프레임워크-vs-라이브러리"><a href="#1-프레임워크-vs-라이브러리" class="headerlink" title="1. 프레임워크 vs 라이브러리"></a>1. 프레임워크 vs 라이브러리</h1><table><thead><tr><th align="center"></th><th align="center">프레임워크</th><th align="center">라이브러리</th></tr></thead><tbody><tr><td align="center"></td><td align="center">기반구조</td><td align="center">개발 편의 도구들</td></tr><tr><td align="center">제어주도권</td><td align="center">프레임워크가 가짐</td><td align="center">사용자가 가짐</td></tr><tr><td align="center">자유도</td><td align="center">상대적으로 작음</td><td align="center">상대적 으로 큼</td></tr><tr><td align="center">비유</td><td align="center">기계 (like 굴삭기)</td><td align="center">공구 (like 펜치, 니퍼 )</td></tr></tbody></table><p>프레임워크 장점</p><ul><li>개인이 해야할 고민들을 프레임워크 개발자가 미리 하고 반영</li><li>특정 디자인 패턴이나 동작과 기능들을 위한 정의와 방식을 정리해 둠</li><li>여러 개발자가 함께 협업할 때 기준점이 됨</li></ul><p>NextJS 쓰는 이유</p><ul><li>프론트엔드 개발자들이 가진 고민에 대한 적절한 해결책을 제공</li><li>규모가 있는 서비스 구조 설계를 어떻게 할 것인가?</li><li>개발환경 &#x2F; 코드 분할 &#x2F; 파일 기반 구조</li><li>SEO(검색 엔진 최적화)</li><li>프론트엔드에 필요한 간단한 API 구성</li><li>손쉬운 배포 시스템 Vercel</li></ul><p>Next.js의 대체재는?</p><ul><li>Next.js는 대표적인 React 프레임워크로서 자리를 공고히 하고 있음</li><li>대체재로는 Gatsby &#x2F; Remix 등이 있음</li></ul><hr><h1 id="2-필요한-개발환경"><a href="#2-필요한-개발환경" class="headerlink" title="2. 필요한 개발환경"></a>2. 필요한 개발환경</h1><ul><li>Node 16.15.1</li><li>Yarn 1.22.19 : <code>npm install -g yarn</code></li><li>Git</li><li>VS Code</li></ul><hr><h2 id="2-1-Next-js-프로젝트-띄워보기"><a href="#2-1-Next-js-프로젝트-띄워보기" class="headerlink" title="2.1 Next.js 프로젝트 띄워보기"></a>2.1 Next.js 프로젝트 띄워보기</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app nextjs-blog --use-npm --example <span class="string">&quot;https://github.com/vercel/next-learn/tree/master/basics/learn-starter&quot;</span></span><br></pre></td></tr></table></figure><p>페이지 띄우기</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># yarn </span></span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-Wappalyzer-크롬-익스텐션"><a href="#2-2-Wappalyzer-크롬-익스텐션" class="headerlink" title="2.2 Wappalyzer 크롬 익스텐션"></a>2.2 Wappalyzer 크롬 익스텐션</h2><p><a href="https://chrome.google.com/webstore/detail/wappalyzer-technology-pro/gppongmhjkpfnbhagpmjfkannfbllamg">Wappalyzer 크롬 익스텐션</a></p><ul><li>웹페이지가 어떤 기술을 활용했는지 확인할 수 있는 도구</li></ul><hr><h1 id="3-Next로-만든-서비스-둘러보기"><a href="#3-Next로-만든-서비스-둘러보기" class="headerlink" title="3. Next로 만든 서비스 둘러보기"></a>3. Next로 만든 서비스 둘러보기</h1><ul><li><a href="https://nextjs.org/showcase">https://nextjs.org/showcase</a></li><li><a href="https://vercel.com/templates/next.js">https://vercel.com/templates/next.js</a></li></ul><hr><h1 id="4-프레임워크-구조"><a href="#4-프레임워크-구조" class="headerlink" title="4. 프레임워크 구조"></a>4. 프레임워크 구조</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vercel/commerce.git</span><br><span class="line">yarn</span><br><span class="line">yarn build</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure><p>Commerce 프로젝트</p><ul><li>Typescript로 되어있고</li><li>Turbo 로 mono repo를 관리하고 있고</li><li>4개의 extension을 recommendation 으로 정해뒀고</li><li>yarn build 후에 yarn start 로 실행해볼 수 있다</li></ul><hr><h1 id="5-Data-Fetching"><a href="#5-Data-Fetching" class="headerlink" title="5. Data Fetching"></a>5. Data Fetching</h1><hr><h1 id="6-Layouts-x2F-Pages-x2F-Image"><a href="#6-Layouts-x2F-Pages-x2F-Image" class="headerlink" title="6. Layouts &#x2F; Pages &#x2F; Image"></a>6. Layouts &#x2F; Pages &#x2F; Image</h1><hr><h1 id="7-Routing"><a href="#7-Routing" class="headerlink" title="7. Routing"></a>7. Routing</h1><hr><h1 id="8-Shallow-Routing"><a href="#8-Shallow-Routing" class="headerlink" title="8. Shallow Routing"></a>8. Shallow Routing</h1><hr><h1 id="9-API-Routes"><a href="#9-API-Routes" class="headerlink" title="9. API Routes"></a>9. API Routes</h1>]]></content>
      
      
      <categories>
          
          <category> NextJS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NextJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-JS-Clone-clock</title>
      <link href="/2023/01/13/Front-JS-Practice-Clone-Clock/"/>
      <url>/2023/01/13/Front-JS-Practice-Clone-Clock/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> pratice-clock </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-24-패러다임(절차지향, 객체지향, 함수형)</title>
      <link href="/2023/01/11/Front-JS-Basic-24-paradigm/"/>
      <url>/2023/01/11/Front-JS-Basic-24-paradigm/</url>
      
        <content type="html"><![CDATA[<h1 id="1-함수형-패러다임"><a href="#1-함수형-패러다임" class="headerlink" title="1. 함수형 패러다임"></a>1. 함수형 패러다임</h1><p>패러다임은 무엇을 해야 할지를 말하기보다 무엇을 해서는 안 되는지 말해준다. - Clean Architecture(클린 아키텍처) 저자</p><p>프로그램은 <code>순차, 분기, 반복, 참조</code>로 구성된다. 패러다임은 이 4가지 요소를 어떻게 이용할 것인가를 다룬다.</p><hr><h2 id="1-1-정의"><a href="#1-1-정의" class="headerlink" title="1.1 정의"></a>1.1 정의</h2><ul><li>객체지향 추상화의 최소 단위가 객체인 것처럼 함수형은 함수가 최소 단위다.</li><li>함수 단위로 나눠지므로 재사용성이 높다.</li><li>불변성을 지향하기에 동작을 예측하기 쉽고 사이드 이펙트를 방지한다.<ul><li>사이드 이펙트를 방지한다는 것은 동시성 문제도 해결된다는 의미</li></ul></li><li>객체지향은 제어 흐름의 간접적인 전환에 부과되는 규율</li><li>함수형은 변수 할당에 부과되는 규율</li></ul><hr><h2 id="1-2-Quiz"><a href="#1-2-Quiz" class="headerlink" title="1.2 Quiz"></a>1.2 Quiz</h2><p>N개의 숫자가 공백없이 쓰여있다. 이 숫자를 모두 합해서 출력하는 프로그램을 작성하시오.</p><ul><li>e.g. ‘12345’ → 15</li></ul><h3 id="1-2-1-객체지향-프로그래밍"><a href="#1-2-1-객체지향-프로그래밍" class="headerlink" title="1.2.1 객체지향 프로그래밍"></a>1.2.1 객체지향 프로그래밍</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체지향 프로그래밍</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">StringNumber</span>(<span class="params">string</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">string</span> = string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">StringNumber</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">calculate</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> stringNumber = <span class="string">&#x27;12345&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sum</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; stringNumber.<span class="property">length</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sum</span> += stringNumber[i] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> stringNumber = <span class="keyword">new</span> <span class="title class_">StringNumber</span>(<span class="string">&#x27;12345&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> printer = <span class="keyword">new</span> <span class="title class_">Printer</span>();</span><br><span class="line">stringNumber.<span class="title function_">calculate</span>();</span><br><span class="line">printer.<span class="title function_">log</span>(stringNumber.<span class="property">sum</span>);</span><br></pre></td></tr></table></figure><h3 id="1-2-2-절자지향-프로그래밍"><a href="#1-2-2-절자지향-프로그래밍" class="headerlink" title="1.2.2 절자지향 프로그래밍"></a>1.2.2 절자지향 프로그래밍</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 절차지향 프로그래밍</span></span><br><span class="line"><span class="keyword">const</span> stringNumber = <span class="string">&#x27;12345&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; stringNumber.<span class="property">length</span>; i += i) &#123;</span><br><span class="line">  sum += stringNumber[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-함수형-프로그래밍"><a href="#1-2-3-함수형-프로그래밍" class="headerlink" title="1.2.3 함수형 프로그래밍"></a>1.2.3 함수형 프로그래밍</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수형 프로그래밍</span></span><br><span class="line"><span class="keyword">const</span> stringNumber = <span class="string">&#x27;12345&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  stringNumber</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> <span class="built_in">parseInt</span>(x))</span><br><span class="line">    .<span class="title function_">reduce</span>(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y, <span class="number">0</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h2 id="1-3-함수형-프로그래밍-장단점"><a href="#1-3-함수형-프로그래밍-장단점" class="headerlink" title="1.3 함수형 프로그래밍 장단점"></a>1.3 함수형 프로그래밍 장단점</h2><ul><li>장점이자 단점<ul><li>상태가 없기 때문에 사이드 이펙트가 없다.</li><li>재사용성이 높다.</li><li>코드가 짧고 간결하다.</li></ul></li></ul><hr><h1 id="2-선언형-프로그래밍"><a href="#2-선언형-프로그래밍" class="headerlink" title="2. 선언형 프로그래밍"></a>2. 선언형 프로그래밍</h1><ul><li>기존 <code>명령형 프로그래밍</code>은 문제를 어떻게 해결해야 하는지 컴퓨터에게 명령을 내리는 방법<ul><li>Control Flow<ul><li>Goto</li><li>If &#x2F; Then &#x2F; Else</li><li>Switch &#x2F; Case</li><li>For &#x2F; While</li></ul></li></ul></li><li><code>선언형 프로그래밍</code>은 무엇을 해결해야 할지에 집중하고 해결 방법은 컴퓨터에게 위임하는 방법<ul><li>Data Flow<ul><li>Stateless</li><li>Reursion</li><li>Pipe</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 명령형</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a[i] % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 선언형</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">  .<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item));</span><br></pre></td></tr></table></figure><hr><h2 id="2-1-멀티-패러다임"><a href="#2-1-멀티-패러다임" class="headerlink" title="2.1 멀티 패러다임"></a>2.1 멀티 패러다임</h2><ul><li>JavaScript는 멀티 패러다임이 가능하다.</li><li>굳이 객체지향과 함수형으로 나눌 필요없이 둘 다 쓰자!</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stringNumber = <span class="string">&#x27;12345&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  stringNumber</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> <span class="built_in">parseInt</span>(x))</span><br><span class="line">    .<span class="title function_">reduce</span>(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y, <span class="number">0</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-23-정규표현식(RegExp)</title>
      <link href="/2023/01/11/Front-JS-Basic-23-RegExp/"/>
      <url>/2023/01/11/Front-JS-Basic-23-RegExp/</url>
      
        <content type="html"><![CDATA[<h1 id="1-정규표현식"><a href="#1-정규표현식" class="headerlink" title="1. 정규표현식"></a>1. 정규표현식</h1><p>카카오톡은 전화번호, URL, 이메일 주소를 어떻게 찾을까?</p><ul><li>정규표현식의 목적<ul><li>패턴을이용하여<ul><li>문자 검색 (search)</li><li>문자 대체 (replace)</li><li>문자 추출 (extract)</li></ul></li></ul></li><li>성능은? 매우 느리다! 하지만 매우 편함…</li><li>그러나 정규표현식은 주석이나 공백을 허용하지 않고 여러가지 기호를 혼합하여 사용하기 때문에 <ul><li>가독성이 좋지 않다는 문제가 있다는 단점이 있다.</li></ul></li></ul><hr><h2 id="1-1-정규식-구성"><a href="#1-1-정규식-구성" class="headerlink" title="1.1 정규식 구성"></a>1.1 정규식 구성</h2><p>슬래쉬 문자 두개 사이로 정규식 기호가 들어가는 형태이다. 뒤의 <code>i </code>는 정규식 플래그이다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/regexr/i</span><br><span class="line"></span><br><span class="line">/ : 시작기호</span><br><span class="line">regexr : 패턴</span><br><span class="line">i : 플래그</span><br></pre></td></tr></table></figure><p>아래 코드들은 모두 JavaScript 코드지만, 대부분의 언어들의 정규식 문법이 비슷해서,<br>한 언어의 정규식을 잘 익혀두면 다른 언어의 정규식을 배우는데 수월하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 리터럴 방식</span></span><br><span class="line"><span class="keyword">const</span> regex1 = <span class="regexp">/abc/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 생성자 방식</span></span><br><span class="line"><span class="keyword">const</span> regex2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> regex3 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/abc/</span>); <span class="comment">// 이렇게 해도 됨</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-2-정규식-메서드"><a href="#1-2-정규식-메서드" class="headerlink" title="1.2 정규식 메서드"></a>1.2 정규식 메서드</h2><p>위의 정규표현식을 가지고 이메일이나 전화번호 매칭 필터링을 하기위해선 자바스크립트 정규식 메서드를 이용하여 패턴을 검사하고, 매칭되는 문자열을 추출, 변환한다.</p><table><thead><tr><th>메서드</th><th>의미</th></tr></thead><tbody><tr><td>(“문자열”).match(&#x2F;정규표현식&#x2F;플래그)</td><td>“문자열”에서 “정규표현식”에 매칭되는 항목들을 배열로 반환</td></tr><tr><td>(“문자열”).replace(&#x2F;정규표현식&#x2F;, “대체문자열”)</td><td>“정규표현식”에 매칭되는 항목을 “대체문자열”로 변환</td></tr><tr><td>(“문자열”).split(정규표현식)</td><td>“문자열”을 “정규표현식”에 매칭되는 항목으로 쪼개어 배열로 반환</td></tr><tr><td>(정규표현식).test(“문자열”)</td><td>“문자열”이 “정규표현식”과 매칭되면 true, 아니면 false반환</td></tr><tr><td>(정규표현식).exec(“문자열”)</td><td>match메서드와 유사(단, 무조건 첫번째 매칭 결과만 반환)</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 정규표현식을 담은 변수</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/apple/</span>; <span class="comment">// apple 이라는 단어가 있는지 필터링</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;문자열&quot;이 &quot;정규표현식&quot;과 매칭되면 true, 아니면 false반환</span></span><br><span class="line">regex.<span class="title function_">test</span>(<span class="string">&#x27;Hello banana and apple hahahaha&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;문자열&quot;에서 &quot;정규표현식&quot;에 매칭되는 항목들을 배열로 반환</span></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;Hello banana and apple hahahaha&#x27;</span>;</span><br><span class="line">txt.<span class="title function_">match</span>(regex); <span class="comment">// [&#x27;apple&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;정규표현식&quot;에 매칭되는 항목을 &quot;대체문자열&quot;로 변환</span></span><br><span class="line">txt.<span class="title function_">replace</span>(regex, <span class="string">&#x27;watermelon&#x27;</span>); <span class="comment">// &#x27;Hello banana and watermelon hahahaha&#x27;</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-3-정규식-플래그"><a href="#1-3-정규식-플래그" class="headerlink" title="1.3 정규식 플래그"></a>1.3 정규식 플래그</h2><p>정규식 플래그는 정규식을 생성할 때 고급 검색을 위한 전역 옵션을 설정할 수 있도록 지원하는 기능이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flags 에 플래그 문자열이 들어간다.</span></span><br><span class="line"><span class="keyword">const</span> flags = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;abapplec&#x27;</span>, flags);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리터럴로 슬래쉬 문자뒤에 바로 표현이 가능</span></span><br><span class="line"><span class="keyword">const</span> regex1 = <span class="regexp">/apple/i</span>;</span><br><span class="line"><span class="keyword">const</span> regex2 = <span class="regexp">/apple/gm</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Flag</th><th align="center">Meaning</th><th>Description</th></tr></thead><tbody><tr><td align="center">i</td><td align="center">Ignore Case</td><td>대소문자를 구별하지 않고 검색한다.</td></tr><tr><td align="center">g</td><td align="center">Global</td><td>문자열 내의 모든 패턴을 검색한다.</td></tr><tr><td align="center">m</td><td align="center">Multi Line</td><td>문자열의 행이 바뀌더라도 검색을 계속한다.</td></tr><tr><td align="center">s</td><td align="center"></td><td>.(모든 문자 정규식)이 개행 문자 \n도 포함하도록</td></tr><tr><td align="center">u</td><td align="center">unicode</td><td>유니코드 전체를 지원</td></tr><tr><td align="center">y</td><td align="center">sticky</td><td>문자 내 특정 위치에서 검색을 진행하는 ‘sticky’ 모드를 활성화</td></tr></tbody></table><h3 id="1-3-1-g-전역-검색"><a href="#1-3-1-g-전역-검색" class="headerlink" title="1.3.1 g: 전역 검색"></a>1.3.1 g: 전역 검색</h3><ul><li>전역 검색 플래그가 없는 경우에는 최초 검색 결과 한번만 반환하는 반면,</li><li>전역 검색 플래그가 있는 경우에는 모든 검색 결과를 배열로 반환</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `a`가 두 개 포함된 문자열</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;abcabc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `g` 플래그 없이는 최초에 발견된 문자만 반환</span></span><br><span class="line">str.<span class="title function_">match</span>(<span class="regexp">/a/</span>); <span class="comment">// [&quot;a&quot;, index: 0, input: &quot;abcabc&quot;, groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// `g` 플래그가 있으면 모든 결과가 배열로 반환</span></span><br><span class="line">str.<span class="title function_">match</span>(<span class="regexp">/a/g</span>); <span class="comment">// (2) [&quot;a&quot;, &quot;a&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="1-3-2-m-줄바꿈-검색"><a href="#1-3-2-m-줄바꿈-검색" class="headerlink" title="1.3.2 m: 줄바꿈 검색"></a>1.3.2 m: 줄바꿈 검색</h3><ul><li>여러 줄의 문자열에서 필터링 해야 될때 사용된다.</li><li>뒤에서 배울 입력 시작(^) 앵커나 입력 종료($) 앵커는 전체 문자열이 아닌 각 줄 별로 대응되게 만들어졌기 때문에, </li><li>만일 여러줄을 검색해야 한다면 m 플래그를 사용한다고 보면 된다</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 줄바꿈이 포함된 3줄 문자열</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;Hello World and\nPower Hello?\nPower Overwhelming!!&#x27;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Hello World and</span></span><br><span class="line"><span class="comment">Power Hello?</span></span><br><span class="line"><span class="comment">Power Overwhelming!!</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Hello 단어로 시작하는지 검사 (^ 문자는 문장 시작점을 의미)</span></span><br><span class="line">str.<span class="title function_">match</span>(<span class="regexp">/^Hello/</span>); <span class="comment">// [&quot;Hello&quot;]</span></span><br><span class="line"><span class="comment">// → 첫번째 줄은 잘 찾음</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Power 단어로 시작하는지 검사 (^ 문자는 문장 시작점을 의미)</span></span><br><span class="line">str.<span class="title function_">match</span>(<span class="regexp">/^Power/</span>); <span class="comment">// null</span></span><br><span class="line"><span class="comment">// → 그러나 그 다음 줄은 검색되지 아니함</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 따라서 m 플래그를 통해 개행되는 다음 줄도 검색되게 설정</span></span><br><span class="line">str.<span class="title function_">match</span>(<span class="regexp">/^Power/m</span>); <span class="comment">// [&#x27;Power&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 세번째 줄도 검색되게 하고싶으면 g 플래그와 혼합 사용</span></span><br><span class="line">str.<span class="title function_">match</span>(<span class="regexp">/^Power/gm</span>); <span class="comment">// [&#x27;Power&#x27;, &#x27;Power&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="1-3-3-i-대소문자-구분-없음"><a href="#1-3-3-i-대소문자-구분-없음" class="headerlink" title="1.3.3 i: 대소문자 구분 없음"></a>1.3.3 i: 대소문자 구분 없음</h3><ul><li>정규식은 기본적으로 대소문자를 구분 (Case sensitive)</li><li>대신 i 플래그를 통해 대소문자 구분 하지 않을수 있다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;abcABC&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 대소문자 a 검색</span></span><br><span class="line">str.<span class="title function_">match</span>(<span class="regexp">/a/gi</span>); <span class="comment">// (2) [&quot;a&quot;, &quot;A&quot;]</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-정규식-기호-모음"><a href="#2-정규식-기호-모음" class="headerlink" title="2. 정규식 기호 모음"></a>2. 정규식 기호 모음</h1><h2 id="2-1-정규식-특정-문자-숫자-매칭-패턴"><a href="#2-1-정규식-특정-문자-숫자-매칭-패턴" class="headerlink" title="2.1 정규식 특정 문자 숫자 매칭 패턴"></a>2.1 정규식 특정 문자 숫자 매칭 패턴</h2><table><thead><tr><th align="center">패턴</th><th>의미</th></tr></thead><tbody><tr><td align="center">a-zA-Z</td><td>영어알파벳(-으로 범위 지정)</td></tr><tr><td align="center">ㄱ-ㅎ가-힣</td><td>한글 문자(-으로 범위 지정)</td></tr><tr><td align="center">0-9</td><td>숫자(-으로 범위 지정)</td></tr><tr><td align="center">.</td><td>모든 문자열(숫자, 한글, 영어, 특수기호, 공백 모두) 단, 줄바꿈 X</td></tr><tr><td align="center">\d</td><td>숫자</td></tr><tr><td align="center">\D</td><td>숫자가 아닌 것</td></tr><tr><td align="center">\w</td><td>밑줄 문자를 포함한 영숫자 문자에 대응<br /><code>[A-Za-z0-9_]</code> 와 동일</td></tr><tr><td align="center">\W</td><td>\w 가 아닌 것</td></tr><tr><td align="center">\s</td><td>space 공백</td></tr><tr><td align="center">\S</td><td>space 공백이 아닌 것</td></tr><tr><td align="center">\특수기호</td><td>특수기호<br /><code>\* \^ \&amp; \! \? ...등</code></td></tr><tr><td align="center">\b</td><td>63개 문자(영문 대소문자 52개 + 숫자 10개 + _(underscore))가 아닌 나머지 문자에 일치하는 경계(boundary)</td></tr><tr><td align="center">\B</td><td>63개 문자에 일치하는 경계</td></tr><tr><td align="center">\x</td><td>16진수 문자에 일치<br /><code>/\x61/</code>는 a에 일치</td></tr><tr><td align="center">\0</td><td>8진수 문자에 일치<br /><code>/\141/</code>은 a에 일치</td></tr><tr><td align="center">\u</td><td>유니코드(Unicode) 문자에 일치<br /><code>/\u0061/</code>는 a에 일치</td></tr><tr><td align="center">\c</td><td>제어(Control) 문자에 일치</td></tr><tr><td align="center">\f</td><td>폼 피드(FF, U+000C) 문자에 일치</td></tr><tr><td align="center">\n</td><td>줄 바꿈(LF, U+000A) 문자에 일치</td></tr><tr><td align="center">\r</td><td>캐리지 리턴(CR, U+000D) 문자에 일치</td></tr><tr><td align="center">\t</td><td>탭 (U+0009) 문자에 일치</td></tr></tbody></table><hr><h2 id="2-2-정규식-검색-기준-패턴"><a href="#2-2-정규식-검색-기준-패턴" class="headerlink" title="2.2 정규식 검색 기준 패턴"></a>2.2 정규식 검색 기준 패턴</h2><table><thead><tr><th align="center">기호</th><th>의미</th></tr></thead><tbody><tr><td align="center">|</td><td>OR a|b</td></tr><tr><td align="center">[]</td><td>괄호안의 문자들 중 하나. or 처리 묶음 보면 된다.<br /><code>/abc/</code> : “abc”를 포함하는<br/><code>/[abc]/</code> : “a” 또는 “b” 또는 “c” 를 포함하는<br/><code>[다-바]</code> : 다 or 라 or 마 or 바</td></tr><tr><td align="center">[^문자]</td><td>괄호안의 문자를 제외한 것<br /><code>[^lgEn]</code> “l” “g” “E” “N” 4개 문자를 제외<br />대괄호 안에서 쓰면 제외의 뜻, 대괄호 밖에서 쓰면 시작점 뜻</td></tr><tr><td align="center">^문자열</td><td>특정 문자열로 시작 (시작점)<br /><code>/^www/</code></td></tr><tr><td align="center">문자열$</td><td>특정 문자열로 끝남 (종착점)<br /><code>/com$/</code></td></tr></tbody></table><hr><h2 id="2-3-정규식-갯수-반복-패턴"><a href="#2-3-정규식-갯수-반복-패턴" class="headerlink" title="2.3 정규식 갯수 반복 패턴"></a>2.3 정규식 갯수 반복 패턴</h2><table><thead><tr><th align="center">기호</th><th>의미</th></tr></thead><tbody><tr><td align="center">?</td><td>없거나 or 최대 한개만<br /><code>/apple?/</code></td></tr><tr><td align="center">*</td><td>없거나 or 있거나 (여러개)<br /><code>/apple*/</code></td></tr><tr><td align="center">+</td><td>최소 한개 or 여러개<br /><code>/\apple\+/</code></td></tr><tr><td align="center">*?</td><td>없거나, 있거나 and 없거나, 최대한개 : 없음<br />{0}와 동일</td></tr><tr><td align="center">+?</td><td>최소한개, 있거나 and 없거나, 최대한개 : 한개<br />{1}와 동일</td></tr><tr><td align="center">{n}</td><td>n개</td></tr><tr><td align="center">{Min,}</td><td>최소 Min개 이상</td></tr><tr><td align="center">{Min, Max}</td><td>최소 Min개 이상, 최대 Max개 이하<br />{3,5}? &#x3D;&#x3D; {3}와 동일</td></tr></tbody></table><hr><h2 id="2-4-정규식-그룹-패턴"><a href="#2-4-정규식-그룹-패턴" class="headerlink" title="2.4 정규식 그룹 패턴"></a>2.4 정규식 그룹 패턴</h2><table><thead><tr><th align="center">기호</th><th>의미</th></tr></thead><tbody><tr><td align="center">()</td><td>그룹화 및 캡쳐</td></tr><tr><td align="center">(?: 패턴)</td><td>그룹화 (캡쳐 X)</td></tr><tr><td align="center">(?&#x3D;)</td><td>앞쪽 일치(Lookahead),  &#x2F;ab(?&#x3D;c)&#x2F;</td></tr><tr><td align="center">(?!)</td><td>부정 앞쪽 일치(Negative Lookahead),  &#x2F;ab(?!c)&#x2F;</td></tr><tr><td align="center">(?&lt;&#x3D;)</td><td>뒤쪽 일치(Lookbehind),  &#x2F;(?&lt;&#x3D;ab)c&#x2F;</td></tr><tr><td align="center">(?&lt;!)</td><td>부정 뒤쪽 일치(Negative Lookbehind),  &#x2F;(?&lt;!ab)c&#x2F;</td></tr></tbody></table><p>정규식 그룹 패턴 부분은 꽤나 난이도 있는 정규표현식에 속한다. 어렵고 이해가 잘 안되는 것이 당연하니, 차근차근 알아가보자.</p><hr><h3 id="2-4-1-정규식-그룹화"><a href="#2-4-1-정규식-그룹화" class="headerlink" title="2.4.1 정규식 그룹화"></a>2.4.1 정규식 그룹화</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;kokokoko&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/ko+/</span>); <span class="comment">// &quot;ko&quot;</span></span><br><span class="line"><span class="string">&#x27;kooookoooo&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/ko+/</span>); <span class="comment">// &quot;koooo&quot;</span></span><br></pre></td></tr></table></figure><p>코드를 보면 알수 있듯이, 표현식 ko+는 “o”만 + 를 적용시킨다. (“k” 는 적용안시킴) 그 결과로 “koooo”가 반환되었다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;kokokoko&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/ko+/</span>); <span class="comment">// &quot;ko&quot;</span></span><br><span class="line"><span class="string">&#x27;kooookoooo&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/ko+/</span>); <span class="comment">// &quot;koooo&quot;</span></span><br></pre></td></tr></table></figure><p>하지만 표현식 (ko)+는 “k”와 “o”를 묶었기(그룹화) 때문에 “ko” 자체를 1회 이상 연속으로 반복되는 문자로 검색하게 된다.<br>따라서 결과가 “kokokoko”가 반환되었다.</p><p>그런데 마지막으로 패턴 ()를 사용한 정규식들의 결과를 잘 보면 일치한 결과가 2개가 나온다. 일부러 한번만 검색되라고, 플래그 g를 사용하지 않았는데 말이다.</p><hr><h3 id="2-4-2-정규식-캡처-기능"><a href="#2-4-2-정규식-캡처-기능" class="headerlink" title="2.4.2 정규식 캡처 기능"></a>2.4.2 정규식 캡처 기능</h3><p>패턴 그룹화 ()는 괄호 안에 있는 표현식을 캡처하여 사용한다. 캡처는 일종의 복사본을 생성하는 개념이라고 보면 된다. (복사라는 단어는 이해를 돕기 위해서만 사용하며, 실제 개념과는 다르다)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;kokokoko&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/(ko)+/</span>); <span class="comment">// &quot;kokokoko&quot;, &quot;ko&quot;</span></span><br></pre></td></tr></table></figure><p>정규식의 캡처 원리를 알아보자면, 패턴 ()안에 있는 “ko”를 그룹화하여 캡처(복사)한다. 우선 캡처된 표현식은 당장 사용되지 않으며, 그룹화된 “ko”를 패턴 +로 1회 이상 연속으로 반복되는 문자로 검색한다. 그렇게 캡처 외 표현식이 모두 작동하고 난 뒤에 복사했던(캡처된) 표현식 “ko”가 검색되는 것이다.</p><p> 즉, 위의 검색 순서를 정리하자면 다음과 같게 된다.</p><ol><li>그룹화된 “ko”를 패턴 +로 1회 이상 연속으로 반복하여 검색하여 “kokokoko”를 반환하고</li><li>캡처된 “ko”로 검색하여 “ko”를 추가 반환</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;123abc&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/(\d+)(\w)/</span>); <span class="comment">// &quot;123a&quot;, &quot;123&quot;, &quot;a&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 패턴 ()안의 표현식을 순서대로 캡처. \d+, \w</span></span><br><span class="line"><span class="comment">2. 캡처 후 남은 표현식으로 검색.</span></span><br><span class="line"><span class="comment">3. 패턴 \d로 숫자를 검색하되 패턴 +로 1개 이상 연속되는 숫자를 검색 → &quot;123&quot;</span></span><br><span class="line"><span class="comment">4. 다음 패턴 \w는 문자를 검색하니 &quot;a&quot;가 일치 </span></span><br><span class="line"><span class="comment">5. 최종적으로 &quot;123a&quot;가 반환.</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">6. 첫 번째 캡처한 표현식 \d+로 숫자를 재검색하되 패턴 +로 1개 이상 연속되는 숫자를 검색</span></span><br><span class="line"><span class="comment">7. &quot;123&quot;가 일치하여 반환</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">8. 나머지 캡처한 표현식 \w로 문자를 검색하니 &quot;a&quot;가 일치하여 반환</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-4-3-캡처하지-않는-그룹화"><a href="#2-4-3-캡처하지-않는-그룹화" class="headerlink" title="2.4.3 캡처하지 않는 그룹화 (?:)"></a>2.4.3 캡처하지 않는 그룹화 (?:)</h3><p>위에서 살펴봤듯이 뜻하지않은 정규식 그룹화 캡쳐 기능 때문에 쓸데없는 결과값을 얻는 것이 싫다면, 괄호 안에 ?: 문자를 씀으로써 캡쳐를 비활성화 할 수 있다. 따라서 표현식 캡처를 하지 않기 때문에 “k”와 “o”를 그룹화한 “ko”만으로 검색되게 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 그룹화 + 캡처</span></span><br><span class="line"><span class="string">&#x27;kokokoko&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/(ko)+/</span>); <span class="comment">// &quot;kokokoko&quot;, &quot;ko&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 그룹화만</span></span><br><span class="line"><span class="string">&#x27;kokokoko&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/(?:ko)+/</span>); <span class="comment">// &quot;kokokoko&quot;</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-정규식-테스트-사이트"><a href="#3-정규식-테스트-사이트" class="headerlink" title="3. 정규식 테스트 사이트"></a>3. 정규식 테스트 사이트</h1><h2 id="3-1-Regexr👍"><a href="#3-1-Regexr👍" class="headerlink" title="3.1 Regexr👍"></a>3.1 Regexr👍</h2><p>가장 유명한 정규식 테스트 사이트가 아닐까 싶다. 깔끔한 UI로 인기가 가장 많다.</p><blockquote><p><a href="https://regexr.com/">https://regexr.com/</a></p></blockquote><p>A-Z로 시작하는 문자 검색하는 정규표현식으로 전체문장에서 하이라이트로 표기해주고, 정규표현식 작성시 도움이 되는 문법도 왼쪽에 표기된다.</p><p>정규식에 커서를 올리면 짧게 문법 의미를 볼수 있다. </p><p>예제 Text란에도 커서를 올리면 매치 정보(인덱스 범위, 그룹 등)를 보여준다.</p><p>사이드 메뉴 사용법</p><ul><li>Pattern Settings : 우측에서 사용한 정규식 예제를 저장할수 있다. (로그인 필요)</li><li>MyPatterns : 내 계정에 저장한 정규식을 사용할수있다. 일종의 즐겨찾기 개념</li><li>Cheatsheet : 자주 사용하는 정규식 메뉴</li><li>RegEx Reference : 정규식 기호를 메뉴로 선택해 사이드바 하단에 예제를 보여주어 사용법을 알려준다.</li><li>Community Patterns : 다른 사람이 직접 만든 정규식와 예제를 불러와서 테스트해볼 수 있다.</li></ul><hr><h2 id="3-2-regex101"><a href="#3-2-regex101" class="headerlink" title="3.2 regex101"></a>3.2 regex101</h2><p>위의 Refexer는 자바스크립트와 PHP 밖에 지원을 안하지만, 이 사이트는 보다 다양한 언어를 지원한다는 장점이 있다.</p><blockquote><p><a href="https://regex101.com/">https://regex101.com/</a></p></blockquote><hr><h2 id="3-3-Regexper-그림으로-분석"><a href="#3-3-Regexper-그림으로-분석" class="headerlink" title="3.3 Regexper (그림으로 분석)"></a>3.3 Regexper (그림으로 분석)</h2><p>한 문자열로 쭉 이루어진 정규표현식은 가독성이 매우 안좋은데, 이를 그림(도식)으로 표현해서 쉽게 분석할수 있게 도와주는 사이트다. 처음에는 생소해서 오히려 그림의 의미를 알수가 없어 거부감이 들테지만, 익숙해지면 정말 가독성이 좋아지니 한번 시간이 있다면 도전해 보는걸 권장한다.</p><blockquote><p><a href="https://regexper.com/">https://regexper.com/</a></p></blockquote><hr><h2 id="3-4-Rubular-사이트-Ruby-기반-👍"><a href="#3-4-Rubular-사이트-Ruby-기반-👍" class="headerlink" title="3.4 Rubular 사이트 (Ruby 기반)👍"></a>3.4 Rubular 사이트 (Ruby 기반)👍</h2><p>루비 언어의 정규식 문법을 체크할수있다.</p><blockquote><p><a href="https://rubular.com/">https://rubular.com/</a></p></blockquote><hr><h2 id="3-5-정규표현식-샘플-모음-사이트"><a href="#3-5-정규표현식-샘플-모음-사이트" class="headerlink" title="3.5 정규표현식 샘플 모음 사이트"></a>3.5 정규표현식 샘플 모음 사이트</h2><p>자주 사용하는 정규표현식 예제들이 모여있는 사이트이다. 만일 이메일이나 전화번호를 체크하는 정규식 문법이 필요하다면, 검색창에 찾으려는 타입을 치고 검색하면 여러 정규식 예제들을 얻을 수 있다.</p><blockquote><p><a href="https://regexlib.com/?AspxAutoDetectCookieSupport=1">https://regexlib.com/?AspxAutoDetectCookieSupport=1</a></p></blockquote><hr><h1 id="4-휴대폰-번호를-찾아보자"><a href="#4-휴대폰-번호를-찾아보자" class="headerlink" title="4. 휴대폰 번호를 찾아보자!"></a>4. 휴대폰 번호를 찾아보자!</h1><ul><li><p>정규표현식을 사용하기 위해선 패턴을 찾는 것이 제일 중요하다.</p></li><li><p>휴대폰 번호 패턴은?</p><ul><li>010-1234-5678</li><li>018-123-4567</li><li>01X-XXX(X)-XXXX</li><li>국가번호, 안심번호 등 예외 케이스는 제외</li></ul></li><li><p>세 자리 숫자, 하이픈, 셋 혹은 네 자리 숫자, 하이픈, 네 자리 숫자 패턴으로 이루어져 있다.</p></li><li><p><code>\d&#123;3&#125;</code> &#x3D; 3자리 아무 숫자</p></li><li><p><code>\d&#123;3, 4&#125;</code> &#x3D; 3~4자리 아무 숫자</p></li></ul><p>패턴을 조합해보면?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\d&#123;3&#125;-\d&#123;3,4&#125;-\d&#123;4&#125;</span><br><span class="line"></span><br><span class="line">안녕하세요. 010-1234-5678로 연락해주세요!</span><br></pre></td></tr></table></figure><hr><h1 id="5-이메일-주소에서-중간-문자열만"><a href="#5-이메일-주소에서-중간-문자열만" class="headerlink" title="5. 이메일 주소에서 중간 문자열만"></a>5. 이메일 주소에서 중간 문자열만</h1><ul><li><p>이메일 주소 패턴은?</p><ul><li><a href="mailto:&#107;&#x63;&#105;&#116;&#101;&#114;&#64;&#110;&#97;&#x76;&#101;&#114;&#x2e;&#99;&#x6f;&#109;">&#107;&#x63;&#105;&#116;&#101;&#114;&#64;&#110;&#97;&#x76;&#101;&#114;&#x2e;&#99;&#x6f;&#109;</a></li><li><a href="mailto:&#x6b;&#x63;&#x69;&#x74;&#101;&#114;&#x40;&#x63;&#111;&#98;&#x61;&#108;&#x74;&#x2e;&#x72;&#117;&#x6e;">&#x6b;&#x63;&#x69;&#x74;&#101;&#114;&#x40;&#x63;&#111;&#98;&#x61;&#108;&#x74;&#x2e;&#x72;&#117;&#x6e;</a></li></ul></li><li><p><code>문자열, @, 문자열, ., 문자열</code> 패턴으로 이루어져 있다.</p></li><li><p>여기서 naver, cobalt만 뽑고 싶다면?</p></li><li><p><code>.+</code> &#x3D; 한 개 이상의 문자열</p></li><li><p><code>(...)</code> &#x3D; 캡처</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.+@.+\..+</span><br><span class="line"></span><br><span class="line">kciter@naver.com</span><br><span class="line">kciter@cobalt.run</span><br><span class="line">kciter@naver</span><br><span class="line">kciter@cobal@run</span><br></pre></td></tr></table></figure><p>일단 이메일만 뽑아낼 수는 있다.</p><p>캡처를 이용하면 원하는 부분만 뽑을 수 있다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.+@(.+)\..+</span><br></pre></td></tr></table></figure><p>캡처는 여러 번 할 수 있다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(.+)@(.+)\..+</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://regexone.com/">https://regexone.com/</a></p><p><a href="https://alf.nu/RegexGolf">https://alf.nu/RegexGolf</a></p></blockquote><hr><h1 id="6-JavaScript"><a href="#6-JavaScript" class="headerlink" title="6. JavaScript"></a>6. JavaScript</h1><h2 id="6-1-생성-방법"><a href="#6-1-생성-방법" class="headerlink" title="6.1 생성 방법"></a>6.1 생성 방법</h2><ul><li>JavaScript는 RegExp 객체로 정규표현식 기능을 제공한다.</li><li>Array, Object처럼 Literal로 생성 가능하다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 생성자 함수 방식 */</span></span><br><span class="line"><span class="comment">// new RegExg(표현식)</span></span><br><span class="line"><span class="keyword">const</span> regExp1 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;^d+&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// new RegExg(표현식, 플래그)</span></span><br><span class="line"><span class="keyword">const</span> regExp2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;^d+&#x27;</span>, <span class="string">&#x27;gi&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 리터럴 방식 */</span></span><br><span class="line"><span class="comment">// /표현식/</span></span><br><span class="line"><span class="keyword">const</span> regexp1 = <span class="regexp">/^\d+/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /표현식/플래그</span></span><br><span class="line"><span class="keyword">const</span> regexp2 = <span class="regexp">/^\d+/gi</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="6-2-test"><a href="#6-2-test" class="headerlink" title="6.2 test"></a>6.2 test</h2><ul><li>정규표현식 객체의 test 함수는 입력받은 문자열에 찾은 패턴이 있는 찾은 후</li><li>있다면 true를 반환하고, 없으면 false를 반환한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;안녕하세요. 010-1234-5678로 연락주세요!&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> message2 = <span class="string">&#x27;안녕하세요. 연락하지 마세요!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 정규표현식 리터럴</span></span><br><span class="line"><span class="keyword">const</span> regExp = <span class="regexp">/\d&#123;3&#125;-\d&#123;3,4&#125;-\d&#123;4&#125;/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regExp.<span class="title function_">test</span>(message)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regExp.<span class="title function_">test</span>(message2)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h2 id="6-3-exec"><a href="#6-3-exec" class="headerlink" title="6.3 exec"></a>6.3 exec</h2><ul><li>정규표현식 객체의 exec 함수는 입력받은 문자열에 찾는 패턴이 있는지 찾은 후</li><li>일치한 패턴 정보를 반환하고 없으면 null을 반환한다.</li><li>문자 추출에 해당한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;안녕하세요. 010-1234-5678로 연락주세요!&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> message2 = <span class="string">&#x27;안녕하세요. 연락하지 마세요!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 정규표현식 리터럴</span></span><br><span class="line"><span class="keyword">const</span> regExp = <span class="regexp">/\d&#123;3&#125;-\d&#123;3,4&#125;-\d&#123;4&#125;/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regExp.<span class="title function_">exec</span>(message));</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#x27;010-1234-5678&#x27;,</span></span><br><span class="line"><span class="comment">//   index: 7,</span></span><br><span class="line"><span class="comment">//   input: &#x27;안녕하세요. 010-1234-5678로 연락주세요!&#x27;,</span></span><br><span class="line"><span class="comment">//   groups: undefined</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regExp.<span class="title function_">exec</span>(message2)); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><hr><h2 id="6-4-match"><a href="#6-4-match" class="headerlink" title="6.4 match"></a>6.4 match</h2><ul><li>String 객체의 match 함수는 정규표현식 객체를 파라미터로 받아 패턴이 있는지 찾은 후 </li><li>일치한 패턴 정보를 반환하고 없으면 null을 반환한다. 정규표현식 객체의 exec 함수와 같다.</li><li>문자 추출에 해당한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;안녕하세요. 010-1234-5678로 연락주세요!&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> message2 = <span class="string">&#x27;안녕하세요. 010-1234-5678말고 010-9876-5432로 연락주세요!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 정규표현식 리터럴</span></span><br><span class="line"><span class="keyword">const</span> regExp = <span class="regexp">/\d&#123;3&#125;-\d&#123;3,4&#125;-\d&#123;4&#125;/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">match</span>(regExp));</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#x27;010-1234-5678&#x27;,</span></span><br><span class="line"><span class="comment">//   index: 7,</span></span><br><span class="line"><span class="comment">//   input: &#x27;안녕하세요. 010-1234-5678로 연락주세요!&#x27;,</span></span><br><span class="line"><span class="comment">//   groups: undefined</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📌 무조건 처음 매칭된 것을 반환한다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message2.<span class="title function_">match</span>(regExp));</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#x27;010-1234-5678&#x27;,</span></span><br><span class="line"><span class="comment">//   index: 7,</span></span><br><span class="line"><span class="comment">//   input: &#x27;안녕하세요. 010-1234-5678말고 010-9876-5432로 연락주세요!&#x27;,</span></span><br><span class="line"><span class="comment">//   groups: undefined</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📌 모두 탐색하려면 matchAll을 사용할 수 있다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...message2.<span class="title function_">matchAll</span>(<span class="regexp">/\d&#123;3&#125;-\d&#123;3,4&#125;-\d&#123;4&#125;/g</span>)]);</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   [</span></span><br><span class="line"><span class="comment">//     &#x27;010-1234-5678&#x27;,</span></span><br><span class="line"><span class="comment">//     index: 7,</span></span><br><span class="line"><span class="comment">//     input: &#x27;안녕하세요. 010-1234-5678말고 010-9876-5432로 연락주세요!&#x27;,</span></span><br><span class="line"><span class="comment">//     groups: undefined</span></span><br><span class="line"><span class="comment">//   ],</span></span><br><span class="line"><span class="comment">//   [</span></span><br><span class="line"><span class="comment">//     &#x27;010-9876-5432&#x27;,</span></span><br><span class="line"><span class="comment">//     index: 23,</span></span><br><span class="line"><span class="comment">//     input: &#x27;안녕하세요. 010-1234-5678말고 010-9876-5432로 연락주세요!&#x27;,</span></span><br><span class="line"><span class="comment">//     groups: undefined</span></span><br><span class="line"><span class="comment">//   ]</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="6-5-replace"><a href="#6-5-replace" class="headerlink" title="6.5 replace"></a>6.5 replace</h2><ul><li>String 객체의 replace 함수는 정규표현식 객체를 파라미터로 받아 패턴이 있는지 찾은 후</li><li>일치한 패턴 정보를 원하는 문자열로 바꿀 수 있다.</li><li>문자 대체에 해당한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;안녕하세요. 010-1234-5678로 연락주세요!&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> message2 = <span class="string">&#x27;안녕하세요. 010-1234-5678말고 010-9876-5432로 연락주세요!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 정규표현식 리터럴</span></span><br><span class="line"><span class="keyword">const</span> regExp = <span class="regexp">/\d&#123;3&#125;-\d&#123;3,4&#125;-\d&#123;4&#125;/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">replace</span>(regExp, <span class="string">&#x27;전화번호&#x27;</span>));</span><br><span class="line"><span class="comment">// 안녕하세요. 전화번호로 연락주세요!</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message2.<span class="title function_">replace</span>(regExp, <span class="string">&#x27;전화번호&#x27;</span>));</span><br><span class="line"><span class="comment">// 안녕하세요. 전화번호말고 010-9876-5432로 연락주세요!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📌 옵션으로 g를 붙임녀 모두 변경된다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message2.<span class="title function_">replace</span>(<span class="regexp">/\d&#123;3&#125;-\d&#123;3,4&#125;-\d&#123;4&#125;/g</span>, <span class="string">&#x27;전화번호&#x27;</span>));</span><br><span class="line"><span class="comment">// 안녕하세요. 전화번호말고 전화번호로 연락주세요!</span></span><br></pre></td></tr></table></figure><hr><h2 id="6-6-search"><a href="#6-6-search" class="headerlink" title="6.6 search"></a>6.6 search</h2><ul><li>String 객체의 search 함수는 정규표현식 객체를 파라미터로 받아 패턴이 있는지 찾은 후</li><li>일치한 패턴 정보의 위치를 반환한다.</li><li>문자 검색에 해당한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;안녕하세요. 010-1234-5678로 연락주세요!&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> message2 = <span class="string">&#x27;안녕하세요. 010-1234-5678말고 010-9876-5432로 연락주세요!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 정규표현식 리터럴</span></span><br><span class="line"><span class="keyword">const</span> regExp = <span class="regexp">/\d&#123;3&#125;-\d&#123;3,4&#125;-\d&#123;4&#125;/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">search</span>(regExp)); <span class="comment">// 7</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message2.<span class="title function_">search</span>(regExp)); <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📌 무조건 처음 매칭된 것을 반환한다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message2.<span class="title function_">search</span>(<span class="regexp">/\d&#123;3&#125;-\d&#123;3,4&#125;-\d&#123;4&#125;/g</span>)); <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 안녕하세요. 전화번호말고 전화번호로 연락주세요!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📌 모두 탐색하려면 matchAll을 사용할 수 있다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...message2.<span class="title function_">matchAll</span>(<span class="regexp">/\d&#123;3&#125;-\d&#123;3,4&#125;-\d&#123;4&#125;/g</span>)]);</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   [</span></span><br><span class="line"><span class="comment">//     &#x27;010-1234-5678&#x27;,</span></span><br><span class="line"><span class="comment">//     index: 7,</span></span><br><span class="line"><span class="comment">//     input: &#x27;안녕하세요. 010-1234-5678말고 010-9876-5432로 연락주세요!&#x27;,</span></span><br><span class="line"><span class="comment">//     groups: undefined</span></span><br><span class="line"><span class="comment">//   ],</span></span><br><span class="line"><span class="comment">//   [</span></span><br><span class="line"><span class="comment">//     &#x27;010-9876-5432&#x27;,</span></span><br><span class="line"><span class="comment">//     index: 23,</span></span><br><span class="line"><span class="comment">//     input: &#x27;안녕하세요. 010-1234-5678말고 010-9876-5432로 연락주세요!&#x27;,</span></span><br><span class="line"><span class="comment">//     groups: undefined</span></span><br><span class="line"><span class="comment">//   ]</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="6-7-capture"><a href="#6-7-capture" class="headerlink" title="6.7 capture"></a>6.7 capture</h2><ul><li>캡처가 적용된 정규표현식을 이용하면 match 반환값의 </li><li>1번 인덱스부터 순차적으로 캡처 결과가 들어간다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;안녕하세요. 010-1234-5678로 연락주세요!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 정규표현식 리터럴</span></span><br><span class="line"><span class="keyword">const</span> regExp = <span class="regexp">/(\d&#123;3&#125;)-(\d&#123;3,4&#125;)-(\d&#123;4&#125;)/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">match</span>(regExp));</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#x27;010-1234-5678&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;010&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;1234&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;5678&#x27;,</span></span><br><span class="line"><span class="comment">//   index: 7,</span></span><br><span class="line"><span class="comment">//   input: &#x27;안녕하세요. 010-1234-5678로 연락주세요!&#x27;,</span></span><br><span class="line"><span class="comment">//   groups: undefined</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><hr><h1 id="7-Run-length-encoding"><a href="#7-Run-length-encoding" class="headerlink" title="7. Run-length encoding"></a>7. Run-length encoding</h1><ul><li>매우 간단한 비손실 압축 방법</li><li>“AAAAAABBBDFFFFFFFKK” 문자열을 어떻게 압축할것인가?</li><li>“6A3B1D7F2K”로압축할 수 있다.<ul><li>6개의 A, 3개의 B, 1개의 D, 7개의 F,  F, 2개의 K</li></ul></li><li>패턴을 발견할 수 있는가?</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(.)\1*</span><br><span class="line"></span><br><span class="line">ABBBCC</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> raw = <span class="string">&#x27;AAAAAABBBDFFFFFFFKK&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> compressed = <span class="string">&#x27;6A3B1D7F2K&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regExp = <span class="regexp">/(.)\1*/g</span>;</span><br><span class="line"><span class="keyword">const</span> result = raw.<span class="title function_">match</span>(regExp).<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + <span class="string">`<span class="subst">$&#123;b.length&#125;</span><span class="subst">$&#123;b.slice(<span class="number">0</span>, <span class="number">1</span>)&#125;</span>`</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 6A3B1D7F2K</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result === compressed); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h1 id="8-예제"><a href="#8-예제" class="headerlink" title="8. 예제"></a>8. 예제</h1><h2 id="8-1-범위에서-고르기"><a href="#8-1-범위에서-고르기" class="headerlink" title="8.1 범위에서 고르기"></a>8.1 범위에서 고르기</h2><p>연속된 영어 소문자를 찾으려면 어떻게 할까요?</p><ol><li>소문자를 뜻하는 <code>[a-z]</code>와</li><li>반복을 뜻하는 <code>+</code>를 붙여 &#x3D;&gt; <code>[a-z]+</code>를 씁니다.</li></ol><p>빈칸에 <code>[a-z]+</code>를 입력하고 [실행]해 보세요.</p><hr><h2 id="8-2-한글-고르기"><a href="#8-2-한글-고르기" class="headerlink" title="8.2 한글 고르기"></a>8.2 한글 고르기</h2><p>한글의 첫 번째 글자는 <code>가</code>이고 마지막 글자는 <code>힣</code>입니다. 따라서 한글은 <code>[가-힣]</code>으로 찾을 수 있습니다.</p><p>빈칸에 <code>[가-힣]+</code>를 입력하고 [실행]해 보세요.</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-JS-DataAlgo-15-그리디 (Greedy)</title>
      <link href="/2023/01/11/CS-JS-DataAlgo-15/"/>
      <url>/2023/01/11/CS-JS-DataAlgo-15/</url>
      
        <content type="html"><![CDATA[<h1 id="1-그리디-Greedy-탐욕"><a href="#1-그리디-Greedy-탐욕" class="headerlink" title="1. 그리디(Greedy, 탐욕)"></a>1. 그리디(Greedy, 탐욕)</h1><ul><li>매 선택에서 <strong>지금 이 순간 가장 최적인 답을 선택</strong>하는 알고리즘</li><li><strong>최적해를 보장해주지</strong> 않는다.<ul><li>e.g. 자판기는 남은 금액 반환</li><li>e.g. 마시멜로 실험(30분을 참으면 마시멜로+1)에서 아이들은 어떤 선택</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_15_1.png" alt="Data Structure_15_1"></p><ul><li>A → F로 가는 방법은 B와 D가 있습니다.</li><li>총 이동거리로 보면 D루트가 더 빠르지만, 지금 B와 D만 봤을 떄는 B가 더 빠르기에 B를 선택합니다.</li></ul><hr><h2 id="1-1-그리디-알고리즘의-특징"><a href="#1-1-그리디-알고리즘의-특징" class="headerlink" title="1.1 그리디 알고리즘의 특징"></a>1.1 그리디 알고리즘의 특징</h2><ul><li><strong>보통 최적해를 구하는 알고리즘보다 빠른 경우</strong>가 많다.</li><li><strong>크루스칼, 다익스트라 알고리즘</strong> 등에 사용된다.</li><li>직관적인 문제 풀이에 적합하다.</li></ul><hr><h2 id="1-2-동전-반환-문제"><a href="#1-2-동전-반환-문제" class="headerlink" title="1.2 동전 반환 문제"></a>1.2 동전 반환 문제</h2><p>거스름돈은 번거롭기 때문에 최대한 큰 단위로 거슬러주고 싶다. 어떻게 해야할까?</p><ul><li>지불금액 : 5,000원</li><li>요금 : 3,140원</li><li>거스름돈 : 1,860원</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_15_2.png" alt="Data Structure_15_2"></p><p>큰 단위인 지폐, 동전 순으로 거스름돈을 만들면 된다. 가장 쉽고 직관적인 그리디 문제</p><hr><h1 id="2-그리디-실습-큰-수-만들기"><a href="#2-그리디-실습-큰-수-만들기" class="headerlink" title="2. 그리디 실습 : 큰 수 만들기"></a>2. 그리디 실습 : 큰 수 만들기</h1><p>참고로 그리디 문제는 <strong>특정 구현 방법이 존재하는 것이 아닌 하나의 개념</strong>으로 봐야 한다는 점입니다.<br>그래서 문제를 통해 이해하는 것이 가장 좋습니다.</p><h2 id="2-1-문제"><a href="#2-1-문제" class="headerlink" title="2.1 문제"></a>2.1 문제</h2><ul><li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/42883">https://school.programmers.co.kr/learn/courses/30/lessons/42883</a></li></ul><hr><h2 id="2-2-풀이"><a href="#2-2-풀이" class="headerlink" title="2.2 풀이"></a>2.2 풀이</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// N이 백만이면 O(N), O(N log N)</span></span><br><span class="line"><span class="comment">// 큰 값이 나오면 이전 값 중 더 작은 값은 전부 삭제한다.</span></span><br><span class="line"><span class="comment">// 즉, 스택의 바닥에서부터 탑은 큰 수부터 작은 수로 나열이 되어야 한다.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">number, k</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> stack = [];</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>; <span class="comment">// 몇 개를 지웠는지</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 입력받은 문자열만큼 순회하면서 지우기</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> number) &#123;</span><br><span class="line">    <span class="comment">// k보다 count가 작거나 &amp;&amp; 스택의 길이가 입력문자열보다 작은 동안</span></span><br><span class="line">    <span class="keyword">while</span> (count &lt; k &amp;&amp; stack[stack.<span class="property">length</span> - <span class="number">1</span>] &lt; item) &#123;</span><br><span class="line">      stack.<span class="title function_">pop</span>();</span><br><span class="line">      count += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    stack.<span class="title function_">push</span>(item); <span class="comment">// 나머지 item은 stack에 넣기</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(stack.join(&#x27;&#x27;));</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 9876543처럼 count가 k보다 작은 경우</span></span><br><span class="line">  <span class="keyword">while</span> (count &lt; k) &#123;</span><br><span class="line">    stack.<span class="title function_">pop</span>();</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> stack.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(solution(&#x27;1924&#x27;, 2));</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> CS-자료구조-알고리즘 </category>
          
          <category> JS-자료구조-알고리즘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS-자료구조-알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-JS-DataAlgo-14-BFS, DFS</title>
      <link href="/2023/01/11/CS-JS-DataAlgo-14/"/>
      <url>/2023/01/11/CS-JS-DataAlgo-14/</url>
      
        <content type="html"><![CDATA[<h1 id="1-DFS-x2F-BFS"><a href="#1-DFS-x2F-BFS" class="headerlink" title="1. DFS&#x2F;BFS"></a>1. DFS&#x2F;BFS</h1><p>너비 우선탐색과 깊이 우선탐색을 이용하면 이러한 것들을 구현할 수 있습니다.</p><ul><li>그림판의 페인트툴</li><li>그래프의 D에서 G로 가는 최단 거리</li></ul><blockquote><p> cf. <a href="https://youtu.be/BsYbdUnKZ-Y">DFS BFS 깊이 너비 우선탐색 알고리즘 5분만에 이해하기</a></p><ul><li>드라마 하나를 몰아본다 &#x3D; DFS</li><li>드라마 여러 개를 하나씩 본다 &#x3D; BFS</li></ul><p>그래프 탐색 알고리즘 &#x3D; BFS, DFS</p><ul><li><code>그래프</code> : 여러 개체들이 연결되어 있는 자료구조</li><li><code>탐색</code> : 특정 개체를 찾기 위한 알고리즘</li></ul></blockquote><h2 id="1-1-대표적인-문제-유형"><a href="#1-1-대표적인-문제-유형" class="headerlink" title="1.1 대표적인 문제 유형"></a>1.1 대표적인 문제 유형</h2><ul><li>경로탐색 유형(최단거리, 시간)</li><li>네트워크 유형(연결)</li><li>조합 유형(모든 조합 만들기)</li></ul><hr><h2 id="1-2-DFS-구현-방법"><a href="#1-2-DFS-구현-방법" class="headerlink" title="1.2 DFS 구현 방법"></a>1.2 DFS 구현 방법</h2><ul><li>한 놈만 끝까지 패는 유형이라 <strong>재귀함수로 구현</strong>하는 것이 가장 일반적</li><li>재귀를 타고, 타서 탈출 조건에 먼저 도달하고 그 다음 파라미터를 하나씩 바꿔 가면서 정답을 구현</li></ul><hr><h2 id="1-3-BFS-구현-방법"><a href="#1-3-BFS-구현-방법" class="headerlink" title="1.3 BFS 구현 방법"></a>1.3 BFS 구현 방법</h2><ul><li>여러 놈을 한대씩 때리면서 가는 유형이라 <strong>Queue, LinkedList를 사용</strong>하는 것이 일반적</li><li>구현 방법<ol><li>가장 먼저 넣었던 것을 꺼내서</li><li>연결된 점을 Queue에 넣기</li><li>Queue가 빌 때까지 반복</li></ol></li><li>순서가 보장되어야 하기 때문에 Queue, LinkedList를 사용</li></ul><hr><h2 id="1-4-DFS-x2F-BFS-중-어떤-걸-써야하나"><a href="#1-4-DFS-x2F-BFS-중-어떤-걸-써야하나" class="headerlink" title="1.4 DFS&#x2F;BFS 중 어떤 걸 써야하나"></a>1.4 DFS&#x2F;BFS 중 어떤 걸 써야하나</h2><ul><li>둘 다 탐색을 하는 알고리즘이라 어떤 걸 써도 정답은 나오지만 자신있고 손에 익은 알고리즘을 쓰면 된다.</li><li>DFS는 BFS보다 동작 검증을 하기 쉬움 </li><li>DFS는 하나의 조합을 완성해서 정답과 비교하고 또 다른 조합을 만들어 보고 정답과 비교하는 식으로 동작</li><li>BFS는 한 번에 여러 조합들을 한칸 한칸씩 만들다보니 조합을 완성해 <ul><li>정답과 비교하는 시점에 언제 어떻게 만들어 졌는지</li><li>어디서부터 틀린건지를 분석하기가 까다롭습니다.</li></ul></li><li>하지만 BFS도 필요할 떄가 있는데,<ul><li>DFS는 한 놈만 패는 알고리즘인데, 그 한 놈이 오래 걸리면 시간이 초과될 수 있음</li></ul></li><li>한 문제를 두 방식으로 모두 풀어보는 것을 추천</li></ul><hr><h2 id="1-5-정리"><a href="#1-5-정리" class="headerlink" title="1.5 정리"></a>1.5 정리</h2><table><thead><tr><th align="center"></th><th align="center">DFS</th><th align="center">BFS</th></tr></thead><tbody><tr><td align="center">수행시간</td><td align="center">복불복</td><td align="center">모든 경우의 수를 한 걸음씩 나감</td></tr><tr><td align="center"></td><td align="center">운이 좋으면 첫번째 조합이 최적의 답<br />최악의 경우 모든 조합을 다 만들어야 함</td><td align="center">초반에 느리더라도 하나의 정답만 찾으면 <br />나머지 경우의 수는 정답에서 제외</td></tr><tr><td align="center">시간복잡도</td><td align="center">높다</td><td align="center">낮다</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/dfs-bfs.gif" alt="dfs-bfs"></p><hr><h1 id="2-BFS-너비-우선-탐색"><a href="#2-BFS-너비-우선-탐색" class="headerlink" title="2. BFS (너비 우선 탐색)"></a>2. BFS (너비 우선 탐색)</h1><ul><li><code> BFS (Breadth-First Search, 너비 우선 탐색)</code></li><li>그래프 탐색 알고리즘으로 <strong>같은 깊이에 해당하는 정점부터 탐색</strong>하는 알고리즘</li></ul><hr><h2 id="2-1-BFS-특징"><a href="#2-1-BFS-특징" class="headerlink" title="2.1 BFS 특징"></a>2.1 BFS 특징</h2><ul><li><strong>Queue를 이용해서 구현</strong>할 수 있다.</li><li><strong>시작 지점에서 가까운 정점부터 탐색</strong>한다.</li><li>V가 정점의 수, E가 간선의 수일 때 <strong>BFS의 시간복잡도</strong>는 $O(V+E)$다.</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_14_1.png" alt="Data Structure_14_1"></p><ol><li>시작지점을 A라고 가정하고, Queue에 A를 삽입</li><li>A로부터 이동할 수 있는 간선을 체크하여, 해당 정점 B, C, D를 Queue에 넣습니다.</li><li>B 정점을 Dequeue하여, B로부터 이동가능한 정점 F를 Queue에 넣습니다.<ul><li>이떄 C는 이미 방문한 곳이기 때문에 추가하지 않습니다.</li></ul></li><li>C 정점을 Dequeue하여, C로부터 이동가능한 정점 F이지만, 이미 Queue에 있기 때문에 추가하지 않습니다.</li><li>D 정점을 Dequeue하여, D로부터 이동가능한 정점 E를 Queue에 넣습니다.</li><li>F 정점을 Dequeue하여, F로부터 이동가능한 정점 G를 Queue에 넣습니다.</li><li>G 정점은 더 이상 갈 수 있는 정점이 없습니다.</li><li>그래서 G 정점을 Dequeue하고 종료합니다.</li></ol><hr><h1 id="3-DFS-깊이-우선-탐색"><a href="#3-DFS-깊이-우선-탐색" class="headerlink" title="3. DFS (깊이 우선 탐색)"></a>3. DFS (깊이 우선 탐색)</h1><ul><li><code>DFS (Depth-First Search, 깊이 우선 탐색)</code></li><li>그래프 탐색 알고리즘으로 <strong>최대한 깊은 정점부터 탐색</strong>하는 알고리즘</li></ul><hr><h2 id="3-1-DFS-특징"><a href="#3-1-DFS-특징" class="headerlink" title="3.1 DFS 특징"></a>3.1 DFS 특징</h2><ul><li><strong>Stack를 이용해서 구현</strong>할 수 있다.</li><li><strong>시작 정점에서 깊은 것부터 찾는다</strong>.</li><li>V가 정점의 수, E가 간선의 수일 때 <strong>DFS의 시간복잡도</strong>는 $O(V+E)$다.</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_14_2.png" alt="Data Structure_14_2"></p><blockquote><p>최상위 노트에서 연결된 자식 노드를 모두 탐색한 후, 더 이상 자식 노드가 없을 때 인접한 상위 노드의 형제 노드를 방문,<br>해당 형제 노드에서도 자식 노드를 탐색하고, 더 이상 자식노드가 없을 경우 다시 인접한 상위 형제의 노드를 방문</p></blockquote><ol><li>시작지점을 A라고 가정하고, Stack에 A를 삽입</li><li>Stack의 탑인 A를 참고하여, 이동할 수 있는 정점 B를 Stack에 넣습니다.</li><li>Stack의 탑인 B를 참고하여, 이동할 수 있는 정점 F를 Stack에 넣습니다.</li><li>Stack의 탑인 F를 참고하여, 이동할 수 있는 정점 C를 Stack에 넣습니다.<ul><li>C에서는 더 이상 갈 수 있는 곳이 없기 때문에 pop을 수행하고,</li></ul></li><li>다시 Stack의 탑인 F를 참고하여, 이동할 수 있는 정점 G를 Stack에 넣습니다.</li><li>G에서는 더 이상 갈 수 있는 곳이 없기 때문에 pop을 수행하고,<ul><li>다시 F로 돌아와도 F에서는 더 이상 갈 수 있는 곳이 없기 때문에 pop을 수행하고,</li><li>다시 B로 돌아와도 B에서는 더 이상 갈 수 있는 곳이 없기 때문에 pop을 수행하고,</li><li>다시 A로 돌아옵니다.</li></ul></li><li>Stack의 탑인 A를 참고하여, 이동할 수 있는 정점 D를 Stack에 넣습니다.</li><li>Stack의 탑인 D를 참고하여, 이동할 수 있는 정점 E를 Stack에 넣습니다.</li><li>E에서 더 이상 갈 수 있는 곳이 없기 때문에 A까지 다시 돌아가고, A에서도 갈 수 있는 곳이 없기 때문에 종료합니다.</li></ol><hr><h1 id="4-문제-타겟넘버"><a href="#4-문제-타겟넘버" class="headerlink" title="4. 문제 : 타겟넘버"></a>4. 문제 : 타겟넘버</h1><p>코딩테스트 고득점 Kit :  <a href="https://school.programmers.co.kr/learn/courses/30/lessons/43165?language=javascript">프로그래머스 Level 2 타겟넘버</a></p><ol><li><code>경우의 수 계산</code> : 최악의 경우 수행할 연산 횟수를 계산해 재귀함수&#x2F;완전탐색을 사용할지 확인</li><li><code>수행동작</code> : 재귀함수가 호출됐을 떄 1턴마다 수행할 동작 구현</li><li><code>탈출조건</code> : 어느  시점에 이 재귀함수를 끊을지 구현</li></ol><p>numbers의 0번째 부터 마지막까지 모든 요소를 각각 덧셈 또는 뺄셈한 결과를 모두 확인하여 target과 같은 경우의 개수를 세기</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** https://school.programmers.co.kr/learn/courses/30/lessons/43165?language=javascript</span></span><br><span class="line"><span class="comment"> * numbers 배열을 각각 더하거나 빼서 목표하는 target 숫자 만드는 모든 경우의 수 구하기</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; numbers 사용할 수 있는 숫자</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; target 타겟 넘버</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> target 숫자 만드는 모든 경우의 수</span></span><br><span class="line"><span class="comment"> * numbers의 각 자리의 숫자를 더하거나 빼는 경우가 2</span></span><br><span class="line"><span class="comment"> * 주어지는 숫자 최대 개수가 20개</span></span><br><span class="line"><span class="comment"> * 그 20개의 숫자에 대해 각각 2가지 경우의 수가 존재</span></span><br><span class="line"><span class="comment"> * 2의 20승인 100만번 정도가 최악의 경우의 수</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">numbers, target</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> length = numbers.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">DFS</span>(<span class="number">0</span>, <span class="number">0</span>); <span class="comment">//함수 호출 (0번째 숫자, 현재까지 합계 0)</span></span><br><span class="line">  <span class="keyword">return</span> answer;  </span><br><span class="line">    </span><br><span class="line">  <span class="comment">// numbers의 인덱스와 현재까지의 합계</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">DFS</span>(<span class="params">index, sum</span>) &#123;</span><br><span class="line">    <span class="comment">// **** 1. 탈출 조건</span></span><br><span class="line">    <span class="comment">// numbers의 인덱스를 모두 탐색했다면</span></span><br><span class="line">    <span class="keyword">if</span> (index === length) &#123;</span><br><span class="line">      <span class="comment">// 현재까지의 합계가 target이면 answer++</span></span><br><span class="line">      <span class="keyword">if</span> (target === sum) &#123;</span><br><span class="line">        answer++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// **** 2. 수행동작</span></span><br><span class="line">    <span class="comment">// 모든 숫자가 (+)인 경우를 모두 탐색한 뒤</span></span><br><span class="line">    <span class="comment">// 다음 인덱스의 숫자가 (-)인 경우를 탐색</span></span><br><span class="line">    <span class="title function_">DFS</span>(index + <span class="number">1</span>, sum + numbers[index]);</span><br><span class="line">    <span class="title function_">DFS</span>(index + <span class="number">1</span>, sum - numbers[index]);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-1-수행동작"><a href="#4-1-수행동작" class="headerlink" title="4.1 수행동작"></a>4.1 수행동작</h2><p> numbers는 [1,1,1,1,1]이, target이 3인 경우</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_14_3.png" alt="Data Structure_14_3"></p><p>(1) <code>DFS(index + 1, sum + numbers[index])</code> 부분이 계속 실행되며 다음 인덱스의 숫자가 (+) 인 자식 노드를 계속 탐색</p><hr><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_14_4.png" alt="Data Structure_14_4"></p><p>(2) 마지막 인덱스에 다다랐을 경우(index &#x3D; 5, sum &#x3D; 5 일 때) 해당 함수를 스택에서 제거한 뒤,<br> index가 4일 때 <code>DFS(index + 1, sum - numbers[index])</code> 을 실행하여 (-)인 자식 노드를 탐색</p><hr><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_14_5.png" alt="Data Structure_14_5"></p><p>(3) 마지막 인덱스에 다다랐으니 다시 해당 함수를 스택에서 제거,<br>index가 3일 때 <code>DFS(index + 1, sum — numbers[index])</code> 을 실행</p><hr><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_14_6.png" alt="Data Structure_14_6"></p><p>(4) index 4가 (-)일 때 <code>DFS(index + 1, sum + numbers[index])</code>을 실행하여 index 5가 (+)인 경우의 자식을 탐색,<br>탐색을 마치면 해당 함수를 스택에서 제거한 뒤<br><code>DFS(index + 1, sum - numbers[index])</code>을 실행하여 index 5가 (-)인 경우의 자식을 탐색</p><hr><p>(5) 다시 index가 2일 때 <code>DFS(index + 1, sum + numbers[index])</code>을 실행,<br>index 3이 (-)일 때 <code>DFS(index + 1, sum + numbers[index])</code>을 실행하여 index 4가 (+)인 경우의 자식 노드를 모두 탐색 후<br>15번 라인을 실행하며 index 5가 (-)인 경우의 자식 노드를 탐색</p><hr><p>(+)의 자식 노드 탐색 → (-)의 자식 노드 탐색 순서로 위 과정이 진행되며,<br>index 1이 (-)일 때의 자식 노드의 경우의 수 (+), (-) 를 모두 탐색하면 해당 함수가 종료</p><hr><h2 id="4-2-풀이-리팩토링"><a href="#4-2-풀이-리팩토링" class="headerlink" title="4.2 풀이 리팩토링"></a>4.2 풀이 리팩토링</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** https://school.programmers.co.kr/learn/courses/30/lessons/43165?language=javascript</span></span><br><span class="line"><span class="comment"> * numbers 배열을 각각 더하거나 빼서 목표하는 target 숫자 만드는 모든 경우의 수 구하기</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; numbers 사용할 수 있는 숫자</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; target 타겟 넘버</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> * numbers의 각 자리의 숫자를 더하거나 빼는 경우가 2</span></span><br><span class="line"><span class="comment"> * 주어지는 숫자 최대 개수가 20개</span></span><br><span class="line"><span class="comment"> * 그 20개의 숫자에 대해 각각 2가지 경우의 수가 존재</span></span><br><span class="line"><span class="comment"> * 2의 20승인 100만번 정도가 최악의 경우의 수</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">numbers, target</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">DFS</span>(<span class="params">index, sum</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index === numbers.<span class="property">length</span>) <span class="keyword">return</span> sum === target ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">DFS</span>(index + <span class="number">1</span>, sum + numbers[index]) + <span class="title function_">DFS</span>(index + <span class="number">1</span>, sum - numbers[index]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">DFS</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="5-문제-게임-맵-최단거리"><a href="#5-문제-게임-맵-최단거리" class="headerlink" title="5. 문제 : 게임 맵 최단거리"></a>5. 문제 : 게임 맵 최단거리</h1><p>코딩테스트 고득점 Kit :  <a href="https://school.programmers.co.kr/learn/courses/30/lessons/1844">프로그래머스 Level 2 게임 맵 최단거리</a></p><ol><li>게입 맵에서 우측 하단의 상대방 진영의 위치를 확인한다.</li><li>게임 캐릭터가 이동할 수 있는 방향성을 수치화한다.</li><li>너비 우선 탐색(BFS)을 구현하기 위하여 현재 확인한 위치를 담을 Queue를 생성한다.</li><li>게임 캐릭터가 최초 위치하고 있는 지점을 Queue에 입력한다.</li><li>BFS를 통해 시작지점에서부터 상대방 진영까지의 최단거리를 구한다.<ul><li>최단거리 구하기는 모든 지역을 깊이 있게 훑어봐야하는 깊이 우선 탐색(DFS)보다 </li><li>현재 위치에서부터 가까운 위치를 탐색하면서 넓게 거리를 탐색하는 너비 우선 탐색(BFS) 알고리즘을 선택하는 것이 바람직</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">maps</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">X_LEN</span> = maps.<span class="property">length</span>; <span class="comment">// maps의 행</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">Y_LEN</span> = maps[<span class="number">0</span>].<span class="property">length</span>; <span class="comment">// maps의 열</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">DIRECTION</span> = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>], <span class="comment">// 상</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>], <span class="comment">// 우</span></span><br><span class="line">    [-<span class="number">1</span>, <span class="number">0</span>], <span class="comment">// 하</span></span><br><span class="line">    [<span class="number">0</span>, -<span class="number">1</span>], <span class="comment">// 좌</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// // BFS에 사용할 queue를 생성</span></span><br><span class="line">  <span class="keyword">const</span> mapsQueue = [];</span><br><span class="line"></span><br><span class="line">  maps[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// 시작 위치</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 첫 시작은 무조건 가장 좌측의 가장 상단에서 시작하므로 </span></span><br><span class="line">  <span class="comment">// 0, 0 좌표와 이동한 칸 수 까지 해서 [0, 0, 1]</span></span><br><span class="line">  mapsQueue.<span class="title function_">push</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (mapsQueue.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [x, y, distance] = mapsQueue.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x === <span class="variable constant_">X_LEN</span> - <span class="number">1</span> &amp;&amp; y === <span class="variable constant_">Y_LEN</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      answer = distance;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable constant_">DIRECTION</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> [nextX, nextY] = [x + <span class="variable constant_">DIRECTION</span>[i][<span class="number">0</span>], y + <span class="variable constant_">DIRECTION</span>[i][<span class="number">1</span>]];</span><br><span class="line">      <span class="keyword">if</span> (nextX &lt; <span class="number">0</span> || nextX &gt;= <span class="variable constant_">X_LEN</span> || nextY &lt; <span class="number">0</span> || nextY &gt;= <span class="variable constant_">Y_LEN</span> || maps[nextX][nextY] === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      maps[nextX][nextY] = <span class="number">0</span>;</span><br><span class="line">      mapsQueue.<span class="title function_">push</span>([nextX, nextY, distance + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS-자료구조-알고리즘 </category>
          
          <category> JS-자료구조-알고리즘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS-자료구조-알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-JS-DataAlgo-13-정렬 (Sort)</title>
      <link href="/2023/01/11/CS-JS-DataAlgo-13/"/>
      <url>/2023/01/11/CS-JS-DataAlgo-13/</url>
      
        <content type="html"><![CDATA[<h1 id="1-정렬"><a href="#1-정렬" class="headerlink" title="1. 정렬"></a>1. 정렬</h1><p>만약 구슬들을 크기 별로 나열해야 한다면?<br>제일 큰 것부터 찾거나 일단 분류해서 정리하는 등의 행동들을 할 것입니다. 이러한 행동을 정렬이라고 부릅니다.</p><p>정렬 : <strong>요소들을 일정한 순서대로 열거</strong>하는 알고리즘</p><hr><h2 id="1-1-정렬의-특징"><a href="#1-1-정렬의-특징" class="headerlink" title="1.1 정렬의 특징"></a>1.1 정렬의 특징</h2><ul><li><strong>정렬 기준은 사용자가 정할 수 있다.</strong> (e.g. 오름차순, 내림차순)</li><li>크게 <code>비교식</code>과 <code>분산식</code>으로 나눌 수 있다.</li><li>대부분의 언어가 빌트인으로 제공해준다.</li><li><strong>삽입, 선택, 버블, 머지, 힙, 퀵 정렬 등 다양한 정렬 방식</strong>이 존재한다.</li></ul><hr><h2 id="1-2-어떤-정렬이-제일-빠를까"><a href="#1-2-어떤-정렬이-제일-빠를까" class="headerlink" title="1.2 어떤 정렬이 제일 빠를까?"></a>1.2 어떤 정렬이 제일 빠를까?</h2><p>정렬들은 각각 유리하고, 불리한 상황이 존재하기 때문에 무엇이 좋고 나쁜지는 정해져 있지 않습니다.</p><blockquote><p><a href="https://www.toptal.com/developers/sorting-algorithms">https://www.toptal.com/developers/sorting-algorithms</a></p></blockquote><hr><h1 id="2-비교식-정렬"><a href="#2-비교식-정렬" class="headerlink" title="2. 비교식 정렬"></a>2. 비교식 정렬</h1><p><strong>다른 요소와 비교를 통해 정렬</strong>을 하는 방식</p><hr><h2 id="2-1-버블-정렬-Bubble-Sort"><a href="#2-1-버블-정렬-Bubble-Sort" class="headerlink" title="2.1 버블 정렬(Bubble Sort)"></a>2.1 버블 정렬(Bubble Sort)</h2><ul><li><p><strong>서로 인접한 두 요소를 검사하여 정렬</strong>하는 알고리즘</p></li><li><p>요소들이 마치 거품이 일어나듯이 연쇄적으로 자기 자리를 찾아간다고 해서 버블 정렬이란 이름이 붙여짐</p></li><li><p>시간복잡도</p><ul><li><p><code>Worst Case</code> : $O(n^2)$ - 정렬이 하나도 안되어있는 경우</p><ul><li>각 자리를 찾기 위해서 n번의 순회를 해야하며, </li><li>n번의 회전 동안에 요소의 개수만큼 또 순회를 해야하기 때문</li></ul></li><li><p><code>Best Case</code> : $O(n)$ - 이미 정렬이 되어있는 경우</p><ul><li>이미 정렬이 되어있는 경우에는 한 번의 순회로 정렬 여부를 알 수 있다.</li></ul></li></ul></li><li><p>즉, <strong>자료의 개수가 많아질수록 성능이 매우 떨어진다</strong></p><ul><li>5개밖에 없다면 최대 25번 순회하지만, 데이터가 1,000개라면 1,000,000번 순회해야함</li></ul></li></ul><h3 id="2-1-1-동작원리"><a href="#2-1-1-동작원리" class="headerlink" title="2.1.1 동작원리"></a>2.1.1 동작원리</h3><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/bubble-sort.gif" alt="bubble-sort" style="zoom:67%;" /><ul><li>데이터를 두개씩 묶어서 비교한 후 크기가 큰 쪽이 오른쪽으로 가도록 자리를 바꿔가며 </li><li>크기가 큰 데이터를 오른쪽으로 민다. </li><li>그러면 1회전이 끝남과 동시에 이 리스트에서 가장 큰 값이 가장 오른쪽에 가기 때문에 맨 오른쪽 자리가 결정난다.</li><li><strong>즉, n번째 정렬 회차가 끝나면 뒤에서 n번째 자리의 데이터가 확정된다.</strong></li></ul><h3 id="2-1-2-그림"><a href="#2-1-2-그림" class="headerlink" title="2.1.2 그림"></a>2.1.2 그림</h3><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_13_1.png" alt="Data Structure_13_1"></p><p>배열을 오름차순으로 정렬</p><ol><li><code>첫 번쨰 정렬</code><ul><li>첫 번쨰 요소에 인접한 요소를 비교합니다.<ul><li>4 &lt; 7 이기 때문에 오름차순에 따라 두 요소를 교환합니다.</li></ul></li><li>교환 후 2번쨰 요소와 3번째요소를 비교합니다.<ul><li>5 &lt; 7 이기 때문에 오름차순에 따라 두 요소를 교환합니다.</li></ul></li><li>교환 후 3번쨰 요소와 4번째요소를 비교합니다.<ul><li>1 &lt; 7 이기 때문에 오름차순에 따라 두 요소를 교환합니다.</li></ul></li><li>교환 후 4번쨰 요소와 5번째요소를 비교합니다.<ul><li>3 &lt; 7 이기 때문에 오름차순에 따라 두 요소를 교환합니다.</li></ul></li></ul></li><li><code>두 번째 정렬</code><ul><li>첫 번쨰 요소에 인접한 요소를 비교합니다.<ul><li>4 &lt; 5 이기 때문에 교환하지 않습니다.</li></ul></li><li>2번쨰 요소와 3번째요소를 비교합니다.<ul><li>1 &lt; 5 이기 때문에 오름차순에 따라 두 요소를 교환합니다.</li></ul></li><li>교환 후 3번쨰 요소와 4번째요소를 비교합니다.<ul><li>3 &lt; 5 이기 때문에 오름차순에 따라 두 요소를 교환합니다.</li></ul></li></ul></li><li><code>세 번째 정렬</code><ul><li>첫 번쨰 요소에 인접한 요소를 비교합니다.<ul><li>1 &lt; 4 이기 때문에 오름차순에 따라 두 요소를 교환합니다.</li></ul></li><li>2번쨰 요소와 3번째요소를 비교합니다.<ul><li>3 &lt; 4 이기 때문에 오름차순에 따라 두 요소를 교환합니다.</li></ul></li></ul></li><li><code>네 번쨰 정렬</code><ul><li>첫 번쨰 요소에 인접한 요소를 비교합니다.<ul><li>1 &lt; 3 이기 때문에 교환하지 않습니다.</li></ul></li><li>마무리!</li></ul></li></ol><p>결국 버블 정렬은 <strong>n-1번 순회</strong>하면 정렬이 마무리됩니다.</p><h3 id="2-1-3-구현"><a href="#2-1-3-구현" class="headerlink" title="2.1.3 구현"></a>2.1.3 구현</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = arr; <span class="comment">// 얕은 복사</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 순회</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]]; <span class="comment">// 바꾸기</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;i&#125;</span>회전: <span class="subst">$&#123;arr&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bubbleSort</span>([<span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>]));</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-선택-정렬-Selection-Sort"><a href="#2-2-선택-정렬-Selection-Sort" class="headerlink" title="2.2 선택 정렬(Selection Sort)"></a>2.2 선택 정렬(Selection Sort)</h2><ul><li>사람이 이해하기 가장 단순한 정렬</li><li><strong>선택한 요소와 가장 우선순위가 높은 요소를 교환</strong>하는 정렬 알고리즘</li><li>시간복잡도<ul><li><code>Worst Case</code> : $O(n^2)$ - 정렬이 하나도 안되어있는 경우</li><li><code>Best Case</code> : $O(n^2)$ - 이미 정렬이 되어있는 경우</li><li>정렬이 이미 되어있는 경우에도 $O(n^2)$의 시간복잡도를 가짐</li><li>왜냐하면 매번 정해진 자리에 올 수 있는 최소값을 찾아야하기 때문</li><li>그래서 <strong>성능이 매우 떨어진다.</strong></li></ul></li></ul><h3 id="2-2-1-동작원리"><a href="#2-2-1-동작원리" class="headerlink" title="2.2.1 동작원리"></a>2.2.1 동작원리</h3><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/selection-sort.gif" alt="selection-sort"></p><ol><li>먼저 주어진 리스트 중에 최소값을 찾는다.</li><li>그 값을 맨 앞에 위치한 값과 교환한다.</li><li>이제 맨 앞을 제외하고 다시 순회하며 최소값을 찾는다.</li><li>그 값을 맨 앞 위치 바로 다음 위치와 교체한다. … 반복</li></ol><p> 버블 정렬이 각 회전이 끝날 때마다 맨 마지막 데이터의 위치가 정해졌던 것과 반대로<br><strong>선택 정렬은 n번째 회전이 끝날 때마다 앞에서 n번째 데이터의 위치가 정해진다.</strong></p><h3 id="2-2-2-그림"><a href="#2-2-2-그림" class="headerlink" title="2.2.2 그림"></a>2.2.2 그림</h3><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_13_2.png" alt="Data Structure_13_2"></p><ol><li>선택된 첫 번째 요소와 나머지 요소 중 가장 우선순위가 높은 1과 교환합니다.</li><li>다음 두 번쨰 요소와 나머지 요소 중 가장 우선순위가 높은 3과 교환합니다. </li><li>다음 세 번쨰 요소와 나머지 요소 중 가장 우선순위가 높은 4와 교환합니다. </li><li>다음 네 번쨰 요소와 나머지 요소 중 가장 우선순위가 높은 5와 교환합니다.</li></ol><p>참고로 나머지 요소 중 선택된 요소보다 우선순위가 높은 요소가 없다면, 교환하지 않고 넘어가면 됩니다.</p><h3 id="2-2-3-구현"><a href="#2-2-3-구현" class="headerlink" title="2.2.3 구현"></a>2.2.3 구현</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = arr;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 크기만큼 순회</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[index]) index = j;</span><br><span class="line">    &#125;</span><br><span class="line">    [arr[i], arr[index]] = [arr[index], arr[i]]; <span class="comment">// 서로 바꾸기</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;i&#125;</span>회전: <span class="subst">$&#123;arr&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">solution</span>([<span class="number">13</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">15</span>])); <span class="comment">// [ 5, 7, 11, 13, 15, 23 ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-3-삽입-정렬-Insertion-Sort"><a href="#2-3-삽입-정렬-Insertion-Sort" class="headerlink" title="2.3 삽입 정렬(Insertion Sort)"></a>2.3 삽입 정렬(Insertion Sort)</h2><ul><li><strong>선택한 요소를 삽입할 수 있는 위치를 찾아 삽입하는 방식</strong>의 정렬 알고리즘</li><li>시간복잡도<ul><li><code>Worst Case</code> : $O(n^2)$ - 정렬이 하나도 안되어있는 경우</li><li><code>Best Case</code> : $O(n)$ - 이미 정렬이 되어있는 경우</li></ul></li><li>자료의 <strong>개수가 많아질수록 성능이 매우 떨어진다</strong></li></ul><hr><h3 id="2-3-1-그림"><a href="#2-3-1-그림" class="headerlink" title="2.3.1 그림"></a>2.3.1 그림</h3><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_13_3.png" alt="Data Structure_13_3"></p><p><code>7, 4, 5, 1, 3</code>순의 배열을 정렬해보겠습니다. <strong>두 번째 요소부터 시작</strong>합니다.</p><ol><li><strong>두 번째 요소인 4부터 선택</strong>합니다.<ul><li>4 &lt; 7 이기 때문에 오름차순에 따라 첫 번쨰 요소에 4을 삽입합니다.</li></ul></li><li><strong>세 번째 요소인 5를 선택</strong>합니다.<ul><li>5 &lt; 7 이기 때문에 오름차순에 따라 두 번쨰 요소에 5을 삽입합니다.</li><li>다음으로 첫 번째 요소와 비교합니다.</li><li>4 &lt; 5 이기 때문에 오름차순에 따라 밀어내지 못하고 5가 그대로 있습니다.</li></ul></li><li><strong>네 번째 요소인 1를 선택</strong>합니다.<ul><li>1 &lt; 7 이기 때문에 오름차순에 따라 세 번쨰 요소에 1을 삽입합니다.</li><li>1 &lt; 5 이기 때문에 오름차순에 따라 두 번쨰 요소에 1을 삽입합니다.</li><li>1 &lt; 4 이기 때문에 오름차순에 따라 첫 번쨰 요소에 1을 삽입합니다.</li></ul></li><li><strong>다섯 번째 요소인 3를 선택</strong>합니다.<ul><li>3 &lt; 7 이기 때문에 오름차순에 따라 네 번쨰 요소에 3을 삽입합니다.</li><li>3 &lt; 5 이기 때문에 오름차순에 따라 세 번쨰 요소에 3을 삽입합니다.</li><li>3 &lt; 4 이기 때문에 오름차순에 따라 두 번쨰 요소에 3을 삽입합니다.</li><li>1 &lt; 3 이기 때문에 오름차순에 따라 밀어내지 못하고 1이 그대로 있습니다.</li></ul></li></ol><h3 id="2-3-2-구현"><a href="#2-3-2-구현" class="headerlink" title="2.3.2 구현"></a>2.3.2 구현</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertionSort</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> cur = array[i];</span><br><span class="line">    <span class="keyword">let</span> left = i - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; array[left] &gt; cur) &#123;</span><br><span class="line">      array[left + <span class="number">1</span>] = array[left];</span><br><span class="line">      left--;</span><br><span class="line">    &#125;</span><br><span class="line">    array[left + <span class="number">1</span>] = cur;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;i&#125;</span>회전: <span class="subst">$&#123;array&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">insertionSort</span>([<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]));</span><br></pre></td></tr></table></figure><hr><h1 id="3-분산식-정렬"><a href="#3-분산식-정렬" class="headerlink" title="3. 분산식 정렬"></a>3. 분산식 정렬</h1><p><strong>요소를 분산해서 정렬</strong>하는 방식</p><h2 id="3-1-분할-정복-Divide-x2F-Conquer"><a href="#3-1-분할-정복-Divide-x2F-Conquer" class="headerlink" title="3.1 분할 정복(Divide &#x2F; Conquer)"></a>3.1 분할 정복(Divide &#x2F; Conquer)</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_13_4.png" alt="Data Structure_13_4"></p><ul><li><strong>문제를</strong> 작은 2개의 문제로 분리하고 <strong>더 이상 분리가 불가능할 떄 처리한 후 합치는 전략</strong></li><li>정렬 뿐만 아니라 다양한 알고리즘에 응용된다.</li></ul><hr><h2 id="3-2-합병-정렬-Merge-Sort"><a href="#3-2-합병-정렬-Merge-Sort" class="headerlink" title="3.2 합병 정렬(Merge Sort)"></a>3.2 합병 정렬(Merge Sort)</h2><ul><li><strong>분할 정복 알고리즘을 이용</strong>한 <strong>최선과 최악이 같은 안정적인 정렬</strong> 알고리즘</li><li><strong>선형 로그($O(n\ log\ n)$) 시간복잡도</strong>를 가진다.</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_13_5.png" alt="Data Structure_13_5"></p><ol><li>요소를 나누는 작업부터 먼저 시작합니다. <code>(Divide)</code><ul><li>8개의 요소를 절반으로 나누고, 요소가 1개가 남을 떄까지 계속 절반으로 나눈다.</li></ul></li><li>모든 요소를 나눴다면 합치는 작업을 시작합니다. <code>(Conquer)</code><ul><li>나눈 것을 합치면, 두 요소 중 작은 것을 먼저 배치합니다.</li><li>21과 10의 경우 10이 먼저 배치되고 21이 배치됩니다.</li><li>이어서 2개까지를 합칠 떄도 작은 순으로 배치합니다.</li><li>최종적으로 모두 합치면 정렬된 상태가 됩니다.</li></ul></li></ol><hr><h2 id="3-3-퀵-정렬-Quick-Sort"><a href="#3-3-퀵-정렬-Quick-Sort" class="headerlink" title="3.3 퀵 정렬(Quick Sort)"></a>3.3 퀵 정렬(Quick Sort)</h2><ul><li>분할 정복 알고리즘을 이용한 <strong>매우 빠르지만 최악의 경우가 존재하는 불안정 정렬</strong></li><li><strong>선형 로그($O(n\ log\ n)$) 시간복잡도</strong>를 가진다.</li><li><strong>최악의 경우 2차($O(n^2)$) 시간복잡도</strong>를 가진다.</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_13_6.png" alt="Data Structure_13_6"></p><ol><li>피벗이라는 기준으로 좌측과 우측을 나눕니다.<ul><li>여기서는 첫 번쨰 요소인 5를 피벗으로 둡니다.</li><li>5를 기준으로 작은 값이 왼쪽, 큰 값이 오른쪽에 배치됩니다.</li></ul></li><li>다시 나뉜 배열에서 각 첫 번쨰 요소가 피벗이 됩니다.<ul><li>각각 1과 9가 피벗이 됩니다.</li></ul></li><li>다시 나뉜 배열에서 각 첫 번쨰 요소가 피벗이 됩니다.</li><li>더 이상 나눌 수 없는 상태가 되었다면, 그대로 합쳐줍니다.</li></ol><hr><h1 id="4-JS에서-정렬-sort"><a href="#4-JS에서-정렬-sort" class="headerlink" title="4. JS에서 정렬(sort)"></a>4. JS에서 정렬(sort)</h1><p>JavaScript에서는 정렬이 매우 간단합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">5</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 다음과 같이 그냥 정렬하면 ASCII 문자 순서로 정렬되어</span></span><br><span class="line"><span class="comment">// 우리가 원하는 숫자 크기대로 정렬되지 않는다.</span></span><br><span class="line">array.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [10, 2, 3, 3, 5, 8, 9]</span></span><br><span class="line"><span class="comment">// 10이 먼저 나오는 이유는 ASCII 문자 &#x27;1&#x27;이 &#x27;2&#x27;보다 작기 때문</span></span><br><span class="line"></span><br><span class="line">array.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); <span class="comment">// 오름차순 정렬</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [2, 3, 3, 5, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line">array.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a); <span class="comment">// 내림차순 정렬</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [10, 9, 8, 5, 3, 3, 2]</span></span><br></pre></td></tr></table></figure><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li><a href="https://im-developer.tistory.com/133">https://im-developer.tistory.com/133</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CS-자료구조-알고리즘 </category>
          
          <category> JS-자료구조-알고리즘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS-자료구조-알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-JS-DataAlgo-12-이진탐색 (Binary Search)</title>
      <link href="/2023/01/11/CS-JS-DataAlgo-12/"/>
      <url>/2023/01/11/CS-JS-DataAlgo-12/</url>
      
        <content type="html"><![CDATA[<h1 id="1-선형-탐색"><a href="#1-선형-탐색" class="headerlink" title="1. 선형 탐색"></a>1. 선형 탐색</h1><p>정리가 안된 책장에서 원하는 책을 찾는 방법은? 사람마다 다르겠지만 어느 방향이든 처음부터 순차적으로 찾을 수 있습니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_12_1.png" alt="Data Structure_12_1"></p><ul><li>순서대로 하나씩 찾는 탐색 알고리즘</li><li><strong>선형($O(n)$ ) 시간 복잡도</strong>가 걸린다.</li></ul><hr><h1 id="2-이진-탐색"><a href="#2-이진-탐색" class="headerlink" title="2. 이진 탐색"></a>2. 이진 탐색</h1><p>상대방의 나이를 맞추고 싶다면?<br><strong>Up&amp;Down 게임으로 예상 나이를 말하고, 더 큰지 작은지 판단</strong>하여 절반씩 줄여나가는 전략을 사용합니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_12_2.png" alt="Data Structure_12_2"></p><ul><li><strong>정렬되어 있는 요소들을 반씩 제외하며 찾는</strong> 알고리즘</li><li><strong>로그($O(log\ n)$) 시간복잡도</strong>가 걸린다.</li></ul><hr><h2 id="2-1-이진-탐색의-특징"><a href="#2-1-이진-탐색의-특징" class="headerlink" title="2.1 이진 탐색의 특징"></a>2.1 이진 탐색의 특징</h2><ul><li><strong>반드시 정렬되어 있어야 사용가능</strong>하다.</li><li><strong>배열 혹은 이진 트리를 이용하여 구현</strong>할 수 있다.</li><li>$O(log\ n)$ 시간복잡도인 만큼 <strong>상당히 빠르다</strong>.</li></ul><hr><h2 id="2-2-배열을-이용한-구현-방법"><a href="#2-2-배열을-이용한-구현-방법" class="headerlink" title="2.2 배열을 이용한 구현 방법"></a>2.2 배열을 이용한 구현 방법</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_12_3.png" alt="Data Structure_12_3"></p><p>위 배열에서 45를 찾으려면 어떻게 해야 할까요?</p><ol><li>이진 탐색에서는 시작 지점을 Left, 중간을 Mid, 끝 지점을 Right로 둡니다.<ul><li>Mid와 찾을 값인 45를 비교합니다</li></ul></li><li>45 &lt; 58 이기 때문에  Right 값을 Mid 1칸 왼쪽에 위치시킵니다.</li><li>36 &lt; 45 이기 때문에 Left가 36의 오른쪽으로 이동합니다.<ul><li>Left와 Right가 동일하기 때문에 Mid도 동일한 값으로 다시 부여됩니다.</li><li>Mid값과 찾을 값인 45가 같기 때문에 탐색이 종료됩니다.</li></ul></li></ol><hr><h2 id="2-3-이진-탐색-트리를-이용한-구현-방법"><a href="#2-3-이진-탐색-트리를-이용한-구현-방법" class="headerlink" title="2.3 이진 탐색 트리를 이용한 구현 방법"></a>2.3 이진 탐색 트리를 이용한 구현 방법</h2><p>배열로 구현하는 방법은 중간에 요소를 추가하거나, 삭제할 떄, 선형시간의 단점을 여전히 들고 있습니다.<br>그래서 이 방법을 해결하기 위해 이진 탐색 트리를 활용하 수 있습니다.</p><ul><li>이진 탐색을 위한 이진트리로 <strong>왼쪽 서브 트리는 루트보다 작은 값</strong>이 모여있고</li><li><strong>오른쪽 서브 트리는 루트보다 큰 값</strong>이 모여있다.</li></ul><hr><h3 id="2-3-1-이진-탐색-트리-요소-추가"><a href="#2-3-1-이진-탐색-트리-요소-추가" class="headerlink" title="2.3.1 이진 탐색 트리 요소 추가"></a>2.3.1 이진 탐색 트리 요소 추가</h3><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_12_4.png" alt="Data Structure_12_4"></p><ol><li>루트인 5을 추가한다.</li><li>4를 추가한다.<ul><li>4 &lt; 5 이기 떄문에 왼쪽 정점에 위치</li></ul></li><li>7을 추가한다.<ul><li>5 &lt; 7이기 때문에 오른쪽 정점에 위치</li></ul></li><li>8을 추가한다.<ul><li>루트인 5 &lt; 8이기 때문에 오른쪽 정점에 위치</li><li>서브 트리의 루트인 7&lt; 8이기 때문에 오른쪽 정점에 위치</li></ul></li><li>5를 추가한다.<ul><li>동일한 경우 왼쪽, 오른쪽 아무 곳에 넣어도 상관없지만, 여기서는 왼쪽 정점에 넣겠음</li><li>서브 트리의 루트인 4 &lt; 5이기 때문에 오른쪽 정점에 위치</li></ul></li><li>6을 추가한다.<ul><li>6은 5보다 크고, 7보다 작기 때문에 7의 왼쪽 노드에 추가</li></ul></li><li>2를 추가한다.<ul><li>2는 5보다 작고, 4보다 작기 때문에 4의 왼쪽 노드에 추가</li></ul></li></ol><h3 id="2-3-2-이진-탐색-트리-요소-삭제"><a href="#2-3-2-이진-탐색-트리-요소-삭제" class="headerlink" title="2.3.2 이진 탐색 트리 요소 삭제"></a>2.3.2 이진 탐색 트리 요소 삭제</h3><h4 id="1-단말-정점을-삭제하는-경우"><a href="#1-단말-정점을-삭제하는-경우" class="headerlink" title="(1) 단말 정점을 삭제하는 경우"></a>(1) 단말 정점을 삭제하는 경우</h4><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_12_5.png" alt="Data Structure_12_5"></p><p>별다른 처리없이 부모 정점과 연결을 끊으면 된다.</p><hr><h4 id="2-하나의-서브-트리를-가지는-경우"><a href="#2-하나의-서브-트리를-가지는-경우" class="headerlink" title="(2) 하나의 서브 트리를 가지는 경우"></a>(2) 하나의 서브 트리를 가지는 경우</h4><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_12_6.png" alt="Data Structure_12_6"></p><p>제거되는 정점의 부모 간선을 자식 정점을 가르키게 바꾸면 된다.</p><ul><li>예를 들어, 7을 제거할 경우 5의 오른쪽 간선을 8을 가르키게 하면 된다.</li></ul><hr><h4 id="3-두-개의-서브-트리를-가지는-경우"><a href="#3-두-개의-서브-트리를-가지는-경우" class="headerlink" title="(3) 두 개의 서브 트리를 가지는 경우"></a>(3) 두 개의 서브 트리를 가지는 경우</h4><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_12_7.png" alt="Data Structure_12_7"></p><ul><li>왼쪽 서브 트리의 가장 큰 값 혹은 오른쪽 서브 트리의 가장 작은 값과 교체하면 된다.</li><li>이 경우 교체된 정점의 좌우 자식이 없다면 제거되는 정점의 링크로 대체된다.<ul><li>예를 들어, 4를 삭제할 때, 3 또는 5의 해당하는 정점과 교체하면 됩니다.</li></ul></li></ul><hr><h2 id="2-4-이진-탐색-트리의-문제점"><a href="#2-4-이진-탐색-트리의-문제점" class="headerlink" title="2.4 이진 탐색 트리의 문제점"></a>2.4 이진 탐색 트리의 문제점</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_12_8.png" alt="Data Structure_12_8"></p><ul><li><strong>최악의 경우 한쪽으로 편향된 트리가 될 수 있다</strong>.</li><li>그런 경우 <strong>순차 탐색과 동일한 시간복잡도</strong>를 가진다.</li><li>이를 해결하기 위해 다음과 같은 자료구조를 이용할 수 있다.<ul><li><strong>AVL 트리</strong></li><li><strong>레드-블랙 트리</strong></li></ul></li></ul><hr><h1 id="3-이진-탐색-구현"><a href="#3-이진-탐색-구현" class="headerlink" title="3. 이진 탐색 구현"></a>3. 이진 탐색 구현</h1><p>만약 코딩테스트에서 이진 탐색을 사용한다면, 배열을 이용해 구현하는 것을 추천합니다.</p><h2 id="3-1-Array"><a href="#3-1-Array" class="headerlink" title="3.1 Array"></a>3.1 Array</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">124</span>, <span class="number">400</span>, <span class="number">599</span>, <span class="number">1004</span>, <span class="number">2876</span>, <span class="number">8712</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">binarySearch</span>(<span class="params">array, findValue</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> right = array.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// mid가 찾는 값이 일치할 떄까지 순회</span></span><br><span class="line">  <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[mid] === findValue) &#123;</span><br><span class="line">      <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (array[mid] &lt; findValue) &#123;</span><br><span class="line">      left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 만약 left값과 right값이 동일할 경우 루프 탈출</span></span><br><span class="line">  <span class="comment">// 루프를 그대로 빠져나온다면,</span></span><br><span class="line">  <span class="comment">// 요소를 찾지 못했다는 뜻이기에 - 1반환</span></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">binarySearch</span>(array, <span class="number">2876</span>)); <span class="comment">// 7</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">binarySearch</span>(array, <span class="number">1</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">binarySearch</span>(array, <span class="number">500</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-2-Binary-Search-Tree"><a href="#3-2-Binary-Search-Tree" class="headerlink" title="3.2 Binary Search Tree"></a>3.2 Binary Search Tree</h2><p>기존 이진 트리에 탐색 함수를 추가하면 됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySearchTree</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 이진 탐색 트리 요소 추가</span></span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(value); <span class="comment">// 노드를 하나 생성</span></span><br><span class="line">    <span class="comment">// 루트가 비어있으면 생성한 노드가 루특가 됨</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">root</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">root</span> = newNode;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line">    <span class="comment">// 현재 노드가 null이 아닐 떄까지 순회 </span></span><br><span class="line">    <span class="keyword">while</span> (currentNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 만약 오른쪽 노드의 값보다 추가될 노드의 값이 큰 경우 오른쪽 노드에 삽입</span></span><br><span class="line">      <span class="keyword">if</span> (currentNode.<span class="property">value</span> &lt; value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentNode.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">          currentNode.<span class="property">right</span> = newNode;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        currentNode = currentNode.<span class="property">right</span>; <span class="comment">// null이 아닌 경우 이동만 함</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 만약 왼쪽 노드의 값보다 추가될 노드의 값이 큰 경우 왼쪽 노드에 삽입</span></span><br><span class="line">        <span class="keyword">if</span> (currentNode.<span class="property">left</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">          currentNode.<span class="property">left</span> = newNode;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        currentNode = currentNode.<span class="property">left</span>; <span class="comment">// null이 아닌 경우 이동만 함</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">has</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line">    <span class="keyword">while</span> (currentNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode.<span class="property">value</span> === value) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (currentNode.<span class="property">value</span> &lt; value) &#123;</span><br><span class="line">        currentNode = currentNode.<span class="property">right</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        currentNode = currentNode.<span class="property">left</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tree = <span class="keyword">new</span> <span class="title class_">BinarySearchTree</span>();</span><br><span class="line">tree.<span class="title function_">insert</span>(<span class="number">5</span>);</span><br><span class="line">tree.<span class="title function_">insert</span>(<span class="number">4</span>);</span><br><span class="line">tree.<span class="title function_">insert</span>(<span class="number">7</span>);</span><br><span class="line">tree.<span class="title function_">insert</span>(<span class="number">8</span>);</span><br><span class="line">tree.<span class="title function_">insert</span>(<span class="number">5</span>);</span><br><span class="line">tree.<span class="title function_">insert</span>(<span class="number">6</span>);</span><br><span class="line">tree.<span class="title function_">insert</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tree.<span class="title function_">has</span>(<span class="number">8</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tree.<span class="title function_">has</span>(<span class="number">1</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-이진-탐색-실습-입국-심사"><a href="#3-이진-탐색-실습-입국-심사" class="headerlink" title="3. 이진 탐색 실습 : 입국 심사"></a>3. 이진 탐색 실습 : 입국 심사</h1><h2 id="3-1-문제"><a href="#3-1-문제" class="headerlink" title="3.1 문제"></a>3.1 문제</h2><ul><li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/43238">https://school.programmers.co.kr/learn/courses/30/lessons/43238</a></li></ul><hr><h2 id="3-2-풀이"><a href="#3-2-풀이" class="headerlink" title="3.2 풀이"></a>3.2 풀이</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 로그 시간 = 이진 탐색</span></span><br><span class="line"><span class="comment">// times -&gt; 선형 로그 시간으로 충분히 가능</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 우리는 특정 값을 찾는 것이 아닙니다.</span></span><br><span class="line"><span class="comment">// 우리가 찾는 것은 최소 몇 분에 모든 심사가 끝나는가?</span></span><br><span class="line"><span class="comment">// - 결정 문제 = 이진 탐색 = 파라메트릭 서치(Parametric Search)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 최소 1분에서 10억분 * n 사이</span></span><br><span class="line"><span class="comment">// 면접관들이 몇 명을 처리하는가?</span></span><br><span class="line"><span class="comment">// 처리 가능한 입국자 n보다 작다면, 분을 올려야 하고, 입국자가 n보다 크면 분을 낮춰야 한다.</span></span><br><span class="line"><span class="comment">// 시간 / 심사시간 = 심사관 당 처리 가능한 입국자 수</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">n, times</span>) &#123;</span><br><span class="line">  <span class="comment">// 오름차순</span></span><br><span class="line">  <span class="keyword">const</span> sortedTimes = times.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); <span class="comment">// O(n log n)</span></span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> right = sortedTimes[sortedTimes.<span class="property">length</span> - <span class="number">1</span>] * n;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">    <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// sum([시간 / 심사시간])</span></span><br><span class="line">    <span class="keyword">const</span> sum = times.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, time</span>) =&gt;</span> acc + <span class="title class_">Math</span>.<span class="title function_">floor</span>(mid / time), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sum &lt; n) &#123;</span><br><span class="line">      left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS-자료구조-알고리즘 </category>
          
          <category> JS-자료구조-알고리즘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS-자료구조-알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-JS-DataAlgo-11-트라이 (Trie)</title>
      <link href="/2023/01/11/CS-JS-DataAlgo-11/"/>
      <url>/2023/01/11/CS-JS-DataAlgo-11/</url>
      
        <content type="html"><![CDATA[<h1 id="1-트라이-Trie"><a href="#1-트라이-Trie" class="headerlink" title="1. 트라이(Trie)"></a>1. 트라이(Trie)</h1><p>검색 엔진에서 자동완성을 하려면 어떻게 해야할까요?</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_11_1.png" alt="Data Structure_11_1"></p><ul><li><strong>문자열을 저장하고 효율적으로 탐색하기 위한 트리 형태</strong>의 자료구조</li><li>e.g. 검색엔진 연관 검색어</li></ul><hr><h2 id="1-1-트라이-특징"><a href="#1-1-트라이-특징" class="headerlink" title="1.1 트라이 특징"></a>1.1 트라이 특징</h2><ul><li><strong>검색어 자동완성, 사전 찾기 등에 응용</strong>될 수 있다.</li><li>문자열을 탐색할 떄 단순하게 비교하는 것보다 효율적으로 찾을 수 있다.</li><li><strong>L이 문자열의 길이</strong>일 떄 <strong>탐색, 삽입은 $O(L)$만큼 걸린다</strong>.</li><li>대신 <strong>각 정점이 자식에 대한 링크를 전부</strong> 가지고 있기에 <strong>저장 공간을 더 많이 사용</strong>한다.</li></ul><hr><h2 id="1-2-Trie-생성하기"><a href="#1-2-Trie-생성하기" class="headerlink" title="1.2 Trie 생성하기"></a>1.2 Trie 생성하기</h2><h3 id="1-2-1-트라이-구조"><a href="#1-2-1-트라이-구조" class="headerlink" title="1.2.1 트라이 구조"></a>1.2.1 트라이 구조</h3><ul><li><strong>루트는 비어있다</strong>.</li><li><strong>각 간선(링크)은 추가될 문자를 키로 가진다</strong>.</li><li><strong>각 정점은 이전 정점의 값 + 간선의 키를 값으로 가진다</strong>.</li><li><strong>해시 테이블과 연결 리스트를 이용</strong>하여 구현할 수 있다.</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_11_2.png" alt="Data Structure_11_2"></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_11_3.png" alt="Data Structure_11_3"></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_11_4.png" alt="Data Structure_11_4"></p><hr><h1 id="2-구현"><a href="#2-구현" class="headerlink" title="2. 구현"></a>2. 구현</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value = <span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">children</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">  <span class="comment">// Trie를 생성하면 루트로 빈 노드를 생성</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 문자열을 추가하면 탐색을 위해서 루트부터 시작</span></span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">string</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line">    <span class="comment">// 문자열을 앞에서 부터 하나씩 자르면서 순회</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> char <span class="keyword">of</span> string) &#123;</span><br><span class="line">      <span class="comment">// 만약 현재 노드에서 자른 문자열을 간선으로 가지고 있지 않다면 새 노드를 추가</span></span><br><span class="line">      <span class="keyword">if</span> (!currentNode.<span class="property">children</span>.<span class="title function_">has</span>(char)) &#123;</span><br><span class="line">        currentNode.<span class="property">children</span>.<span class="title function_">set</span>(char, <span class="keyword">new</span> <span class="title class_">Node</span>(currentNode.<span class="property">value</span> + char));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 다음 정점으로 이동</span></span><br><span class="line">      currentNode = currentNode.<span class="property">children</span>.<span class="title function_">get</span>(char);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 문자열이 존재하는지 체크</span></span><br><span class="line">  <span class="title function_">has</span>(<span class="params">string</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> char <span class="keyword">of</span> string) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!currentNode.<span class="property">children</span>.<span class="title function_">has</span>(char)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      currentNode = currentNode.<span class="property">children</span>.<span class="title function_">get</span>(char);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> trie = <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">trie.<span class="title function_">insert</span>(<span class="string">&#x27;cat&#x27;</span>);</span><br><span class="line">trie.<span class="title function_">insert</span>(<span class="string">&#x27;can&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trie.<span class="title function_">has</span>(<span class="string">&#x27;cat&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trie.<span class="title function_">has</span>(<span class="string">&#x27;can&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(trie.<span class="title function_">has</span>(<span class="string">&#x27;cap&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-트라이-실습-자동완성"><a href="#2-트라이-실습-자동완성" class="headerlink" title="2. 트라이 실습 : 자동완성"></a>2. 트라이 실습 : 자동완성</h1><h2 id="2-1-문제"><a href="#2-1-문제" class="headerlink" title="2.1 문제"></a>2.1 문제</h2><p><strong>포털 다음에서 검색어 자동완성 기능</strong>을 넣고 싶은 라이언은 한 번 입력된 문자열을 학습해서 다음 입력 때 활용하고 싶어 졌다.<br>예를 들어, <code>go</code> 가 한 번 입력되었다면, 다음 사용자는 <code>g</code> 만 입력해도 <code>go</code>를 추천해주므로 <code>o</code>를 입력할 필요가 없어진다!<br>단, 학습에 사용된 단어들 중 앞부분이 같은 경우에는 어쩔 수 없이 다른 문자가 나올 때까지 입력을 해야 한다.<br>효과가 얼마나 좋을지 알고 싶은 라이언은 학습된 단어들을 찾을 때 몇 글자를 입력해야 하는지 궁금해졌다.</p><p>예를 들어, 학습된 단어들이 아래와 같을 때</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go</span><br><span class="line">gone</span><br><span class="line">guild</span><br></pre></td></tr></table></figure><ul><li><code>go</code>를 찾을 때 <code>go</code>를 모두 입력해야 한다.</li><li><code>gone</code>을 찾을 때 <code>gon</code> 까지 입력해야 한다.  (<code>gon</code>이 입력되기 전까지는 <code>go</code> 인지 <code>gone</code>인지 확신할 수 없다.)</li><li><code>guild</code>를 찾을 때는 <code>gu</code> 까지만 입력하면 <code>guild</code>가 완성된다.</li></ul><p>이 경우 총 입력해야 할 문자의 수는 <code>7</code>이다.</p><p>라이언을 도와 위와 같이 문자열이 입력으로 주어지면 학습을 시킨 후,<br>학습된 단어들을 순서대로 찾을 때 몇 개의 문자를 입력하면 되는지 계산하는 프로그램을 만들어보자.</p><p>[입력 형식]</p><p>학습과 검색에 사용될 중복 없는 단어 <code>N</code>개가 주어진다.<br> 모든 단어는 알파벳 소문자로 구성되며 단어의 수 <code>N</code>과 단어들의 길이의 총합 <code>L</code>의 범위는 다음과 같다.</p><ul><li>2 &lt;&#x3D; <code>N</code> &lt;&#x3D; 100,000</li><li>2 &lt;&#x3D; <code>L</code> &lt;&#x3D; 1,000,000</li></ul><p>[출력 형식]</p><p>단어를 찾을 때 입력해야 할 총 문자수를 리턴한다.</p><p>[입출력 예제]</p><table><thead><tr><th align="center">words</th><th align="center">result</th></tr></thead><tbody><tr><td align="center">[“go”,”gone”,”guild”]</td><td align="center">7</td></tr><tr><td align="center">[“abc”,”def”,”ghi”,”jklm”]</td><td align="center">4</td></tr><tr><td align="center">[“word”,”war”,”warrior”,”world”]</td><td align="center">15</td></tr></tbody></table><p>[입출력 설명]</p><ul><li>첫 번째 예제는 본문 설명과 같다.</li><li>두 번째 예제에서는 모든 단어들이 공통된 부분이 없으므로, 가장 앞글자만 입력하면 된다.</li><li>세 번째 예제는 총 15 자를 입력해야 하고 설명은 아래와 같다.<ul><li><code>word</code>는 <code>word</code>모두 입력해야 한다.</li><li><code>war</code>는 <code>war</code> 까지 모두 입력해야 한다.</li><li><code>warrior</code>는 <code>warr</code> 까지만 입력하면 된다.</li><li><code>world</code>는 <code>worl</code>까지 입력해야 한다. (<code>word</code>와 구분되어야 함을 명심하자)</li></ul></li></ul><hr><h2 id="2-2-풀이"><a href="#2-2-풀이" class="headerlink" title="2.2 풀이"></a>2.2 풀이</h2><h3 id="2-2-1-문제-유형"><a href="#2-2-1-문제-유형" class="headerlink" title="2.2.1 문제 유형"></a>2.2.1 문제 유형</h3><p>사실 문제 이름부터 <strong>자동완성이기 때문에 바로 Trie</strong>를 떠올릴 수 있습니다.  거기에 문제 내용까지 살펴보면 <strong>자동완성 기능이  되어야 최소 입력 글자를 알 수 있기에 이 문제에선 Trie가 가장 효율적인 자료구조</strong>라는 것을 알 수 있습니다.</p><hr><h3 id="2-2-2-풀이"><a href="#2-2-2-풀이" class="headerlink" title="2.2.2 풀이"></a>2.2.2 풀이</h3><p>Trie 구조를 만들면서 하위에 어떤 문자들이 있는지 미리 알아야 셀 수 있습니다. 예를 들어, <code>guild</code>를 찾을 때 <code>gu</code>만 입력해도 된다는 것을 알기 위해 Trie 구조에 해당 정보들을 넣어놔야 합니다.</p><p>다음과 같이 Trie 구조를 구성할 수 있습니다.</p><ol><li>“go”를 넣는다.</li><li>루트의 자식 노드로 “g”를 추가한다. 이때 “g” 노드에 단어가 추가되었음을 알리기 위해 카운팅을 해준다.<br>(“g”, 1)과 같은 형태로 상태를 저장한다.</li><li>“g”의 자식 노드로 “o”를 추가한다. 이때 “o” 노드에 단어가 추가되었음을 알리기 위해 카운팅을 해준다.<br>“o” 노드는 카운팅이 1이 된다.</li><li>“gone”을 넣는다.</li><li>루트의 자식 노드로 “g”를 추가한다. 이때 “g” 노드에 단어가 추가되었음을 알리기 위해 카운팅을 해준다.<br>“g” 노드는 카운팅이 2가 된다.</li><li>“g”의 자식 노드로 “o”를 추가한다. 이때 “o” 노드에 단어가 추가되었음을 알리기 위해 카운팅을 해준다.<br>“o” 노드는 카운팅이 2가 된다.</li><li>“o”의 자식 노드로 “n”을 추가한다. 이때 “n” 노드에 단어가 추가되었음을 알리기 위해 카운팅을 해준다.<br>“n” 노드는 카운팅이 1이 된다.</li><li>“n”의 자식 노드로 “e”을 추가한다. 이때 “e” 노드에 단어가 추가되었음을 알리기 위해 카운팅을 해준다.<br>“e” 노드는 카운팅이 1이 된다.</li><li>“guild”를 넣는다.</li><li>루트의 자식 노드로 “g”를 추가한다. 이때 “g” 노드에 단어가 추가되었음을 알리기 위해 카운팅을 해준다.<br>“g” 노드는 카운팅이 3가 된다.</li><li>“g”의 자식 노드로 “u”를 추가한다. 이때 “u” 노드에 단어가 추가되었음을 알리기 위해 카운팅을 해준다.<br>“u” 노드는 카운팅이 1이 된다.</li><li>“u”의 자식 노드로 “i”를 추가한다. 이때 “i” 노드에 단어가 추가되었음을 알리기 위해 카운팅을 해준다.<br>“i” 노드는 카운팅이 1이 된다.</li><li>“i”의 자식 노드로 “l”를 추가한다. 이때 “l” 노드에 단어가 추가되었음을 알리기 위해 카운팅을 해준다.<br>“l” 노드는 카운팅이 1이 된다.</li><li>“l”의 자식 노드로 “d”를 추가한다. 이때 “d” 노드에 단어가 추가되었음을 알리기 위해 카운팅을 해준다.<br>“d” 노드는 카운팅이 1이 된다.</li></ol><p>그럼 Trie 구조가 다음과 같이 구성됩니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    [3, &quot;g&quot;]</span><br><span class="line">      /  \</span><br><span class="line">[1, &quot;u&quot;] [2, &quot;o&quot;]</span><br><span class="line">   |        |</span><br><span class="line">[1, &quot;i&quot;] [1, &quot;n&quot;]</span><br><span class="line">   |        |</span><br><span class="line">[1, &quot;l&quot;] [1, &quot;e&quot;]</span><br><span class="line">   |</span><br><span class="line">[1, &quot;d&quot;]</span><br></pre></td></tr></table></figure><p>Trie 구조가 완성되었다면 이후 각 단어들을 찾으며 카운팅이 1이라면 이후 글자를 입력하지 않아도 된다는 것을 알 수 있기 때문에 그 지점에서 카운팅을 멈추면 됩니다.</p><hr><h3 id="2-2-3-전체-코드"><a href="#2-2-3-전체-코드" class="headerlink" title="2.2.3 전체 코드"></a>2.2.3 전체 코드</h3><p>위 알고리즘을 구현하면 다음과 같습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeTrie</span>(<span class="params">words</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> root = &#123;&#125;; <span class="comment">// 먼저 루트 노드를 설정할 변수를 만든다.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> word <span class="keyword">of</span> words) &#123; <span class="comment">// Trie를 구성하기 위한 루프를 돌린다.</span></span><br><span class="line">    <span class="keyword">let</span> current = root; <span class="comment">// 루프부터 시작</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> letter <span class="keyword">of</span> word) &#123; <span class="comment">// 단어의 글자를 하나씩 춫출한 후</span></span><br><span class="line">      <span class="comment">// 값을 넣는다. 리스트의 첫 번째 값은 학습된 단어가 몇 개인지를 카운팅하고 </span></span><br><span class="line">      <span class="comment">// 두 번째 값은 트리 구조로 이용할 노드 값으로 사용한다.</span></span><br><span class="line">      <span class="keyword">if</span> (!current[letter]) current[letter] = [<span class="number">0</span>, &#123;&#125;];</span><br><span class="line">      current[letter][<span class="number">0</span>] = <span class="number">1</span> + (current[letter][<span class="number">0</span>] || <span class="number">0</span>); <span class="comment">// 카운팅을 위해 1 더해준다.</span></span><br><span class="line">      current = current[letter][<span class="number">1</span>]; <span class="comment">// current는 letter에 해당되는 노드로 이동한다.</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> root; <span class="comment">// 반환</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">words</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> trie = <span class="title function_">makeTrie</span>(words); <span class="comment">// Trie 자료구조를 만들어준다.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> word <span class="keyword">of</span> words) &#123; <span class="comment">// 입력받은 수 만큼 루프</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>; <span class="comment">// 카운팅을 위한 변수</span></span><br><span class="line">    <span class="keyword">let</span> current = trie; <span class="comment">// 루트부터 시작</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [index, letter] <span class="keyword">of</span> [...word].<span class="title function_">entries</span>()) &#123;</span><br><span class="line">      count += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (current[letter][<span class="number">0</span>] &lt;= <span class="number">1</span>) &#123; <span class="comment">// 단어가 하나 이하로 남을 경우 종료</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      current = current[letter][<span class="number">1</span>]; <span class="comment">// 다음 노드로 이동</span></span><br><span class="line">    &#125;</span><br><span class="line">    answer += count; <span class="comment">// 카운팅을 더해준다</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> answer; <span class="comment">// 반환</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS-자료구조-알고리즘 </category>
          
          <category> JS-자료구조-알고리즘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS-자료구조-알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-JS-DataAlgo-10-힙 (Heap)</title>
      <link href="/2023/01/11/CS-JS-DataAlgo-10/"/>
      <url>/2023/01/11/CS-JS-DataAlgo-10/</url>
      
        <content type="html"><![CDATA[<h1 id="1-우선순위-큐"><a href="#1-우선순위-큐" class="headerlink" title="1. 우선순위 큐"></a>1. 우선순위 큐</h1><ul><li>FIFO인 큐와 달리 <strong>우선 순위가 높은 요소가 먼저 나가는 큐</strong></li><li>우선순위 큐는 <strong>자료구조가 아닌 개념</strong>이다.</li><li>e.g. 줄서기 중에 VIP 고객은 먼저 입장</li></ul><hr><h1 id="2-힙-Heap"><a href="#2-힙-Heap" class="headerlink" title="2. 힙(Heap)"></a>2. 힙(Heap)</h1><ul><li><p>힙은 우선순위 큐를 구현하기 위한 가장 적합한 자료구조입니다.</p></li><li><p><strong>이진 트리 형태</strong>를 가지며, </p><ul><li><strong>우선순위가 높은 요소가 먼저 나가기 위해 요소가 삽입, 삭제될 때 바로 정렬</strong>되는 특징이 있다.</li></ul></li><li><p><code>우선순위 큐 != 힙</code></p></li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_10_1.png" alt="Data Structure_10_1"></p><hr><h2 id="1-1-힙의-특징"><a href="#1-1-힙의-특징" class="headerlink" title="1.1 힙의 특징"></a>1.1 힙의 특징</h2><ul><li><strong>우선순위가 높은 요소가 먼저 나가는 특징</strong>을 가진다.</li><li><strong>루트가 가장 큰 값</strong>이 되는 <code>최대 힙(Max Heap)</code>과 <strong>루트가 가장 작은 값</strong>이 되는 <code>최소 힙(Min Heap)</code>이 있다.</li><li>즉, <strong>빠른 시간 안에 최대값 또는 최소값을 찾아낼 수 있다</strong>.</li><li>주로 배열을 이용해 힙 구조를 구현할 수 있는데, 다른 언어의 경우 Heap 구조 자체를 라비르러리로 기본 제공한다.</li><li>아쉽게도 JavaScript에선 직접 구현해서 사용해야 한다.</li><li>물론 코딩테스트 영역 밖이라면 JS 역시 외부 라이브러리를 통해 heap을 사용할 수 있다.</li></ul><hr><h2 id="1-2-Heap-요소-추가"><a href="#1-2-Heap-요소-추가" class="headerlink" title="1.2 Heap 요소 추가"></a>1.2 Heap 요소 추가</h2><ul><li><strong>요소가 추가될 떄는 트리의 가장 마지막에 정점에 위치</strong>한다. - push()</li><li><strong>추가 후 부모 정점보다 우선순위가 높다면 부모 정점과 순서를 바꾼다</strong>. - swap()</li><li><strong>이 과정을 반복</strong>하면 결국 <strong>가장 우선순위가 높은 정점이 루트</strong>가 된다. - heapifyUp()</li><li>완전 이진 트리의 높이는 $log\ N$이기에 힙의 요소 추가 알고리즘은 $O(log\ n)$시간복잡도를 가진다.</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_10_2.png" alt="Data Structure_10_2"></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_10_3.png" alt="Data Structure_10_3"></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_10_4.png" alt="Data Structure_10_4"></p><hr><h2 id="1-3-Heap-요소-제거"><a href="#1-3-Heap-요소-제거" class="headerlink" title="1.3 Heap 요소 제거"></a>1.3 Heap 요소 제거</h2><ul><li><strong>요소 제거는 루트 정점만 가능</strong>하다.</li><li><strong>루트 정점이 제거된 후 가장 마지막 정점이 루트에 위치</strong>한다.</li><li><strong>루트 정점의 두 자식 정점 중 더 우선순위가 높은 정점과 바꾼다</strong>.</li><li><strong>두 자식 정점이 우선순위가 더 낮을 때까지 반복</strong>한다.</li><li>완전 이진 트리의 높이는 $log\ N$이기에 힙의 요소 제거 알고리즘은 $O(log\ n)$시간복잡도를 가진다.</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_10_5.png" alt="Data Structure_10_5"></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_10_6.png" alt="Data Structure_10_6"></p><hr><h1 id="2-구현"><a href="#2-구현" class="headerlink" title="2. 구현"></a>2. 구현</h1><p>그렇다면 배열을 이용해 어떻게 힙을 구현할 수 있을까? 알고리즘 문제에서 배열의 첫번째 값은 비워두는 경우가 종종 있다.<br>이는  배열의 첫번째 요소가 가지는 index는 0이기 때문에 ‘1번째’ 라는 말과 인지부조화가 생기기에 계산의 편의성을 위해 그러한  경향을 띄는 편이다. 물론 이러한 부조화에 익숙하다면 굳이 처음을 비워둘 필요는 없지만, 해당 포스팅에서도 역시 계산의 편의성을  위해 첫 배열의 값은 비워두고 시작한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Heap</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heap</span> = [ <span class="literal">null</span> ];<span class="comment">// 첫 원소는 사용 X</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>배열의 첫 원소는 사용하지 않으므로 부모와 자식 간 다음의 관계가 성립한다.<br>완전 이진 트리의 일종이기 때문에 Binaray Search tree에서의 부모-자식 간 관계와 유사하다.</p><ul><li>왼쪽 자식의 index &#x3D; <code>부모 index * 2</code></li><li>오른쪽 자식의 index &#x3D; <code>(부모 index * 2) + 1</code></li><li>부모의 index &#x3D; <code>Math.floor(자식의 인덱스 / 2)</code>;</li></ul><hr><h2 id="2-1-힙-요소-추가"><a href="#2-1-힙-요소-추가" class="headerlink" title="2.1 힙 요소 추가"></a>2.1 힙 요소 추가</h2><p>삽입 역시 비슷하다. 일단 마지막 노드에 들어온 값을 push하여 삽입한다.<br>이때 재귀적이든 반복문을 돌리든 부모노드를 확인하면서,<br>들어온 값이 부모노드보다 작은지 큰지를 구분하여 위치를 교환을 계속 실행해주며 정렬해준다.<br><strong>최대힙</strong>으로 구현할 때의 삽입과정을 살펴보자.</p><blockquote><p><strong>최소힙</strong>이라면 반대의 계산결과로 적용해주면 된다! </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MaxHeap</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heap</span> = [<span class="literal">null</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 힙 요쇼 추가</span></span><br><span class="line">  <span class="title function_">push</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heap</span>.<span class="title function_">push</span>(value);</span><br><span class="line">    <span class="keyword">let</span> currentIndex = <span class="variable language_">this</span>.<span class="property">heap</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> parentIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(currentIndex / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (parentIndex !== <span class="number">0</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">heap</span>[parentIndex] &lt; value) &#123;</span><br><span class="line">      <span class="keyword">const</span> temp = <span class="variable language_">this</span>.<span class="property">heap</span>[parentIndex];</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">heap</span>[parentIndex] = value;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">heap</span>[currentIndex] = temp;</span><br><span class="line"></span><br><span class="line">      currentIndex = parentIndex;</span><br><span class="line">      parentIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(currentIndex / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heap = <span class="keyword">new</span> <span class="title class_">MaxHeap</span>();</span><br><span class="line">heap.<span class="title function_">push</span>(<span class="number">45</span>);</span><br><span class="line">heap.<span class="title function_">push</span>(<span class="number">36</span>);</span><br><span class="line">heap.<span class="title function_">push</span>(<span class="number">54</span>);</span><br><span class="line">heap.<span class="title function_">push</span>(<span class="number">27</span>);</span><br><span class="line">heap.<span class="title function_">push</span>(<span class="number">63</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(heap.<span class="property">heap</span>); <span class="comment">// [ null, 63, 54, 45, 27, 36 ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-2-힙-요소-제거"><a href="#2-2-힙-요소-제거" class="headerlink" title="2.2 힙 요소 제거"></a>2.2 힙 요소 제거</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MaxHeap</span> &#123;</span><br><span class="line">  <span class="comment">// ... </span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 힙 요소 제거</span></span><br><span class="line">  <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> returnValue = <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="number">1</span>] = <span class="variable language_">this</span>.<span class="property">heap</span>.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> currentIndex = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> leftIndex = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> rightIndex = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">heap</span>[currentIndex] &lt; <span class="variable language_">this</span>.<span class="property">heap</span>[leftIndex] || <span class="variable language_">this</span>.<span class="property">heap</span>[currentIndex] &lt; <span class="variable language_">this</span>.<span class="property">heap</span>[rightIndex]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">heap</span>[leftIndex] &lt; <span class="variable language_">this</span>.<span class="property">heap</span>[rightIndex]) &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = <span class="variable language_">this</span>.<span class="property">heap</span>[currentIndex];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">heap</span>[currentIndex] = <span class="variable language_">this</span>.<span class="property">heap</span>[rightIndex];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">heap</span>[rightIndex] = temp;</span><br><span class="line">        currentIndex = rightIndex;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = <span class="variable language_">this</span>.<span class="property">heap</span>[currentIndex];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">heap</span>[currentIndex] = <span class="variable language_">this</span>.<span class="property">heap</span>[leftIndex];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">heap</span>[leftIndex] = temp;</span><br><span class="line">        currentIndex = leftIndex;</span><br><span class="line">      &#125;</span><br><span class="line">      leftIndex = currentIndex * <span class="number">2</span>;</span><br><span class="line">      rightIndex = currentIndex * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> returnValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heap = <span class="keyword">new</span> <span class="title class_">MaxHeap</span>();</span><br><span class="line">heap.<span class="title function_">push</span>(<span class="number">45</span>);</span><br><span class="line">heap.<span class="title function_">push</span>(<span class="number">36</span>);</span><br><span class="line">heap.<span class="title function_">push</span>(<span class="number">54</span>);</span><br><span class="line">heap.<span class="title function_">push</span>(<span class="number">27</span>);</span><br><span class="line">heap.<span class="title function_">push</span>(<span class="number">63</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(heap.<span class="property">heap</span>); <span class="comment">// [ null, 63, 54, 45, 27, 36 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [];</span><br><span class="line">array.<span class="title function_">push</span>(heap.<span class="title function_">pop</span>()); <span class="comment">// 63</span></span><br><span class="line">array.<span class="title function_">push</span>(heap.<span class="title function_">pop</span>()); <span class="comment">// 54</span></span><br><span class="line">array.<span class="title function_">push</span>(heap.<span class="title function_">pop</span>()); <span class="comment">// 45</span></span><br><span class="line">array.<span class="title function_">push</span>(heap.<span class="title function_">pop</span>()); <span class="comment">// 36</span></span><br><span class="line">array.<span class="title function_">push</span>(heap.<span class="title function_">pop</span>()); <span class="comment">// 27</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [ 63, 54, 45, 36, 27 ]</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-힙-실습-배상-비용-최소화❌"><a href="#3-힙-실습-배상-비용-최소화❌" class="headerlink" title="3. 힙 실습 : 배상 비용 최소화❌"></a>3. 힙 실습 : 배상 비용 최소화❌</h1><h2 id="3-1-문제"><a href="#3-1-문제" class="headerlink" title="3.1 문제"></a>3.1 문제</h2><p>OO 조선소에서 태풍으로 인한 <strong>작업지연으로 수주한 선박들을 기한 내에 완성하지 못할 것이 예상</strong>됩니다.<br>기한 내에 완성하지 못하면 손해 배상을 해야 하므로 <strong>남은 일의 작업량을 숫자로 매기고 배상비용을 최소화하는 방법</strong>을 찾으려고 합니다.</p><blockquote><p>배상 비용은 <strong>각 선박의 완성까지 남은 일의 작업량을 제곱하여 모두 더한 값</strong>이 됩니다.</p></blockquote><p>조선소에서는 <strong>1시간 동안 남은 일 중 하나를 골라 작업량 1만큼 처리</strong>할 수 있습니다.<br><strong>조선소에서 작업할 수 있는 N 시간</strong>과 **각 일에 대한 작업량이 담긴 배열(works)**이 있을 때,<br>배상 비용을 최소화한 결과를 반환하는 함수를 만들어 주세요.</p><p>예를 들어,  N&#x3D;4일 때, 선박별로 남은 일의 작업량이 <code>works = [4, 3, 3]</code>이라면,<br>배상 비용을 최소화하기 위해 일을 한 결과는  [2, 2, 2]가 되고 배상 비용은 $2^2 + 2^2 + 2^2 &#x3D; 12$가 되어 12를 반환해 줍니다.</p><p>[제한사항]</p><ul><li>일할 수 있는 시간 N : 1,000,000 이하의 자연수</li><li>배열 works의 크기 : 1,000 이하의 자연수</li><li>각 일에 대한 작업량 : 1,000 이하의 자연수</li></ul><p>[입출력 예]</p><table><thead><tr><th align="center">N</th><th align="center">works</th><th align="center">result</th></tr></thead><tbody><tr><td align="center">4</td><td align="center">[4,3,3]</td><td align="center">12</td></tr><tr><td align="center">2</td><td align="center">[3,3,3]</td><td align="center">17</td></tr></tbody></table><p>[입출력 예 설명]</p><p>입출력 예 #1<br>문제의 예제와 같습니다.</p><p>입출력 예 #2<br>배상 비용을 최소화하기 위해 일을 한 결과는 [2, 2, 3]가 되고 배상 비용은 22 + 22 + 32 &#x3D; 17가 되어 17를 반환해 줍니다.</p><hr><h2 id="3-2-풀이"><a href="#3-2-풀이" class="headerlink" title="3.2 풀이"></a>3.2 풀이</h2><h3 id="3-2-1-문제-유형-파악하기"><a href="#3-2-1-문제-유형-파악하기" class="headerlink" title="3.2.1 문제 유형 파악하기"></a>3.2.1 문제 유형 파악하기</h3><p>문제 설명 중 핵심 부분은 역시 <strong>배상 비용을 계산하는 부분</strong>입니다.<br>배상 비용은 <strong>각 요소를 제곱하게 되므로 최대한 각 요소를 골고루 처리하는 것이 가장 배상 비용을 최소화</strong>할 수 있는 방법입니다.</p><p>그러기 위해서는 <strong>매 루프마다 가장 큰 작업을 찾아서 처리</strong>해야 합니다. 이때 가장 큰 작업을 찾기 위한 방법은 3가지가 있습니다.</p><ol><li>매 루프마다 <code>Math.max</code> 함수를 호출한다.</li><li>매 루프마다 정렬한다.</li><li>Heap을 이용한다.</li></ol><p>1번은 매 루프마다 O(n) 시간복잡도가 소요됩니다. 2번은 O(n log n)이 소요됩니다. 반면 <strong>Heap을 이용하면 O(log n)만이 소요</strong>됩니다.<br>사실 <strong>매번 큰 값 혹은 작은 값을 알아야 한다면 무조건 Heap을 사용</strong>하는 것이 좋습니다.<br>이제 문제 유형을 파악했으니 한 번 풀어보겠습니다.</p><hr><h3 id="3-2-2-최대-힙-구현"><a href="#3-2-2-최대-힙-구현" class="headerlink" title="3.2.2 최대 힙 구현"></a>3.2.2 최대 힙 구현</h3><p>가장 큰 값을 알기 위해선 최대 힙을 구현해야 합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MaxHeap</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heap</span> = [<span class="literal">null</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">push</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heap</span>.<span class="title function_">push</span>(value);</span><br><span class="line">    <span class="keyword">let</span> currentIndex = <span class="variable language_">this</span>.<span class="property">heap</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> parentIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(currentIndex / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (parentIndex !== <span class="number">0</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">heap</span>[parentIndex] &lt; value) &#123;</span><br><span class="line">      <span class="keyword">const</span> temp = <span class="variable language_">this</span>.<span class="property">heap</span>[parentIndex];</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">heap</span>[parentIndex] = value;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">heap</span>[currentIndex] = temp;</span><br><span class="line"></span><br><span class="line">      currentIndex = parentIndex;</span><br><span class="line">      parentIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(currentIndex / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">heap</span>.<span class="property">length</span> === <span class="number">2</span>) <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">heap</span>.<span class="title function_">pop</span>(); <span class="comment">// 루트 정점만 남은 경우</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> returnValue = <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heap</span>[<span class="number">1</span>] = <span class="variable language_">this</span>.<span class="property">heap</span>.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> currentIndex = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> leftIndex = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> rightIndex = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">heap</span>[currentIndex] &lt; <span class="variable language_">this</span>.<span class="property">heap</span>[leftIndex] || <span class="variable language_">this</span>.<span class="property">heap</span>[currentIndex] &lt; <span class="variable language_">this</span>.<span class="property">heap</span>[rightIndex]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">heap</span>[leftIndex] &lt; <span class="variable language_">this</span>.<span class="property">heap</span>[rightIndex]) &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = <span class="variable language_">this</span>.<span class="property">heap</span>[currentIndex];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">heap</span>[currentIndex] = <span class="variable language_">this</span>.<span class="property">heap</span>[rightIndex];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">heap</span>[rightIndex] = temp;</span><br><span class="line">        currentIndex = rightIndex;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = <span class="variable language_">this</span>.<span class="property">heap</span>[currentIndex];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">heap</span>[currentIndex] = <span class="variable language_">this</span>.<span class="property">heap</span>[leftIndex];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">heap</span>[leftIndex] = temp;</span><br><span class="line">        currentIndex = leftIndex;</span><br><span class="line">      &#125;</span><br><span class="line">      leftIndex = currentIndex * <span class="number">2</span>;</span><br><span class="line">      rightIndex = currentIndex * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> returnValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-2-3-solution-함수-구현"><a href="#3-2-3-solution-함수-구현" class="headerlink" title="3.2.3 solution 함수 구현"></a>3.2.3 solution 함수 구현</h3><p>빠른 성능으로 통과됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">no, works</span>) &#123;</span><br><span class="line">  <span class="comment">// 모든 작업의 합보다 no가 크면 배상 비용을 낼 필요가 없다.</span></span><br><span class="line">  <span class="keyword">if</span> (works.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b) &lt;= no) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// max heap 구성</span></span><br><span class="line">  <span class="keyword">const</span> heap = <span class="keyword">new</span> <span class="title class_">MaxHeap</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> work <span class="keyword">of</span> works) &#123;</span><br><span class="line">    heap.<span class="title function_">push</span>(work);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// no만큼 루프 돌면서 가장 큰 값을 빼서 처리 후 다시 push</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; no; i += <span class="number">1</span>) &#123;</span><br><span class="line">    heap.<span class="title function_">push</span>(heap.<span class="title function_">pop</span>() - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 남은 요소에 제곱한 값들의 합을 구한 후 반환</span></span><br><span class="line">  <span class="keyword">return</span> heap.<span class="property">heap</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b * b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS-자료구조-알고리즘 </category>
          
          <category> JS-자료구조-알고리즘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS-자료구조-알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-JS-DataAlgo-09-트리 (Tree)</title>
      <link href="/2023/01/11/CS-JS-DataAlgo-09/"/>
      <url>/2023/01/11/CS-JS-DataAlgo-09/</url>
      
        <content type="html"><![CDATA[<h1 id="1-트리-Tree"><a href="#1-트리-Tree" class="headerlink" title="1. 트리(Tree)"></a>1. 트리(Tree)</h1><ul><li><strong>방향 그래프의 일종</strong>으로 <strong>정점을 가리키는 간선이 하나 밖에 없는 구조</strong>를 가지고 있다.<ul><li>e.g. 디렉토리(폴더) 구조</li><li>e.g. 회사 조직도</li></ul></li></ul><hr><h2 id="1-1-트리-용어"><a href="#1-1-트리-용어" class="headerlink" title="1.1 트리 용어"></a>1.1 트리 용어</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_9_1.webp" alt="Data Structure_9_1"></p><ul><li><code>Node</code> : 트리의 구성요소, 트리 구조를 이루는 <strong>모든 개별 데이터</strong><ul><li>부모 노드(Parent node), 자식 노드(Child node)</li></ul></li><li><code>Root</code> : 트리의 최상위 Node</li><li><code>리프(Leaf)</code> : 트리 구조의 끝지점이고, 자식 노드가 없는 노드</li><li><code>깊이 (depth)</code> : 루트로부터 하위 계층의 특정 노드까지의 깊이(depth)를 표현</li><li><code>레벨(Level)</code> : <strong>트리 구조</strong>에서 <strong>같은 깊이</strong>를 가지고 있는 **노드를 묶어서 레벨(level)**로 표현</li><li><code>Leaf Node</code> : 트리의 깊이 단계</li><li><code>Sub tree</code> : 트리 구조에서 root에서 뻗어나오는 큰 트리의 내부에, 트리 구조를 갖춘 작은 트리</li></ul><hr><h2 id="1-2-트리의-특징"><a href="#1-2-트리의-특징" class="headerlink" title="1.2 트리의 특징"></a>1.2 트리의 특징</h2><ul><li>루트 정점을 제외한 <strong>모든 정점은 하나의 부모 정점을 가진다.</strong></li><li>정점이 N개인 트리는 반드시 N-1개의 간선을 가진다.</li><li>루트에서 <strong>특정 정점으로 가는 경로는 유일</strong>하다.</li></ul><hr><h2 id="1-3-트리의-구현-방법"><a href="#1-3-트리의-구현-방법" class="headerlink" title="1.3 트리의 구현 방법"></a>1.3 트리의 구현 방법</h2><p>그래프와 마찬가지로 인접 행렬, 인접 리스트 두 가지 방식으로 트리를 표현할 수 있다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_9_2.png" alt="Data Structure_9_2"></p><hr><h1 id="2-이진-트리"><a href="#2-이진-트리" class="headerlink" title="2. 이진 트리"></a>2. 이진 트리</h1><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_9_3.png" alt="Data Structure_9_3"></p><ul><li><strong>이진 트리</strong>는 <strong>각 정점이 최대 2개의 자식을 가지는 트리</strong>를 의미한다.</li><li><strong>완전 이진 트리</strong>는 <strong>마지막 레벨을 제외하고 모든 정점이 채워진 트리</strong>를 의미한다.</li><li><strong>포화 이진 트</strong>리는 <strong>마지막 레벨까지 모든 정점이 채워진 트리</strong>를 의미한다.</li><li><strong>편향 트리</strong>는 <strong>한 방향으로만 정점이 이어지는 트리</strong>를 의미한다.</li></ul><hr><h2 id="2-1-이진-트리의-특징"><a href="#2-1-이진-트리의-특징" class="headerlink" title="2.1 이진 트리의 특징"></a>2.1 이진 트리의 특징</h2><ul><li>정점이 N개인 이진 트리는 최악의 경우 높이가 N이 될 수 있다.</li><li>정점이 N개인 포화 또는 완전 이진트리의 높이는 $log\ N$이다.</li><li>높이가 h인 포화 이진 트리는 $2^h -1$개의 정점을 갖는다.</li><li><strong>일반적인 이진 트리를 사용하는 경우는 많지 않다</strong>. 다음 자료구조에 응용된다.<ul><li>이진 탐색 트리</li><li>힙</li><li>AVL 트리</li><li>레드 블랙 트리</li></ul></li></ul><hr><h2 id="2-2-이진-트리의-구현-방법"><a href="#2-2-이진-트리의-구현-방법" class="headerlink" title="2.2 이진 트리의 구현 방법"></a>2.2 이진 트리의 구현 방법</h2><p><strong>배열</strong> 혹은 <strong>요소에 링크가 2개 존재하는 연결 리스트</strong>로 구현할 수 있다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_9_4.png" alt="Data Structure_9_4"></p><hr><h2 id="2-3-이진-트리의-순회"><a href="#2-3-이진-트리의-순회" class="headerlink" title="2.3 이진 트리의 순회"></a>2.3 이진 트리의 순회</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_9_5.PNG" alt="Data Structure_9_5"></p><ul><li><code>전위 순회(Preorder Traversal)</code>: (루트) -&gt; 왼쪽 서브트리 -&gt; 오른쪽 서브트리</li><li><code>중위 순회(Inorder Traversal)</code>: 왼쪽 서브트리 -&gt; (루트) -&gt; 오른쪽 서브트리</li><li><code>후위 순회(Postorder Traversal)</code>: 왼쪽 서브트리 -&gt; 오른쪽 서브트리 -&gt; (루트)</li></ul><hr><h1 id="2-구현"><a href="#2-구현" class="headerlink" title="2. 구현"></a>2. 구현</h1><h2 id="2-1-이진-트리-Array"><a href="#2-1-이진-트리-Array" class="headerlink" title="2.1 이진 트리(Array)"></a>2.1 이진 트리(Array)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0번 인덱스는 편의를 위해 비워둔다.</span></span><br><span class="line"><span class="comment">// Left 정점 = Index * 2</span></span><br><span class="line"><span class="comment">// Right 정점 = Index * 2 + 1</span></span><br><span class="line"><span class="comment">// Parent 정점 = floor(Index / 2)</span></span><br><span class="line"><span class="keyword">const</span> tree = [</span><br><span class="line">  <span class="literal">undefined</span>,</span><br><span class="line">  <span class="comment">// 1</span></span><br><span class="line">  <span class="number">9</span>,</span><br><span class="line">  <span class="comment">// 1*2, 1*2+1</span></span><br><span class="line">  <span class="number">3</span>, <span class="number">8</span>,</span><br><span class="line">  <span class="comment">// 2*2, 2*2+1, 3*2, 3*2+1</span></span><br><span class="line">  <span class="number">2</span>, <span class="number">5</span>, <span class="literal">undefined</span>, <span class="number">7</span>,</span><br><span class="line">  <span class="comment">// 4*2, 4*2+1, 5*2, 5*2+1</span></span><br><span class="line">  <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="number">4</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-이진-트리-Linked-List"><a href="#2-2-이진-트리-Linked-List" class="headerlink" title="2.2 이진 트리(Linked List)"></a>2.2 이진 트리(Linked List)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = node;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Level Order</span></span><br><span class="line">    <span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>();</span><br><span class="line">    queue.<span class="title function_">enqueue</span>(<span class="variable language_">this</span>.<span class="property">root</span>);</span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="property">size</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> currentNode = queue.<span class="title function_">dequeue</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(currentNode.<span class="property">value</span>);</span><br><span class="line">      <span class="keyword">if</span> (currentNode.<span class="property">left</span>) queue.<span class="title function_">enqueue</span>(currentNode.<span class="property">left</span>);</span><br><span class="line">      <span class="keyword">if</span> (currentNode.<span class="property">right</span>) queue.<span class="title function_">enqueue</span>(currentNode.<span class="property">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tree = <span class="keyword">new</span> <span class="title class_">Tree</span>(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">9</span>));</span><br><span class="line">tree.<span class="property">root</span>.<span class="property">left</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">3</span>);</span><br><span class="line">tree.<span class="property">root</span>.<span class="property">right</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">8</span>);</span><br><span class="line">tree.<span class="property">root</span>.<span class="property">left</span>.<span class="property">left</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>);</span><br><span class="line">tree.<span class="property">root</span>.<span class="property">left</span>.<span class="property">right</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">5</span>);</span><br><span class="line">tree.<span class="property">root</span>.<span class="property">right</span>.<span class="property">right</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">7</span>);</span><br><span class="line">tree.<span class="property">root</span>.<span class="property">left</span>.<span class="property">right</span>.<span class="property">right</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li><a href="https://hanamon.kr/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-tree-%ED%8A%B8%EB%A6%AC/">https://hanamon.kr/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-tree-%ED%8A%B8%EB%A6%AC/</a></li><li><a href="https://laboputer.github.io/ps/2017/09/27/tree/">https://laboputer.github.io/ps/2017/09/27/tree/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CS-자료구조-알고리즘 </category>
          
          <category> JS-자료구조-알고리즘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS-자료구조-알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-JS-DataAlgo-08-그래프 (Graph)</title>
      <link href="/2023/01/11/CS-JS-DataAlgo-08/"/>
      <url>/2023/01/11/CS-JS-DataAlgo-08/</url>
      
        <content type="html"><![CDATA[<h1 id="1-그래프-Graph"><a href="#1-그래프-Graph" class="headerlink" title="1. 그래프(Graph)"></a>1. 그래프(Graph)</h1><ul><li>**정점(Node)**과 **정점 사이를 연결하는 간선(Edge)**으로 이루어진 비선형 자료구조</li><li>정점 집합과 간선 집합으로 표현할 수 있다.<ul><li>e.g. 실생활에서 인물 관계도</li><li>e.g. 지하철 노선도</li><li>e.g. 구글의 페이지 랭크 알고리즘</li></ul></li></ul><hr><h2 id="1-1-그래프의-특징"><a href="#1-1-그래프의-특징" class="headerlink" title="1.1 그래프의 특징"></a>1.1 그래프의 특징</h2><ul><li><strong>정점(Node)은 여러 개의 간선</strong>을 가질 수 있다.</li><li>크게 <code>방향 그래프</code>와 <code>무방향 그래프</code>로 나눌 수 있다.</li><li><strong>간선은 가중치를 가질 수 있다.</strong></li><li>사이클이 발생할 수 있다.</li></ul><hr><h2 id="1-2-그래프-종류"><a href="#1-2-그래프-종류" class="headerlink" title="1.2 그래프 종류"></a>1.2 그래프 종류</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_8_1.PNG" alt="Data Structure_8_1"></p><p>그래프 종류는 간선의 방향, 싸이클 유무에 따라서 나뉠수 있다.</p><p>간선 방향에 따른 그래프 종류:</p><ul><li>무방향 그래프</li><li>방향 그래프</li><li>양방향 그래프 (사실상 무방향 그래프 &#x3D; 양방향 그래프)</li></ul><p>싸이클 유무에 따른 그래프 종류:</p><ul><li>순환 그래프, 비순환 그래프</li></ul><p>방향과 싸이클이 합해지면 다음과 같은 그래프가 나올수 있다.</p><ul><li>방향성 비순환 그래프(DAG, Directed Acyclic Graph)</li><li>DAG의 실생활 예 - VCS(Version Control System), Cryptocurrency</li></ul><hr><h3 id="1-2-1-무방향-그래프"><a href="#1-2-1-무방향-그래프" class="headerlink" title="1.2.1 무방향 그래프"></a>1.2.1 무방향 그래프</h3><ul><li><strong>간선으로 이어진 정점끼리는 양방향으로 이동이 가능</strong>하다.</li><li>표현하기에 <strong>(A, B)와 (B, A)는 같은 간선으로 취급</strong>된다.</li><li>e.g. 양방향 통행 도로</li></ul><hr><h3 id="1-2-2-방향-그래프"><a href="#1-2-2-방향-그래프" class="headerlink" title="1.2.2 방향 그래프"></a>1.2.2 방향 그래프</h3><ul><li><strong>간선에 방향성이 존재</strong>하는 그래프</li><li>양방향으로 갈 수 있더라도 <strong>&lt;A, B&gt;와 &lt;B, A&gt;는 다른 간선으로 취급</strong>된다.</li><li>e.g. 일반 통행</li></ul><hr><h3 id="1-2-3-연결-그래프"><a href="#1-2-3-연결-그래프" class="headerlink" title="1.2.3 연결 그래프"></a>1.2.3 연결 그래프</h3><p><strong>모든 정점이 서로 이동 가능한 상태</strong>인 그래프</p><hr><h3 id="1-2-4-비연결-그래프"><a href="#1-2-4-비연결-그래프" class="headerlink" title="1.2.4 비연결 그래프"></a>1.2.4 비연결 그래프</h3><ul><li><strong>특정 정점쌍 사이에 간선이 존재하지 않는</strong> 그래프</li><li>e.g. 친한 친구 설문 그래프</li></ul><hr><h3 id="1-2-5-완전-그래프"><a href="#1-2-5-완전-그래프" class="headerlink" title="1.2.5 완전 그래프"></a>1.2.5 완전 그래프</h3><p><strong>모든 정점끼리 연결된 상태</strong>인 그래프</p><hr><h3 id="1-2-6-사이클"><a href="#1-2-6-사이클" class="headerlink" title="1.2.6 사이클"></a>1.2.6 사이클</h3><p><strong>그래프의 정점과 간선의 부분 집합에서 순환이 되는 부분</strong></p><hr><h2 id="1-8-그래프의-구현-방법"><a href="#1-8-그래프의-구현-방법" class="headerlink" title="1.8 그래프의 구현 방법"></a>1.8 그래프의 구현 방법</h2><p>코드로 그래프를 나타내는 방법은 인접 행렬, 인접 리스트 두 가지 방식이 있습니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_8_2.PNG" alt="Data Structure_8_2"></p><ul><li><p><code>인접 행렬</code> : <strong>2차원 배열로 표현</strong>이 가능하다.</p><ul><li>정점 간의 간선의 존재 여부를 1 또는 0로 표현</li><li>항상 노드 개수의 제곱만큼 메모리($V^2$)가 필요한데, 간선이 매우 적으면 비효율적</li><li>탐색을 할 때도 연결되지 않은 간선들도 확인해야 되기 때문에 느림</li></ul></li><li><p><code>인접 리스트</code> : <strong>연결 리스트로 구현</strong> 가능하다.</p><ul><li>정점 개수만큼 리스트를 만들어 각각의 정점 리스트에 간선 추가</li><li>메모리도 조금만 사용($V+E$)하며 탐색할 때도 연결된 간선만 보면 되기 때문에 빠름</li></ul></li></ul><table><thead><tr><th align="center"></th><th align="center">인접 행렬</th><th align="center">인접 리스트</th></tr></thead><tbody><tr><td align="center"></td><td align="center">밀집 그래프를 사용</td><td align="center">희소 그래프를 사용</td></tr><tr><td align="center">시간 복잡도</td><td align="center">$O(v^2)$</td><td align="center">$O(V + E) &#x3D; O(max(V, E))$</td></tr></tbody></table><ul><li>그래프에서 간선 개수가 많은 그래프를 <code>밀집(Dense) 그래프</code>라고 한다.</li><li>간선 개수가 많지 않은 그래프는 <code>희소(Sparse) 그래프</code>라고 한다.</li></ul><p>그래프도 상황에 따라 배열과 리스트 중 무엇으로 구현할 지 선택해야 합니다.</p><hr><h1 id="2-구현"><a href="#2-구현" class="headerlink" title="2. 구현"></a>2. 구현</h1><h2 id="2-1-인접-행렬"><a href="#2-1-인접-행렬" class="headerlink" title="2.1 인접 행렬"></a>2.1 인접 행렬</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 정점의 크기만큼 2차원 배열을 만들고, 연결이 안된 상태로 초기화</span></span><br><span class="line"><span class="keyword">const</span> graph = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">5</span>), <span class="function">() =&gt;</span> <span class="title class_">Array</span>(<span class="number">5</span>).<span class="title function_">fill</span>(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 열 부분을 시작 정점</span></span><br><span class="line"><span class="comment">// 행 부분을 도착 정점</span></span><br><span class="line"><span class="comment">// true 값을 넣어주면 연결된 것이라 침</span></span><br><span class="line">graph[<span class="number">0</span>][<span class="number">1</span>] = <span class="literal">true</span>; <span class="comment">// 0 -&gt; 1</span></span><br><span class="line">graph[<span class="number">0</span>][<span class="number">3</span>] = <span class="literal">true</span>; <span class="comment">// 0 -&gt; 3</span></span><br><span class="line">graph[<span class="number">1</span>][<span class="number">2</span>] = <span class="literal">true</span>; <span class="comment">// 1 -&gt; 2</span></span><br><span class="line">graph[<span class="number">2</span>][<span class="number">0</span>] = <span class="literal">true</span>; <span class="comment">// 2 -&gt; 0</span></span><br><span class="line">graph[<span class="number">2</span>][<span class="number">4</span>] = <span class="literal">true</span>; <span class="comment">// 2 -&gt; 4</span></span><br><span class="line">graph[<span class="number">3</span>][<span class="number">2</span>] = <span class="literal">true</span>; <span class="comment">// 3 -&gt; 2</span></span><br><span class="line">graph[<span class="number">4</span>][<span class="number">0</span>] = <span class="literal">true</span>; <span class="comment">// 4 -&gt; 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 만약 간선에 가중치를 넣고 싶다면, false와 true가 아닌 null과 임의의 가중치값을 넣으면 됩니다.</span></span><br><span class="line"><span class="comment">// 참고로 무방향 그래프를 구현한다면, 모든 방향을 대칭으로 넣어주면 됩니다.</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-2-인접-리스트"><a href="#2-2-인접-리스트" class="headerlink" title="2.2 인접 리스트"></a>2.2 인접 리스트</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 다른 언어와 달리 JS에서 배열은 연결리스트처럼 무한정 늘어나기 때문에</span></span><br><span class="line"><span class="comment">// 정점의 수 만큼 배열을 만들고, 연결할 정점을 배열에 추가하면 됩니다.</span></span><br><span class="line"><span class="keyword">const</span> graph = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">5</span>), <span class="function">() =&gt;</span> []);</span><br><span class="line"></span><br><span class="line">graph[<span class="number">0</span>].<span class="title function_">push</span>(<span class="number">1</span>); <span class="comment">// 0 -&gt; 1</span></span><br><span class="line">graph[<span class="number">0</span>].<span class="title function_">push</span>(<span class="number">3</span>); <span class="comment">// 0 -&gt; 3</span></span><br><span class="line">graph[<span class="number">1</span>].<span class="title function_">push</span>(<span class="number">2</span>); <span class="comment">// 1 -&gt; 2</span></span><br><span class="line">graph[<span class="number">2</span>].<span class="title function_">push</span>(<span class="number">0</span>); <span class="comment">// 2 -&gt; 0</span></span><br><span class="line">graph[<span class="number">2</span>].<span class="title function_">push</span>(<span class="number">4</span>); <span class="comment">// 2 -&gt; 4</span></span><br><span class="line">graph[<span class="number">3</span>].<span class="title function_">push</span>(<span class="number">2</span>); <span class="comment">// 3 -&gt; 2</span></span><br><span class="line">graph[<span class="number">4</span>].<span class="title function_">push</span>(<span class="number">0</span>); <span class="comment">// 4 -&gt; 0</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-BFS-DFS-실습-가장-먼-노드❌"><a href="#3-BFS-DFS-실습-가장-먼-노드❌" class="headerlink" title="3. BFS, DFS 실습 : 가장 먼 노드❌"></a>3. BFS, DFS 실습 : 가장 먼 노드❌</h1><h2 id="3-1-문제"><a href="#3-1-문제" class="headerlink" title="3.1 문제"></a>3.1 문제</h2><ul><li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/49189">https://school.programmers.co.kr/learn/courses/30/lessons/49189</a></li></ul><hr><h2 id="3-2-풀이"><a href="#3-2-풀이" class="headerlink" title="3.2 풀이"></a>3.2 풀이</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 핵심 키워드는 &#x27;노드&#x27;, &#x27;간선&#x27;, &#x27;최단경로&#x27;</span></span><br><span class="line"><span class="comment">// 최단 경로가 제일 큰 경우의 집합을 구하는 문제</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">n, edge</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> graph = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(n + <span class="number">1</span>), <span class="function">() =&gt;</span> []); <span class="comment">// 그래프를 담을 빈 배열</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(graph);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 간선들을 순회</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [src, dest] <span class="keyword">of</span> edge) &#123;</span><br><span class="line">    <span class="comment">// 양방향이기 때문에 둘 다 갈 수 있도록</span></span><br><span class="line">    graph[src].<span class="title function_">push</span>(dest); <span class="comment">// 원점에서 출발지를</span></span><br><span class="line">    graph[dest].<span class="title function_">push</span>(src); <span class="comment">// 출발지에서 원점으로</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 각 정점의 길이를 알 수 있도록 하는 0으로 초기화된 배열 생성</span></span><br><span class="line">  <span class="keyword">const</span> distance = <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">  distance[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// BFS : 큐를 이용해 구현 가능</span></span><br><span class="line">  <span class="keyword">const</span> queue = [<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">while</span> (queue.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// shift는 O(n)이지만 요소가 적을 경우에는 자바스크립트 엔진에서 최적화를 해줌</span></span><br><span class="line">    <span class="keyword">const</span> src = queue.<span class="title function_">shift</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> dest <span class="keyword">of</span> graph[src]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (distance[dest] === <span class="number">0</span>) &#123;</span><br><span class="line">        queue.<span class="title function_">push</span>(dest);</span><br><span class="line">        distance[dest] = distance[src] + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> max = <span class="title class_">Math</span>.<span class="title function_">max</span>(...distance); <span class="comment">// 최대값</span></span><br><span class="line">  <span class="keyword">return</span> distance.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item === max).<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">solution</span>(<span class="number">6</span>, [[<span class="number">3</span>, <span class="number">6</span>],[<span class="number">4</span>, <span class="number">3</span>],[<span class="number">3</span>, <span class="number">2</span>],[<span class="number">1</span>, <span class="number">3</span>],[<span class="number">1</span>, <span class="number">2</span>],[<span class="number">2</span>, <span class="number">4</span>],[<span class="number">5</span>, <span class="number">2</span>]]));</span><br></pre></td></tr></table></figure><hr><p>예를 들어 첫 인자가 [3,6]이 들어온다고 가정했을 때 graph[3].push(6)을 해석해보면, 3번째 graph 배열에 6을 푸시한다. 라고 알 수 있습니다!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [src, dest] <span class="keyword">of</span> edge) &#123;</span><br><span class="line">  graph[src].<span class="title function_">push</span>(dest);</span><br><span class="line">  graph[dest].<span class="title function_">push</span>(src);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 부분은 양방향 그래프를 만들어주기 위함입니다. 리스트를 이용하여 인접 리스트 형태로 그래프를 만든 것이라 볼 수 있습니다. :)<br> 예를 들어 <code>graph[1]</code>이 <code>[3, 2]</code>라는 값을 담고있다면 <code>1번 정점이 3번과 2번 정점과 연결되어있다</code>라고 볼 수 있습니다.<br> 이 부분을 구체적으로 풀어보면 다음과 같습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">[],</span><br><span class="line">[ 3, 2 ],         // 1번 정점이 3번과 2번 정점과 연결되어 있습니다.</span><br><span class="line">[ 3, 1, 4, 5 ],   // 2번 정점이 3번, 1번, 4번, 5번 정점과 연결되어 있습니다.</span><br><span class="line">[ 6, 4, 2, 1 ],   // 3번 정점이 6번, 4번, 2번, 1번 정점과 연결되어 있습니다.</span><br><span class="line">[ 3, 2 ],         // 4번 정점이 3번, 2번 정점과 연결되어 있습니다.</span><br><span class="line">[ 2 ],            // 5번 정점이 2번 정점과 연결되어 있습니다.</span><br><span class="line">[ 3 ]             // 6번 정점이 3번 정점과 연결되어 있습니다.</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>이런 형태로 자료 구조를 만들어 문제를 해결했습니다. :)</p><hr><h3 id="3-2-1-큐를-이용한-풀이"><a href="#3-2-1-큐를-이용한-풀이" class="headerlink" title="3.2.1 큐를 이용한 풀이"></a>3.2.1 큐를 이용한 풀이</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 핵심 키워드는 &#x27;노드&#x27;, &#x27;간선&#x27;, &#x27;최단경로&#x27;</span></span><br><span class="line"><span class="comment">// 최단 경로가 제일 큰 경우의 집합을 구하는 문제</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 큐 구현</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">front</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rear</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">enqueue</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">rear</span>++] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">dequeue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">front</span>];</span><br><span class="line">    <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">front</span>];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">front</span> += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">rear</span> === <span class="variable language_">this</span>.<span class="property">front</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">n, edge</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> graph = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(n + <span class="number">1</span>), <span class="function">() =&gt;</span> []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [src, dest] <span class="keyword">of</span> edge) &#123;</span><br><span class="line">    graph[src].<span class="title function_">push</span>(dest);</span><br><span class="line">    graph[dest].<span class="title function_">push</span>(src);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> distance = <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">  distance[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// BFS : 큐를 이용해 구현 가능</span></span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>();</span><br><span class="line">  queue.<span class="title function_">enqueue</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">while</span> (!queue.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    <span class="comment">// shift는 O(n)이지만 요소가 적을 경우에는 자바스크립트 엔진에서 최적화를 해줌</span></span><br><span class="line">    <span class="keyword">const</span> src = queue.<span class="title function_">dequeue</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> dest <span class="keyword">of</span> graph[src]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (distance[dest] === <span class="number">0</span>) &#123;</span><br><span class="line">        queue.<span class="title function_">enqueue</span>(dest);</span><br><span class="line">        distance[dest] = distance[src] + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> max = <span class="title class_">Math</span>.<span class="title function_">max</span>(...distance);</span><br><span class="line">  <span class="keyword">return</span> distance.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item === max).<span class="property">length</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li><a href="https://laboputer.github.io/ps/2017/09/29/graph/">https://laboputer.github.io/ps/2017/09/29/graph/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CS-자료구조-알고리즘 </category>
          
          <category> JS-자료구조-알고리즘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS-자료구조-알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-JS-DataAlgo-07-해시 테이블 (Hash Table)</title>
      <link href="/2023/01/11/CS-JS-DataAlgo-07/"/>
      <url>/2023/01/11/CS-JS-DataAlgo-07/</url>
      
        <content type="html"><![CDATA[<h1 id="1-해시-테이블"><a href="#1-해시-테이블" class="headerlink" title="1. 해시 테이블"></a>1. 해시 테이블</h1><p><strong>학창시절 사물함</strong>이 기억하시나요? <strong>사물함</strong>이 바로 해시 테이블의 예입니다.<br>해시 테이블은 한정된 배열 공간에 key를 index로 변환하여 값들을 넣게 된다. 그럼 index는 어떻게 구할까?</p><hr><h2 id="1-1-해시-테이블"><a href="#1-1-해시-테이블" class="headerlink" title="1.1 해시 테이블"></a>1.1 해시 테이블</h2><ul><li><strong>키와 값을 받아 키를 해싱(Hashing)하여 나온 index에 값을 저장</strong>하는 선형 자료구조</li><li>삽입은 $O(1)$이며 키를 알고 있다면 삭제，탐색도 $O(1)$로 수행한다.</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_7_1.png" alt="Data Structure_7_1"></p><blockquote><p>💡 Hash : 잘게 잘라 가공하는 것</p><ul><li>Hash Table : 입력받은 키를 잘게 잘라서 숫자로 만든다.</li><li>cf. 해쉬 브라운(Hash Brown)  : 고기와 감자를 잘게 다져 요리한 것<ul><li><a href="https://ko.wikipedia.org/wiki/%ED%95%B4%EC%8B%9C_%EB%B8%8C%EB%9D%BC%EC%9A%B4">위키백과 해시 브라운</a></li></ul></li></ul></blockquote><hr><h2 id="1-2-해시-함수"><a href="#1-2-해시-함수" class="headerlink" title="1.2 해시 함수"></a>1.2 해시 함수</h2><p><strong>입력받은 값을 특정 범위 내 숫자로 변경</strong>하는 함수</p><hr><h2 id="1-3-해시-테이블의-문제점"><a href="#1-3-해시-테이블의-문제점" class="headerlink" title="1.3 해시 테이블의 문제점"></a>1.3 해시 테이블의 문제점</h2><p>만약 <strong>해시 함수의 결과가 동일하여 겹친다면?</strong> <code>해쉬 충돌</code>이 발생할 수 있다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_7_2.png" alt="Data Structure_7_2"></p><hr><h1 id="2-Hash-Collision-해쉬-충돌"><a href="#2-Hash-Collision-해쉬-충돌" class="headerlink" title="2. Hash Collision(해쉬 충돌)"></a>2. Hash Collision(해쉬 충돌)</h1><p>해쉬 충돌을 해결하기 위한 방법</p><h2 id="2-1-선형-탐사법"><a href="#2-1-선형-탐사법" class="headerlink" title="2.1 선형 탐사법"></a>2.1 선형 탐사법</h2><ul><li><strong>충돌이 발생하면 옆으로 한 칸 이동</strong>한다.</li><li>단순하지만, 특정 영역에 데이터가 몰릴 수 있다는 단점이 존재</li><li>이동한 곳에서 또 충돌이 발생한다면, 충돌이 발생하지 않을 떄까지 이동</li><li>이름 그대로 <strong>최악의 경우</strong>, <strong>선형 시간($O(n)$)의 탐색 시간</strong>이 걸릴 수 있습니다.</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_7_3.png" alt="Data Structure_7_3"></p><hr><h2 id="2-2-제곱-탐사법"><a href="#2-2-제곱-탐사법" class="headerlink" title="2.2 제곱 탐사법"></a>2.2 제곱 탐사법</h2><ul><li><strong>충돌이 발생하면 충돌이 발생한 횟수의 제곱만큼 옆으로 이동</strong>한다.</li><li>충돌이 발생할 수록 범위가 커지기 때문에 데이터가 몰리는 것이 선형 탐사법보다 덜 합니다.</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_7_4.png" alt="Data Structure_7_4"></p><hr><h2 id="2-3-이중-해싱"><a href="#2-3-이중-해싱" class="headerlink" title="2.3 이중 해싱"></a>2.3 이중 해싱</h2><ul><li><strong>충돌이 발생하면 다른 해시 함수를 이용</strong>한다. </li><li><strong>또 충돌이 발생</strong>하면 <strong>충돌이 발생하지 않을 떄까지 또 다른 해시 함수를 사용</strong>한다.</li></ul><hr><h2 id="2-4-분리-연결법"><a href="#2-4-분리-연결법" class="headerlink" title="2.4 분리 연결법"></a>2.4 분리 연결법</h2><ul><li>앞의 다른 3가지 방법들과 달리, 충돌이 발생할 경우 다른 인덱스로 이동하지 않습니다.</li><li>대신 <strong>해시 테이블의 요소를 연결 리스트로</strong> 만들어, <strong>충돌이 발생한 버킷에 그대로 요소를 추가</strong>합니다.</li><li>버킷의 값을 연결 리스트로 사용하여 충돌이 발생하면 리스트에 값을 추가한다.</li><li>대신 <strong>최악의 경우</strong>, <strong>하나의 버킷이 무한정 늘어날 수 있다는 단점</strong>이 존재</li></ul><hr><h1 id="3-어디에-사용하는가"><a href="#3-어디에-사용하는가" class="headerlink" title="3. 어디에 사용하는가?"></a>3. 어디에 사용하는가?</h1><p>e.g. <strong>학생 정보를 어떻게 관리</strong>할 것인가? 출석부!</p><p><strong>연결 리스트를 사용하면 학생 정보가 알고 싶을 떄 $O(n)$</strong> 시간복잡도가 걸린다.</p><p>**배열은 인덱스를 모를 경우 탐색에 $O(n)$**이 걸린다.</p><p>반면 <strong>해시 테이블을 사용하면 $0(1)$에 찾을 수 있다</strong>. 따라서 <strong>빠르게 값을 찾아야하는 경우 해시 테이블을 사용</strong>하는 것이 좋다.</p><hr><h1 id="4-구현"><a href="#4-구현" class="headerlink" title="4. 구현"></a>4. 구현</h1><h2 id="4-1-JavaScript-Array-≈-Hash-Table"><a href="#4-1-JavaScript-Array-≈-Hash-Table" class="headerlink" title="4.1 JavaScript Array ≈ Hash Table"></a>4.1 JavaScript Array ≈ Hash Table</h2><p>배열은 사실 객체이기 때문에 객체처럼 사용할 수는 있지만 올바른 방법이 아니기 떄문에 추천하지 않습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> table = [];</span><br><span class="line"></span><br><span class="line">table[<span class="string">&#x27;key&#x27;</span>] = <span class="number">100</span>;</span><br><span class="line">table[<span class="string">&#x27;key2&#x27;</span>] = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table[<span class="string">&#x27;key&#x27;</span>]); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">table[<span class="string">&#x27;key&#x27;</span>] = <span class="number">349</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table[<span class="string">&#x27;key&#x27;</span>]); <span class="comment">// 349</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> table[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table[<span class="string">&#x27;key&#x27;</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-2-JavaScript-Object-≈-Hash-Table"><a href="#4-2-JavaScript-Object-≈-Hash-Table" class="headerlink" title="4.2 JavaScript Object ≈ Hash Table"></a>4.2 JavaScript Object ≈ Hash Table</h2><p><strong>객체로 구현하는 것은 가장 간단한 방법</strong>입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> table = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">table[<span class="string">&#x27;key&#x27;</span>] = <span class="number">100</span>;</span><br><span class="line">table[<span class="string">&#x27;key2&#x27;</span>] = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table[<span class="string">&#x27;key&#x27;</span>]); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">table[<span class="string">&#x27;key&#x27;</span>] = <span class="number">349</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table[<span class="string">&#x27;key&#x27;</span>]); <span class="comment">// 349</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> table[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table[<span class="string">&#x27;key&#x27;</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-3-Map"><a href="#4-3-Map" class="headerlink" title="4.3 Map"></a>4.3 Map</h2><p>별도로 Map 객체를 사용할 수도 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> table = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">table.<span class="title function_">set</span>(<span class="string">&#x27;key&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">table.<span class="title function_">set</span>(<span class="string">&#x27;key2&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 Map 객체의 값을 가져올 떄는 get</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table[<span class="string">&#x27;key&#x27;</span>]); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table.<span class="title function_">get</span>(<span class="string">&#x27;key&#x27;</span>)); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> object = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line">table.<span class="title function_">set</span>(object, <span class="string">&#x27;A1&#x27;</span>); <span class="comment">// Map은 Object도 Key로 쓸 수 있다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table.<span class="title function_">get</span>(object)); <span class="comment">// A1</span></span><br><span class="line"></span><br><span class="line">table.<span class="title function_">delete</span>(object);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table.<span class="title function_">get</span>(object)); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table.<span class="title function_">keys</span>()); <span class="comment">// [Map Iterator] &#123; &#x27;key&#x27;, &#x27;key2&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table.<span class="title function_">values</span>()); <span class="comment">// [Map Iterator] &#123; 100, &#x27;Hello&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line">table.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table.<span class="title function_">values</span>()); <span class="comment">// [Map Iterator] &#123;  &#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-4-Set"><a href="#4-4-Set" class="headerlink" title="4.4 Set"></a>4.4 Set</h2><p>또 다른 Hash Table로 Set으로 만들 수도 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> table = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">table.<span class="title function_">add</span>(<span class="string">&#x27;key&#x27;</span>); <span class="comment">// Key와 Value가 동일하게 들어간다</span></span><br><span class="line">table.<span class="title function_">add</span>(<span class="string">&#x27;key2&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table.<span class="title function_">has</span>(<span class="string">&#x27;key&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table.<span class="title function_">has</span>(<span class="string">&#x27;key3&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">table.<span class="title function_">delete</span>(<span class="string">&#x27;key2&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table.<span class="title function_">has</span>(<span class="string">&#x27;key2&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">table.<span class="title function_">add</span>(<span class="string">&#x27;key3&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table.<span class="property">size</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">table.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(table.<span class="property">size</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-해시-테이블-실습-베스트-앨범"><a href="#3-해시-테이블-실습-베스트-앨범" class="headerlink" title="3. 해시 테이블 실습 : 베스트 앨범"></a>3. 해시 테이블 실습 : 베스트 앨범</h1><h2 id="2-1-문제"><a href="#2-1-문제" class="headerlink" title="2.1 문제"></a>2.1 문제</h2><ul><li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/42579">https://school.programmers.co.kr/learn/courses/30/lessons/42579</a></li></ul><hr><h2 id="2-2-풀이❌"><a href="#2-2-풀이❌" class="headerlink" title="2.2 풀이❌"></a>2.2 풀이❌</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 같은 장르끼리 묶기</span></span><br><span class="line"><span class="comment">// 2. 묶인 노래들을 재생 순으로 정렬하기</span></span><br><span class="line"><span class="comment">// 3. 노래를 2개까지 자르는 작업하기</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 핵심 키워드는 &quot;묶는 것&quot;, &quot;정렬&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">genres, plays</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> genreMap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">  genres</span><br><span class="line">    <span class="comment">// 1. 각 장르끼리 배열로 묶기 [장르명, 재생횟수]</span></span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">genre, index</span>) =&gt;</span> [genre, plays[index]])</span><br><span class="line">    <span class="comment">// 2. 묶어준 장르로 데이터 만들기</span></span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function">(<span class="params">[genre, play], index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = genreMap.<span class="title function_">get</span>(genre) || &#123; <span class="attr">total</span>: <span class="number">0</span>, <span class="attr">songs</span>: [] &#125;;</span><br><span class="line">      genreMap.<span class="title function_">set</span>(genre, &#123;</span><br><span class="line">        <span class="attr">total</span>: data.<span class="property">total</span> + play,</span><br><span class="line">        <span class="attr">songs</span>: [...data.<span class="property">songs</span>, &#123; play, index &#125;]</span><br><span class="line">          .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b.<span class="property">play</span> - a.<span class="property">play</span>) <span class="comment">// 재생 순으로 내림차순</span></span><br><span class="line">          .<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>),</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">return</span> [...genreMap.<span class="title function_">entries</span>()]</span><br><span class="line">    .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b[<span class="number">1</span>].<span class="property">total</span> - a[<span class="number">1</span>].<span class="property">total</span>)</span><br><span class="line">    .<span class="title function_">flatMap</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item[<span class="number">1</span>].<span class="property">songs</span>)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">song</span>) =&gt;</span> song.<span class="property">index</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li><a href="https://ko.wikipedia.org/wiki/%ED%95%B4%EC%8B%9C_%ED%95%A8%EC%88%98">https://ko.wikipedia.org/wiki/%ED%95%B4%EC%8B%9C_%ED%95%A8%EC%88%98</a></li><li><a href="https://velog.io/@cyranocoding/Hash-Hashing-Hash-Table%ED%95%B4%EC%8B%9C-%ED%95%B4%EC%8B%B1-%ED%95%B4%EC%8B%9C%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%9D%98-%EC%9D%B4%ED%95%B4-6ijyonph6o">https://velog.io/@cyranocoding/Hash-Hashing-Hash-Table%ED%95%B4%EC%8B%9C-%ED%95%B4%EC%8B%B1-%ED%95%B4%EC%8B%9C%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%9D%98-%EC%9D%B4%ED%95%B4-6ijyonph6o</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CS-자료구조-알고리즘 </category>
          
          <category> JS-자료구조-알고리즘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS-자료구조-알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-JS-DataAlgo-06-큐(Queue)</title>
      <link href="/2023/01/11/CS-JS-DataAlgo-06/"/>
      <url>/2023/01/11/CS-JS-DataAlgo-06/</url>
      
        <content type="html"><![CDATA[<h1 id="1-큐"><a href="#1-큐" class="headerlink" title="1. 큐"></a>1. 큐</h1><ul><li>**FIFO(First In First Out)**이라는 개념을 가진 선형 자료구조</li><li>먼저 들어간 것이 먼저 나오고, 나중에 들어간 것이 나중에 나온다.</li><li>Linear Queue와 Circular Queue가 존재한다.<ul><li>e.g.줄서기를 생각하면 편하다.</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_6_1.png" alt="Data Structure_6_1"></p><hr><h2 id="1-1-큐의-기본-연산"><a href="#1-1-큐의-기본-연산" class="headerlink" title="1.1 큐의 기본 연산"></a>1.1 큐의 기본 연산</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_6_2.png" alt="Data Structure_6_2"></p><ul><li><code>Enqueue</code>: 큐 맨 뒤에 요소를 추가</li><li><code>Dequeue</code>: 큐 맨 앞의 요소를 삭제</li><li><code>Peek</code>: front에 위치한 데이터를 확인</li><li><code>front</code>: 큐의 맨 앞 위치</li><li><code>rear</code>: 큐의 맨 뒤 위치</li></ul><hr><h1 id="2-선형-큐-Linear-Queue"><a href="#2-선형-큐-Linear-Queue" class="headerlink" title="2. 선형 큐(Linear Queue)"></a>2. 선형 큐(Linear Queue)</h1><h2 id="2-1-표현"><a href="#2-1-표현" class="headerlink" title="2.1 표현"></a>2.1 표현</h2><h3 id="2-1-1-Array로-표현하기"><a href="#2-1-1-Array로-표현하기" class="headerlink" title="2.1.1 Array로 표현하기"></a>2.1.1 Array로 표현하기</h3><ul><li>Linear Queue를 Array로 표현할 수 있다.</li><li>배열이기 때문에 빈 공간은 메꿔지지 않습니다.</li><li><strong>선언한 배열만큼만 사용</strong>할 수 있기 때문에 <strong>가득 차면 문제가 발생</strong></li><li><strong>JavaScript에서는 배열이 자유롭게 증감</strong>되기 때문에 이런 문제는 없겠지만, Font와 Rear가 무한정 커질 수 있다는 문제점이 존재</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_6_3.png" alt="Data Structure_6_3"></p><hr><h3 id="2-1-2-Linked-List로-표현하기"><a href="#2-1-2-Linked-List로-표현하기" class="headerlink" title="2.1.2 Linked List로 표현하기"></a>2.1.2 Linked List로 표현하기</h3><ul><li>Linear Queue를 Linked List로 표현할 수 있다.</li><li><strong>Array 구현의 단점을 해결한 방식</strong>으로 인덱스의 고민은 할 필요가 없음</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_6_4.png" alt="Data Structure_6_4"></p><hr><h2 id="2-3-구현"><a href="#2-3-구현" class="headerlink" title="2.3 구현"></a>2.3 구현</h2><h3 id="2-3-1-Array로-구현"><a href="#2-3-1-Array로-구현" class="headerlink" title="2.3.1 Array로 구현"></a>2.3.1 Array로 구현</h3><p>구현이 간단하기 때문에 코딩테스트에 구현할 떄 추천!<br>단, 앞서 말한 것처럼 Font와 Rear가 무한정 커질 수 있다는 문제점이 존재합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="comment">// 생성자: new 키워드로 객체를 생성할때 호출되는 함수</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span> = []; <span class="comment">// 요소를 넣을 배열 변수</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">front</span> = <span class="number">0</span>; <span class="comment">// front 포인터</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rear</span> = <span class="number">0</span>; <span class="comment">// rear 포인터</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 📝 넣기</span></span><br><span class="line">  <span class="title function_">enqueue</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">// 실행노드[rear변수 증감] = 입력받은 값</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">rear</span>++] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 📝 빼기</span></span><br><span class="line">  <span class="title function_">dequeue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">front</span>]; <span class="comment">// 실행노드[front값]을 받아오기</span></span><br><span class="line">    <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">front</span>]; <span class="comment">// 실행노드의 front 삭제</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">front</span> += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 📝 큐의 가장 앞에 있는 노드 반환</span></span><br><span class="line">  <span class="title function_">peek</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">front</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 📝 큐의 크기 반환</span></span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">rear</span> - <span class="variable language_">this</span>.<span class="property">front</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>();</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">1</span>);</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">2</span>);</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">dequeue</span>()); <span class="comment">// 1</span></span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">8</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">size</span>()); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">peek</span>()); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">dequeue</span>()); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">dequeue</span>()); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-3-2-Linked-List로-구현"><a href="#2-3-2-Linked-List로-구현" class="headerlink" title="2.3.2 Linked List로 구현"></a>2.3.2 Linked List로 구현</h3><p>Array 구현의 단점을 해결한 방식입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="comment">// 생성자: new 키워드로 객체를 생성할때 호출되는 함수</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 📝 넣기</span></span><br><span class="line">  <span class="title function_">enqueue</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(newValue);</span><br><span class="line">    <span class="comment">// 해당 큐가 빈 노드라면</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">tail</span> = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">next</span> = newNode;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tail</span> = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 📝 빼기</span></span><br><span class="line">  <span class="title function_">dequeue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 📝 큐의 가장 앞에 있는 노드 반환</span></span><br><span class="line">  <span class="title function_">peek</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 📝 큐의 크기 반환</span></span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">rear</span> - <span class="variable language_">this</span>.<span class="property">front</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>();</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">1</span>);</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">2</span>);</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">dequeue</span>()); <span class="comment">// 1</span></span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">8</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">size</span>()); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">peek</span>()); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">dequeue</span>()); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">dequeue</span>()); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="2-3-3-shift"><a href="#2-3-3-shift" class="headerlink" title="2.3.3 shift"></a>2.3.3 shift</h3><p>간혹 JS에서 큐 구현을 검색하면, shift()로 큐를 구현할 수 있는 경우가 많습니다. 그러나 이는 잘못된 정보입니다.<br>JS에서 shift는 선형 시간이 걸리기 때문에 큐엑서 기대하는 로직이 수행되지 않습니다. 따라서 큐를 쓸 떄 shift 함수는 쓰지 마세요.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">queue.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> value = queue.<span class="title function_">shift</span>(); <span class="comment">// O(n) !!</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-환형-큐-Circular-Queue"><a href="#3-환형-큐-Circular-Queue" class="headerlink" title="3. 환형 큐(Circular Queue)"></a>3. 환형 큐(Circular Queue)</h1><ul><li>Front와 Rear가 이어져 있는 Queue</li><li>Circular Queue는 한정된 공간을 효율적으로 사용할 떄 사용</li><li>Circular Queue는 <strong>Linked List로 구현했을 때 이점이 없다</strong>.</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_6_5.png" alt="Data Structure_6_5"></p><hr><h2 id="3-1-구현"><a href="#3-1-구현" class="headerlink" title="3.1 구현"></a>3.1 구현</h2><h3 id="3-1-1-Array로-구현"><a href="#3-1-1-Array로-구현" class="headerlink" title="3.1.1 Array로 구현"></a>3.1.1 Array로 구현</h3><p>코딩테스트에서 환형 큐를 사용하는 경우는 많지 않습니다. 따라서 꼭 외울 필요는 없습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="comment">// 생성자: new 키워드로 객체를 생성할때 호출되는 함수</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">maxSize</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">maxSize</span> = maxSize;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">front</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rear</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 📝 넣기</span></span><br><span class="line">  <span class="title function_">enqueue</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isFull</span>()) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Queue is full.&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">rear</span>] = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rear</span> = (<span class="variable language_">this</span>.<span class="property">rear</span> + <span class="number">1</span>) % <span class="variable language_">this</span>.<span class="property">maxSize</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 📝 빼기</span></span><br><span class="line">  <span class="title function_">dequeue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">front</span>];</span><br><span class="line">    <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">front</span>];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">front</span> = (<span class="variable language_">this</span>.<span class="property">front</span> + <span class="number">1</span>) % <span class="variable language_">this</span>.<span class="property">maxSize</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">isFull</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">size</span> === <span class="variable language_">this</span>.<span class="property">maxSize</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 📝 큐의 가장 앞에 있는 노드 반환</span></span><br><span class="line">  <span class="title function_">peek</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">front</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="number">4</span>);</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">1</span>);</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">2</span>);</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">4</span>);</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">8</span>);</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">16</span>); <span class="comment">// Queue is full.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">dequeue</span>()); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">dequeue</span>()); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="property">size</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">peek</span>()); <span class="comment">// 4</span></span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">16</span>);</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="number">32</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">isFull</span>()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-큐-실습-프린터"><a href="#4-큐-실습-프린터" class="headerlink" title="4. 큐 실습 : 프린터"></a>4. 큐 실습 : 프린터</h1><h2 id="4-1-문제"><a href="#4-1-문제" class="headerlink" title="4.1 문제"></a>4.1 문제</h2><ul><li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/42587">https://school.programmers.co.kr/learn/courses/30/lessons/42587</a></li></ul><hr><h2 id="4-2-풀이"><a href="#4-2-풀이" class="headerlink" title="4.2 풀이"></a>4.2 풀이</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">enqueue</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(newValue);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">tail</span> = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">next</span> = newNode;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tail</span> = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">dequeue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">peek</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">priorities, location</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>(); <span class="comment">// 큐 생성</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 대기목록만큼 순회</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; priorities.<span class="property">length</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">    queue.<span class="title function_">enqueue</span>([priorities[i], i]); <span class="comment">// 각각의 우선순위와 인덱스</span></span><br><span class="line">  &#125;</span><br><span class="line">  priorities.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a); <span class="comment">// 내림차순 정렬</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>; <span class="comment">// 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 큐가 비어있을 떄까지 반복</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentValue = queue.<span class="title function_">peek</span>(); <span class="comment">// 가장 앞에 노드 반환</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 지금까지 수행한 우선순위보다 작은 경우</span></span><br><span class="line">    <span class="keyword">if</span> (currentValue[<span class="number">0</span>] &lt; priorities[count]) &#123;</span><br><span class="line">      queue.<span class="title function_">enqueue</span>(queue.<span class="title function_">dequeue</span>()); <span class="comment">// 그 값을 맨 뒤에 넣기</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> value = queue.<span class="title function_">dequeue</span>(); <span class="comment">// 우선순위가 더 큰 경우, 바로 dequeue</span></span><br><span class="line">      count += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 뽑은 문서가 내가 찾은 문서라면</span></span><br><span class="line">      <span class="keyword">if</span> (location === value[<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li><a href="https://laboputer.github.io/ps/2017/09/15/queue/">https://laboputer.github.io/ps/2017/09/15/queue/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CS-자료구조-알고리즘 </category>
          
          <category> JS-자료구조-알고리즘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS-자료구조-알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-JS-DataAlgo-05-스택(Stack)</title>
      <link href="/2023/01/11/CS-JS-DataAlgo-05/"/>
      <url>/2023/01/11/CS-JS-DataAlgo-05/</url>
      
        <content type="html"><![CDATA[<h1 id="1-스택"><a href="#1-스택" class="headerlink" title="1. 스택"></a>1. 스택</h1><ul><li><code>LIFO(Last In First Out)</code>이라는 개념을 가진 선형 자료구조</li><li>나중에 들어간 것이 먼저 나온다.</li><li>바닥이 막힌 상자를 생각하면 편하다.<ul><li>e.g.) 프링글스 통</li></ul></li></ul><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_5_1.png" alt="Data Structure_5_1" style="zoom:67%;" /><ul><li>한쪽 끝에서 삽입, 삭제가 이루어지는 후입선출(LIFO, Last in First Out) 구조를 가진다.</li><li>스택에 데이터가 삽입될 위치를 Top이라고 한다.</li></ul><hr><h2 id="1-1-스택의-기본-연산"><a href="#1-1-스택의-기본-연산" class="headerlink" title="1.1 스택의 기본 연산"></a>1.1 스택의 기본 연산</h2><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_5_2.png" alt="Data Structure_5_2" style="zoom:67%;" /><ul><li><code>push(data)</code> : 스택의 top에 데이터를 삽입</li><li><code>pop</code> : 스택의 top에 위치한 요소를 제거</li><li><code>isEmpty</code> : 스택이 비어있는지 확인</li><li><code>isFull</code> : 스택이 꽉 찼는지 확인</li><li><code>peek or top</code>: 스택의 top에 위치한 요소를 반환</li></ul><hr><h2 id="1-1-스택-메모리"><a href="#1-1-스택-메모리" class="headerlink" title="1.1 스택 메모리"></a>1.1 스택 메모리</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">print</span>(<span class="title function_">sum</span>(<span class="number">5</span>, <span class="number">10</span>));</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_5_3.png" alt="Data Structure_5_3"></p><ol><li>스택 메모리는 함수가 호출되면, 생성되는 <code>지역변수, 변환 주소값, 매개변수</code>가 저장되는 메모리 영역입니다.</li><li>가장 안쪽에 위치한 sum(5, 10)함수가 실행됨</li><li>sum()함수 실행이 종료되어, 스택 메모리에서 pop이 수행되며 제거가 됩니다.</li><li>print(15)가 실행됩니다.</li><li>print() 내부에는 console.log()가 있어, 스택 메모리에 다시 쌓이게 됩니다.</li><li>console.log() 출력을 마쳤다면, 스택 메모리에서 제거가 됩니다.</li><li>print()도 함수 호출이 완료되면서, 스택 메모리에서 제거가 됩니다.</li></ol><hr><h2 id="1-2-Array로-표현하기"><a href="#1-2-Array로-표현하기" class="headerlink" title="1.2 Array로 표현하기"></a>1.2 Array로 표현하기</h2><p>Stack을 Array로 표현할 수 있다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_5_4.png" alt="Data Structure_5_4"></p><hr><h2 id="1-3-Linked-List로-표현하기"><a href="#1-3-Linked-List로-표현하기" class="headerlink" title="1.3 Linked List로 표현하기"></a>1.3 Linked List로 표현하기</h2><p>Stack을 Linked List로 표현할 수 있다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_5_5.png" alt="Data Structure_5_5"></p><hr><h1 id="2-구현"><a href="#2-구현" class="headerlink" title="2. 구현"></a>2. 구현</h1><h2 id="2-1-Array로-구현"><a href="#2-1-Array로-구현" class="headerlink" title="2.1 Array로 구현"></a>2.1 Array로 구현</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// push</span></span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">2</span>);</span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack); <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pop</span></span><br><span class="line">stack.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack); <span class="comment">// [ 1, 2 ]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack[stack.<span class="property">length</span> - <span class="number">1</span>]); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-2-Linked-List로-구현"><a href="#2-2-Linked-List로-구현" class="headerlink" title="2.2 Linked List로 구현"></a>2.2 Linked List로 구현</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="comment">// 생성자: new 키워드로 객체를 생성할때 호출되는 함수</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">  <span class="comment">// 생성자: new 키워드로 객체를 생성할때 호출되는 함수</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">top</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 추가</span></span><br><span class="line">  <span class="title function_">push</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(value); <span class="comment">// 입력받은 값으로 새 노드 생성</span></span><br><span class="line">    node.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">top</span>; <span class="comment">// 새로 생성한 노드의 다음은 실행노드의 top을 가르킴 </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">top</span> = node; <span class="comment">// 실행노드의 top은 노드를 가르킴</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 삭제</span></span><br><span class="line">  <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">top</span>.<span class="property">value</span>; <span class="comment">// 실행노드의 top의 value를 변수로</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">top</span> = <span class="variable language_">this</span>.<span class="property">top</span>.<span class="property">next</span>; <span class="comment">// 실행노드의 top의 next를 top으로</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">2</span>);</span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">pop</span>()); <span class="comment">// 3</span></span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">pop</span>()); <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">pop</span>()); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-스택-실습-올바른-괄호"><a href="#3-스택-실습-올바른-괄호" class="headerlink" title="3. 스택 실습 : 올바른 괄호"></a>3. 스택 실습 : 올바른 괄호</h1><h2 id="3-1-문제"><a href="#3-1-문제" class="headerlink" title="3.1 문제"></a>3.1 문제</h2><ul><li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/12909">https://school.programmers.co.kr/learn/courses/30/lessons/12909</a></li></ul><hr><h2 id="3-2-풀이"><a href="#3-2-풀이" class="headerlink" title="3.2 풀이"></a>3.2 풀이</h2><ul><li><code>push &#39;(&#39;</code>와 <code>pop &#39;)&#39;</code>을 한 번씩 해서 빈 배열이 되어야 함</li><li>올바른 괄호 : <code>(())()</code></li><li>올바르지 않은 괄호 : <code>(()(</code></li></ul><h3 id="3-2-1-stack-이용"><a href="#3-2-1-stack-이용" class="headerlink" title="3.2.1 stack 이용"></a>3.2.1 stack 이용</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> stack = [];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// for of : 배열 순회</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> c <span class="keyword">of</span> s) &#123;</span><br><span class="line">    <span class="comment">// 여는 괄호일 경우</span></span><br><span class="line">    <span class="keyword">if</span> (c === <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">      stack.<span class="title function_">push</span>(c);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 스택이 비어있는 경우</span></span><br><span class="line">      <span class="keyword">if</span> (stack.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 닫는 괄호일 경우</span></span><br><span class="line">      stack.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 빈 배열이라면 true, 아니라면 false</span></span><br><span class="line">  <span class="keyword">return</span> stack.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-stack을-이용하지-않는-방법"><a href="#3-2-2-stack을-이용하지-않는-방법" class="headerlink" title="3.2.2 stack을 이용하지 않는 방법"></a>3.2.2 stack을 이용하지 않는 방법</h3><p>stack보다 메모리를 적게 사용 가능</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> opened = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> bracket <span class="keyword">of</span> s) &#123;</span><br><span class="line">    <span class="keyword">if</span> (bracket === <span class="string">&quot;(&quot;</span>) opened += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (bracket === <span class="string">&quot;)&quot;</span>) opened -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (opened &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> opened === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li><a href="https://laboputer.github.io/ps/2017/09/09/stack/">https://laboputer.github.io/ps/2017/09/09/stack/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CS-자료구조-알고리즘 </category>
          
          <category> JS-자료구조-알고리즘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS-자료구조-알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-JS-DataAlgo-04-연결리스트(Linked List)</title>
      <link href="/2023/01/11/CS-JS-DataAlgo-04/"/>
      <url>/2023/01/11/CS-JS-DataAlgo-04/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Linked-List"><a href="#1-Linked-List" class="headerlink" title="1. Linked List"></a>1. Linked List</h1><p>추가와 삭제가 반복되는 로직이라면 어떻게 해야될까? </p><ul><li>배열을 이용하면 시간복잡도가 굉장히 커져 권장되지 않습니다.</li><li>배열은 탐색이 많을 떄 유용한 자료구조이다.</li></ul><p>추가와 삭제가 많을 떄 유용한 자료구조는 <code>연결 리스트</code>이다.</p><ul><li>연결 리스트는 <strong>각 요소를 포인터로 연결하여 관리</strong>하는 선형 자료구조다.</li><li>각 요소는 <code>노드(Node)</code>라고 부르며 <code>데이터 영역</code>과 <code>포인터 영역</code>으로 구성된다.</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_4_1.png" alt="Data Structure_4_1"></p><hr><h2 id="1-2-배열과-차이점"><a href="#1-2-배열과-차이점" class="headerlink" title="1.2 배열과 차이점"></a>1.2 배열과 차이점</h2><h3 id="1-2-1-메모리-차이"><a href="#1-2-1-메모리-차이" class="headerlink" title="1.2.1 메모리 차이"></a>1.2.1 메모리 차이</h3><ul><li><code>배열</code>은 순차적인 데이터가 들어가기에 메모리 영역을 연속적으로 사용</li><li><code>연결 리스트</code>는 순차적이지 않기에 각 데이터가 퍼져있음<ul><li>퍼져있는 메모리의 영역을 알기 위해 포인터를 사용</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_4_2.png" alt="Data Structure_4_2"></p><h3 id="1-2-2-배열-요소-추가-및-삭제"><a href="#1-2-2-배열-요소-추가-및-삭제" class="headerlink" title="1.2.2 배열 요소 추가 및 삭제"></a>1.2.2 배열 요소 추가 및 삭제</h3><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_4_3.png" alt="Data Structure_4_3"></p><h3 id="1-2-3-연결-리스트-요소-추가-및-삭제"><a href="#1-2-3-연결-리스트-요소-추가-및-삭제" class="headerlink" title="1.2.3 연결 리스트 요소 추가 및 삭제"></a>1.2.3 연결 리스트 요소 추가 및 삭제</h3><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_4_4.png" alt="Data Structure_4_4"></p><hr><h1 id="2-연결-리스트-Singly-Linked-List"><a href="#2-연결-리스트-Singly-Linked-List" class="headerlink" title="2. 연결 리스트(Singly Linked List)"></a>2. 연결 리스트(Singly Linked List)</h1><ul><li><strong>Head에서 Tail까지 단방향</strong>으로 이어지는 연결 리스트</li><li>가장 단순한 형태인 연결리스트</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_4_5.png" alt="Data Structure_4_5"></p><hr><h2 id="2-1-요소-찾기"><a href="#2-1-요소-찾기" class="headerlink" title="2.1 요소 찾기"></a>2.1 요소 찾기</h2><p>‘4’를 찾는다면?</p><ol><li><strong>HEAD 포인터를 찾는다.</strong></li><li><strong>HEAD 포인터를 참고하여, 다음 요소인 HEAD를 찾습니다.</strong></li><li><strong>그 요소가 찾는 4인지 확인하고, 아니라면 포인터 영역을 통해 다음 요소로 넘어갑니다.</strong></li><li><strong>2~3번을 반복</strong></li></ol><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_4_6.png" alt="Data Structure_4_6"></p><hr><h2 id="2-2-요소-추가"><a href="#2-2-요소-추가" class="headerlink" title="2.2 요소 추가"></a>2.2 요소 추가</h2><p>‘3’을 1과 4 데이터 중간에 추가한다면?</p><ol><li>3의 포인터 영역을 4를 가르킨다.</li><li>2의 포인터 영역을 3을 가르킨다.</li></ol><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_4_7.png" alt="Data Structure_4_7"></p><hr><h2 id="2-3-요소-삭제"><a href="#2-3-요소-삭제" class="headerlink" title="2.3 요소 삭제"></a>2.3 요소 삭제</h2><p>‘2’를 삭제한다면?</p><ol><li>삭제할 요소의 이전 포인터 영역을 삭제할 요소의 다음 데이터 영역을 가르키게 한다.</li><li>삭제할 요소를 메모리 상에서 지운다.</li></ol><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_4_8.png" alt="Data Structure_4_8"></p><hr><h1 id="3-이중-연결-리스트-Doubly-Linked-List"><a href="#3-이중-연결-리스트-Doubly-Linked-List" class="headerlink" title="3. 이중 연결 리스트(Doubly Linked List)"></a>3. 이중 연결 리스트(Doubly Linked List)</h1><ul><li><strong>양방향으로 이어지는 연결 리스트</strong></li><li><strong>포인터가 2개</strong>가 존재</li><li>Singly Linked List보다 자료구조의 크기가 조금 더 크다.</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_4_9.png" alt="Data Structure_4_9"></p><hr><h2 id="3-1-요소-추가"><a href="#3-1-요소-추가" class="headerlink" title="3.1 요소 추가"></a>3.1 요소 추가</h2><p>‘3’을 2와 4 중간에 추가한다면?</p><p>(1) <strong>추가할 요소의 다음 노드를 4를 가르키게 한다.</strong></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_4_10.png" alt="Data Structure_4_10"></p><p>(2) <strong>2의 다음 노드를 추가할 요소를 가르키게 한다.</strong></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_4_11.png" alt="Data Structure_4_11"></p><p>(3) <strong>4의 이전 노드를 추가할 요소를 가르키게 한다.</strong></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_4_12.png" alt="Data Structure_4_12"></p><p>(4) <strong>추가할 요소의 이전 노드를 2를 가르키게 한다.</strong></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_4_13.png" alt="Data Structure_4_13"></p><hr><h2 id="3-2-요소-삭제"><a href="#3-2-요소-삭제" class="headerlink" title="3.2 요소 삭제"></a>3.2 요소 삭제</h2><p>‘2’를 삭제한다면?</p><p>(1) <strong>삭제할 요소의 이전 노드를 삭제할 요소의 다음을 가르키게 한다.</strong></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_4_14.png" alt="Data Structure_4_14"></p><p>(2) <strong>삭제할 요소의 다음의 이전 노드를 삭제할 요소의 이전을 가르키게 한다.</strong></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_4_15.png" alt="Data Structure_4_15"></p><p>(3) <strong>삭제할 요소를 메모리 상에서 지운다.</strong></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_4_16.png" alt="Data Structure_4_16"></p><hr><h1 id="4-환형-연결리스트-Circular-Linked-List"><a href="#4-환형-연결리스트-Circular-Linked-List" class="headerlink" title="4. 환형 연결리스트(Circular Linked List)"></a>4. 환형 연결리스트(Circular Linked List)</h1><ul><li>Singly 혹은 Doubly Linked List에서 <strong>Tail이 Head로 연결</strong>되는 연결리스트</li><li>메모리를 아껴쓸 수 있다. </li><li>원형 큐 등을 만들때도 사용된다.</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_4_17.png" alt="Data Structure_4_17"></p><hr><h1 id="5-구현"><a href="#5-구현" class="headerlink" title="5. 구현"></a>5. 구현</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="comment">// 생성자: new 키워드로 객체를 생성할때 자동으로 호출되는 함수</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value; <span class="comment">// 값</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>; <span class="comment">// 포인터</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>; <span class="comment">// head 포인터</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="literal">null</span>; <span class="comment">// tail 포인터</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 📝 해당하는 값 찾기</span></span><br><span class="line">  <span class="title function_">find</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currNode = <span class="variable language_">this</span>.<span class="property">head</span>; <span class="comment">// 입력받은 연결리스트의 Head 포인터 가져오기</span></span><br><span class="line">    <span class="comment">// 입력한 값을 찾을 때까지 다음 노드로 순회</span></span><br><span class="line">    <span class="keyword">while</span> (currNode.<span class="property">value</span> !== value) &#123;</span><br><span class="line">      currNode = currNode.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currNode; <span class="comment">// 값을 찾으면 해당 노드를 반환</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 📝 끝에 추가</span></span><br><span class="line">  <span class="title function_">append</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(newValue); <span class="comment">// 입력받은 값으로 노드 생성</span></span><br><span class="line">    <span class="comment">// 헤드가 비어있다면</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// head와 tail에 생성한 노드를 가리킴</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tail</span> = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 값이 존재하면, 다음 노드로 생성한 노드를 가리킴</span></span><br><span class="line">      <span class="comment">// tail은 생성한 노드를 가리킴</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">next</span> = newNode;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tail</span> = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 📝 중간에 추가</span></span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">node, newValue</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(newValue); <span class="comment">// 입력받은 값으로 노드 생성</span></span><br><span class="line">    newNode.<span class="property">next</span> = node.<span class="property">next</span>; <span class="comment">// (생성한 노드의 다음)을 (입력받은 노드의 다음)을 가리킴</span></span><br><span class="line">    node.<span class="property">next</span> = newNode; <span class="comment">// (입력받은 노드의 다음)을 (새로 생성한 노드)를 가리킴</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 📝 삭제</span></span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> prevNode = <span class="variable language_">this</span>.<span class="property">head</span>; <span class="comment">// 입력받은 연결리스트의 Head 포인터 가져오기</span></span><br><span class="line">    <span class="comment">// 입력한 값을 찾을 때까지 다음 노드로 순회</span></span><br><span class="line">    <span class="keyword">while</span> (prevNode.<span class="property">next</span>.<span class="property">value</span> !== value) &#123;</span><br><span class="line">      prevNode = prevNode.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 값을 찾고 다음이 null이 아니라면</span></span><br><span class="line">    <span class="keyword">if</span> (prevNode.<span class="property">next</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// (이전 노드의 다음)을 (다음의 다음)을 가리킴</span></span><br><span class="line">      <span class="comment">// 그러면 중간 노드가 아무 노드를 가리키고 있지 않기 때문에 GC에 의해 메모리 상에서 삭제</span></span><br><span class="line">      prevNode.<span class="property">next</span> = prevNode.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 📝 출력</span></span><br><span class="line">  <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currNode = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="keyword">let</span> displayString = <span class="string">&#x27;[&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> (currNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">      displayString += <span class="string">`<span class="subst">$&#123;currNode.value&#125;</span>, `</span>;</span><br><span class="line">      currNode = currNode.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    displayString = displayString.<span class="title function_">substr</span>(<span class="number">0</span>, displayString.<span class="property">length</span> - <span class="number">2</span>);</span><br><span class="line">    displayString += <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(displayString);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> linkedList = <span class="keyword">new</span> <span class="title class_">SinglyLinkedList</span>();</span><br><span class="line">linkedList.<span class="title function_">append</span>(<span class="number">1</span>);</span><br><span class="line">linkedList.<span class="title function_">append</span>(<span class="number">2</span>);</span><br><span class="line">linkedList.<span class="title function_">append</span>(<span class="number">3</span>);</span><br><span class="line">linkedList.<span class="title function_">append</span>(<span class="number">5</span>);</span><br><span class="line">linkedList.<span class="title function_">display</span>(); <span class="comment">// [1, 2, 3, 5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(linkedList.<span class="title function_">find</span>(<span class="number">3</span>));</span><br><span class="line"><span class="comment">// Node &#123; value: 3, next: Node &#123; value: 5, next: null &#125; &#125;</span></span><br><span class="line"></span><br><span class="line">linkedList.<span class="title function_">remove</span>(<span class="number">3</span>);</span><br><span class="line">linkedList.<span class="title function_">display</span>(); <span class="comment">// [1, 2, 5]</span></span><br><span class="line">linkedList.<span class="title function_">insert</span>(linkedList.<span class="title function_">find</span>(<span class="number">2</span>), <span class="number">10</span>);</span><br><span class="line">linkedList.<span class="title function_">display</span>(); <span class="comment">// [1, 2, 10, 5]</span></span><br></pre></td></tr></table></figure><p>코딩 테스트에서 연결리스트를 직접 구현하는 경우는 많지 않습니다. 배열을 사용하면 되기 때문이죠.</p>]]></content>
      
      
      <categories>
          
          <category> CS-자료구조-알고리즘 </category>
          
          <category> JS-자료구조-알고리즘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS-자료구조-알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-JS-DataAlgo-03-배열(Array) &amp; 객체(Object)</title>
      <link href="/2023/01/11/CS-JS-DataAlgo-03/"/>
      <url>/2023/01/11/CS-JS-DataAlgo-03/</url>
      
        <content type="html"><![CDATA[<h1 id="1-배열-순차-리스트"><a href="#1-배열-순차-리스트" class="headerlink" title="1. 배열(순차 리스트)"></a>1. 배열(순차 리스트)</h1><ul><li>연관된 데이터를 연속적인 형태로 구성된 구조를 가진다.</li><li>배열에 포함된 원소는 순서대로 번호(index)가 붙는다.</li><li>e.g. <strong>학교 출석부</strong></li></ul><hr><h2 id="1-1-배열의-특징"><a href="#1-1-배열의-특징" class="headerlink" title="1.1 배열의 특징"></a>1.1 배열의 특징</h2><ul><li>고정된 크기를 가지며 일반적으론 동적으로 크기를 늘릴 수 없다.<ul><li>자바스크립트처럼 대부분의 스크립트 언어는 동적으로 크기가 증감되도록 만들어져 있다.</li></ul></li><li>원하는 원소의 index를 알고 있다면 $0(1)$로 원소를 찾을 수 있다</li><li><strong>원소를 삭제하면 해당 index에 빈자리</strong>가 생긴다.</li></ul><hr><h2 id="1-2-배열-요소-삭제"><a href="#1-2-배열-요소-삭제" class="headerlink" title="1.2 배열 요소 삭제"></a>1.2 배열 요소 삭제</h2><p>e.g. 8번을 지우고 순서를 맞추려면</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_3_1.png" alt="Data Structure_3_1"></p><p>삭제 후 순서를 맞추려면 $O(n)$이 소요된다. </p><hr><h2 id="1-3-배열-요소-추가"><a href="#1-3-배열-요소-추가" class="headerlink" title="1.3 배열 요소 추가"></a>1.3 배열 요소 추가</h2><p>e.g. 중간에 128의 요소를 추가하려면</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_3_2.png" alt="Data Structure_3_2"></p><p>중간에 요소를 추가하고 싶다면 $O(n)$이 소요된다.<br>따라서 <code>추가</code>와 <code>삭제</code>가 반복되는 로직이라면 배열 사용을 권장하지 않는다.</p><h2 id="1-4-JavaScript에서-사용법"><a href="#1-4-JavaScript에서-사용법" class="headerlink" title="1.4 JavaScript에서 사용법"></a>1.4 JavaScript에서 사용법</h2><h3 id="1-4-1-배열-생성"><a href="#1-4-1-배열-생성" class="headerlink" title="1.4.1 배열 생성"></a>1.4.1 배열 생성</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 📝 빈 Arrays 생성</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 미리 초기화된 Array를 생성</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 많은 값을 같은 값으로 초기화할 경우 fill을 사용</span></span><br><span class="line"><span class="keyword">let</span> arr3 = <span class="title class_">Array</span>(<span class="number">10</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 특정 로직을 사용하여 초기화할 경우 from을 사용</span></span><br><span class="line"><span class="keyword">let</span> arr4 = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">100</span> &#125;, <span class="function">(<span class="params">_, i</span>) =&gt;</span> i);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr4);</span><br></pre></td></tr></table></figure><hr><h3 id="1-4-2-배열-요소-추가-삭제"><a href="#1-4-2-배열-요소-추가-삭제" class="headerlink" title="1.4.2 배열 요소 추가, 삭제"></a>1.4.2 배열 요소 추가, 삭제</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 4 가 끝에 추가 -&gt; O(1)</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>); <span class="comment">// O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 여러 개를 한 번에 추가 -&gt; O(1)</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">5</span>, <span class="number">6</span>); <span class="comment">//  -&gt; O(1)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 3번 인덱스에 128을 추가 -&gt; O(n)</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">3</span>, <span class="number">0</span>, <span class="number">128</span>); <span class="comment">//  -&gt; O(n)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 3번 인덱스 값을 제거</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">3</span>, <span class="number">1</span>); <span class="comment">// O(n)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">3</span>]);</span><br></pre></td></tr></table></figure><hr><h3 id="1-4-3-특이점"><a href="#1-4-3-특이점" class="headerlink" title="1.4.3 특이점"></a>1.4.3 특이점</h3><p>JavaScript의 배열은 여러 스크립트 언어의 배열과 다르게 동적으로 작동합니다.<br>즉, 배열의 크기가 고정되어 있지 않고 필요에 따라 줄어들기도, 늘어나기도 합니다.</p><p>더 특이한 점은 JS의 배열은 인덱스가 숫자 뿐만 아니라 문자나 논리값도 들어갈 수 있습니다. </p><ul><li>cf. 숫자 이외의 값을 넣는다면, 자동으로 문자열로 변환된 값이 키값이 됩니다. <ul><li>이는 JavaScript의 배열이 근본적으로 객체타입이기 때문입니다.</li></ul></li></ul><p>그렇지만 배열이 일반적인 객체와 다른 점은 length가 내부적으로 관리된다는 점입니다. 반면 인덱스와 무관한 값을 값으로 사용한 경우<br>길이에 영향을 미치지 않습니다. 이는 좋은 코드가 아니기에 알고만 있고, 사용을 하지 않는 것을 추천드립니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 자바스크립트의 Arrays 다른 언어의 Array와 조금 다릅니다.</span></span><br><span class="line"><span class="comment">// 자바스크립트의 Arrays는 동적입니다.</span></span><br><span class="line"><span class="comment">// 📝 즉, 필요에 따라 줄어들기도, 늘어나기도 합니다.</span></span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">2</span>);</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [ 1, 1, 2, 3 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 자바스크립트의 Arrays HashMap에 가깝습니다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 index가 number가 아니어도 됩니다.</span></span><br><span class="line"><span class="comment">// 숫자값이나 논리값도 들어갈 수 있음</span></span><br><span class="line">arr[<span class="string">&#x27;string&#x27;</span>] = <span class="number">10</span>;</span><br><span class="line">arr[<span class="literal">false</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [ 1, 1, 2, 3, string: 10, false: 0 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>); <span class="comment">// 4</span></span><br><span class="line">arr[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-객체"><a href="#2-객체" class="headerlink" title="2. 객체"></a>2. 객체</h1><ul><li>객체는 여러 값을 <code>키-값</code>형태로 결합시킨 복합 타입</li><li>e.g. <strong>학교 사물함</strong> : 사물함의 각 칸에는 이름이 붙어있음</li></ul><hr><h1 id="3-배열-실습"><a href="#3-배열-실습" class="headerlink" title="3. 배열 실습"></a>3. 배열 실습</h1><h2 id="3-1-배열-선언-및-fill-from"><a href="#3-1-배열-선언-및-fill-from" class="headerlink" title="3.1 배열 선언 및 fill(), from()"></a>3.1 배열 선언 및 <strong>fill()</strong>, <strong>from()</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 배열 선언 및 초기화</span></span><br><span class="line"><span class="keyword">const</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">const</span> arr2 = [];</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> arr4 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 fill(채울 값)</span></span><br><span class="line"><span class="keyword">const</span> arr5 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>).<span class="title function_">fill</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 from(초기화할 배열, function(배열값, 배열인덱스) &#123;&#125;)</span></span><br><span class="line"><span class="keyword">const</span> arr6 = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">5</span>), <span class="keyword">function</span> (<span class="params">v, k</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> k + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// []</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">// []</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3); <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr4); <span class="comment">// [ &lt;5 empty items&gt; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr5); <span class="comment">// [ 5, 5, 5, 5, 5 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr6); <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-2-length-배열-길이"><a href="#3-2-length-배열-길이" class="headerlink" title="3.2 length: 배열 길이"></a>3.2 <strong>length</strong>: 배열 길이</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>); <span class="comment">// 6</span></span><br><span class="line">arr.<span class="property">length</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line">arr.<span class="property">length</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [ 1, 2, 3, &lt;7 empty items&gt; ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-3-join-배열-합치기-reverse-역순"><a href="#3-3-join-배열-합치기-reverse-역순" class="headerlink" title="3.3 join(배열 합치기), reverse(역순)"></a>3.3 <strong>join</strong>(배열 합치기), <strong>reverse</strong>(역순)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 join : 배열 합치기</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>)); <span class="comment">// 1, 2, 3, 4, 5, 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 reverse : 배열 역으로 출력, 원래 배열에도 영향을 받음</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reverse</span>()); <span class="comment">// [ 6, 5, 4, 3, 2, 1 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [ 6, 5, 4, 3, 2, 1 ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-4-concat-2개-배열-합치기"><a href="#3-4-concat-2개-배열-합치기" class="headerlink" title="3.4 concat : 2개 배열 합치기"></a>3.4 <strong>concat</strong> : 2개 배열 합치기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 concat : 2개의 배열 합치기</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">concat</span>(arr2));</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-5-push-끝-요소-추가-pop-끝-요소-제거"><a href="#3-5-push-끝-요소-추가-pop-끝-요소-제거" class="headerlink" title="3.5 push(끝 요소 추가), pop(끝 요소 제거)"></a>3.5 <strong>push</strong>(끝 요소 추가), <strong>pop</strong>(끝 요소 제거)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 push : 끝에 요소 추가</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">7</span>);</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 pop : 끝에 요소 제거</span></span><br><span class="line">arr.<span class="title function_">pop</span>(); <span class="comment">// 9</span></span><br><span class="line">arr.<span class="title function_">pop</span>(); <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">pop</span>()); <span class="comment">// 7</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-6-shift-앞-요소-제거-unshift-앞-요소-추가"><a href="#3-6-shift-앞-요소-제거-unshift-앞-요소-추가" class="headerlink" title="3.6 shift(앞 요소 제거), unshift(앞 요소 추가)"></a>3.6 <strong>shift</strong>(앞 요소 제거), <strong>unshift</strong>(앞 요소 추가)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 shift : 맨 앞에 요소 제거</span></span><br><span class="line">arr.<span class="title function_">shift</span>();</span><br><span class="line">arr.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [ 3, 4, 5, 6 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 unshift : 맨 앞에 요소 추가</span></span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [ 10, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-7-slice-중간-요소-자르기"><a href="#3-7-slice-중간-요소-자르기" class="headerlink" title="3.7 slice : 중간 요소 자르기"></a>3.7 <strong>slice</strong> : 중간 요소 자르기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 slice(시작 인덱스 포함, 끝 인덱스 미포함) : 값 잘라내기</span></span><br><span class="line"><span class="comment">// 명시한 끝 인덱스 이전까지 짤림</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">4</span>)); <span class="comment">// [ 3, 4 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 원본 배열에 영향없음</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-8-splice-중간-요소-삭제"><a href="#3-8-splice-중간-요소-삭제" class="headerlink" title="3.8 splice : 중간 요소 삭제"></a>3.8 <strong>splice</strong> : 중간 요소 삭제</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 splice : 중간 요소 삭제</span></span><br><span class="line"><span class="comment">// splice(시작 인덱스, 삭제할 개수)</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [ 1, 2, 5, 6 ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-9-for-of-배열-순회"><a href="#3-9-for-of-배열-순회" class="headerlink" title="3.9 for of : 배열 순회"></a>3.9 <strong>for of : 배열 순회</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 for문 : 배열 순회</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]); <span class="comment">// 1 2 3 4 5 6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 for of : 배열 순회</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// 1 2 3 4 5 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-10-배열-x3D-객체"><a href="#3-10-배열-x3D-객체" class="headerlink" title="3.10 배열 &#x3D; 객체"></a>3.10 배열 &#x3D; 객체</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열은 사실 객체이다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> arr); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 따라서 객체 값을 넣을 수 있다.</span></span><br><span class="line">arr[<span class="string">&#x27;key&#x27;</span>] = <span class="string">&#x27;value&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [ 1, 2, 3, 4, 5, 6, key: &#x27;value&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 하지만 배열을 올바르게 사용하는 방법이 아니므로 추천하지 않는다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-객체-실습"><a href="#4-객체-실습" class="headerlink" title="4. 객체 실습"></a>4. 객체 실습</h1><h2 id="4-1-객체-선언-및-초기화"><a href="#4-1-객체-선언-및-초기화" class="headerlink" title="4.1 객체 선언 및 초기화"></a>4.1 객체 선언 및 초기화</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj3 = &#123; <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>, <span class="attr">company</span>: <span class="string">&#x27;Cobalt. Inc.&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3); <span class="comment">// &#123; name: &#x27;메시&#x27;, company: &#x27;Cobalt. Inc.&#x27; &#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-2-객체-요소-추가-및-삭제"><a href="#4-2-객체-요소-추가-및-삭제" class="headerlink" title="4.2 객체 요소 추가 및 삭제"></a>4.2 객체 요소 추가 및 삭제</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>, <span class="attr">company</span>: <span class="string">&#x27;Cobalt. Inc.&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 객체 요소 추가</span></span><br><span class="line">obj[<span class="string">&#x27;email&#x27;</span>] = <span class="string">&#x27;kciter@naver.com&#x27;</span>;</span><br><span class="line">obj.<span class="property">phone</span> = <span class="string">&#x27;01012345678&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   name: &#x27;메시&#x27;,</span></span><br><span class="line"><span class="comment">//   company: &#x27;Cobalt. Inc.&#x27;,</span></span><br><span class="line"><span class="comment">//   email: &#x27;kciter@naver.com&#x27;,</span></span><br><span class="line"><span class="comment">//   phone: &#x27;01012345678&#x27;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 객체 요소 삭제</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">phone</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="comment">// &#123; name: &#x27;메시&#x27;, company: &#x27;Cobalt. Inc.&#x27;, email: &#x27;kciter@naver.com&#x27; &#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-3-in-연산자-키-존재-여부-확인"><a href="#4-3-in-연산자-키-존재-여부-확인" class="headerlink" title="4.3 in 연산자 : 키 존재 여부 확인"></a>4.3 <strong>in 연산자</strong> : 키 존재 여부 확인</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>, <span class="attr">company</span>: <span class="string">&#x27;Cobalt. Inc.&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">obj[<span class="string">&#x27;email&#x27;</span>] = <span class="string">&#x27;kciter@naver.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 in : 키 존재 여부 확인</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;email&#x27;</span> <span class="keyword">in</span> obj); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;phone&#x27;</span> <span class="keyword">in</span> obj); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-4-배열-형태로-key-value-출력"><a href="#4-4-배열-형태로-key-value-출력" class="headerlink" title="4.4 배열 형태로 key, value 출력"></a>4.4 <strong>배열 형태로 key, value 출력</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>, <span class="attr">company</span>: <span class="string">&#x27;Cobalt. Inc.&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">obj[<span class="string">&#x27;email&#x27;</span>] = <span class="string">&#x27;kciter@naver.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 배열 형태로 key 출력</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)); <span class="comment">// [ &#x27;name&#x27;, &#x27;company&#x27;, &#x27;email&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 배열 형태로 value 출력</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(obj)); <span class="comment">// [ &#x27;메시&#x27;, &#x27;Cobalt. Inc.&#x27;, &#x27;kciter@naver.com&#x27; ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-5-for-in-객체-순회"><a href="#4-5-for-in-객체-순회" class="headerlink" title="4.5 for in : 객체 순회"></a>4.5 <strong>for in : 객체 순회</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>, <span class="attr">company</span>: <span class="string">&#x27;Cobalt. Inc.&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">obj[<span class="string">&#x27;email&#x27;</span>] = <span class="string">&#x27;kciter@naver.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 for in : 객체 순회</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, obj[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// name 메시</span></span><br><span class="line"><span class="comment">// company Cobalt. Inc.</span></span><br><span class="line"><span class="comment">// email kciter@naver.com</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS-자료구조-알고리즘 </category>
          
          <category> JS-자료구조-알고리즘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS-자료구조-알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-JS-DataAlgo-02-자료구조의 종류</title>
      <link href="/2023/01/11/CS-JS-DataAlgo-02/"/>
      <url>/2023/01/11/CS-JS-DataAlgo-02/</url>
      
        <content type="html"><![CDATA[<h1 id="1-자료구조"><a href="#1-자료구조" class="headerlink" title="1. 자료구조"></a>1. 자료구조</h1><h2 id="1-1-자료구조"><a href="#1-1-자료구조" class="headerlink" title="1.1 자료구조"></a>1.1 자료구조</h2><p>메모리를 효율적으로 사용하며 빠르고 안정적으로 데이터를 처리하는 것이 궁극적인 목표로<br>상황에 따라 유용하게 사용될 수 있도록 <code>특정 구조</code>를 이루고 있다.</p><p><strong>자주 등장하는 네 가지의 자료구조</strong> &#x3D; Stack, Queue, Tree, Graph</p><hr><h2 id="1-2-전산화"><a href="#1-2-전산화" class="headerlink" title="1.2 전산화"></a>1.2 전산화</h2><p>현실에 존재하는 영화 예매를 어떻게 컴퓨터로 옮길 것인가? 무엇을 고려해야 하는가?</p><ul><li>현실에서 수행되는 프로세스는?<ul><li>고객은 어떤 영화를 볼 지 고른다.</li><li>고객은 영화를 예매하기 위해 줄을 선다.</li><li>고객은 차례가 왔을 떄 좌석을 선택한다.</li><li>고객은 최종적으로 돈을 지불한다.</li></ul></li><li>소프트웨어에서 어떻게 처리할 것인가?<ul><li>영화를 검색한다. → Trie</li><li>고객이 많을 경우 줄을 서야한다. → Queue</li><li>고객은 좌석을 선택할 수 있어야 한다. → HashTable</li></ul></li></ul><blockquote><p>결국 자료구조는 일차원인 컴퓨터 메모리를 현실에 대응되도록 구조를 만든 것이라 할 수 있다.</p></blockquote><hr><h2 id="1-3-자료구조-종류"><a href="#1-3-자료구조-종류" class="headerlink" title="1.3 자료구조 종류"></a>1.3 자료구조 종류</h2><ul><li><code>단순 구조</code><ul><li>정수, 실수, 문자열, 트리</li></ul></li><li><code>선형 구조</code><ul><li>배열</li><li>연결리스트</li><li>스택</li><li>큐</li></ul></li><li><code>비선형 구조</code><ul><li>트리 </li><li>그래프</li></ul></li><li><code>파일구조</code><ul><li>순차 파일, 색인파일, 직접 파일</li></ul></li></ul><hr><h3 id="1-3-1-선형-구조"><a href="#1-3-1-선형-구조" class="headerlink" title="1.3.1 선형 구조"></a>1.3.1 선형 구조</h3><p>한 원소 뒤에 하나의 원소 만이 존재하는 형태로 자료들이 선형으로 나열되어 있는 구조</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_2_1.png" alt="Data Structure_2_1"></p><h3 id="1-3-2-비선형-구조"><a href="#1-3-2-비선형-구조" class="headerlink" title="1.3.2 비선형 구조"></a>1.3.2 비선형 구조</h3><p>원소 간 다대다 관계를 가지는 구조로 계층적 구조나 망형 구조를 표현하기에 적절</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_2_2.png" alt="Data Structure_2_2"></p><hr><h2 id="1-4-완벽한-자료구조는-없다"><a href="#1-4-완벽한-자료구조는-없다" class="headerlink" title="1.4 완벽한 자료구조는 없다"></a>1.4 완벽한 자료구조는 없다</h2><p>더 좋고 더 나쁜 자료구조는 없다. 특정 상황에서 유용한 자료구조와 덜 유용한 자료구조가 존재할 뿐이다.<br>우리는 상황에 맞는 적절한 자료구조를 선택하면 된다.</p><hr><h1 id="2-시간-복잡도"><a href="#2-시간-복잡도" class="headerlink" title="2. 시간 복잡도"></a>2. 시간 복잡도</h1><h2 id="2-1-프로그램의-성능을-정학히-알-수-있는가"><a href="#2-1-프로그램의-성능을-정학히-알-수-있는가" class="headerlink" title="2.1 프로그램의 성능을 정학히 알 수 있는가?"></a>2.1 프로그램의 성능을 정학히 알 수 있는가?</h2><p>고려할 것</p><ul><li>입력 크기</li><li>하드웨어 성능</li><li>운영체제 성능</li><li>컴파일러 최적화</li><li>비동기 로직</li><li>…</li></ul><p>프로그램의 성능을 정학히 파악하는 것은 불가능합니다.<br>그렇기 때문에 컴퓨터 과학자들은 대략적인 성능을 파악하기 위해 빅오 표기법을 도입했습니다.</p><hr><h2 id="2-2-Big-O-Notation-빅오-표기법"><a href="#2-2-Big-O-Notation-빅오-표기법" class="headerlink" title="2.2 Big-O Notation (빅오 표기법)"></a>2.2 Big-O Notation (빅오 표기법)</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_2_3.png" alt="Data Structure_2_3"></p><ul><li><p>$O(1)$ : 상수 시간❌</p><ul><li>각 인풋 공간에 변화가 없다.</li><li>그래서 constant(변함없는) time라 부름</li></ul></li><li><p>$O(log\ n)$ : 로그 시간</p><ul><li>cf. 로그는 밑이 2</li><li>e.g. 이진 탐색(binary search)</li></ul></li><li><p>$O(n)$ : 선형 시간(linear time)</p><ul><li>최악의 경우 n개의 연산을 수행해야 할 경우 적용</li><li>대부분 간단한 반복문 안에서 constant time연산을 하는 경우</li></ul></li><li><p>$O(n\ log\ n)$ : 선형 로그 시간</p><ul><li>실행시간이 입력크기의 로그에 비례</li></ul></li><li><p>$O(n^2)$ : 2차 시간</p></li><li><p>$O(2^n)$ : 지수 시간❌</p><ul><li>e.g. 피보나치 수열</li></ul></li><li><p>$O(n!)$ : 팩토리얼 시간❌</p></li></ul><blockquote><p>Ref</p><ul><li><a href="https://dev.to/b0nbon1/understanding-big-o-notation-with-javascript-25mc">understanding big O notation with js</a></li><li><a href="https://www.youtube.com/watch?v=6Iq5iMCVsXA">엔지니어 대한민국 유튜브 - 빅오표기법 완전정복</a></li></ul></blockquote><hr><h3 id="2-2-1-O-n-선형-시간"><a href="#2-2-1-O-n-선형-시간" class="headerlink" title="2.2.1 $O(n)$ : 선형 시간"></a>2.2.1 $O(n)$ : 선형 시간</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-2-O-log-n-로그-시간"><a href="#2-2-2-O-log-n-로그-시간" class="headerlink" title="2.2.2 $O(log\ n)$ : 로그 시간"></a>2.2.2 $O(log\ n)$ : 로그 시간</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= n; i += <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>i &#x3D; 2n의 값을 볼 수 있으므로 n번째 반복에서는 i &#x3D; 2n</li><li>그러므로 이 결과를 추론할 수 있다.<ul><li>$2n &lt; N$</li><li>$log(2n) &lt; log(N)$</li><li>$n &lt; log(N)$</li></ul></li></ul><hr><h3 id="2-2-3-O-n-log-n-선형-로그-시간"><a href="#2-2-3-O-n-log-n-선형-로그-시간" class="headerlink" title="2.2.3 $O(n\ log\ n)$ : 선형 로그 시간"></a>2.2.3 $O(n\ log\ n)$ : 선형 로그 시간</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= n; i += <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-4-O-n-2-2차-시간"><a href="#2-2-4-O-n-2-2차-시간" class="headerlink" title="2.2.4 $O(n^2)$ : 2차 시간"></a>2.2.4 $O(n^2)$ : 2차 시간</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$$<br>O(n^2+126) &#x3D; O(n^2)\<br>O(3n-30) &#x3D; O(n)\<br>O(3\ log\ n) &#x3D; O(log\ n)<br>$$</p><p><code>빅오 표기법</code>은 <strong>점근적 표기법을 따릅니다.</strong> 점근적 표기법은 <strong>함수의 증감 추세를 비교하는 방법</strong>입니다. </p><p>다음 그림처럼 c와 g가 양수라고 가정하고, n이 $n_0$를 넘어설 떄,<br>함수 $f$에는 함수 $g$에 한없이 가까워질 순 있지만, 넘을 수는 없습니다.<br>한마디로, 함수 g(n)에는 함수 f의 한계치라 할 수 있습니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/Data%20Structure_2_4.png" alt="Data Structure_2_4"></p><hr><h2 id="2-3-빅오표기법-법칙"><a href="#2-3-빅오표기법-법칙" class="headerlink" title="2.3 빅오표기법 법칙"></a>2.3 빅오표기법 법칙</h2><h3 id="2-3-1-계수-법칙"><a href="#2-3-1-계수-법칙" class="headerlink" title="2.3.1 계수 법칙"></a>2.3.1 계수 법칙</h3><ul><li>상수 $k$가 0보다 클 떄 $f(n)&#x3D;O(g(n))$이면 $kf(n)&#x3D;O(g(n))$이다.</li><li><strong>$n$이 무한에 가까울 수록 $k$의 크기는 의미가 없기 떄문</strong>이다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 두 루프는 같은 O(n)으로 표기된다.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n * <span class="number">5</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-3-2-합의-법칙"><a href="#2-3-2-합의-법칙" class="headerlink" title="2.3.2 합의 법칙"></a>2.3.2 합의 법칙</h3><ul><li>$f(n)&#x3D;O(h(n))$이고 $g(n)&#x3D;O(p(n))$이면 $f(n)+g(n)&#x3D;O(h(n))+O(p(n))$이다.</li><li><strong>빅오는 더해질 수 있다.</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 두 루프를 합쳐 O(n + m)으로 표기할 수 있다.</span></span><br><span class="line"><span class="comment">// 계수 법칙에 의해 5는 사라진다.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m * <span class="number">5</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-3-3-곱의-법칙"><a href="#2-3-3-곱의-법칙" class="headerlink" title="2.3.3 곱의 법칙"></a>2.3.3 곱의 법칙</h3><ul><li>$f(n)&#x3D;O(h(n))$이고 $g(n)&#x3D;O(p(n))$이면 $f(n)*g(n)&#x3D;O(h(n))*O(p(n))$이다.</li><li><strong>빅오는 곱해질 수 있다.</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 두 루프를 곱해 O(n^2)으로 표기할 수 있다.</span></span><br><span class="line"><span class="comment">// 계수 법칙에 의해 5는 사라진다.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n * <span class="number">5</span>; j += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-3-4-다항-법칙"><a href="#2-3-4-다항-법칙" class="headerlink" title="2.3.4 다항 법칙"></a>2.3.4 다항 법칙</h3><ul><li>$f(n)$이 $k$차 다항식이면 $f(n)$은 $O(n^k)$이다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 다음 루프는 O(n^3)으로 표기할 수 있다.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n * n * n; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-3-5-핵심"><a href="#2-3-5-핵심" class="headerlink" title="2.3.5 핵심"></a>2.3.5 핵심</h3><p>2가지만 기억하세요.</p><p><strong>(1) 상수항은 무시</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 계수 법칙에 의해 계수는 무시된다.</span></span><br><span class="line"><span class="comment">// 그리하여 O(n + m)으로 표기된다.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n * <span class="number">6</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m * <span class="number">3</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(2) 가장 큰 항 외엔 무시</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// O(n^2 + n)이지만 작은 항은 무시하여</span></span><br><span class="line"><span class="comment">// O(n^2)으로만 표기해도 된다.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4-JS에서-성능-측정-방법"><a href="#2-4-JS에서-성능-측정-방법" class="headerlink" title="2.4 JS에서 성능 측정 방법"></a>2.4 JS에서 성능 측정 방법</h2><h3 id="2-4-1-Date-객체를-이용"><a href="#2-4-1-Date-객체를-이용" class="headerlink" title="2.4.1 Date 객체를 이용"></a>2.4.1 Date 객체를 이용</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(end - start);</span><br></pre></td></tr></table></figure><h3 id="2-4-2-예시"><a href="#2-4-2-예시" class="headerlink" title="2.4.2 예시"></a>2.4.2 예시</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"><span class="keyword">const</span> N = <span class="number">1000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line">  total += i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(end - start);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Finish&#x27;</span>);</span><br><span class="line"><span class="comment">/* 결과</span></span><br><span class="line"><span class="comment">start</span></span><br><span class="line"><span class="comment">1063</span></span><br><span class="line"><span class="comment">Finish</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-자바스크립트-9가지-코드-트릭"><a href="#3-자바스크립트-9가지-코드-트릭" class="headerlink" title="3. 자바스크립트 9가지 코드 트릭"></a>3. 자바스크립트 9가지 코드 트릭</h1><h2 id="3-1-구조-분해-할당을-이용한-변수-swap"><a href="#3-1-구조-분해-할당을-이용한-변수-swap" class="headerlink" title="3.1 구조 분해 할당을 이용한 변수 swap"></a>3.1 구조 분해 할당을 이용한 변수 swap</h2><p>ES6의 구조 분해 할당 문법을 사용하여 두 변수를 swap 할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>, b = <span class="number">10</span>;</span><br><span class="line">[a, b] = [b, a];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b); <span class="comment">// 10 5</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-2-배열-생성으로-루프-제거하기"><a href="#3-2-배열-생성으로-루프-제거하기" class="headerlink" title="3.2 배열 생성으로 루프 제거하기"></a>3.2 배열 생성으로 루프 제거하기</h2><p>보통 단순히 범위 루프를 돌고 싶다면 다음과 같이 코드를 작성합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">5</span>; i &lt; <span class="number">10</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">  sum += i; <span class="comment">// 35 (5~9까지의 합)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 범위 루프를 함수형 프로그래밍 방식으로 사용하고 싶다면 배열을 생성해서 사용할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (_, k) =&gt; k + 5</span></span><br><span class="line"><span class="comment">// _는 보통 사용하지 않는 변수, 파라메터 등에 이름을 붙일 때 사용</span></span><br><span class="line"><span class="comment">// 특별한 문법적인 기능이 있지는 않지만 관례상 사용되는 규칙</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="title class_">Array</span></span><br><span class="line">  .<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>), <span class="function">(<span class="params">_, k</span>) =&gt;</span> k + <span class="number">5</span>) <span class="comment">// 5부터 시작하는 유사 배열 생성</span></span><br><span class="line">  .<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><blockquote><p>💡 <code>from()</code> : 문자열 등 유사 배열(Array-like) 객체나 이터러블한 객체를 배열로 만들어주는 메서드</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(복사할 배열, 복사하면서 수행할 <span class="keyword">function</span>)</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="3-3-배열-내-같은-요소-제거하기"><a href="#3-3-배열-내-같은-요소-제거하기" class="headerlink" title="3.3 배열 내 같은 요소 제거하기"></a>3.3 배열 내 같은 요소 제거하기</h2><p><code>Set</code>을 이용할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;Lee&#x27;</span>, <span class="string">&#x27;Kim&#x27;</span>, <span class="string">&#x27;Park&#x27;</span>, <span class="string">&#x27;Lee&#x27;</span>, <span class="string">&#x27;Kim&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> uniqueNamesWithArrayFrom = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(names));</span><br><span class="line"><span class="keyword">const</span> uniqueNamesWithSpread = [...<span class="keyword">new</span> <span class="title class_">Set</span>(names)];</span><br></pre></td></tr></table></figure><hr><h2 id="3-4-Spread-연산자를-이용한-객체-병합"><a href="#3-4-Spread-연산자를-이용한-객체-병합" class="headerlink" title="3.4 Spread 연산자를 이용한 객체 병합"></a>3.4 Spread 연산자를 이용한 객체 병합</h2><p>두 객체를 별도 변수에 합쳐줄 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Lee Sun-Hyoup&#x27;</span>,</span><br><span class="line">  <span class="attr">familyName</span>: <span class="string">&#x27;Lee&#x27;</span>,</span><br><span class="line">  <span class="attr">givenName</span>: <span class="string">&#x27;Sun-Hyoup&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> company = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Cobalt. Inc.&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: <span class="string">&#x27;Seoul&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> leeSunHyoup = &#123; ...person, ...company &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(leeSunHyoup);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   name: &#x27;Cobalt. Inc.&#x27;,</span></span><br><span class="line"><span class="comment">//   familyName: &#x27;Lee&#x27;,</span></span><br><span class="line"><span class="comment">//   givenName: &#x27;Sun-Hyoup&#x27;,</span></span><br><span class="line"><span class="comment">//   address: &#x27;Seoul&#x27; 같은 키는 마지막에 대입된 값으로 정해진다.</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-5-amp-amp-와-활용"><a href="#3-5-amp-amp-와-활용" class="headerlink" title="3.5 &amp;&amp;와 || 활용"></a>3.5 &amp;&amp;와 || 활용</h2><p>&amp;&amp;와 ||는 조건문 외에서도 활용될 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 📝 ||</span></span><br><span class="line"><span class="comment">// 기본값을 넣어주고 싶을 때 사용할 수 있습니다.</span></span><br><span class="line"><span class="comment">// participantName이 0, undefined, 빈 문자열, null일 경우 &#x27;Guest&#x27;로 할당됩니다.</span></span><br><span class="line"><span class="keyword">let</span> participantName,</span><br><span class="line">  flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> name = participantName || <span class="string">&#x27;Guest&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 📝 &amp;&amp;</span></span><br><span class="line"><span class="comment">// flag가 true일 경우에만 실행됩니다.</span></span><br><span class="line">flag &amp;&amp; <span class="title function_">func</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체 병합에도 이용할 수 있습니다.</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">makeCompany</span> = (<span class="params">showAddress</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Cobalt. Inc.&#x27;</span>,</span><br><span class="line">    ...(showAddress &amp;&amp; &#123; <span class="attr">address</span>: <span class="string">&#x27;Seoul&#x27;</span> &#125;),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">makeCompany</span>(<span class="literal">false</span>)); <span class="comment">// &#123; name: &#x27;Cobalt. Inc.&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">makeCompany</span>(<span class="literal">true</span>)); <span class="comment">// &#123; name: &#x27;Cobalt. Inc.&#x27;, address: &#x27;Seoul&#x27; &#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-6-구조-분해-할당-사용하기"><a href="#3-6-구조-분해-할당-사용하기" class="headerlink" title="3.6 구조 분해 할당 사용하기"></a>3.6 구조 분해 할당 사용하기</h2><p>객체에서 필요한 것만 꺼내 쓰는 것이 좋습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Lee Sun-Hyoup&#x27;</span>,</span><br><span class="line">  <span class="attr">familyName</span>: <span class="string">&#x27;Lee&#x27;</span>,</span><br><span class="line">  <span class="attr">givenName</span>: <span class="string">&#x27;Sun-Hyoup&#x27;</span>,</span><br><span class="line">  <span class="attr">company</span>: <span class="string">&#x27;Cobalt. Inc.&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: <span class="string">&#x27;Seoul&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; familyName, givenName &#125; = person;</span><br></pre></td></tr></table></figure><h3 id="3-6-1-객체-생성시-키-생략하기"><a href="#3-6-1-객체-생성시-키-생략하기" class="headerlink" title="3.6.1 객체 생성시 키 생략하기"></a>3.6.1 객체 생성시 키 생략하기</h3><p>객체를 생성할 때 프로퍼티 키를 변수 이름으로 생략할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Lee Sun-Hyoup&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> company = <span class="string">&#x27;Cobalt&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name,</span><br><span class="line">  company,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// &#123; name: &#x27;Lee Sun-Hyoup&#x27;, company: &#x27;Cobalt&#x27; &#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-7-비구조화-할당-사용하기"><a href="#3-7-비구조화-할당-사용하기" class="headerlink" title="3.7 비구조화 할당 사용하기"></a>3.7 비구조화 할당 사용하기</h2><p>함수에 객체를 넘길 경우 필요한 것만 꺼내 쓸 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">makeCompany</span> = (<span class="params">&#123; name, address, serviceName &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    address,</span><br><span class="line">    serviceName,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> cobalt = <span class="title function_">makeCompany</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Cobalt. Inc.&#x27;</span>, <span class="attr">address</span>: <span class="string">&#x27;Seoul&#x27;</span>, <span class="attr">serviceName</span>: <span class="string">&#x27;Present&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="3-8-동적-속성-이름"><a href="#3-8-동적-속성-이름" class="headerlink" title="3.8 동적 속성 이름"></a>3.8 동적 속성 이름</h2><p>ES6에 추가된 기능으로 객체의 키를 동적으로 생성 할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nameKey = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> emailKey = <span class="string">&#x27;email&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  [nameKey]: <span class="string">&#x27;Lee Sun-Hyoup&#x27;</span>,</span><br><span class="line">  [emailKey]: <span class="string">&#x27;kciter@naver.com&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// &#123; name: &#x27;Lee Sun-Hyoup&#x27;, email: &#x27;kciter@naver.com&#x27; &#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-9-연산자를-사용하여-Boolean-값으로-바꾸기"><a href="#3-9-연산자를-사용하여-Boolean-값으로-바꾸기" class="headerlink" title="3.9 !! 연산자를 사용하여 Boolean 값으로 바꾸기"></a>3.9 !! 연산자를 사용하여 Boolean 값으로 바꾸기</h2><p><strong>!! 연산자</strong>를 이용하여 <code>0, null, 빈 문자열, undefined, NaN</code>을 <code>false</code>로 그 외에는 <code>true</code>로 변경할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params">variable</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!!variable) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(variable);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;잘못된 값&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">check</span>(<span class="literal">null</span>); <span class="comment">// 잘못된 값</span></span><br><span class="line"><span class="title function_">check</span>(<span class="number">3.14</span>); <span class="comment">// 3.14</span></span><br><span class="line"><span class="title function_">check</span>(<span class="literal">undefined</span>); <span class="comment">// 잘못된 값</span></span><br><span class="line"><span class="title function_">check</span>(<span class="number">0</span>); <span class="comment">// 잘못된 값</span></span><br><span class="line"><span class="title function_">check</span>(<span class="string">&#x27;Good&#x27;</span>); <span class="comment">// Good</span></span><br><span class="line"><span class="title function_">check</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 잘못된 값</span></span><br><span class="line"><span class="title function_">check</span>(<span class="title class_">NaN</span>); <span class="comment">// 잘못된 값</span></span><br><span class="line"><span class="title function_">check</span>(<span class="number">5</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS-자료구조-알고리즘 </category>
          
          <category> JS-자료구조-알고리즘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS-자료구조-알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS-JS-DataAlgo-01-Intro</title>
      <link href="/2023/01/11/CS-JS-DataAlgo-01/"/>
      <url>/2023/01/11/CS-JS-DataAlgo-01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-자료구조와-알고리즘이-중요한-이유"><a href="#1-자료구조와-알고리즘이-중요한-이유" class="headerlink" title="1. 자료구조와 알고리즘이 중요한 이유"></a>1. 자료구조와 알고리즘이 중요한 이유</h1><p>자료구조 + 알고리즘 &#x3D; <code>프로그램</code></p><p>cf. 코딩테스트 광탈 방지 A to Z : JavaScript 및 다른 자료들을 공부하고 정리한 글입니다.</p><hr><h2 id="1-1-알고리즘-공부-방법"><a href="#1-1-알고리즘-공부-방법" class="headerlink" title="1.1 알고리즘 공부 방법"></a>1.1 알고리즘 공부 방법</h2><ul><li><a href="https://youtu.be/H6z1_tnyhp0">라매 개발자 - 백준 온라인 저지(BOJ)로 처음 알고리즘 시작해서 공부했던 방법</a><ul><li>백준 강의 : 알고리즘 기초1&#x2F;2부터 기초2&#x2F;2까지 포함되어 있는 문제 풀기</li><li>재밌으면 알고리즘 중급1&#x2F;3까지 풀기</li><li>강의도 들어도 됨</li></ul></li></ul><hr><h1 id="2-알고리즘을-잘-공부하는-방법"><a href="#2-알고리즘을-잘-공부하는-방법" class="headerlink" title="2. 알고리즘을 잘 공부하는 방법"></a>2. 알고리즘을 잘 공부하는 방법</h1><h2 id="2-1-문제를-풀-때-중요한-것"><a href="#2-1-문제를-풀-때-중요한-것" class="headerlink" title="2.1 문제를 풀 때 중요한 것"></a>2.1 문제를 풀 때 중요한 것</h2><ol><li>항상 <code>여러가지 풀이 방법</code>이 있을 수 있다는 것을 기억하자</li><li>항상 <code>예외가 있을 수 있다는 것</code>을 기억하자</li><li>내가 풀어낸 답이 <code>베스트인지 의심</code>하자</li><li>문제를 풀었다면 <code>시행착오를 모두 기록</code>하자</li><li><code>다른 사람의 코드</code>를 많이 보자. 생각하지 못했던 방법을 발견할 수 있다.</li><li>쉽게 포기하지 말자. 하지만 <code>도저히 모르겠다면 답을 보는 것</code>도 좋은 방법이다.</li></ol><hr><h2 id="2-2-그나마-재미있게-공부하는-방법"><a href="#2-2-그나마-재미있게-공부하는-방법" class="headerlink" title="2.2 그나마 재미있게 공부하는 방법"></a>2.2 그나마 재미있게 공부하는 방법</h2><ol><li>시각적인 사이트의 도움을 받자<ol><li>VISUALGO : <a href="https://visualgo.net/en">https://visualgo.net/en</a></li><li>Algorithm Visualizer : <a href="https://algorithm-visualizer.org/">https://algorithm-visualizer.org/</a></li></ol></li><li>공부하는 자료구조&#x2F;알고리즘이 어디에 쓰일지 생각해보면서 공부하자.</li></ol>]]></content>
      
      
      <categories>
          
          <category> CS-자료구조-알고리즘 </category>
          
          <category> JS-자료구조-알고리즘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS-자료구조-알고리즘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps-Git-Basic-11-Github 단축키, 프로필</title>
      <link href="/2023/01/11/DevOps-Git-Basic-11/"/>
      <url>/2023/01/11/DevOps-Git-Basic-11/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://blog.cowkite.com/blog/2102241544/">https://blog.cowkite.com/blog/2102241544/</a></li><li>Dream Coding Profile : <a href="https://youtu.be/w9DfC2BHGPA">https://youtu.be/w9DfC2BHGPA</a></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps-Git-Basic-10-코드 보관 - stash</title>
      <link href="/2023/01/11/DevOps-Git-Basic-10/"/>
      <url>/2023/01/11/DevOps-Git-Basic-10/</url>
      
        <content type="html"><![CDATA[<h1 id="1-git-stash-코드-잠깐-보관하기"><a href="#1-git-stash-코드-잠깐-보관하기" class="headerlink" title="1. git stash : 코드 잠깐 보관하기"></a>1. git stash : 코드 잠깐 보관하기</h1><p>이상한 코드가 있다고 칩시다.<br>그 코드를 잠깐 치워놓고 개발하고 싶으면 주석처리해도 되겠지만 <code>git stash</code> 명령어를 이용해도 잠깐 코드를 치울 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 새 프로젝트 폴더 app 생성</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># a 라는 파일 생성 후 수정</span></span><br><span class="line"><span class="comment"># ------------------------------a.txt</span></span><br><span class="line">aaaaaaaaaaaaa</span><br><span class="line"><span class="comment"># -----------------------------------</span></span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;어쩌구&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a의 파일의 수정</span></span><br><span class="line"><span class="comment"># ------------------------------a.txt</span></span><br><span class="line">aaaaaaaaaaaaa</span><br><span class="line">bbbbbbbb <span class="comment"># 잠깐 잘래내서 보관하고 싶음</span></span><br><span class="line"><span class="comment"># -----------------------------------</span></span><br><span class="line"></span><br><span class="line">git stash <span class="comment"># 임시 공간으로 이동</span></span><br><span class="line">git stash list <span class="comment"># 보관된 코드 목록 조회</span></span><br><span class="line">stash@&#123;0&#125;: WIP on main: 8978be9 어쩌구</span><br><span class="line"></span><br><span class="line"><span class="comment"># 최근 commit과의 차이점을 전부 보관해주는 git stash</span></span><br><span class="line"><span class="comment"># 다만, staging 안해놓은 새 파일은 stash가 안될 수도 있음</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------a.txt</span></span><br><span class="line">aaaaaaaaaaaaa</span><br><span class="line">ccccccc</span><br><span class="line"><span class="comment"># -----------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 📝 git stash save &#x27;메모&#x27;</span></span><br><span class="line">git stash save <span class="string">&#x27;ccc라고 적음&#x27;</span> <span class="comment"># 메모도 함께 입력 가능</span></span><br></pre></td></tr></table></figure><p>터미널에 git stash 입력하면 방금 작성한 bbbb 어쩌구 코드는 잠깐 다른 공간에 보관됩니다.<br>(그래서 파일들이 최근 commit 상태로 되돌아갑니다.)</p><ul><li>staging 된 것이든 안된 것이든 추적중인 파일은 다 이동됩니다.</li><li>새로 만든 파일인데 staging 안되었다면 이동안됩니다. </li><li><code> git stash save &#39;메모&#39;</code>로 메모도 함께 입력 가능합니다.</li><li><code>git stash list</code>는 현재 stash 되어있는 코드 목록을 전부 출력해주는 명령어입니다.</li></ul><hr><h1 id="2-보관했던-코드-다시-불러오기"><a href="#2-보관했던-코드-다시-불러오기" class="headerlink" title="2. 보관했던 코드 다시 불러오기"></a>2. 보관했던 코드 다시 불러오기</h1><p><code>git stash</code> 했던 코드가 여러개 있으면 가장 최근에 보관했던 코드부터 먼저 불러옵니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop <span class="comment"># 가장 최근 stash 불러오기</span></span><br></pre></td></tr></table></figure><p>가장 최근에 들어온 것 부터 먼저나갑니다.<br>물론 현재 코드와 겹치는 부분이 있으면 conflict나니까 알아서 해결하면 됩니다. </p><hr><h1 id="3-stash-관련-여러-명령어들"><a href="#3-stash-관련-여러-명령어들" class="headerlink" title="3. stash 관련 여러 명령어들"></a>3. stash 관련 여러 명령어들</h1><p>삭제할 id는 <code>git stash list</code> 하면 보이는 0, 1, 2 이런 숫자 넣으면 됩니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on main: 8978be9 어쩌구</span><br><span class="line"></span><br><span class="line"><span class="comment"># 특정 stash 삭제</span></span><br><span class="line"><span class="comment"># 📝 git stash drop 삭제할id </span></span><br><span class="line">git stash drop 0</span><br><span class="line"></span><br><span class="line">git stash clear <span class="comment"># 모든 stash 삭제</span></span><br></pre></td></tr></table></figure><p>전체 말고 일부 코드만 <code>git stash</code> 하고싶으면 다음 명령어 씁시다.<br>그럼 파일을 훑어주면서 stash할 지 의견을 물어보는데 y&#x2F;n 으로 잘 대답하면 됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash -p </span><br></pre></td></tr></table></figure><hr><h1 id="4-왜쓰나"><a href="#4-왜쓰나" class="headerlink" title="4. 왜쓰나"></a>4. 왜쓰나</h1><p><strong>Q. 주석처리해놓는게 더 쉬울듯</strong> </p><p>실은 코드를 주석처리하는거랑 용도가 비슷한데 주석처리된 코드는 commit할 때 반영됩니다.<br>그렇게 되면 주석도 commit 기록에 남아서 기록이 더러워질 수 있습니다.<br>주석처리한 내용을 commit 해버리기 싫을 때 git stash 쓰면 유용합니다. </p><p>또는 기능 A, B를 만드는데 기능A는 완성되었고, 기능B는 완성이 안됐을 때,<br>팀장이 “기능A 부분만 빨리 commit하고 merge 하라”고 하면 그럴 때 기능B를 git stash 해놔도 좋을듯요.</p><hr><p><strong>Q. 브랜치 새로 만들어서 거기다 코드짜놓는거랑 다를바 없는데요?</strong></p><p>들킴. 간단히 브랜치만들어서 거기 보관하는 것도 나쁘지않습니다. </p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps-Git-Basic--09-branch 전략 - flow, trunk, based</title>
      <link href="/2023/01/11/DevOps-Git-Basic-09/"/>
      <url>/2023/01/11/DevOps-Git-Basic-09/</url>
      
        <content type="html"><![CDATA[<h1 id="1-배경설명"><a href="#1-배경설명" class="headerlink" title="1. 배경설명"></a>1. 배경설명</h1><p>개발자 10명이서 브랜치를 대충 아무렇게나 만들면 개발과정이 매우 복잡해지고 추적도 어려워서,<br>git branch 깔끔하게 만들도록 도와주는 <strong>방법론</strong>같은게 있습니다.<br><strong>Git Flow, Github Flow, Gitlab Flow, Trunk-based</strong> 등 다양한 것들이 있습니다. </p><p>이런걸 적용하면</p><ol><li>브랜치관리가 쉬워지고</li><li>팀원이 아무리 많아도 개발절차가 매끄러워집니다.</li></ol><p>그래서 프로젝트 리드하는 사람들이 알면 좋습니다. </p><hr><h1 id="2-Git-Flow-전략"><a href="#2-Git-Flow-전략" class="headerlink" title="2. Git Flow 전략"></a>2. Git Flow 전략</h1><p>님들이 만드는 프로그램이 항상 안정적인 release를 해야한다면, (e.g. 게임개발) Git Flow 전략을 쓰면 됩니다. </p><p> <strong>Git Flow 전략</strong>(by Vincent Driessen)은 크게 5개 브랜치를 운영합니다.</p><ol><li><code>main</code></li><li><code>develop</code> : 개발용</li><li><code>feature</code> : develop에 기능 추가용</li><li><code>hotfix</code>  : main 브랜치 버그 해결용</li><li>가끔 <code>release</code>  : (develop 브랜치를 main 브랜치에 합치기 전에 최종 테스트용</li></ol><p>게임개발을 예시로 들면, 이제부터 여러분은 게임개발 팀장입니다.</p><ul><li>지금까지는 대충 주먹구구식으로 협업해서 0.9버전까지 만들어놨다고 칩시다.</li><li>근데 1.0 버전부터는 신기능도 많고 해서 제대로 개발을 진행하고 싶은겁니다.</li><li>그래서 이번엔 Git Flow를 도입해서 개발을 진행해봅시다.</li></ul><hr><h2 id="2-1-develop-브랜치부터-생성"><a href="#2-1-develop-브랜치부터-생성" class="headerlink" title="2.1 develop 브랜치부터 생성"></a>2.1 develop 브랜치부터 생성</h2><p>신기능 개발해서 바로 main브랜치에 합칠 것입니까? 절대 안됩니다. 신입 개발자들을 믿을 수 없습니다. </p><ul><li>일단 실험용 프로젝트 사본을 만들고 거기다가 먼저 개발합니다.</li><li>그러기 위해 main 브랜치에 있던 기존 프로젝트를 복사한 develop 브랜치를 생성합니다.</li><li>이제 모든 개발은 develop 브랜치에서 진행하라고 팀원들에게 전파합니다.</li></ul><hr><h2 id="2-2-feature-브랜치에서-신기능개발"><a href="#2-2-feature-브랜치에서-신기능개발" class="headerlink" title="2.2 feature 브랜치에서 신기능개발"></a>2.2 feature 브랜치에서 신기능개발</h2><p>신기능을 만들고 싶으면 develop 브랜치를 복사한 feature 브랜치에서 각각 개발합니다.</p><ul><li>feature&#x2F;guild 브랜치 만들어서 길드기능 만들고 </li><li>feature&#x2F;friend 브랜치 만들어서 친구기능 만들고 하면 됩니다. <ul><li>c.f. 브랜치 작명할 때 여러 단어가 필요하면 보통 대시나 &#x2F; 기호 씁니다</li></ul></li></ul><p> feature(기능)들이 어느정도 완성되면 develop 브랜치에 merge 합니다. 중요한 내용이 아니면 squash and merge도 괜찮습니다. </p><hr><h2 id="2-3-release-브랜치에서-신버전-출시-준비"><a href="#2-3-release-브랜치에서-신버전-출시-준비" class="headerlink" title="2.3 release 브랜치에서 신버전 출시 준비"></a>2.3 release 브랜치에서 신버전 출시 준비</h2><p>develop에서 만든 2개 기능들이 완성된 것 같습니다.<br>이걸 바로 main 브랜치에 합치기엔 또 불안하기 때문에<br>develop -&gt; release 브랜치 이렇게 프로젝트를 복사한 다음 출시준비를 합니다.</p><ul><li>여기서 테스트나 QA같은거 진행하면 됩니다. </li><li>버그를 발견하면 알아서 임시 브랜치 만들어서 수정하거나 합니다.</li><li>release&#x2F;1.0 이런 식으로 이쁘게 브랜치 이름을 짓는 경우가 많습니다.</li></ul><p>완성된 것 같으면 main 브랜치로 merge 합니다.<br>그리고 그거 유저들에게 배포하면 됩니다.<br>개발은 계속 진행되어야하니 완성본은 develop 브랜치에도 merge 해줍시다.</p><hr><h2 id="2-4-hotfix-브랜치에서-버그-수정"><a href="#2-4-hotfix-브랜치에서-버그-수정" class="headerlink" title="2.4 hotfix 브랜치에서 버그 수정"></a>2.4 hotfix 브랜치에서 버그 수정</h2><p>1.0 버전에서 갑자기 골드 무한복사 버그를 발견했습니다.<br>그런 급한 것들은 main 브랜치에서 hotfix 이런 브랜치 하나 만들어서 바로바로 버그수정하면 됩니다.</p><ul><li>수정이 완료되면 main 브랜치에 직접 merge 하면 됩니다. </li><li>당연히 develop 브랜치에도 merge 해줘야합니다.</li></ul><hr><h2 id="2-5-꼭-사용해야-함"><a href="#2-5-꼭-사용해야-함" class="headerlink" title="2.5 꼭 사용해야 함?"></a>2.5 꼭 사용해야 함?</h2><ul><li>장점 : 안정적으로 버전별 배포 가능</li><li>단점 : CI&#x2F;CD 이런거 하는 곳은 안좋아함<ul><li>최근 continuous delivery 이런거 한 때 유행이었는데 그런거 할 땐 적합하지 않을 수 있습니다.</li></ul></li></ul><p>그래서 맨날 남들이 하는거 <strong>따라하지 말고 본인 마음대로 변형해서 쓰면 됨</strong>.<br>예를 들면, release 브랜치 쓰지 않고 바로 main 브랜치에 merge 해서 배포하거나 그래도 됩니다<br> 그 선택에 합당한 이유와 근거가 있으면 됩니다. 물론 책임도 져야합니다. </p><hr><h1 id="3-runk-based-전략"><a href="#3-runk-based-전략" class="headerlink" title="3. runk-based 전략"></a>3. runk-based 전략</h1><p>만드는게 <strong>코드짠걸 바로 대중에 배포를 해도 상관없는 프로그램</strong>이면,<br>그리고 크게 <strong>대격변 업데이트를 안하는 안정적인 프로그램</strong>이면<br>굳이 많은 브랜치를 만들 필요가 없습니다. 그냥 <strong>main 브랜치와 기능추가용 feature 브랜치만 운영</strong>하면 됩니다.<br>이게 <strong>Trunk-based 전략</strong>입니다. <strong>Github Flow도 이거랑 비슷</strong>합니다. </p><hr><h2 id="3-1-브랜치-하나만-잘-관리"><a href="#3-1-브랜치-하나만-잘-관리" class="headerlink" title="3.1 브랜치 하나만 잘 관리"></a>3.1 브랜치 하나만 잘 관리</h2><ol><li>기능추가, 버그픽스가 필요하면 main 브랜치에서 새로운 브랜치를 하나 만들어서 코드짭니다.<ul><li>브랜치마다 작명 잘하는게 중요합니다.</li></ul></li><li>기능이 완성되었으면 main 브랜치에 합칩니다.<ul><li>이제 브랜치 쓸데없으니 삭제합니다.</li></ul></li><li>main 브랜치에 있는 코드를 필요할 때 마다 유저들에게 배포합니다.</li></ol><hr><h2 id="3-2-장단점"><a href="#3-2-장단점" class="headerlink" title="3.2 장단점"></a>3.2 장단점</h2><ul><li>장점<ul><li><strong>코드를 한 브랜치에서만 관리하기 때문에 편리</strong>합니다.</li><li>크게 개발해서 한 번에 merge 하는 것 보다 작은 단위로 merge 하는 것이 더 안전합니다.</li></ul></li><li>단점<ul><li>main 브랜치에 있는 코드가 뻑이나면 큰일나기 때문에 <strong>테스트나 코드리뷰를 자주해야합니다.</strong></li><li>그래서 테스트를 자주하고 자동화해놓는 곳들이 제대로 사용가능합니다.</li></ul></li></ul><hr><h1 id="4-결론"><a href="#4-결론" class="headerlink" title="4. 결론"></a>4. 결론</h1><p>이미 어느정도 개발이 진척이 되었거나 <strong>프로들로 가득한 팀이면 Trunk-based</strong> 이런거 쓰는게 훨씬 편리합니다.<br>최근 유행한 <strong>CI&#x2F;CD 이런 식으로 개발하는 곳들도 Trunk-based 개발방식을 적용</strong>합니다.<br>출시 버전의 안정성이 중요한 프로그램, <strong>아직 뼈대가 확실하지 않아 연구식으로 개발하는 프로그램들은 Git Flow가 적절</strong>할 수 있습니다. </p><hr><p><strong>Q. merge 할 때 어떤 방법 쓰는게 좋은가요?</strong></p><ul><li><strong>기록을 남겨야하는 중요한 브랜치를 merge</strong>할 땐 <strong>3-way merge</strong></li><li><strong>기록을 남길 필요없는 쓸데없는 브랜치를 merge</strong>할 땐 <strong>squash, rebase</strong> 쓰면 됩니다.</li></ul><p>취향일 뿐이고 알아서합시다.</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps-Git-Basic--08-Github - branch로 협업 - pull request</title>
      <link href="/2023/01/11/DevOps-Git-Basic-08/"/>
      <url>/2023/01/11/DevOps-Git-Basic-08/</url>
      
        <content type="html"><![CDATA[<h1 id="1-신기능-개발할려고-branch"><a href="#1-신기능-개발할려고-branch" class="headerlink" title="1. 신기능 개발할려고 branch"></a>1. 신기능 개발할려고 branch</h1><p>신기능을 만들고 싶으면 main 브랜치에 코드짜다가 프로젝트 망치지 말고,<br>다른 브랜치를 만들어서 거기에 개발하는 것도 안전하고 좋다고 했습니다.</p><p>원격 repository (저장소)에도 브랜치를 만들 수 있습니다. 브랜치 생성하려면 </p><ol><li><strong>github.com에서 브랜치</strong> 직접 만들어도 되고</li><li>아니면 <strong>로컬에서 만든 브랜치를 올려도</strong> 브랜치생성이 가능합니다.</li></ol><hr><h2 id="1-1-github-사이트에서-브랜치-생성"><a href="#1-1-github-사이트에서-브랜치-생성" class="headerlink" title="1.1 github 사이트에서 브랜치 생성"></a>1.1 github 사이트에서 브랜치 생성</h2><p>main 브랜치명 버튼 누르면 브랜치를 바꾸하거나 새로 만들 수 있습니다. 심심하면 하나 만들어보거나 하면 됩니다.</p><hr><h2 id="1-2-로컬-repository에서-브랜치-생성"><a href="#1-2-로컬-repository에서-브랜치-생성" class="headerlink" title="1.2 로컬 repository에서 브랜치 생성"></a>1.2 로컬 repository에서 브랜치 생성</h2><p>로컬저장소에서 브랜치생성해서 원격저장소로 <code>git push</code> 해도 됩니다.<br>예를 들면, 지금 사이트를 하나 만들고 있는데 사이트 방문자들 컴퓨터에 몰래 비트코인 채굴기를 심는 기능을 만든다고 칩시다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git clone으로 복사해온 작업폴더(GIT 장인3)에서 새 브랜치 생성</span></span><br><span class="line">git branch mining </span><br><span class="line">git switch mining</span><br><span class="line"></span><br><span class="line"><span class="comment"># d 라는 폴더 만들어서 commit</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;d 만들었음&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a파일 첫 번쨰 줄 수정</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;a 수정&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------------------</span></span><br><span class="line"><span class="comment"># 충돌 일으키기</span></span><br><span class="line">git switch main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 메인 브랜치에서 a파일 첫 번쨰 줄 수정</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;a 수정2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 로컬 브랜치를 원격에 올리고 싶으면</span></span><br><span class="line"><span class="comment"># 📝 git push 원격저장소주소 로컬브랜치명</span></span><br><span class="line">git push origin mining</span><br></pre></td></tr></table></figure><p>GitHub의 레포지토리에 가서, 새로고침해보면 mining 브랜치가 올라갑니다.</p><hr><h2 id="1-3-참고"><a href="#1-3-참고" class="headerlink" title="1.3 참고"></a>1.3 참고</h2><p>초급자은 특정 브랜치만 올리는 일이 잦습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push 원격저장소주소 로컬브랜치명 <span class="comment"># 특정 로컬저장소 브랜치 -&gt; 원격저장소</span></span><br><span class="line">git push 원격저장소주소 <span class="comment"># 모든 로컬저장소 브랜치 -&gt; 원격저장소</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-Pull-request"><a href="#3-Pull-request" class="headerlink" title="3. Pull request"></a>3. Pull request</h1><p>브랜치만들면 뭐합니까. 그걸 main 브랜치와 합쳐야 기능이 완성되지 않겠습니까.<br>합치려면 <code>git merge</code> 명령어로 합치고 <code>git push</code>하면 끝인데,<br>팀끼리 일하는 경우 merge하기 전에 토론하거나 검토하거나 그래야하는 경우가 많습니다.<br>그래서 github.com은 <strong>pull request</strong>라는 기능이 있습니다. 그냥 쉬운 말로 <strong>merge request</strong>입니다. </p><p>이거 누르면 내 브랜치좀 merge 해달라는 요청을 할 수 있고, 팀원끼리 merge전에 코드검토가 가능합니다.<br>github.com 웹사이트에서 pull request를 열고 싶으면</p><ul><li>아무나 상단 Pull requests 메뉴에서 초록버튼 누르면 pull request 생성이 가능</li><li>그 다음 어떤 브랜치를 어디에 합칠 것인지 선택하고, 하단 commit·변경내역을 보고, 초록버튼 누르면 pull request가 열림</li><li>그럼 Pull requests 메뉴에서 이렇게 확인가능한데, 누르면 토론할 수 있는 곳도 있습니다. <ul><li>거기서 코드 리뷰하면 됨</li></ul></li><li>잘 된것 같아 merge하기로 했으면, merge 할 때 여러 옵션이 있는데 택하면 됩니다. <ul><li>이번에는 Squash and mege해보겠습니다.</li></ul></li></ul><p>이제 mining에서 만든 코드가 잘 통합(merge &#x3D; pull request)된 것을 볼 수 있습니다.</p><hr><h2 id="3-1-create-a-merge-commit"><a href="#3-1-create-a-merge-commit" class="headerlink" title="3.1 create a merge commit"></a>3.1 create a merge commit</h2><p>새로운 merge commit을 하나 생성해주는 3-way merge를 실행해줍니다. </p><ul><li><strong>main 브랜치 조회 시 합쳐진 브랜치의 commit 내역도</strong> 전부 나옴 </li><li>터미널에 <code>git log --oneline --graph</code> 해보면 <strong>합쳐진 브랜치도 그림으로 나옴</strong> </li><li>그래서 commit 내역이 많으면 복잡하고 더러워보일 수 있습니다.</li></ul><hr><h2 id="3-2-squash-and-merge"><a href="#3-2-squash-and-merge" class="headerlink" title="3.2 squash and merge"></a>3.2 squash and merge</h2><ul><li><strong>합쳐질 브랜치의 commit 내역을 하나로 합쳐서 main 브랜치에 신규 commit을 생성</strong>해줍니다.</li><li><code>git log --oneline --graph</code>해보면 <strong>합쳐진 브랜치 안나옴</strong> </li><li>commit을 하나로 합쳐서 main 브랜치로 순간이동 시켜주는 행위라 <strong>사람들이 깔끔하다고 좋아합니다</strong>.</li></ul><hr><h2 id="3-3-rebase-and-merge"><a href="#3-3-rebase-and-merge" class="headerlink" title="3.3 rebase and merge"></a>3.3 rebase and merge</h2><ul><li><strong>합쳐질 브랜치를 main 브랜치 최신 commit으로 rebase하고나서 fast-forward merge</strong> 비슷한걸 해줍니다.</li><li>결과는 <strong>squash and merge와 비슷한데 합쳐질 브랜치의 commit 내역이 전부 보존</strong>됩니다. </li><li>애도 <code>git log --oneline --graph</code> 해보면 <strong>합쳐진 브랜치 안나옴</strong></li></ul><hr><h1 id="4-결론"><a href="#4-결론" class="headerlink" title="4. 결론"></a>4. 결론</h1><ul><li>github 등 원격 저장소에도 브랜치만들 수 있습니다. </li><li>Pull request (merge)할 땐 3개 중 맘대로 하면 됩니다.</li></ul><hr><h1 id="5-참고-revert-쓰지말기"><a href="#5-참고-revert-쓰지말기" class="headerlink" title="5. 참고 : revert 쓰지말기"></a>5. 참고 : revert 쓰지말기</h1><p>원격저장소의 commit 내역을 과거로 되돌리고 싶으면,<br>로컬에서 <code>git reset --hard</code> 이런거 쓰고, <code>git push -f</code> 하면 가능하긴 한데,<br>해당 브랜치를 공동작업중인 사람들이 모두 영향받기 때문에 그러지 않는게 좋습니다.<br>github.com 사이트엔 revert 버튼이 있긴 한데, 그거 쓰면 예전 코드로 되돌려주는 commit을 만들어주는 식으로 동작합니다. </p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps-Git-Basic--07-Github - 타인과 협업 - clone, pull</title>
      <link href="/2023/01/11/DevOps-Git-Basic-07/"/>
      <url>/2023/01/11/DevOps-Git-Basic-07/</url>
      
        <content type="html"><![CDATA[<h1 id="1-동료-1명-구함"><a href="#1-동료-1명-구함" class="headerlink" title="1. 동료 1명 구함"></a>1. 동료 1명 구함</h1><p>원격저장소의 장점은 남들과 협업할 수 있다는 겁니다.  원격저장소에 있던 코드를 같이 짜고 싶다면 어떻게할까요.<br>그 친구도 똑같이 코드짜서 <code>git push</code> 어쩌구 하면 그게 협업 끝입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 팀원 이라는 폴더 생성</span></span><br><span class="line">git <span class="built_in">clone</span> 원격저장소주소</span><br></pre></td></tr></table></figure><p>git clone하면, 만들었던 리포지토리가 다운받아집니다.<br>cf. 필요할 땐 특정 브랜치 1개만 clone 해올 수 있습니다</p><p>이제 팀원도 폴더 열어서 코드짜고 commit 하고 <code>git push</code> 하면 됩니다.<br>다만 그 팀원도 github 아이디가 있어야하고, 그 팀원의 아이디를 Collaborators 메뉴에 등록해놔야 협업가능합니다.</p><hr><h1 id="2-팀원이-commit-시-문제"><a href="#2-팀원이-commit-시-문제" class="headerlink" title="2. 팀원이 commit 시 문제"></a>2. 팀원이 commit 시 문제</h1><p>git push는 맘대로 할 수 있는게 아닙니다. <strong>다른 사람이 만든 파일이 원격저장소에 생기면 git push 못합니다.</strong></p><p>예를 들어 b라는 파일을 만들고 commit해서 원격저장소가 타인에 의해 업데이트되었다고 칩시다.</p><p>다른 곳에서 일하던 팀원도 방금 만든 파일을 원격저장소에 업로드하고 싶어진겁니다.<br>예를 들어, c라는 파일을 만들었다고 칩시다. 그럼 이전과 같이 commit 하고 나서 git push 똑같이 하면 됩니다.<br>(팀원인 척 해줄 친구가 없으면 그냥 원래 코드짜던 곳에서 git push 해봅시다)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git장인3 폴더에 c라는 파일 생성 후 아무렇게 수정</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;c만들었음&#x27;</span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"> ! [rejected]        main -&gt; main (fetch first)</span><br><span class="line">error: failed to push some refs to <span class="string">&#x27;https://github.com/berenickt/git-lesson.git&#x27;</span></span><br><span class="line">hint: Updates were rejected because the remote contains work that you <span class="keyword">do</span></span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., <span class="string">&#x27;git pull ...&#x27;</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">&#x27;Note about fast-forwards&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;git push --help&#x27;</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><p><strong>“에러납니다”</strong>  왜냐하면 <strong>원격 vs 로컬 내용이 다르다면</strong> 로컬저장소에서 git push가 안됩니다.<br>왜냐면 그런 상황에서 대충 git push 해버리면 코드가 꼬이기 때문에 얘가 미리 예방해주는 것일 뿐입니다.</p><hr><h1 id="3-git-pull-현재-원격저장소-가져오기"><a href="#3-git-pull-현재-원격저장소-가져오기" class="headerlink" title="3. git pull : 현재 원격저장소 가져오기"></a>3. git pull : 현재 원격저장소 가져오기</h1><p>pull은 <strong>원격저장소에 있던 모든 브랜치 내용을 가져와서 로컬저장소에 합치라는 뜻</strong>입니다.<br>이걸 해주면 로컬이 최신상태가 되기 때문에 이제 <code>git push</code>가 가능합니다.<br><strong>결론은 변동사항이 생겼다면</strong> <code>git pull</code>하고 나서 <code>git push</code> 하면 됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 📝 git pull 원격저장소주소</span></span><br><span class="line"><span class="comment"># -u를 잘해놨다면 원격저장소 주소 생략 가능</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 원격저장소 최신애용이 로컬저장소에 있을 떄만 git push 가능</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><ul><li><code>git pull 원격저장소주소 브랜치명</code>입력하면 특정 브랜치만 가져올 수 있습니다. </li><li>origin이라는 변수명을 등록해놨으면 당연히 사용가능</li><li>예전에 -u 했었으면 git pull, git push까지만 입력해도 잘 됨</li></ul><hr><h1 id="4-git-pull-x3D-git-fetch-git-merge"><a href="#4-git-pull-x3D-git-fetch-git-merge" class="headerlink" title="4. git pull &#x3D; git fetch + git merge"></a>4. git pull &#x3D; git fetch + git merge</h1><p><code>git pull</code> 입력하면 자동으로 <code>git fetch + git merge</code>를 해줍니다. </p><ul><li><code>git fetch</code>는 <strong>원격저장소에 있는 commit 중에 로컬에 없는 신규 commit을 가져오라</strong>는 뜻이고</li><li><code>git merge</code>는 <strong>그걸 merge 하라</strong>는 뜻입니다.</li></ul><p> 그래서 <code>git pull</code>할 때 팀원 2명이서 같은 파일을 건드리고 있을 경우 <code>merge conflict</code>가 날 수 있습니다.<br>conflict는 branch 다룰 때 다뤄봤으니 알아서 해결하면 됩니다.</p><hr><h1 id="5-결론"><a href="#5-결론" class="headerlink" title="5. 결론"></a>5. 결론</h1><p> 그래서 결론은 <strong>협업시 git push 하기 전에 뭐라그러면 git pull하면 됩니다.</strong> </p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps-Git-Basic--06-Github - 코드 올리기 - push</title>
      <link href="/2023/01/11/DevOps-Git-Basic-06/"/>
      <url>/2023/01/11/DevOps-Git-Basic-06/</url>
      
        <content type="html"><![CDATA[<h1 id="1-repository"><a href="#1-repository" class="headerlink" title="1. repository"></a>1. repository</h1><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/git_6_1.png" alt="git_6_1"></p><p>git이 <strong>파일버전을 저장해두는 장소</strong>를 **repository(저장소)**라고 합니다.<br>로컬 작업폴더에는 <strong>.git 폴더</strong>가 있는데 그게 repository 입니다. 실제로 개발할 땐 <strong>온라인 repository</strong>를 많이 사용합니다.</p><p>내가 컴퓨터에 만들어 놓은 git repository를 온라인으로 저장해두는겁니다. 그러면 </p><ul><li>컴퓨터 랜섬웨어 걸려도 안심</li><li>다른 사람과의 협업도 가능</li></ul><p>사람들 많이 쓰는 github.com에서 온라인 repository 하나 만들어봅시다.</p><hr><h1 id="2-github-가입-및-repository-생성"><a href="#2-github-가입-및-repository-생성" class="headerlink" title="2. github 가입 및 repository 생성"></a>2. github 가입 및 repository 생성</h1><p>원격 저장소를 제공해주는 github.com에 들어가서 가입하고 원격저장소를 하나 만들어봅시다.<br>로그인 후에 우측 상단 <code>+</code> 버튼 누르면 repository 하나 만들 수 있습니다.</p><p>이름 대충 짓고 확인만 잘 누르면 됩니다. 그럼 이것저것 git 명령어가 나오는데 그거 따라해도 됨</p><hr><h1 id="3-새-작업폴더에-commit"><a href="#3-새-작업폴더에-commit" class="headerlink" title="3. 새 작업폴더에 commit"></a>3. 새 작업폴더에 commit</h1><p>내 컴퓨터에서 만든 로컬저장소를 원격저장소로 백업해봅시다.<br>일단 새로운 작업폴더에다가 <code>git init</code> 해서 저장소 하나 만들어보십시오. </p><p><strong>1. 작업폴더를 하나 만든 다음 터미널에서 열어서 git init</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git 장인3 이라는 폴더 생성</span></span><br><span class="line">git init <span class="comment"># 로컬 repository 생성 - git 명령어들을 사용할 준비</span></span><br></pre></td></tr></table></figure><hr><p><strong>2. github.com은 이제 기본 브랜치 이름을 master가 아니라 main으로 사용하라고 강요함</strong></p><p>그래서 우리 로컬 작업폴더에 있는 기본 브랜치 이름도 main으로 변경해줍니다. (때에 따라 안해도 될 수 있음)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -M main <span class="comment"># 기본 브랜치 이름 변경</span></span><br></pre></td></tr></table></figure><hr><p><strong>3. 그 다음에 파일같은거 만들어서 commit 몇 번 해보십시오.</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a 라는 파일 생성 후 아무렇게 작성</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;a만듬&#x27;</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-Github에서-만든-원격-저장소에-올리기"><a href="#4-Github에서-만든-원격-저장소에-올리기" class="headerlink" title="4. Github에서 만든 원격 저장소에 올리기"></a>4. Github에서 만든 원격 저장소에 올리기</h1><p><strong>로컬저장소 → 원격저장소</strong>로 업로드하고 싶으면 작업폴더에서 터미널켜서 다음 명령어 치면 됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 로컬저장소의 main 브랜치를 원격저장소에 올림</span></span><br><span class="line">git push -u 원격저장소주소 main</span><br></pre></td></tr></table></figure><ul><li>로컬저장소의 main 브랜치를 원격저장소에 올리라는 뜻입니다. 다른 브랜치도 올릴 수 있음 </li><li><strong>github 로그인하라고 뜨면 로그인</strong>하면 됩니다.</li><li>참고로 <code>-u</code> 옵션은 <strong>방금 입력한 주소 기억</strong>해두라는 뜻입니다. <ul><li>다음부터는 주소를 길게 입력안하고 git push만 입력해도 잘됩니다.</li></ul></li></ul><p>원격 repository 주소는 이렇게 https:&#x2F;&#x2F; 부터 시작해서 .git으로 끝납니다. 잘 찾아보십시오.<br>아니면 주소창에 있는거 그대로 복사해와서 <strong>.git</strong>만 뒤에 붙이면, 그게 <strong>님들 원격 repository 접속 URL</strong>입니다.</p><hr><h1 id="5-원격저장소-주소-입력하기-귀찮으면"><a href="#5-원격저장소-주소-입력하기-귀찮으면" class="headerlink" title="5. 원격저장소 주소 입력하기 귀찮으면"></a>5. 원격저장소 주소 입력하기 귀찮으면</h1><h2 id="5-1-변수에-저장"><a href="#5-1-변수에-저장" class="headerlink" title="5.1 변수에 저장"></a>5.1 변수에 저장</h2><p>그럴 땐 그 주소를 변수에 저장해서 사용할 수 있습니다.<br>변수에 저장하려면 터미널에 <code>git remote add 변수명 저장소주소</code>입력하면 됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 변수에 저장</span></span><br><span class="line"><span class="comment"># git remote add 변수명 원격저장소주소</span></span><br><span class="line">git remote add origin 깃주소</span><br><span class="line"></span><br><span class="line"><span class="comment"># 변수목록 확인</span></span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>이렇게 입력하면 “https:&#x2F;&#x2F;어쩌구” 주소가 필요할 때 마다 origin 이라는 변수명을 쓸 수 있습니다.<br>긴 명령어를 <code>git push -u origin main</code> 이렇게 짧고 귀엽게 쓸 수 있음</p><hr><h2 id="5-2-u옵션-사용"><a href="#5-2-u옵션-사용" class="headerlink" title="5.2 -u옵션 사용"></a>5.2 -u옵션 사용</h2><p><strong>-u</strong>는 <strong>방금 입력한 주소를 기억</strong>하라는 뜻이라, -u 붙여서 1번 했었으면 나중엔 <code>git push</code>까지만 입력해도 알아서 잘됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a 파일 아무렇게 수정</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;a파일 수정&#x27;</span></span><br><span class="line">git push <span class="comment"># -u옵션을 사용해서 원격 저장소에 저장됨</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GitHub에서 commit history도 볼 수 있습니다. </span></span><br></pre></td></tr></table></figure><hr><h1 id="6-원격저장소에-있던거-내려받기"><a href="#6-원격저장소에-있던거-내려받기" class="headerlink" title="6. 원격저장소에 있던거 내려받기"></a>6. 원격저장소에 있던거 내려받기</h1><p>컴퓨터간 소스코드를 공유할 필요 없이 원격저장소에 있던 내용을 그대로 내려받아서 시작하면 편리합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://원격저장소주소</span><br></pre></td></tr></table></figure><hr><h1 id="7-저장소에-올리지-않는-파일들은-gitignore"><a href="#7-저장소에-올리지-않는-파일들은-gitignore" class="headerlink" title="7. 저장소에 올리지 않는 파일들은 .gitignore"></a>7. 저장소에 올리지 않는 파일들은 .gitignore</h1><p>원격저장소를 효율적으로 쓰고 싶으면, 쓸데없는 파일은 commit해서 안올리는 게 좋습니다.<br><strong>.gitignore 파일</strong>을 하나 만들면 저장소에 올리지 않을 파일들을 쉽게 명시가능합니다.<br>거기 명시한 파일들은 <code>git add .</code> 해도 스테이징이 되지 않아서 편리합니다.</p><p>웹개발을 제일 많이 하니까 웹개발을 예로 들면 , node_modules 이런 폴더 이런 것들은 안올립니다.<br>(어짜피 package.json 파일만 잘 있으면 터미널에서 npm install 입력하면 자동으로 node_modules 폴더가 생성됨)</p><p>그래서 <strong>.gitignore</strong> 파일에 명시해주면 됩니다. 작성하는 법은 필요할 때 구글링…</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps-Git-Basic--05-복구 - revert, reset, restore</title>
      <link href="/2023/01/11/DevOps-Git-Basic-05/"/>
      <url>/2023/01/11/DevOps-Git-Basic-05/</url>
      
        <content type="html"><![CDATA[<h1 id="1-파일-복구하는-법"><a href="#1-파일-복구하는-법" class="headerlink" title="1. 파일 복구하는 법"></a>1. 파일 복구하는 법</h1><p>git은 버전관리 프로그램이기 때문에,<br>언제든지 이전 commit으로 되돌아가거나, 문제가 되는 commit 내역을 취소하거나 그럴 수 있습니다. </p><ul><li><code>git restore</code> : 파일 하나 복구</li><li><code>git revert</code> : commit 복구</li><li><code>git reset</code> : 시간 되돌리기</li></ul><hr><h2 id="1-1-새-프로젝트-생성"><a href="#1-1-새-프로젝트-생성" class="headerlink" title="1.1 새 프로젝트 생성"></a>1.1 새 프로젝트 생성</h2><p>깔끔한 상태에서 시작하기 위해 새 작업폴더 만들어서 다시 시작합시다.<br>새 작업폴더에서 <code>git init</code>하고 commit 몇 번 해봅시다. 저는 파일 3개 만들고 만들 때 마다 commit 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Git장인2 라는 새 폴더 생성 후 이동</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># commit 3번 정도</span></span><br><span class="line"><span class="comment"># a파일 만들고 commit</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;a파일 생성&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b파일 만들고 commit</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;b파일 생성&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c파일 만들고 commit</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;c파일 생성&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 여러분의 commit 내역을 한 줄로 이쁘게 보여줌</span></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br></pre></td></tr></table></figure><p>노란 문자들은 <strong>commit의 고유 id</strong> 입니다. 고유 id를 이용해야 “그 고유 id로 되돌려주세요~” 이런 명령들이 가능합니다. </p><hr><h1 id="2-git-restore-파일-하나-복구"><a href="#2-git-restore-파일-하나-복구" class="headerlink" title="2. git restore : 파일 하나 복구"></a>2. git restore : 파일 하나 복구</h1><p>파일 하나가 잘못되었을 경우 ctrl + z 여러번 눌러도 되겠지만, 수정사항이 너무 많다면 명령어 하나로 처리할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># c폴더의 내용을 아무렇게나 수정</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 최근 commit 된 상태로 현재 파일의 수정내역을 되돌리기</span></span><br><span class="line"><span class="comment"># 📝 git restore 파일명 </span></span><br><span class="line">git restore c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 입력한 파일이 특정 커밋아이디 시점으로 복구</span></span><br><span class="line"><span class="comment"># 📝 git restore --source 커밋아이디 파일명 </span></span><br><span class="line">git restore --<span class="built_in">source</span> (자기 b파일 커밋 아이디) b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 복구랑 상관없지만 이러면 특정 파일을 staging 취소</span></span><br><span class="line"><span class="comment"># 📝 git restore --staged 파일명</span></span><br><span class="line">git restore --staged c</span><br></pre></td></tr></table></figure><hr><h1 id="3-git-revert-commit-복구"><a href="#3-git-revert-commit-복구" class="headerlink" title="3. git revert : commit 복구"></a>3. git revert : commit 복구</h1><p>commit 하나를 취소하고 싶으면 <code>git revert</code> 사용하면 됩니다.<br>실은 없애는건 아니고 commit 하나를 취소한 commit을 하나 생성해줍니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 그 커밋아이디에서 일어난 일만 취소</span></span><br><span class="line"><span class="comment"># git revert 커밋아이디 </span></span><br><span class="line">git revert (자기 b파일 커밋 아이디)</span><br></pre></td></tr></table></figure><p>실행하면 아마 에디터가 뜰 텐데 맘대로 커밋메세지 수정하고 닫으면 끝입니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/git_5_1.png" alt="git_5_1"></p><p>revert 명령시 가끔 Vim 에디터가 뜨는 사람들이 있을겁니다.<br>커밋 메세지 수정하라는건데 i 눌러서 수정하고 싶으면 하고, esc 눌러서 나올 수 있습니다.<br>그리고 :wq 누르면 커밋 메세지가 저장됩니다.</p><p>에디터 닫고나면, <code>git log --oneline</code>으로 확인하면, 새로운 커밋이 생성되고 b파일만 삭제되어있습니다.<br>(그 커밋id 이후에 했던 파일이나 커밋들은 영향없이 유지됨)</p><p>git log 다시 해보면 revert 해줬다는 commit이 자동으로 생성되어있고, 작업폴더에서 a, c 파일은 있지만 b 파일은 삭제됩니다.<br>결론은 revert 명령어 쓰면 특정 커밋에서 있던 일을 지워버릴 수 있습니다.</p><hr><h2 id="3-1-기타-명령어"><a href="#3-1-기타-명령어" class="headerlink" title="3.1 기타 명령어"></a>3.1 기타 명령어</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git revert 커밋아이디1 커밋아이디2 <span class="comment"># revert 할 때 동시에 여러개의 commit id 입력가능</span></span><br><span class="line">git reverst HEAD <span class="comment"># 그냥 최근 했던 commit 1개만 revert(취소)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># merge 명령으로 인해 새로 만들어진 commit도 revert 가능</span></span><br><span class="line"><span class="comment"># 그럼 merge가 취소되겠군요. 필요하면 찾아보셈</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-git-reset-시간-되돌리기"><a href="#4-git-reset-시간-되돌리기" class="headerlink" title="4. git reset : 시간 되돌리기"></a>4. git reset : 시간 되돌리기</h1><p>git reset 명령어를 사용하면 <strong>특정 commit 시절로 아예 모든걸 되돌릴 수 있습니다</strong>. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 그 커밋이 생성될 때로 시간을 되돌려줌</span></span><br><span class="line"><span class="comment"># 작업폴더 내의 파일도 그 시절로 돌아감</span></span><br><span class="line"><span class="comment"># 📝 git reset --hard 커밋아이디</span></span><br><span class="line">git reset --hard (자기 b파일 커밋 아이디)</span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br></pre></td></tr></table></figure><ul><li>commit2로 <code>reset --hard</code>해버리면, commit2 이후의 미래 기억을 모두 잃습니다.</li></ul><p>지금 기억을 다 포기하고 인생을 7살로 리셋해준다고 하면 돌아갈 것입니까?<br>인생이 어느정도 궤도에 오른 사람들은 돌아가기 힘듭니다.</p><p>마찬가지로 <strong>git reset</strong>은 그냥 <strong>프로젝트 망하면 쓰거나, 아니면 짧은 거리를 돌아갈 때 쓰도록</strong> 합시다. </p><hr><h2 id="4-1-협업-시-reset-사용금지"><a href="#4-1-협업-시-reset-사용금지" class="headerlink" title="4.1 협업 시 reset 사용금지"></a>4.1 협업 시 reset 사용금지</h2><ul><li>여러명이서 협업하는 리포지토리에는 <strong>보통 reset 쓰면 안됩니다.</strong> 갑자기 소스코드가 사라지는거니까요.</li><li>untracked 파일들은 (git add 안해놓은 파일들은) 사라지지않고 유지됩니다. </li><li>git clean 명령어 찾아서 쓰면 untracked 파일들도 다 지울 수 있습니다.</li></ul><hr><h2 id="4-2-reset시-옵션-설정가능"><a href="#4-2-reset시-옵션-설정가능" class="headerlink" title="4.2 reset시 옵션 설정가능"></a>4.2 reset시 옵션 설정가능</h2><p>a, b, c 파일을 만들면서 각각 commit을 했다고 칩시다.<br>git reset 뒤에 hard &#x2F; soft &#x2F; mixed 설정을 넣을 수 있는데 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 그 커밋이 생성될 때로 시간을 되돌려줌</span></span><br><span class="line"><span class="comment"># 작업폴더 내의 파일도 그 시절로 돌아감</span></span><br><span class="line">git reset --hard (자기 b파일 커밋 아이디) <span class="comment"># a, b파일은 남아있고 c 파일이 삭제</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 📝 리셋인데 변동사항 지우지 말고 스테이징 해놓기</span></span><br><span class="line">git reset --soft (자기 b파일 커밋 아이디) <span class="comment"># a, c파일은 남아있고 b 파일은 staging area에 남아있음</span></span><br><span class="line"><span class="comment"># 이제 commit 하거나 그럴 수 있습니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 📝 리셋인데 변동사항 지우지 말고 unstage 해놓기</span></span><br><span class="line">git reset --mixed (자기 b파일 커밋 아이디) <span class="comment"># a, c파일은 남아있고 b 파일은 staging 되지 않은 상태</span></span><br><span class="line"><span class="comment"># 이제 git add 하고 commit 하거나 그럴 수 있습니다. </span></span><br></pre></td></tr></table></figure><p>결론은 reset하면서 파일을 아예 지워버리는게 아니라,<br>검토하고 다시 commit 하고 싶으면 <code>--soft</code>, <code>--mixed</code> 사용해봅시다.<br>실은 git reset 어쩌구만 하면 –mixed 옵션이 자동으로 발동됩니다.</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps-Git-Basic--04-merge 방법론</title>
      <link href="/2023/01/11/DevOps-Git-Basic-04/"/>
      <url>/2023/01/11/DevOps-Git-Basic-04/</url>
      
        <content type="html"><![CDATA[<h1 id="1-merge-방법론"><a href="#1-merge-방법론" class="headerlink" title="1. merge 방법론"></a>1. merge 방법론</h1><p>브랜치를 합칠 때 다양한 방법으로 합칠 수 있습니다.</p><ul><li>3-way merge</li><li>fast-forward merge</li><li>rebase and merge</li><li>squash and merge</li></ul><hr><h1 id="2-3-way-merge"><a href="#2-3-way-merge" class="headerlink" title="2. 3-way merge"></a>2. 3-way merge</h1><p>브랜치에 각각 신규 commit이 1회 이상 있는 경우 merge 명령을 내리면,<br>두 브랜치의 코드를 합쳐서 새로운 commit을 자동으로 생성해주는데,<br>이걸 <strong>3-way merge</strong>라고 부릅니다. 이게 <strong>merge의 기본 동작방식</strong>입니다. </p><hr><h1 id="3-fast-forward-merge"><a href="#3-fast-forward-merge" class="headerlink" title="3. fast-forward merge"></a>3. fast-forward merge</h1><p>새로운 브랜치에만 commit 이 있고 기준이 되는 브랜치에는 신규 commit 이 없는 경우,<br>merge 하게 되면 “fast-forward merge 되었습니다” 라고 알려줍니다.</p><ul><li>fast-forward merge<ul><li>합칠게 없어서 신규 브랜치의 이름을 **”main 브랜치”**라고 하는 것</li><li>“기준이 되는 브랜치에 신규 commit이 없으면” 자동으로 fast-forward merge가 발동됨</li><li>싫으면 <strong>git merge –no-ff 브랜치명</strong> 해서 강제로 3-way merge 할 수도 있음</li></ul></li></ul><hr><h2 id="3-1-브랜치-삭제"><a href="#3-1-브랜치-삭제" class="headerlink" title="3.1 브랜치 삭제"></a>3.1 브랜치 삭제</h2><p>3-way, fast-forward 아무렇게나 merge 해도, <strong>브랜치를 merge 하고 나면 브랜치가 자동으로 삭제되진 않습니다.</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 브랜치이름 <span class="comment"># 병합(merge)이 완료된 브랜치 삭제</span></span><br><span class="line">git branch -D 브랜치이름 <span class="comment"># 병합(merge)하지 않은 브랜치 삭제</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-rebase-and-merge"><a href="#4-rebase-and-merge" class="headerlink" title="4. rebase and merge"></a>4. rebase and merge</h1><p>브랜치를 rebase 하고 나서 merge하는 것도 가능합니다.</p><p>rebase는 <strong>브랜치의 시작점을 다른 commit으로 옮겨주는 행위</strong>입니다. </p><ol><li>rebase를 이용해서 신규브랜치의 시작점을 main 브랜치 최근 commit으로 옮긴 다음,</li><li>fast-forward merge하는 것</li></ol><p>이렇게 하는 이유</p><ul><li><strong>3-way merge 말고 강제로 fast-forward</strong> 하고 싶을 때<ul><li>간단하고 짧은 브랜치들은 이거 쓰면 깔끔해보임</li></ul></li><li>단점 : conflict 엔딩 많이 남</li></ul><p>일반 3-way merge 대신 rebase &amp; merge 해도 됩니다. 그래서 실제로 rebase and merge 하고 싶으면 </p><ol><li><strong>새로운 브랜치로 먼저 이동</strong>해서</li><li><code>git rebase main</code>하면 됩니다. </li><li>그럼 <strong>브랜치가 main 브랜치 끝으로 이동</strong>하는데 그걸 fast-forward merge하면 됩니다.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reabse &amp; merge 하고 싶으면</span></span><br><span class="line">git switch 새로운브랜치 <span class="comment"># 1. 새로운 브렌치로 이동</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 신규 브랜치의 커밋들을 main 브랜치의 최근의 commit으로 옮김 </span></span><br><span class="line">git rebase main <span class="comment"># 2. git rebase 중심브랜치명</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># main 브랜치로 이동해서 fast-forward merge 수행</span></span><br><span class="line">git switch main</span><br><span class="line">git merge 새로운브랜치</span><br></pre></td></tr></table></figure><p>차례로 입력하면 rebase 끝입니다. rebase &amp; merge를 한 줄로 쉽게 비유하자면 <strong>강제 fast-forward merge</strong>입니다.<br>직접 새로운 브랜치 만들고 commit 몇 번 하고 rebase 해봅시다.</p><p>물론 단점도 있는데, 브랜치끼리 차이가 너무 많은 경우 rebase하면 충돌이 많이 발생해서 해결하기 귀찮음</p><hr><h1 id="5-squash-and-merge"><a href="#5-squash-and-merge" class="headerlink" title="5. squash and merge"></a>5. squash and merge</h1><p>모든 브랜치를 3-way merge 해버리면 나중에 참사가 일어날 수 있습니다. </p><p>왜냐면 다음과 같은 현상이 있습니다.</p><ol><li><strong>3-way merge된 것들은 매우 복잡</strong>해보임 </li><li>main 브랜치 git log 출력해보면, 3-way merge된 브랜치들의 commit 내역도 다 같이 출력되어서 더러워짐</li></ol><p>이러기 싫으면 <strong>rebase</strong>아니면 <strong>squash and merge</strong>하면 됩니다.<br>새 브랜치에 있던 commit 들을 연결해주는게 아니라 떼와서 main 브랜치에 붙여주기 때문에1번과 2번걱정을 안해도 됨</p><p>rebase는 아까 배웠고, squash and merge이거 하면 어떻게 되냐면,<br>3-way merge처럼 선으로 이어주지 않고, 새 브랜치에 있던 코드 변경사항들이 <strong>main 브랜치로</strong> <strong>텔레포트</strong>합니다.</p><p>그럼 이제 main 브랜치의 git log 출력해볼 때, merge 완료된 브랜치의 commit 같은 것들은 출력되지 않습니다. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git switch main</span><br><span class="line">git merge --squash 브랜치명 <span class="comment"># squash merge</span></span><br><span class="line">git commit -m <span class="string">&#x27;메세지&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>squash and merge</strong>하는 법은 그냥 <code>--squash</code>옵션을 추가하면 끝입니다.<br>브랜치에서 만들어놨던 많은 commit들을 다 합쳐서 하나의 commit으로 main 브랜치에 생성해줍니다.</p><hr><h1 id="6-결론"><a href="#6-결론" class="headerlink" title="6. 결론"></a>6. 결론</h1><p>merge를 잔뜩 해놓으면 나중에 git log 그래프가 매우 복잡해질 수 있습니다.<br>그게 싫으면 <strong>squash</strong>해보십시오. 또는 <strong>rebase 해도 마찬가지로 해결</strong>가능합니다.<br>보통 회사 프로젝트마다, 브랜치마다 merge 방법 가이드라인이 있습니다.</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps-Git-Basic--03-branch &amp; merge</title>
      <link href="/2023/01/11/DevOps-Git-Basic-03/"/>
      <url>/2023/01/11/DevOps-Git-Basic-03/</url>
      
        <content type="html"><![CDATA[<h1 id="1-branch-프로젝트-복사본"><a href="#1-branch-프로젝트-복사본" class="headerlink" title="1. branch : 프로젝트 복사본"></a>1. branch : 프로젝트 복사본</h1><p>코드짜다보면 갑자기 새로운 기능을 추가하거나 그래야하는 경우가 있습니다.<br>그럴 때는 원본파일에 코드를 추가하고 커밋해도 되겠지만,<br>혹시나 잘못해서 지금까지 짰던 프로그램이 망가지거나 그러면 어떻게하죠? </p><p>안전하게 새로운 기능을 추가하고 싶으면 <strong>프로젝트의 복사본을 만들어서 거기에 먼저 개발</strong>합니다.<br>git 안에선 branch 기능을 이용해서 복사본을 쉽게 만들 수 있습니다.</p><ul><li><code>branch = 프로젝트 복사본</code></li></ul><hr><h2 id="1-1-프로젝트에-새-기능-필요"><a href="#1-1-프로젝트에-새-기능-필요" class="headerlink" title="1.1 프로젝트에 새 기능 필요"></a>1.1 프로젝트에 새 기능 필요</h2><p>프로젝트 새 코드를 추가하고 싶으면, 코드를 직접 수정하는 것이 아니라, 프로젝트 사본을 만들어서 거기서 개발합니다.<br>e.g. 쇼핑몰에 쿠폰 기능을 추가하고 싶음</p><hr><h2 id="1-2-branch-생성-및-이동"><a href="#1-2-branch-생성-및-이동" class="headerlink" title="1.2 branch 생성 및 이동"></a>1.2 branch 생성 및 이동</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 프로젝트 사본 1개 생성</span></span><br><span class="line"><span class="comment"># 📝 git branch 브랜치이름 </span></span><br><span class="line">$ git branch coupon</span><br><span class="line"></span><br><span class="line"><span class="comment"># 브랜치 이동</span></span><br><span class="line"><span class="comment"># 📝 git switch 브랜치이름</span></span><br><span class="line">$ git switch coupon</span><br><span class="line"></span><br><span class="line"><span class="comment"># 현재 브랜치 위치</span></span><br><span class="line">$ git status</span><br><span class="line">On branch coupon</span><br></pre></td></tr></table></figure><p>다시 메인 브랜치로 되돌아가고 싶으면, <code>git switch main</code> 하면 됩니다. </p><ul><li>사용자 컴퓨터의 설정에 따라 main 말고 master 일 수도 있음</li></ul><p> coupon 브랜치로 이동했으면 거기서 개발하고 commit 맘대로 할 수 있습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaaa // coupon 브랜치에서 작업 중임</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;파일만들었음&#x27;</span></span><br></pre></td></tr></table></figure><p>저번 장부터 commit 하던 곳은 <strong>main branch 또는 master branch</strong>라고 부르고,<br>coupon branch에서 작업한 내용은 원래 브랜치인 main branch에 아무런 영향이 없습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">git switch main <span class="comment"># main 브랜치로 이동</span></span><br><span class="line"><span class="comment"># coupon 브랜치에서 만든 coupon.txt는 사라짐</span></span><br><span class="line"><span class="comment"># 왜냐하면 coupon 브랜치에서 작업했으니까</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 📝 coupon 브랜치에서 새로운 파일 만들어서 코드짜고 commit 몇번 해보십시오. </span></span><br><span class="line"><span class="comment"># master/main 브랜치에서도 기존 파일들에 commit 몇번 해봅시다. </span></span><br><span class="line">git switch coupon</span><br><span class="line"><span class="comment"># coupon.txt 아무렇게나 수정 후</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;파일만들었음2&#x27;</span></span><br><span class="line"></span><br><span class="line">git switch main</span><br><span class="line"><span class="comment"># app.txt 아무렇게나 수정 후</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;main브랜치 수정&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># branch 와 commit 내역을 한 눈에 그래프로 보고 싶으면</span></span><br><span class="line">git <span class="built_in">log</span> --graph --oneline --all</span><br></pre></td></tr></table></figure><blockquote><p><strong>git log 하면 나오는 HEAD</strong>는 현재 위치를 의미</p></blockquote><hr><h1 id="2-merge-branch-합치기"><a href="#2-merge-branch-합치기" class="headerlink" title="2. merge : branch 합치기"></a>2. merge : branch 합치기</h1><p>branch에서 코드를 다 작성했으면, 원본코드가 있는 master 또는 main 브랜치에 합치면 됩니다.<br><strong>브랜치를 합치는걸</strong> 전문용어로 <strong>merge</strong>라고 합니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git switch main</span><br><span class="line">git merge 브랜치명 </span><br></pre></td></tr></table></figure><p>merge 하고 싶으면</p><ol><li>main&#x2F;master 브랜치로 다시 이동하고</li><li><code>git merge 브랜치명</code>입력하면 합쳐집니다.</li></ol><p>예를 들어, <code>git merge coupon</code>이러면 coupon 브랜치의 코드들이 main&#x2F;master 브랜치에 합쳐집니다.</p><p>merge 하고 나서 <code>git log</code> 이런거 해보면 이쁘게 합쳐줬다고 알려줍니다.</p><hr><h2 id="2-1-merge-conflict-충돌"><a href="#2-1-merge-conflict-충돌" class="headerlink" title="2.1 merge conflict(충돌)"></a>2.1 merge conflict(충돌)</h2><p>근데 합칠(merge) 때 주의사항이 있는데,<br>master 브랜치와 coupon 브랜치에서 같은 파일, 같은 줄을 수정했을 경우 <strong>merge conflict</strong>가 발생합니다.</p><p>이 경우 에디터로 해당 파일을 열어보면 충돌사항이 적혀있습니다. 둘 중 어떤 코드를 적용할지 고르면 되는데,<br>&lt;&lt;&lt;&lt; &#x2F; &gt;&gt;&gt;&gt; &#x2F; &#x3D;&#x3D;&#x3D;&#x3D; 이런 쓸데없는 것들은 다 지우고 원하는 코드만 남기면 됩니다.<br>(VSCode 에디터의 경우 Accept Incoming Change 어쩌구 버튼들을 제공해주는데 그거 누르면 편리합니다)</p><p>어떤 코드를 남길지 결정했으면</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git add 파일명</span></span><br><span class="line"><span class="comment"># git commit -m &#x27;메세지&#x27;</span></span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;충돌 해결&#x27;</span></span><br></pre></td></tr></table></figure><p>입력하면 새로운 commit 을 생성해주며 merge conflict 해결 + 브랜치 합치기 완료입니다.</p><hr><h1 id="3-정리⭐"><a href="#3-정리⭐" class="headerlink" title="3. 정리⭐"></a>3. 정리⭐</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git branch 브랜치명 <span class="comment"># 브랜치 생성</span></span><br><span class="line">git switch 브랜치명 <span class="comment"># 브랜치 이동</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 브랜치 합치기는 main/master 브랜치로 이동 후</span></span><br><span class="line">git merge 브랜치명 <span class="comment"># 브랜치 합치기</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 브랜치마다 commit 내역을 그래프로 보고싶으면</span></span><br><span class="line">git <span class="built_in">log</span> --graph --oneline --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 브랜치 합칠 때 conflict가 발생하면</span></span><br><span class="line"><span class="comment"># 파일열어서 수정 후 git add, git commit</span></span><br><span class="line">git add 파일명</span><br><span class="line">git commit -m <span class="string">&#x27;메세지&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps-Git-Basic--02-저장 - add, commit, diff</title>
      <link href="/2023/01/11/DevOps-Git-Basic-02/"/>
      <url>/2023/01/11/DevOps-Git-Basic-02/</url>
      
        <content type="html"><![CDATA[<h1 id="1-작업폴더에서-git-사용"><a href="#1-작업폴더에서-git-사용" class="headerlink" title="1. 작업폴더에서 git 사용"></a>1. 작업폴더에서 git 사용</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment"># git이 여러분이 파일생성하는거, 코드작성하는걸 추적하기 시작</span></span><br></pre></td></tr></table></figure><p>git의 commit 기능을 쓰면 쓰면 파일의 현재상태를 매일매일 <strong>기록</strong>해둘 수 있습니다.<br>정확히 말하면 <strong>파일의 스냅샷</strong>을 저장해줍니다.</p><hr><h1 id="2-git-add-commit"><a href="#2-git-add-commit" class="headerlink" title="2. git add, commit"></a>2. git add, commit</h1><p>VSCode에서 <strong>app.txt</strong> 파일을 생성해서 대충 코드짭니다. 작성한 코드가 맘에 들어서 따로 기록을 해두고 싶으면,</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.txt -------------------</span></span><br><span class="line">aaaaaaaaaaaaa</span><br></pre></td></tr></table></figure><p>git을 이용해서 해당 파일 현재상태를 기록하려면,</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 파일의 현재상태를 기록</span></span><br><span class="line"><span class="comment"># git add 파일명</span></span><br><span class="line"><span class="comment"># git commit -m &#x27;아무메세지&#x27;</span></span><br><span class="line"></span><br><span class="line">git add app.txt </span><br><span class="line">git commit -m <span class="string">&#x27;첫 파일 만듬&#x27;</span></span><br></pre></td></tr></table></figure><p>이제부터 이 파일상태 그대로 되돌리거나 그럴 수 있고 나중에 파일변경 히스토리가 궁금하면 열람할 수도 있습니다.<br>“기록”이라기보다는 “버전생성”이라고 부르는 경우가 많습니다.</p><hr><h2 id="2-1-staging-area-amp-repository"><a href="#2-1-staging-area-amp-repository" class="headerlink" title="2.1 staging area &amp; repository"></a>2.1 staging area &amp; repository</h2><p>버전만들 땐 <code>(1) git add</code>, <code>(2) git commit</code> 순서대로 하면 됩니다. 그림을 그려보면,</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/git_2_1.png" alt="git_2_1"></p><ul><li><code>staging area</code><ul><li>commit을 하기 전에 <strong>commit할 파일들을 골라놓는 곳</strong></li><li>staging area에 파일넣는 행위를 <strong>staging</strong>이라고 함</li><li><code>git add</code> 명령어로 staging 할 수 있음</li></ul></li><li><code>repository(저장소)</code><ul><li>commit된 <strong>파일의 버전들을 모아놓는 곳</strong></li><li>repository의 실체를 구경하고 싶으면 작업폴더안에 숨겨져 있는 <code>.gi</code>t 폴더 열어보면 됨</li></ul></li></ul><hr><h2 id="2-2-명령어-정리"><a href="#2-2-명령어-정리" class="headerlink" title="2.2 명령어 정리"></a>2.2 명령어 정리</h2><p>이렇게 여러 파일을 동시에 스테이징할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">git add 파일명1 파일명2 <span class="comment"># 여러 파일을 동시에 스테이징</span></span><br><span class="line">git add . <span class="comment"># 작업폴더의 모든 파일을 전부 스테이징</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 요즘 젊은이들은 인생이 힘들고 복잡할 때 &quot;상태창!!&quot;을 외치는데,</span></span><br><span class="line"><span class="comment"># git도 마찬가지로 힘들고 복잡할 때 상태창을 띄울 수 있음 </span></span><br><span class="line"><span class="comment"># git status : 지금 뭐 하는지 까먹었을 때도 자주 입력</span></span><br><span class="line">git status <span class="comment"># 지금 변경된 파일, 스테이징된 파일 이런걸 쭉 알려줌</span></span><br><span class="line"></span><br><span class="line">git restore --staged 파일명 <span class="comment"># 스테이징된 파일을 취소</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># commit 할 때 -m 뒤에 메세지 입력가능</span></span><br><span class="line"><span class="comment"># 메세지에 코드에 무슨기능 추가했는지 이런거 적으면 됩니다. </span></span><br><span class="line">git commit -m <span class="string">&#x27;메세지&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># commit 기록을 한 눈에 파악하고 싶으면 git log 명령어 입력</span></span><br><span class="line"><span class="comment"># --graph 옵션을 넣으면 그래프로 그려줌</span></span><br><span class="line">git <span class="built_in">log</span> --all --oneline</span><br><span class="line">git <span class="built_in">log</span> --all --oneline --graph</span><br><span class="line"></span><br><span class="line"><span class="comment"># 입력 후엔 Vim 에디터가 켜져서 j, k 키로 위아래 스크롤이 가능하고 q 키로 종료</span></span><br></pre></td></tr></table></figure><blockquote><p>❓ 얼마나 자주 commit 하는게 좋나?</p><p>ctrl + s 누르는 것 처럼 습관적으로 할 이유는 없고 간단한 기능을 하나 추가할 때마다 commit하면 됩니다. </p><p>예를 들어, 회원가입 기능을 만든다고 하면,</p><ul><li>회원가입 폼 레이아웃을 만들면 commit</li><li>입력한 이메일이 맞는지 검증하는 기능을 만들었으면 commit</li><li>서버에 전송하는 기능을 만들었으면 commit</li></ul><p>대충 작은 작업하나 마쳤으면 commit하는게 좋습니다.</p></blockquote><hr><h2 id="2-3-에디터-부가기능"><a href="#2-3-에디터-부가기능" class="headerlink" title="2.3 에디터 부가기능"></a>2.3 에디터 부가기능</h2><p>웬만한 에디터들 보면 git 기능이 내장되어 있어서 그거 쓰면 터미널 켤 필요없이 편리하게 add, commit 가능합니다.<br>(git 기능없는 에디터면 git 부가기능 설치하면 됩니다.)</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/git_2_2.png" alt="git_2_2"></p><p>VSCode 에디터의 경우 왼쪽 git 처럼 생긴 메뉴 들어가보면 지금 어떤 파일이 변경되고 추가되었는지 알려줍니다.<br> <strong>+</strong> 누르면 <code>git add</code> 한거랑 똑같고, <strong>체크마크</strong> 누르면 <code>git commit</code> 한거랑 똑같습니다.<br>파일이 많고 복잡하면 이거 쓰는게 더 나을 수도 있습니다.</p><hr><h1 id="3-git-diff"><a href="#3-git-diff" class="headerlink" title="3. git diff"></a>3. git diff</h1><p>commit 하기 전에 이전과 현재 코드가 어떤 차이가 있는지 알고 싶으면, <code>git diff</code> 명령어 쓰면 됩니다.<br><strong>바로 전 commit과 현재 코드의 차이점</strong>을 비교해줍니다.</p><p>하지만 터미널의 한계로 차이점보기가 힘들고, 추가로 설정하지 않으면 불편해서 보통 git diff를 쌩으로 사용하진 않습니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git diff 커밋id</span></span><br><span class="line">$ git diff</span><br></pre></td></tr></table></figure><p>최근 commit과 비교하는게 아니라 <strong>과거의 특정 commit과 현재 파일을 비교하고 싶으면</strong> 커밋ID를 명시해주면 됩니다.<br>(커밋ID는 <code>git log --oneline</code>입력하면, 볼 수 있음)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff 커밋id1 커밋id2</span><br></pre></td></tr></table></figure><hr><h2 id="3-1-git-difftool"><a href="#3-1-git-difftool" class="headerlink" title="3.1 git difftool"></a>3.1 git difftool</h2><p>이거 쓰면 비주얼적으로 훌륭하게 차이점을 분석해줍니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git difftool <span class="comment"># 입력하면 현재 파일과 최근 commit의 차이점을 비교</span></span><br><span class="line">git difftool 커밋<span class="built_in">id</span> <span class="comment"># 현재 파일과 특정 commit의 차이점을 비교</span></span><br><span class="line">git difftool 커밋id1 커밋id2 <span class="comment"># 입력하면 특정 commit 2개의 차이점을 비교</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/git_2_3.png" alt="git_2_3"></p><p>이것도 Vim 에디터가 뜨는데, <code>hjkl</code> 키로 이동가능하고, <code>:q</code> 여러번 입력해야 나갈 수 있습니다.<br>아니면 <code>:qa</code> 입력하셈. 실은 Vim 에디터와 터미널의 한계로 그렇게 편리하진 않습니다. </p><blockquote><p>💡 git difftool을 Vim 말고 VSCode로 열고 싶으면</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global diff.tool vscode</span><br><span class="line">git config --global difftool.vscode.cmd <span class="string">&#x27;code --wait --diff $LOCAL $REMOTE&#x27;</span></span><br></pre></td></tr></table></figure><p>터미널에 차례로 2개 입력하면 됩니다.</p></blockquote><hr><h2 id="3-2-에디터-부가기능"><a href="#3-2-에디터-부가기능" class="headerlink" title="3.2 에디터 부가기능"></a>3.2 에디터 부가기능</h2><p>VSCode 에디터의 경우 좌측 Extensions 메뉴에서 Git 관련 부가기능 설치하면, 더 편리하게 git diff 할 수 있습니다.</p><p><a href="https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph">https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph</a></p><p>VSCode 에디터 <strong>extension 메뉴에서 git 검색</strong>해서, <strong>Git graph</strong> 부가기능을 설치합니다.</p><p>[왼쪽 Git 메뉴] - [Git graph 버튼]누르면 commit 내역을 한 눈에 쭉 살펴볼 수 있고,<br>파일명 우클릭하면 git diff도 가능하니, 과거 내역을 살펴보고 싶으면 이런 GUI 툴을 주로 활용 가능.</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps-Git-Basic--01-Git 쓰는 이유와 설치</title>
      <link href="/2023/01/11/DevOps-Git-Basic-01/"/>
      <url>/2023/01/11/DevOps-Git-Basic-01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-git을-왜-쓰나"><a href="#1-git을-왜-쓰나" class="headerlink" title="1. git을 왜 쓰나"></a>1. git을 왜 쓰나</h1><p>코드를 짜든 디자인을 하든 레포트를 쓰든 <strong>파일 변경내역을 보존하고 관리</strong>하는 과정이 필요합니다. </p><ul><li>2023-01-11-디자인 시안_최종</li><li>2023-01-12-디자인 시안_최종의 최종</li><li>2023-01-13-디자인 시안_최종의 최종2</li><li>2023-01-14-디자인 시안_진짜 마지막</li></ul><blockquote><p>Q. 2일 전 코드로 되돌아가려면?</p><ol><li>직접 파일을 매일 만들어 백업해두기</li><li>버전 관리 소프트웨어 쓰기<ul><li>프로그래머들이 쓰는 Git</li><li>파일 복사본을 귀찮게 만들지 않고도 깔끔하게 버전관리가 가능</li></ul></li></ol></blockquote><p>Git은 <strong>토르발스 리눅스(Linux 창시자)가 2005년에 만든 프로그램</strong></p><ul><li>git checkout 파생명령어 20개 외울 필요없이 신 문법 switch, restore 등을 사용</li></ul><hr><h1 id="2-git-설치"><a href="#2-git-설치" class="headerlink" title="2. git 설치"></a>2. git 설치</h1><h2 id="2-1-Window"><a href="#2-1-Window" class="headerlink" title="2.1 Window"></a>2.1 Window</h2><p><a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p><p>(1) 설치시 기본 에디터가 Vim으로 설정되어있으면, 설치한 <strong>VSCode 에디터로</strong>  변경</p><ul><li>[Use Visual Studio Code as Git’s default editor] 선택</li></ul><p>(2) 기본 브랜치 이름을 요즘은 master라고 안쓰고, <strong>main</strong>이라고 씀, main으로 변경하기</p><ul><li>[Override the default branch name for new repositoriex]에서 main으로 적기</li></ul><hr><h2 id="2-2-Mac"><a href="#2-2-Mac" class="headerlink" title="2.2 Mac"></a>2.2 Mac</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br><span class="line">$ brew install git <span class="comment"># git 설치</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-git-이름-이메일-설정"><a href="#3-git-이름-이메일-설정" class="headerlink" title="3. git 이름, 이메일 설정"></a>3. git 이름, 이메일 설정</h1><p>누가 지금 git을 쓰고있는지 구분하기 위한 아이디 등록</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list <span class="comment"># 모든 설정 확인, q를 눌러 다시 빠져나오기</span></span><br><span class="line">$ git config --global -e <span class="comment"># -e는 edit 모드로 열기</span></span><br><span class="line">$ code . <span class="comment"># 현재 디렉토리를 Visual Studio Code로 열기</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># code를 에디터와 연동</span></span><br><span class="line">$ git config --global core.editor <span class="string">&quot;code&quot;</span></span><br><span class="line">$ git config --global core.editor <span class="string">&quot;code --wait&quot;</span> <span class="comment"># 작업을 하는 중에는 터미널이 대기 상태로</span></span><br><span class="line"></span><br><span class="line">$ git config --global -e</span><br><span class="line">$ git config --global user.name <span class="string">&quot;Beren&quot;</span> <span class="comment"># 자기가 쓸 이름 설정</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;berenickt99@gmail.com&quot;</span> <span class="comment"># 자기 이메일로 설정</span></span><br><span class="line"></span><br><span class="line">$ git config user.name</span><br><span class="line">Beren</span><br><span class="line">$ git config user.email</span><br><span class="line">berenickt99@gmail.com</span><br></pre></td></tr></table></figure><p>Git을 설치하게 되면 Git에 관련된 모든 환경설정이 <code>.gitconfig</code>라는 파일 안에 저장되는데,<br>터미널에서도 간단하게 확인 가능</p><hr><h1 id="4-core-autocrlf-설정"><a href="#4-core-autocrlf-설정" class="headerlink" title="4. core.autocrlf 설정"></a>4. core.autocrlf 설정</h1><blockquote><p>CR, LF, CRLF</p><ul><li><code>CR(Carriage-Return)</code> : 현재 커서를 줄 올림 없이 가장 앞으로 옮기는 동작</li><li><code>LF(Line-Feed)</code> : 커서는 그 자리에 그대로 둔 상황에서 종이만 한 줄 올려 줄을 바꾸는 동작</li><li><code>CRLF (Carriage-Return+Line-Feed)</code> : 줄바꿈</li></ul></blockquote><p>운영체제마다 에디터에서 새로운 줄바꿈을 할 때, 들어가는 문자열이 다릅니다. </p><ul><li>윈도우의 경우 carriage-return과 line feed가 동시에 들어가는 반면에, </li><li>MAC에서는 line feed 하나만 들어갑니다.</li></ul><p>이런 차이점 떄문에 Git Repository를 다양한 운영체제에서 쓰는 경우 내가 수정하지 않았음에도 불구하고<br>줄바꿈 문자열이 달라져서 Git History나 Git Blame을 보는데 문제가 있을 수 있습니다. </p><p>이것을 수정하는 속성이 autocrlf 설정입니다.</p><ul><li>윈도우에서 true로 설정하게 되면 <ul><li>Git에 저장할 떄는 carriage-return을 삭제하게 되고, </li><li>다시 Git에서 윈도우로 가져올 떄는 자동으로 carriage-return을 붙여줍니다.</li></ul></li><li>Mac에서는 input으로 설정하게 되면<ul><li>Git에서 받아올 떄는 별다른 수정이 일어나지 않지만,</li><li>저장할 떄는 carriage-return을 삭제해줍니다.</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MAC 사용자는 git config --global core.autocrlf input</span></span><br><span class="line"><span class="comment"># Windows 사용자는 git config --global core.autocrlf true</span></span><br><span class="line">$ git config --global core.autocrlf <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 만약 위 설정을 안하게 된다면 다음같은 명령어등을 입력할 때 오류들을 볼 수 있습니다.</span></span><br><span class="line"><span class="comment"># warning: LF will be replaced by CRLF in bora.txt.</span></span><br><span class="line"><span class="comment"># The file will have its original line endings in your working directory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 경고 : bora.txt에서 LF는 CRLF로 대체됩니다.</span></span><br><span class="line"><span class="comment"># 파일은 작업 디렉토리에 원래 줄 끝이 있습니다.</span></span><br></pre></td></tr></table></figure><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><p><a href="https://codingapple.com/course/git-and-github/">코딩애플 Git 강의</a>를 듣고 정리한 내용입니다.</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-TS-Basic-10-모듈</title>
      <link href="/2023/01/10/Front-TS-Basic-10-Module/"/>
      <url>/2023/01/10/Front-TS-Basic-10-Module/</url>
      
        <content type="html"><![CDATA[<h1 id="1-모듈"><a href="#1-모듈" class="headerlink" title="1. 모듈"></a>1. 모듈</h1><ul><li>모듈 &#x3D; 특정 기능을 하는 컴퓨터 시스템이나 프로그램의 단위</li><li>모듈, 조립 부품 &#x3D; 기계·가구·건물 등을 구성하는 규격화된 부품</li></ul><hr><h1 id="2-Export"><a href="#2-Export" class="headerlink" title="2. Export"></a>2. Export</h1><p>ES6의 <code>export</code>와 같은 방식으로 변수, 함수, 타입, 인터페이스 등에 붙여 사용합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Triangle</span> &#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Triangle</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./math.ts&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeTriangle</span> <span class="keyword">implements</span> <span class="title class_">Triangle</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="3-Import"><a href="#3-Import" class="headerlink" title="3. Import"></a>3. Import</h1><p>ES6의 <code>import</code>와 동일한 방식으로 사용합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">WheatBeerClass</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./index.ts&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cloud</span> <span class="keyword">extends</span> <span class="title class_ inherited__">WheatBeerClass</span> &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-TS-Basic-09-Type-유틸리티 타입 (Utility Type)</title>
      <link href="/2023/01/09/Front-TS-Basic-09-UtilityType/"/>
      <url>/2023/01/09/Front-TS-Basic-09-UtilityType/</url>
      
        <content type="html"><![CDATA[<h1 id="1-keyof"><a href="#1-keyof" class="headerlink" title="1. keyof"></a>1. keyof</h1><p>유니온 타입을 사용한 것과 동일한 결과를 변수에 넣을 수 있음</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;m&#x27;</span> | <span class="string">&#x27;f&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// User 인터페이스의 키 값중 하나를 불러올 때  사용</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserKey</span> = keyof <span class="title class_">User</span>; <span class="comment">// &#x27;id&#x27; | &#x27;name&#x27; | &#x27;age&#x27; | &#x27;gender&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">uk</span>: <span class="title class_">UserKey</span> = <span class="string">&#x27;id&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 다음처럼 없는 값을 넣으면 에러가 납니다.</span></span><br><span class="line"><span class="comment">// const uk: UserKey = &#x27;&#x27;;</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-partial-lt-T-gt"><a href="#2-partial-lt-T-gt" class="headerlink" title="2. partial&lt;T&gt;"></a>2. partial<code>&lt;T&gt;</code></h1><p>다음 코드처럼 인터페이스에 선언한 속성 값들 중 일부 속성만 넣으면 에러납니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;m&#x27;</span> | <span class="string">&#x27;f&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 인터페이스에 선언한 속성 값들 중 일부 속성만 넣음</span></span><br><span class="line"><span class="comment">// 💥 Error : age, gender 속성이 없음</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">admin</span>: <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>partial은 속성을 모두 <code>Optional(선택적인)</code> 값으로 바꿔줍니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;m&#x27;</span> | <span class="string">&#x27;f&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// partial : 다 선택적인 속성으로 바꿔줌</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">admin</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">User</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="3-required-lt-T-gt"><a href="#3-required-lt-T-gt" class="headerlink" title="3. required&lt;T&gt;"></a>3. required<code>&lt;T&gt;</code></h1><p><code>required</code>는 반대로 <strong>모든 속성 값들을 필수 값으로</strong> 만들어줍니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>; <span class="comment">// age 속성은 선택적인 값</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Required : 모든 속성이 필수여야 함</span></span><br><span class="line"><span class="comment">// 💥 Error : age 속성이 정의안됨</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">admin</span>: <span class="title class_">Required</span>&lt;<span class="title class_">User</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">  <span class="comment">// age: 30,</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>age를 선언해주면 에러가 사라집니다.</p><hr><h1 id="4-readonly-lt-T-gt"><a href="#4-readonly-lt-T-gt" class="headerlink" title="4. readonly&lt;T&gt;"></a>4. readonly<code>&lt;T&gt;</code></h1><ul><li><code>readonly</code>는 말 그대로 <strong>읽기 전용으로 바꾸는 것</strong></li><li>선언만 가능하고, 수정을 할 수 없음</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Readonly : 읽을 수만 있음</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">admin</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">User</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="attr">admin</span>: id = <span class="number">4</span>; <span class="comment">// 💥 Error : 수정못함</span></span><br></pre></td></tr></table></figure><hr><h1 id="5-record-lt-K-T-gt"><a href="#5-record-lt-K-T-gt" class="headerlink" title="5. record&lt;K,T&gt;"></a>5. record<code>&lt;K,T&gt;</code></h1><ul><li><code>record</code>는 key와 value 값에 어떤 내용을 할당할 수 있는지 명확하게 할 때 사용</li><li>K는 키이고, T는 요소</li></ul><p>다음처럼 과목별 점수를 담는 객체를 선언하면 복잡합니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Score</span> &#123;</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;A&#x27;</span> | <span class="string">&#x27;B&#x27;</span> | <span class="string">&#x27;C&#x27;</span> | <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;A&#x27;</span> | <span class="string">&#x27;B&#x27;</span> | <span class="string">&#x27;C&#x27;</span> | <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">  <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;A&#x27;</span> | <span class="string">&#x27;B&#x27;</span> | <span class="string">&#x27;C&#x27;</span> | <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">  <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;A&#x27;</span> | <span class="string">&#x27;B&#x27;</span> | <span class="string">&#x27;C&#x27;</span> | <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">score</span>: <span class="title class_">Score</span> = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">  <span class="number">4</span>: <span class="string">&#x27;D&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Record를 이용하면 쉽게 표현할 수 있습니다. Record <strong>앞에는 키</strong>, <strong>뒤에는 요소</strong>가 들어갑니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1,2,3,4라는 키값에는 A,B,C,D라는 요소가 들어갈 수 있음</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">score</span>: <span class="title class_">Record</span>&lt;<span class="string">&#x27;1&#x27;</span> | <span class="string">&#x27;2&#x27;</span> | <span class="string">&#x27;3&#x27;</span> | <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;A&#x27;</span> | <span class="string">&#x27;B&#x27;</span> | <span class="string">&#x27;C&#x27;</span> | <span class="string">&#x27;D&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">  <span class="number">4</span>: <span class="string">&#x27;D&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>따로 변수를 만들어서 넣어두면 좀 더 편하게 사용할 수 있습니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Grade</span> = <span class="string">&#x27;1&#x27;</span> | <span class="string">&#x27;2&#x27;</span> | <span class="string">&#x27;3&#x27;</span> | <span class="string">&#x27;4&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Score</span> = <span class="string">&#x27;A&#x27;</span> | <span class="string">&#x27;B&#x27;</span> | <span class="string">&#x27;C&#x27;</span> | <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">score</span>: <span class="title class_">Record</span>&lt;<span class="title class_">Grade</span>, <span class="title class_">Score</span>&gt; = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">  <span class="number">4</span>: <span class="string">&#x27;D&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>조금 더 확장해서 user객체를 받아서 이 객체가 올바른 값을 갖고 있는 지를 확인해주는 isValid라는 함수를 만든다고 합시다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user 객체가 올바른 값을 가지는지 체크</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isValid</span>(<span class="params">user: User</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">result</span>: <span class="title class_">Record</span>&lt;keyof <span class="title class_">User</span>, <span class="built_in">boolean</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">id</span>: user.<span class="property">id</span> &gt; <span class="number">0</span>,</span><br><span class="line">    <span class="attr">name</span>: user.<span class="property">name</span> !== <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: user.<span class="property">age</span> &gt; <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>isValid 안의 result 객체의 키값에는 id, name, age가 들어갑니다.<br>이 키값은 User 인터페이스의 key값과 같기 때문에 <strong>keyof User</strong>로 간단하게 사용할 수 있습니다.</p><hr><h1 id="6-pick-lt-T-K-gt"><a href="#6-pick-lt-T-K-gt" class="headerlink" title="6. pick&lt;T,K&gt;"></a>6. pick<code>&lt;T,K&gt;</code></h1><ul><li><strong>T 타입에서 K 속성만 골라서 사용</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;M&#x27;</span> | <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// USer 인터페이스에서 id, name 속성만 사용할 떄 pick</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">admin</span>: <span class="title class_">Pick</span>&lt;<span class="title class_">User</span>, <span class="string">&#x27;id&#x27;</span> | <span class="string">&#x27;name&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="7-omit-lt-T-K-gt"><a href="#7-omit-lt-T-K-gt" class="headerlink" title="7. omit&lt;T,K&gt;"></a>7. omit<code>&lt;T,K&gt;</code></h1><ul><li>pick과 반대로 <strong>T 타입에서 K 프로퍼티만 제외하고 사용할 수 있게 해 주는 키워드</strong></li><li>위 예제를 반대로 id와 name 대신 age와 gender로 바꾸고 Pick을 Omit로 바꿔주면 동일하게 동작</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;M&#x27;</span> | <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// USer 인터페이스에서 age, gender 속성를 제외하고 사용할 떄 omit</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">admin</span>: <span class="title class_">Omit</span>&lt;<span class="title class_">User</span>, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="8-exclude-lt-T1-T2-gt"><a href="#8-exclude-lt-T1-T2-gt" class="headerlink" title="8. exclude&lt;T1,T2&gt;"></a>8. exclude<code>&lt;T1,T2&gt;</code></h1><ul><li><strong>T1 타입에서 T2 타입을 제외하고 사용할 수 있게 해 주는 키워드</strong></li><li>omit과 다른 점은 <code>omit</code>은 <strong>프로퍼티를 제외</strong>하는 것이고, <code>exclude</code>는 <strong>타입을 제외</strong></li><li>즉, T1타입에서 T2타입과 겹치는 것들을 제거하는 것</li></ul><p>만약 T1 타입에서 number랑 string을 제외한 타입을 T2에 넣고 싶다면…</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Exclude</span>&lt;<span class="variable constant_">T1</span>, <span class="built_in">number</span> | <span class="built_in">string</span>&gt;; <span class="comment">// T1 타입에서 number랑 string을 제외한 타입</span></span><br><span class="line"><span class="comment">// T2에 마우스를 올려보면, boolean 타입만 할당 가능</span></span><br></pre></td></tr></table></figure><hr><h1 id="9-nonnullable-lt-T-gt"><a href="#9-nonnullable-lt-T-gt" class="headerlink" title="9. nonnullable&lt;T&gt;"></a>9. nonnullable<code>&lt;T&gt;</code></h1><ul><li><strong>null을 제외한 타입을 생성하는 키워드</strong></li><li>이름만 보면 null만 제외하는 것처럼 보일 수 있는데, undefined도 같이 제거합니다.</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="built_in">string</span> | <span class="literal">null</span> | <span class="literal">undefined</span> | <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">NonNullable</span>&lt;<span class="variable constant_">T1</span>&gt;; <span class="comment">// null과 undefined를 제거한 타입</span></span><br></pre></td></tr></table></figure><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li><a href="https://youtu.be/IeXZo-JXJjc">코딩앙마 - TypeScript #8 유틸리티 타입 Utility Types</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-TS-Basic-08-제너릭 (일반적인, 포괄적인)</title>
      <link href="/2023/01/08/Front-TS-Basic-08-Generics/"/>
      <url>/2023/01/08/Front-TS-Basic-08-Generics/</url>
      
        <content type="html"><![CDATA[<h1 id="1-제너릭이-필요한-이유"><a href="#1-제너릭이-필요한-이유" class="headerlink" title="1. 제너릭이 필요한 이유"></a>1. 제너릭이 필요한 이유</h1><ul><li>cf. generate &#x3D; 발생, 만들다</li><li>cf. general &#x3D; 일반[보편]적인</li><li>cf. generic &#x3D; 포괄적인, 이름이 붙지 않은 채 판매되는</li></ul><p>함수에 파라미터를 입력할 떄, 타입을 입력할 수도 있습니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// array 입력하면 첫 자료 return 해주는 함수</span></span><br><span class="line"><span class="keyword">function</span> 함수(<span class="attr">x</span>: <span class="built_in">unknown</span>[]) &#123;</span><br><span class="line">  <span class="keyword">return</span> x[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = 함수([<span class="number">4</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 4 -&gt; 숫자 타입이 아니라 unknownx타입</span></span><br></pre></td></tr></table></figure><p>마우스로 a의 타입을 확인해보면 숫자타입이 아니라 unknown타입입니다.<br>중요한 점은 <strong>타입스크립트는 타입을 알아서 변경해주지 않습니다.</strong></p><ul><li>숫자가 return 되면 “number 타입”,</li><li>문자가 return 되면 “string 타입”이라고 안해줌</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 함수(<span class="attr">x</span>: <span class="built_in">unknown</span>[]) &#123;</span><br><span class="line">  <span class="keyword">return</span> x[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = 함수([<span class="number">4</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a + <span class="number">1</span>); <span class="comment">// unknownx타입에 숫자 연산을 해줘서 에러</span></span><br></pre></td></tr></table></figure><p>그래서 a는 사람이 보기에 분명히 숫자가 맞지만, 아직 타입은 unknown 타입이니까 에러가 납니다.</p><p>그래서 함수에 <code>불확실한 unknown, any, union</code>타입을 입력하면,<br>나오는 값도 <strong>unknown, any, union 타입</strong> 이라, 이것때문에 일어나는 문제들이 있습니다.</p><ul><li>e.g. 함수가 10을 return 하는데 타입이 unknown 이라서 맘대로 조작못할 때</li></ul><p>해결책은</p><ol><li>narrowing 잘해서 해결하기 (귀찮음)</li><li>타입을 파라미터로 함수에 미리 입력하는 방법<ul><li>이렇게 하면, 원하는 곳에 가변적으로 타입지정 가능</li><li>이를 <code>제너릭(generic)</code>이라 부름</li></ul></li></ol><hr><h1 id="2-제너릭-Generic"><a href="#2-제너릭-Generic" class="headerlink" title="2. 제너릭 (Generic)"></a>2. 제너릭 (Generic)</h1><p>함수에 <code>&lt;&gt;</code>를 입력하면 <strong>파라미터를 또 입력</strong>할 수 있습니다.</p><ul><li>여기 안에는 타입만 입력해야 합니다.</li><li>즉, <code>제너릭 === 타입파라미터</code> 문법입니다.</li><li><strong>클래스나 함수, 인터페이스를 다양한 타입으로 재사용</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  2. 함수( x : number[] ) :number &#123; &#125;</span></span><br><span class="line"><span class="keyword">function</span> 함수&lt;<span class="title class_">MyType</span>&gt;(<span class="attr">x</span>: <span class="title class_">MyType</span>[]): <span class="title class_">MyType</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 이제 number라고 입력하면 MyType에 number가 들어감</span></span><br><span class="line"><span class="keyword">let</span> a = 함수&lt;<span class="built_in">number</span>&gt;([<span class="number">4</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="keyword">let</span> b = 함수&lt;<span class="built_in">string</span>&gt;([<span class="string">&#x27;kim&#x27;</span>, <span class="string">&#x27;park&#x27;</span>]);</span><br></pre></td></tr></table></figure><ul><li><strong>Generic을 쓰면 개발자가 정한 타입을 return 값으로 뱉는 함수를 제작 가능</strong></li><li>타입파라미터는 자유롭게 작명 가능, 보통 <code>&lt;T&gt;</code>이런걸로 많이 작명함</li><li><strong>일반 함수파라미터 처럼 2개 이상 넣기도 가능</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 함수&lt;<span class="title class_">MyType</span>&gt;(<span class="attr">x</span>: <span class="title class_">MyType</span>[]): <span class="title class_">MyType</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = 함수([<span class="number">4</span>, <span class="number">2</span>]); <span class="comment">// a = 4</span></span><br><span class="line"><span class="keyword">let</span> b = 함수([<span class="string">&#x27;kim&#x27;</span>, <span class="string">&#x27;park&#x27;</span>]); <span class="comment">// b = kim</span></span><br></pre></td></tr></table></figure><p>위 코드처럼, 함수 사용시 꼭 &lt;&gt; 안써도 알아서 기본 타입을 유추해서 집어넣어줍니다</p><hr><h1 id="3-인터페이스의-제너릭"><a href="#3-인터페이스의-제너릭" class="headerlink" title="3. 인터페이스의 제너릭"></a>3. 인터페이스의 제너릭</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Mobile</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">price</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">option</span>: T; <span class="comment">// option을 제너릭 타입으로 받음</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">m1</span>: <span class="title class_">Mobile</span>&lt;<span class="built_in">object</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;아이폰 14&#x27;</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="comment">// 객체 형태로</span></span><br><span class="line">  <span class="attr">option</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">    <span class="attr">coupon</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">m2</span>: <span class="title class_">Mobile</span>&lt;<span class="built_in">string</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;갤럭시 22&#x27;</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">option</span>: <span class="string">&#x27;good&#x27;</span>, <span class="comment">// 문자 형태로</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="4-제너릭-타입-제한"><a href="#4-제너릭-타입-제한" class="headerlink" title="4. 제너릭 타입 제한"></a>4. 제너릭 타입 제한</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 함수&lt;<span class="title class_">MyType</span>&gt;(<span class="attr">x</span>: <span class="title class_">MyType</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x - <span class="number">1</span>; <span class="comment">// x 타입이 불확실하니까 에러</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// The left-hand side of an arithmetic operation must be of type &#x27;any&#x27;, &#x27;number&#x27;,</span></span><br><span class="line">  <span class="comment">// &#x27;bigint&#x27; or an enum type.ts(2362)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = 함수&lt;<span class="built_in">number</span>&gt;(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><code>&lt;MyType&gt;</code>이라는 곳에 <strong>number타입 말고도 다른 타입을 집어넣을 수도 있어서</strong><br>미리 숫자(- 1) 연산을 미리 방지해줍니다.</p><p>narrowing를 이용해서 타입을 제한해도 되나,<br>MyType에 집어넣을 수 있는 타입을 미리 제한하는 것도 하나의 해결책입니다.</p><hr><h2 id="4-1-Type-constraints-제약조건-extends"><a href="#4-1-Type-constraints-제약조건-extends" class="headerlink" title="4.1 Type constraints(제약조건) : extends"></a>4.1 Type constraints(제약조건) : extends</h2><p><code>extends</code> 문법을 쓰면 <strong>넣을 수 있는 타입을 제한</strong>할 수 있습니다.<br>그래서 <code>MyType extends number</code>라고 쓰면, number타입만 받겠다는 의미입니다.</p><p><code>interface</code> 문법에 쓰는 <code>extends</code>와는 살짝 다른 느낌입니다.</p><ul><li>interface의 <code>extends</code> : 복사</li><li>generic의 <code>extends</code> : number와 비슷한 속성을 가지고 있는지 if 문으로 체크</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyType이 우측에 있는 속성을 가지고 있는지 제한, number인지 체크</span></span><br><span class="line"><span class="keyword">function</span> 함수&lt;<span class="title class_">MyType</span> <span class="keyword">extends</span> <span class="built_in">number</span>&gt;(<span class="attr">x</span>: <span class="title class_">MyType</span>) &#123;</span><br><span class="line">  <span class="comment">// return 타입지정을 안한 이유는 `숫자 - 숫자`를 했으니 알아서 number 타입이 됨</span></span><br><span class="line">  <span class="keyword">return</span> x - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = 함수&lt;<span class="built_in">number</span>&gt;(<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 99</span></span><br></pre></td></tr></table></figure><hr><h1 id="5-커스텀-타입도-제한-가능"><a href="#5-커스텀-타입도-제한-가능" class="headerlink" title="5. 커스텀 타입도 제한 가능"></a>5. 커스텀 타입도 제한 가능</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 함수&lt;<span class="title class_">MyType</span>&gt;(<span class="attr">x</span>: <span class="title class_">MyType</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.<span class="property">length</span>; <span class="comment">// 2. 에러 : length 조작을 일단 방지</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. string을 집어넣었지만 나중에 number타입을 실수로 집어넣으면?</span></span><br><span class="line"><span class="keyword">let</span> a = 함수&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure><p>그래서 <code>extend</code>로 이를 제한해주면 됩니다. <code>interface</code>로 만들어둔 타입을 <code>extends</code>해봅시다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 커스텀 타입으로도 타입파라미터 제한 가능</span></span><br><span class="line"><span class="keyword">interface</span> lengthCheck &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MyType이 lengthCheck 속성을 가지고 있는지 체크</span></span><br><span class="line"><span class="keyword">function</span> 함수&lt;<span class="title class_">MyType</span> <span class="keyword">extends</span> lengthCheck&gt;(<span class="attr">x</span>: <span class="title class_">MyType</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = 함수&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">// 가능</span></span><br><span class="line"><span class="keyword">let</span> b = 함수&lt;<span class="built_in">number</span>&gt;(<span class="number">1234</span>); <span class="comment">// 에러</span></span><br></pre></td></tr></table></figure><hr><h1 id="6-예제"><a href="#6-예제" class="headerlink" title="6. 예제"></a>6. 예제</h1><p>문자를 집어넣으면 문자의 개수, array를 집어넣으면 array안의 자료 개수를 콘솔창에 출력해주는 함수</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 함수&lt;<span class="title class_">MyType</span> <span class="keyword">extends</span> <span class="built_in">string</span> | <span class="built_in">string</span>[]&gt;(<span class="attr">x</span>: <span class="title class_">MyType</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">length</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">함수&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">// 5</span></span><br><span class="line">함수&lt;<span class="built_in">string</span>[]&gt;([<span class="string">&#x27;kim&#x27;</span>, <span class="string">&#x27;park&#x27;</span>]); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-TS-Basic-07-클래스</title>
      <link href="/2023/01/08/Front-TS-Basic-07-Class/"/>
      <url>/2023/01/08/Front-TS-Basic-07-Class/</url>
      
        <content type="html"><![CDATA[<h1 id="1-JS의-class-문법"><a href="#1-JS의-class-문법" class="headerlink" title="1. JS의 class 문법"></a>1. JS의 class 문법</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 챔피언(q스킬, w스킬) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">q</span> = q스킬;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">w</span> = w스킬;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nunu = <span class="keyword">new</span> 챔피언(<span class="string">&#x27;잡아먹기&#x27;</span>, <span class="string">&#x27;눈덩이굴리기&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> garen = <span class="keyword">new</span> 챔피언(<span class="string">&#x27;돌격&#x27;</span>, <span class="string">&#x27;방패&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;누누: &#x27;</span>, nunu);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;가렌&quot;: &#x27;</span>, garen);</span><br></pre></td></tr></table></figure><ul><li><code>class</code>는 <strong>object 뽑는 기계</strong></li><li><code>this</code>는 <strong>기계로부터 생성되는 object &#x3D; 인스턴스</strong></li></ul><p>위 코드를 ES6 class 문법으로 만들어보면,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 챔피언 &#123;</span><br><span class="line">  <span class="comment">// constructor(생성자) = object 생성 기계</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">q스킬, w스킬</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">q</span> = q스킬;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">w</span> = w스킬;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nunu = <span class="keyword">new</span> 챔피언(<span class="string">&#x27;잡아먹기&#x27;</span>, <span class="string">&#x27;눈덩이굴리기&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> garen = <span class="keyword">new</span> 챔피언(<span class="string">&#x27;돌격&#x27;</span>, <span class="string">&#x27;방패&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;누누: &#x27;</span>, nunu);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;가렌: &#x27;</span>, garen);</span><br></pre></td></tr></table></figure><hr><h1 id="2-JS의-prototype-문법"><a href="#2-JS의-prototype-문법" class="headerlink" title="2. JS의 prototype 문법"></a>2. JS의 prototype 문법</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// prototype === 유전자, 자동으로 추가됨</span></span><br><span class="line"><span class="keyword">function</span> 챔피언() &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">q</span> = <span class="string">&#x27;잡아먹기&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">w</span> = <span class="string">&#x27;눈덩이굴리기&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">챔피언.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;누누&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nunu = <span class="keyword">new</span> 챔피언();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nunu.<span class="property">name</span>); <span class="comment">// 누누</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nunu); <span class="comment">// 챔피언 &#123; q: &#x27;잡아먹기&#x27;, w: &#x27;눈덩이굴리기&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>array 자료에 <code>.sort()</code>같은 것들을 붙일 수 있는 이유는? → <strong>부모 유전자에 기록되어 있어서</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>();</span><br><span class="line">arr2.<span class="title function_">sort</span>(); <span class="comment">// [ 1, 2, 4 ]</span></span><br></pre></td></tr></table></figure><p>모든 array 자료에 쓸 수 있는 함수를 추가하려면?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.추가할함수 = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> numArr = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">numArr.추가할함수();</span><br></pre></td></tr></table></figure><hr><h1 id="3-객체지향-개념"><a href="#3-객체지향-개념" class="headerlink" title="3. 객체지향 개념"></a>3. 객체지향 개념</h1><p>cf. <a href="https://kevinkim95-dev.tistory.com/2">절차적 프로그래밍 vs 객체지향 프로그래밍</a></p><h2 id="3-1-Imperative-and-Procedural-Programming"><a href="#3-1-Imperative-and-Procedural-Programming" class="headerlink" title="3.1 Imperative and Procedural Programming"></a>3.1 Imperative and Procedural Programming</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/ts_7_1.png" alt="ts_7_1"></p><p><code>명령어과 절차형 프로그래밍</code></p><ul><li>객체지향의 반대되는 프로그래밍 패러다임</li><li>데이터와 함수 위주로 구성하는 것</li><li>맨 처음 실행되는 main함수<ul><li>그 아래 여러 함수들을 호출 가능</li><li>함수 내부에서는 전역 변수의 데이터에 접근 가능</li></ul></li><li>대표적인 언어 : C</li></ul><hr><h2 id="3-2-Object-Oriented-Programming"><a href="#3-2-Object-Oriented-Programming" class="headerlink" title="3.2 Object Oriented Programming"></a>3.2 Object Oriented Programming</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/ts_7_2.png" alt="ts_7_2"></p><p><code>객체지향 프로그래밍</code></p><ul><li>프로그램을 객체(Object)로 정의해서 객체들끼리 의사소통하고 디자인하고 코딩해나가는 패러다임</li><li>Object 단위로 만들기 떄문에 한 곳에서 문제가 생긴다면, 관련 Object만 수정하면 됨</li><li>여러 번 반복되는 곳이 있다면, 관련 Object를 재사용할 수 있음</li><li>무언가 새로운 기능이 필요하다면, 새로운 Object를 만들면 되서 확장성도 높음</li><li>장점 : 생상성 높음, 높은 퀄리티 프로그램 작성 가능, 빠르게 기능 구현 가능, 유지보수성 향상</li></ul><p><code>객체(object)</code>는 <code>속성(data)</code>과 <code>함수(행동)</code>으로 구성됨</p><ul><li>e.g. MediaPlay(음악 플레이어)<ul><li>속성(data)<ul><li>music (음악 데이터)</li></ul></li><li>함수(function)<ul><li>play(재생 기능)</li><li>stop(정지 기능)</li></ul></li></ul></li><li><code>속성</code>은 다른 말로 <code>fields, property</code>라고도 부름</li><li><code>함수</code>는 다른 말로 <code>methods</code>라고 부름</li><li><code>object를 정의</code>하는 건 프로그래밍 언어마다 다르지만, 보통 <code>class</code>라고 부름</li></ul><p>class(템플릿, 틀)</p><ul><li>e.g. 붕어빵 만들기<ul><li>class &#x3D;&#x3D;&#x3D; 붕어빵 틀</li><li>object &#x3D;&#x3D;&#x3D; 팥 붕어빵, 크림 붕어빵, …</li></ul></li><li>e.g. 학생(student)<ul><li>class &#x3D;&#x3D;&#x3D; 학생 틀</li><li>object &#x3D;&#x3D;&#x3D; 메시 학생, 호날두 학생</li><li>property &#x3D;&#x3D;&#x3D; 학생 이름, 성적</li><li>method &#x3D;&#x3D;&#x3D; 공부하다</li></ul></li></ul><hr><h1 id="4-객체지향-원칙-4가지"><a href="#4-객체지향-원칙-4가지" class="headerlink" title="4. 객체지향 원칙 4가지"></a>4. 객체지향 원칙 4가지</h1><ol><li><code>Encapsulation(캡슐화)</code></li><li><code>Abstraction(추상화)</code></li><li><code>Inheritance(상속성)</code> : 상속을 이용해 코드 재사용성 높임</li><li><code>Polymorphism(다형성)</code> : 캡슐화, 추상황, 상속성을 이용해 구현</li></ol><hr><h2 id="4-1-Encapsulation-캡슐화"><a href="#4-1-Encapsulation-캡슐화" class="headerlink" title="4.1 Encapsulation(캡슐화)"></a>4.1 Encapsulation(캡슐화)</h2><ul><li>절자지향 프로그래밍에서는 데이터와 함수 등이 여러가지가 섞여있음</li><li>흩어져 있는 <strong>데이터와 함수들 중에 연관있고, 관련있는 것끼리 묶어 놓는 것</strong>을 <code>캡슐화</code>라고 함</li><li>e.g. 감기 캡슐약 안에 여러 성분들<ul><li>어떤 성분이 들어있는지 몰라도, 일반인들은 감기약을 먹으면, 감기가 호전된다는 것을 인식함</li></ul></li><li><strong>외부에서 보일 필요가 없는 데이터를 잘 숨겨놓음</strong>으로써 캡슐화 가능</li></ul><hr><h2 id="3-2-Abstraction-추상화"><a href="#3-2-Abstraction-추상화" class="headerlink" title="3.2 Abstraction(추상화)"></a>3.2 Abstraction(추상화)</h2><ul><li>내부에 복잡한 기능을 모르고 다 이해하지 못해도,</li><li>외부에서 간단한 Interface를 통해서 쓸 수 있는 것을 <code>추상화</code>라고 함</li><li>e.g. 커피머신 작동원리<ul><li>커피머신이 어떻게 내부 동작을 몰라도, 커피 타먹을 수 있음</li></ul></li><li>외부에서는 내부가 어떻게 구현되어 있는지 신경쓰지 않고,</li><li>지정된 외부에 보여줄 함수(Interface)를 통해 객체를 사용 가능</li></ul><hr><h2 id="3-3-Inheritance-상속성"><a href="#3-3-Inheritance-상속성" class="headerlink" title="3.3 Inheritance(상속성)"></a>3.3 Inheritance(상속성)</h2><ul><li>e.g. 커피 머신이라는 class가 정의되어져 있음<ul><li>상속을 이용해 잘 만들어진 커피머신의 데이터와 함수를 그대로 갖고 와서,</li><li>필요한 기능을 더해서 다른 종류의 새로운 커피 머신을 만들 수 있음</li></ul></li><li><code>부모 class</code>를 <code>parent, super, base class</code>라고 부르기도 함</li><li><code>자식 class</code>를 <code>child, sub, derived class</code>라고 부르기도 함</li><li>이 관계를 <code>IS-A관계</code>라고도 부름<ul><li>e.g. espresso machin <strong>is a</strong> coffee machine</li><li>e.g. coffee brewer <strong>is a</strong> coffee machine</li></ul></li></ul><p>다른 상속 예</p><ul><li>개 is a 동물</li><li>고양이 is a 동물</li><li>돼지 is a 동물</li></ul><p>다른 상속 예</p><ul><li>HTMLElement <strong>is a</strong> Element</li><li>Element <strong>is a</strong> Node</li><li>Node <strong>is a</strong> EventTarget</li><li>즉, Document, Element, Text는 모두 EventTarget을 상속받기 때문에, 모든 요소들이 이벤트가 발생할 수 있는 것임</li></ul><p><code>extends</code> 키워드를 사용해서 상속을 구현함</p><hr><h3 id="3-3-1-상속의-문제점"><a href="#3-3-1-상속의-문제점" class="headerlink" title="3.3.1 상속의 문제점"></a>3.3.1 상속의 문제점</h3><ul><li>족보가 꼬인다는 말처럼, 상속이 깊어질 수록 서로 간의 관계가 복잡해짐</li><li>상속은 수직적인 구조를 짜는 것을 의미합니다.</li><li>상속의 <strong>치명적 문제점</strong>은 <strong>어떤 부모 클래스의 행동을 수정하게 되면, 이를 상속받는 모든 자식 클래스에도 영향</strong>을 미침</li><li>더군다나 <strong>TS에서는 1가지 이상 부모 클래스를 상속받을 수 없음</strong></li></ul><hr><h3 id="3-3-2-Composition"><a href="#3-3-2-Composition" class="headerlink" title="3.3.2 Composition"></a>3.3.2 Composition</h3><p>레고를 할 때, 필요한 부품을 모아서 조립하는 것처럼, <strong>상속보다 Composition을 선호</strong>하셈</p><ul><li>cf. React에서도 상속을 이용한 class 컴포넌트 방식보다는<ul><li>Composition 방식의 함수형 컴포넌트를 권장함</li></ul></li></ul><hr><h2 id="3-4-Polymorphism-다형성"><a href="#3-4-Polymorphism-다형성" class="headerlink" title="3.4 Polymorphism(다형성)"></a>3.4 Polymorphism(다형성)</h2><ul><li>cf. <code>poly (=many)</code> | <code>morphi (=form)</code></li><li><code>polymorhism = 다양한 형태</code></li><li>e.g. 어떤 종류의 동물이든 소리를 내는 함수(makeSound())를 가짐</li><li>e.g. makeCoffee()라는 함수만 알면 어떤 종류의 커피머신이든, 커피 만들 수 있음</li></ul><hr><h1 id="4-필드값-타입지정"><a href="#4-필드값-타입지정" class="headerlink" title="4. 필드값 타입지정"></a>4. 필드값 타입지정</h1><p>class 내부에는 모든 자식 object들이 사용가능한 속성을 만들 수 있습니다.<br>예를 들어, 모든 Person 클래스의 자식들에게 data라는 속성을 부여해주고 싶으면,</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// class 중괄호 안에다가 변수처럼 만들면 됨 (let, const 키워드 X)</span></span><br><span class="line">  <span class="comment">// class 안에 만드는 속성을 필드(field)라고 부름</span></span><br><span class="line">  <span class="attr">data</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person이 모든 자식에게 data = 0을 하나씩 복사해줌</span></span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">let</span> kim = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(john.<span class="property">data</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(kim.<span class="property">data</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="5-constructor-타입지정"><a href="#5-constructor-타입지정" class="headerlink" title="5. constructor 타입지정"></a>5. constructor 타입지정</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class === object 복사기계</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// &#x27;this.뭐시기&#x27;를 쓰려면 필드값을 만들어줘야 함</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;kim&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">// error TS2339: Property &#x27;age&#x27; does not exist on type &#x27;Person&#x27;.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>필드 값으로 <strong>name, age가 미리 정의되어있어야 constructor 안에서도 사용가능</strong>합니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// 필드 값이 정의되어 있어야 함</span></span><br><span class="line">  name;</span><br><span class="line">  age;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">a: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = a; <span class="comment">// &#x27;hello&#x27;라는 값이 this.name에 들어감</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure><p>생산되는 object마다 각각 다른 이름을 부여하고 싶을 때 유용합니다.</p><hr><h1 id="6-methods-타입지정"><a href="#6-methods-타입지정" class="headerlink" title="6. methods 타입지정"></a>6. methods 타입지정</h1><p>class 내부엔 함수를 입력할 수 있습니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// Person클래스의 prototype에 추가</span></span><br><span class="line">  <span class="comment">// 모든 Person의 자식들은 add 라는 함수를 이용가능</span></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">숫자: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(숫자 + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-1-문제"><a href="#6-1-문제" class="headerlink" title="6.1 문제"></a>6.1 문제</h2><ul><li><code>&#123; model : &#39;소나타&#39;, price : 3000 &#125;</code> object를 복사해주는 class 만들기</li><li>복사된 object 자료들은 <code>tax()</code>라는 함수로 현재 object에 저장된 price의 10분의1을 출력</li></ul><p>동작 예</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> car1 = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&#x27;소나타&#x27;</span>, <span class="number">3000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car1); <span class="comment">// &#123; model : &#x27;소나타&#x27;, price : 3000 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car1.<span class="title function_">tax</span>()); <span class="comment">// 300</span></span><br></pre></td></tr></table></figure><hr><h2 id="6-2-정답"><a href="#6-2-정답" class="headerlink" title="6.2 정답"></a>6.2 정답</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">price</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">model</span> = a;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = b;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">tax</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">price</span> * <span class="number">0.1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> car1 = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&#x27;소나타&#x27;</span>, <span class="number">3000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car1); <span class="comment">// &#123; model : &#x27;소나타&#x27;, price : 3000 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car1.<span class="title function_">tax</span>()); <span class="comment">// 300</span></span><br></pre></td></tr></table></figure><hr><h1 id="7-상속-구현하려면-extends"><a href="#7-상속-구현하려면-extends" class="headerlink" title="7. 상속 구현하려면 extends"></a>7. 상속 구현하려면 extends</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  x = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewUser</span> <span class="keyword">extends</span> <span class="title class_ inherited__">User</span> &#123;</span><br><span class="line">  <span class="comment">// User 클래스의 기능들 복붙해줌</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>새로운 NewUser class 만들 때, User에 있는 기능을 상속받아서 사용할 수 있습니다.<br>비슷한 class를 많이 만들 때, 사용합니다.</p><hr><h1 id="8-접근제한자"><a href="#8-접근제한자" class="headerlink" title="8. 접근제한자"></a>8. 접근제한자</h1><p>접근 제한자를 선언한 속성과 메소드에 대한 접근 가능성은 다음과 같습니다.</p><table><thead><tr><th align="center">접근 가능성</th><th align="center">public</th><th align="center">protected</th><th align="center">private</th></tr></thead><tbody><tr><td align="center">클래스 내부</td><td align="center">◯</td><td align="center">◯</td><td align="center">◯</td></tr><tr><td align="center">자식 클래스 내부</td><td align="center">◯</td><td align="center">◯</td><td align="center">✕</td></tr><tr><td align="center">클래스 인스턴스</td><td align="center">◯</td><td align="center">✕</td><td align="center">✕</td></tr></tbody></table><hr><h2 id="8-1-public"><a href="#8-1-public" class="headerlink" title="8.1 public"></a>8.1 public</h2><ul><li>public이 붙은 속성은 <strong>자식 object들이 마음대로 사용하고 수정 가능</strong></li><li>필드값 같은걸 그냥 만들면 public이 기본값임</li><li>cf. public 키워드는 class 내의 prototype 함수에도 붙일 수 있음</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="comment">// 자식 클래스나 클래스 인스턴스에서 접근 가능</span></span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;kim&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 유저<span class="number">1</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">유저<span class="number">1.</span>name = <span class="string">&#x27;park&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="8-2-private"><a href="#8-2-private" class="headerlink" title="8.2 private"></a>8.2 private</h2><ul><li>private 키워드를 붙이면 <strong>자식 object들이 수정 불가능</strong></li><li>class 중괄호 안에서만 수정 및 사용가능</li><li>cf. 바닐라 JS에서도 <strong>속성옆에 # 붙이면 private 속성</strong>이 됨</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// 해당 클래스 이외의 위치에서는 접근 불가능</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">familyName</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;kim&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> hello = <span class="variable language_">this</span>.<span class="property">familyName</span> + <span class="string">&#x27;안뇽&#x27;</span>; <span class="comment">// 가능</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 유저<span class="number">1</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">유저<span class="number">1.</span>name = <span class="string">&#x27;park&#x27;</span>; <span class="comment">// public 가능</span></span><br><span class="line">유저<span class="number">1.</span>familyName = <span class="number">456</span>; <span class="comment">// private라 접근 불가 에러</span></span><br></pre></td></tr></table></figure><ul><li>cf. class 내의 함수에도 붙일 수 있음</li><li>private 부여된 속성을 class 밖에서 수정해야할 경우<ul><li>private 속성을 수정하는 함수를 class 안에 만들어서 함수로 실행</li></ul></li></ul><hr><h3 id="8-2-1-private-속성을-바깥에서-수정"><a href="#8-2-1-private-속성을-바깥에서-수정" class="headerlink" title="8.2.1 private 속성을 바깥에서 수정"></a>8.2.1 private 속성을 바깥에서 수정</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">familyName</span>: <span class="built_in">string</span>; <span class="comment">// private 속성</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;메시&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">familyName</span> = <span class="string">&#x27;kim&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// private 속성을 바깥에서 수정하려면,</span></span><br><span class="line">  <span class="comment">// private 속성을 수정하는 함수를 class 안에서 만들어야 함</span></span><br><span class="line">  <span class="comment">// class 바깥에서 함수를 이용하면 간접적으로 수정가능</span></span><br><span class="line">  <span class="title function_">changeSecret</span>(<span class="params">lastName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">familyName</span> = lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 집안 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(집안);</span><br><span class="line"><span class="comment">// 유저1.familyName = &#x27;park&#x27;; // 그냥 private 속성을 수정하려면 에러남</span></span><br><span class="line">집안.<span class="title function_">changeSecret</span>(<span class="string">&#x27;park&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(집안);</span><br></pre></td></tr></table></figure><p>외부에서 실수로 수정하면, 안되는 속성들은 private를 붙이면 됩니다.<br>private 속성을 수정하려면, 매번 함수를 만들어서 수정해야하니 약간의 안전장치를 더해서 개발이 가능합니다.<br>이렇게 하면 버그를 예방할 수 있스빈다.</p><hr><h3 id="8-2-2-public-private-생략"><a href="#8-2-2-public-private-생략" class="headerlink" title="8.2.2 public, private 생략"></a>8.2.2 public, private 생략</h3><p>public, private 키워드를 쓰면, constructor 안에서 <code>this.name = name</code> 이런걸 생략할 수 있습니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  name;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> 사람<span class="number">1</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;john&#x27;</span>);</span><br></pre></td></tr></table></figure><p>위 코드와 아래 코드는 같은 역할을 하는 코드입니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> 사람<span class="number">1</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;john&#x27;</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="8-3-protected"><a href="#8-3-protected" class="headerlink" title="8.3 protected"></a>8.3 protected</h2><ul><li>protected 키워드를 붙이면, <strong>자식 class까지 사용 가능</strong></li><li>extends 된 class 안에서도 사용가능하게 약간 보안을 풀어줌</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="comment">// protected</span></span><br><span class="line">  <span class="comment">// - private와 동일하게 class 안에서만 사용이 가능</span></span><br><span class="line">  <span class="comment">// - User의 자식들도 함부로 사용이 불가능</span></span><br><span class="line">  <span class="keyword">protected</span> x = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewUser</span> <span class="keyword">extends</span> <span class="title class_ inherited__">User</span> &#123;</span><br><span class="line">  <span class="comment">// x 속성이 private라면 접근 불가능</span></span><br><span class="line">  <span class="comment">// x 속성이 protected라면 접근 가능</span></span><br><span class="line">  <span class="title function_">doThis</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">20</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>class 여러개 만들 때 class 끼리 공유할 수 있는 속성</strong>을 만들고 싶으면 <code>protected</code></li><li><strong>class 하나 안에서만 쓸 수 있는 속성</strong>을 만들고 싶으면 <code>private</code></li></ul><hr><h2 id="8-4-static-제한자"><a href="#8-4-static-제한자" class="headerlink" title="8.4 static 제한자"></a>8.4 static 제한자</h2><ul><li>static 제한자를 붙이면, <strong>자식에게 물려주지 않음</strong></li><li><code>클래스 안에 있는 변수와 함수</code>는 모두 클래스로부터 새로 생성되는 **object(a.k.a. 인스턴스)**에 부여됩니다.</li><li>class로부터 생성되는 object가 사용할 필요가 없는 변수들을 만들어놓고 싶을 때 사용</li><li>하나의 클래스에 하나만 적용됨</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="comment">// x와 y는 User로 생성된 object들만 사용가능</span></span><br><span class="line">  x = <span class="number">10</span>;</span><br><span class="line">  y = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">john.<span class="property">x</span>; <span class="comment">// 가능</span></span><br><span class="line"><span class="title class_">User</span>.<span class="property">x</span>; <span class="comment">// 불가능</span></span><br></pre></td></tr></table></figure><p>class에 직접 변수나 함수를 부여하고 싶으면, <code>static</code> 키워드를 왼쪽에 붙여주면 됩니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> x = <span class="number">10</span>; <span class="comment">// static을 쓰면 자식에게 안물려줌</span></span><br><span class="line">  y = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">john.<span class="property">x</span>; <span class="comment">// 불가능</span></span><br><span class="line"><span class="title class_">User</span>.<span class="property">x</span>; <span class="comment">// 가능</span></span><br></pre></td></tr></table></figure><ul><li>cf. 함수도 static 붙이기 가능</li><li>extends로 class를 복사할 경우 static 붙은 것들도 따라옴</li><li>cf. <code>static</code>은 <strong>private, protected, public 키워드와 동시 사용가능</strong></li></ul><hr><h3 id="8-4-1-예시"><a href="#8-4-1-예시" class="headerlink" title="8.4.1 예시"></a>8.4.1 예시</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> skill = <span class="string">&#x27;js&#x27;</span>;</span><br><span class="line">  intro = <span class="title class_">User</span>.<span class="property">skill</span> + <span class="string">&#x27;전문가입니다&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> 철수 = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(철수); <span class="comment">// User &#123; intro: &#x27;js전문가입니다&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">User</span>.<span class="property">skill</span> = <span class="string">&#x27;python&#x27;</span>; <span class="comment">// python으로 수정</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> 민수 = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(민수); <span class="comment">// User &#123; intro: &#x27;python전문가입니다&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>class 내부의 기본 변수같은걸 저렇게 수정할 일은 별로 없습니다.<br><strong>수정하고 싶으면 private 쓰고, 그 다음에 수정함수를 만들어서 사용하는게 더 안전한 방법</strong>입니다.</p><hr><h2 id="8-5-접근제한자-예시"><a href="#8-5-접근제한자-예시" class="headerlink" title="8.5 접근제한자 예시"></a>8.5 접근제한자 예시</h2><h3 id="8-5-1-예시-1"><a href="#8-5-1-예시-1" class="headerlink" title="8.5.1 예시 1"></a>8.5.1 예시 1</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="comment">// static가 붙으면 자식들은 사용 불가능</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> x = <span class="number">10</span>; <span class="comment">// class 내부에서만 수정가능</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> y = <span class="number">20</span>; <span class="comment">// class 내부 외부 상관없이 수정가능</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> z = <span class="number">30</span>;</span><br><span class="line">  <span class="comment">// private 키워드와 유사하게 class 내부에서만 사용 가능</span></span><br><span class="line">  <span class="comment">// extends로 복사한 class 내부에서도 사용 가능</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="8-5-2-예시-2"><a href="#8-5-2-예시-2" class="headerlink" title="8.5.2 예시 2"></a>8.5.2 예시 2</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> x = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> y = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// static은 class에 직접 부여되는 속성</span></span><br><span class="line">  <span class="comment">// static 속성을 수정하거나 가져다 쓰고 싶으면, &#x27;클래스명.속성명&#x27;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">addOne</span>(<span class="params">파라미터: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="title class_">User</span>.<span class="property">x</span> += 파라미터;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">printX</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">User</span>.<span class="property">x</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">addOne</span>(<span class="number">3</span>);</span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">addOne</span>(<span class="number">10</span>);</span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">printX</span>(); <span class="comment">// 23</span></span><br></pre></td></tr></table></figure><hr><h1 id="9-추상-클래스-abstract"><a href="#9-추상-클래스-abstract" class="headerlink" title="9. 추상 클래스 : abstract"></a>9. 추상 클래스 : abstract</h1><p><strong>클래스</strong> 앞에 <code>abstract</code>를 붙이면,</p><ul><li>새로운 인스턴스를 만들 수 없고,</li><li><strong>반드시 상속을 통해서만 사용</strong>할 수 있습니다.</li></ul><p><strong>추상 클래스 내부의 메서드</strong>에도 <code>abstract</code>를 붙일 수 있습니다</p><ul><li><strong>상속받은 클래스에서 반드시 추상 메서드의 내용을 만들어야만 정상</strong> 동작함</li><li>단순히 이름만 선언해주고 <strong>구체적인 기능은 상속받은 쪽에서 만들어주는 것</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 추상 class</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">color: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = <span class="variable language_">this</span>.<span class="property">color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;시작&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">doSomething</span>(): <span class="built_in">void</span>; <span class="comment">// 추상 메서드 내부의 메서드</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 💥 Error : &#x27;Car&#x27; 클래스에서 상속된 추상 멤버 &#x27;doSomething&#x27;을(를) 구현하지 않습니다</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Car</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">color: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(color);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>상속받은 쪽에서 doSomething 메서드를 선언해야 합니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">color: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = <span class="variable language_">this</span>.<span class="property">color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;시작&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">doSomething</span>(): <span class="built_in">void</span>; <span class="comment">// 추상 메서드</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 추상 클래스를 상속받은 자식 클래스</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Car</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">color: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(color);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 상속받은 자식 클래스에서 추상 메서드 기능 구현</span></span><br><span class="line">  <span class="title function_">doSomething</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-TS-Basic-06-Type-Literal</title>
      <link href="/2023/01/08/Front-TS-Basic-06-Literal.md/"/>
      <url>/2023/01/08/Front-TS-Basic-06-Literal.md/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Literal-Narrowing-리터럴-좁히기"><a href="#1-Literal-Narrowing-리터럴-좁히기" class="headerlink" title="1. Literal Narrowing(리터럴 좁히기)"></a>1. Literal Narrowing(리터럴 좁히기)</h1><p><code>literal type(리터럴 타입)</code></p><ul><li><code>string, number</code> 같은 것만 타입이 될 수 있는 것이 아니라 문자열도 타입이 될 수 있음</li><li><strong>특정 글자나 숫자만 가질 수 있게 제한을 두는</strong> 타입을 <code>literal type</code>이라고 부름</li><li><code>const</code>는 <strong>변하지 않는 값을 선언</strong>할 때, <code>let</code>은 <strong>변할 수 있는 값을 선언</strong>할 때 사용</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 마우스를 올려 타입을 확인해보면,</span></span><br><span class="line"><span class="keyword">const</span> userName1 = <span class="string">&#x27;메시&#x27;</span>; <span class="comment">// &#x27;메시&#x27; 타입</span></span><br><span class="line"><span class="keyword">let</span> userName2 = <span class="string">&#x27;호날두&#x27;</span>; <span class="comment">// string 타입</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-String-Literal-Types"><a href="#2-String-Literal-Types" class="headerlink" title="2. String Literal Types"></a>2. String Literal Types</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 방향: <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span> | <span class="string">&#x27;top&#x27;</span> | <span class="string">&#x27;bottom&#x27;</span>;</span><br><span class="line">방향 = <span class="string">&#x27;left&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h1 id="3-Numeric-Literal-Types"><a href="#3-Numeric-Literal-Types" class="headerlink" title="3. Numeric Literal Types"></a>3. Numeric Literal Types</h1><p>숫자도 가능합니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">rollDice</span>(<span class="params"></span>): <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">6</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">6</span>) + <span class="number">1</span>) <span class="keyword">as</span> <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">rollDice</span>();</span><br></pre></td></tr></table></figure><p>주로 설정값을 설명할 때 사용됩니다:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** loc/lat 좌표에 지도를 생성합니다. */</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">setupMap</span>(<span class="params">config: MapConfig</span>): <span class="built_in">void</span>;</span><br><span class="line"><span class="comment">// ---생략---</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MapConfig</span> &#123;</span><br><span class="line">  <span class="attr">lng</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">lat</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">tileSize</span>: <span class="number">8</span> | <span class="number">16</span> | <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setupMap</span>(&#123; <span class="attr">lng</span>: -<span class="number">73.935242</span>, <span class="attr">lat</span>: <span class="number">40.73061</span>, <span class="attr">tileSize</span>: <span class="number">16</span> &#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="4-as-const-문법"><a href="#4-as-const-문법" class="headerlink" title="4. as const 문법"></a>4. as const 문법</h1><p><code>&#39;kim&#39;</code>타입만 들어올 수 있는 함수를 만들었는데, <code>자료.name</code>을 입력하고 싶다면…</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 자료 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kim&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onlyKim</span>(<span class="params">a: <span class="string">&#x27;kim&#x27;</span></span>) &#123;&#125;</span><br><span class="line"><span class="title function_">onlyKim</span>(자료.<span class="property">name</span>); <span class="comment">// string 타입인거지, &#x27;kim&#x27;타입이 아님</span></span><br><span class="line"><span class="comment">// onlyKim()은 &#x27;kim&#x27;이라는 타입만 들어올 수 있음</span></span><br><span class="line"><span class="comment">// 💥 Argument of type &#x27;string&#x27; is not assignable to parameter of type &#x27;&quot;kim&quot;&#x27;</span></span><br></pre></td></tr></table></figure><p>위 에러를 해결하고 싶으면</p><ol><li><strong>object 만들 때 타입을 미리 정의</strong></li><li><strong>assertion을 쓰기</strong> (as ‘kim’ 붙이기)</li><li><strong>as const를 object 자료에</strong> 붙이기</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 자료 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kim&#x27;</span>,</span><br><span class="line">&#125; <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 타입을 object의 value로 바꿔줌 (타입을 &#x27;kim&#x27;으로 바꿔줍)</span></span><br><span class="line"><span class="comment">// 2. object안에 있는 모든 속성을 readonly로 바꿔줌 (변경하면 에러 발생하도록)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onlyKim</span>(<span class="params">a: <span class="string">&#x27;kim&#x27;</span></span>) &#123;&#125;</span><br><span class="line"><span class="title function_">onlyKim</span>(자료.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><p>object를 잠그고 싶으면, <code>as const</code>를 사용하면 됩니다.</p>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-TS-Basic-05-Type-Union &amp; Intersection</title>
      <link href="/2023/01/08/Front-TS-Basic-05-Union/"/>
      <url>/2023/01/08/Front-TS-Basic-05-Union/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Union-합집합"><a href="#1-Union-합집합" class="headerlink" title="1. Union (합집합, |)"></a>1. Union (합집합, |)</h1><p><code>Union(유니언)</code> : 하나로 뭉쳐지는 것, 조합</p><ul><li>e.g. Unit : 하나로 움직이는 최소 단위, (상품의) 1개, (특정 임무를 위한) 부대 | 단체</li><li>e.g. Unity : 하나로 뭉쳐진 사람들의 마음, 정서 등</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4가지 타입을 가질 수 있는 Direction 타입----------------------</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Direction</span> = <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span> | <span class="string">&#x27;up&#x27;</span> | <span class="string">&#x27;down&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">direction: Direction</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(direction);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">move</span>(<span class="string">&#x27;down&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3가지 타입을 가지는 TileSize타입-------------------------------</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TileSize</span> = <span class="number">8</span> | <span class="number">16</span> | <span class="number">32</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">tile</span>: <span class="title class_">TileSize</span> = <span class="number">16</span>;</span><br></pre></td></tr></table></figure><hr><h1 id="2-Intersection-교집합-amp"><a href="#2-Intersection-교집합-amp" class="headerlink" title="2. Intersection (교집합, &amp;)"></a>2. Intersection (교집합, &amp;)</h1><p><code>Intersect(인터섹션)</code> : 교차하다[만나다], (어떤 지역을) 가로지르다, 교집합</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">score</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> father = &#123;</span><br><span class="line">  <span class="attr">empolyeeId</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">work</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 학생 &amp; 직장인 타입을 모두 작성해야만 하는 경우</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">internWork</span>(<span class="params">집안: student &amp; father</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(집안.<span class="property">name</span>, 집안.<span class="property">empolyeeId</span>, 집안.<span class="title function_">work</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">internWork</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">  <span class="attr">score</span>: <span class="number">189</span>,</span><br><span class="line">  <span class="attr">empolyeeId</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="attr">work</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="3-Union-Type을-쓸-때-주의할-점"><a href="#3-Union-Type을-쓸-때-주의할-점" class="headerlink" title="3. Union Type을 쓸 때 주의할 점"></a>3. Union Type을 쓸 때 주의할 점</h1><p>논리적으로 Unio 타입은 OR, Intersection 타입은 AND라고 생각하시는 분들이 있을텐데,<br>Interace와 같은 타입을 다룰 때는 다음와 같은 논리적 사고를 주의해야 합니다. 아래 코드를 보겠습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Developer</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">skill</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 파라미터 타입을 `Person`, `Developer` 인터페이스의 Union 타입으로 정의</span></span><br><span class="line"><span class="comment">// 파라미터의 타입이 `Person`도 되고 `Developer`도 된다고 생각해서</span></span><br><span class="line"><span class="comment">// 함수 안에 해당 인터페이스들이 제공하는 `age`나 `skill`를 사용할 수 있다라고 생각할 수 있음</span></span><br><span class="line"><span class="comment">// 그러나 introduce() 함수를 호출하는 시점에 `Person` 타입이 올지 `Developer` 타입이 올지 알 수가 없음</span></span><br><span class="line"><span class="comment">// 그래서 TS는 어느 타입이 들어오든 간에 오류가 안 나는 방향으로 타입을 추론함</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">introduce</span>(<span class="params">someone: Person | Developer</span>) &#123;</span><br><span class="line">  someone.<span class="property">name</span>; <span class="comment">// O 정상 동작</span></span><br><span class="line">  someone.<span class="property">age</span>; <span class="comment">// X 타입 오류</span></span><br><span class="line">  someone.<span class="property">skill</span>; <span class="comment">// X 타입 오류</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>결과적으로 <code>introduce()</code>안에서는 별도의 **타입 가드(Type Guard)**를 이용하여 타입의 범위를 좁히지 않는 이상,<br>기본적으로는 <code>Person</code>과 <code>Developer</code> 두 타입에 공통적으로 들어있는 속성인 <code>name</code>만 접근할 수 있게 됩니다.</p><hr><h1 id="4-Type-Narrowing-타입-좁히기"><a href="#4-Type-Narrowing-타입-좁히기" class="headerlink" title="4. Type Narrowing(타입 좁히기)"></a>4. Type Narrowing(타입 좁히기)</h1><p>if문 등으로 타입을 하나로 정해주는 것을 의미합니다.<br>타입이 확실하지 않을 때 생기는 부작용을 막기위한 장치입니다.</p><p>Narrowing으로 판정해주는 문법들</p><ul><li><strong>조건문을 이용한 타입가드</strong></li><li><strong>typeof 타입 가드</strong> : <code>typeof 변수</code></li><li><strong>in 타입 가드</strong> : <code>속성명 in 오브젝트 자료</code></li><li><strong>instanceof 타입 가드</strong> : <code>인스턴스 instanceof 부모</code></li></ul><hr><h2 id="4-1-조건문을-이용한-타입가드"><a href="#4-1-조건문을-이용한-타입가드" class="headerlink" title="4.1 조건문을 이용한 타입가드"></a>4.1 조건문을 이용한 타입가드</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  legs?: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addLeg</span>(<span class="params">animal: Animal</span>) &#123;</span><br><span class="line">  <span class="comment">// leg 속성이 undefined가 될수 있기 때문에 타입 에러가 발생할 수 있음</span></span><br><span class="line">  <span class="comment">// leg 속성을 사용하기 전에 truthy인지 확인하면 됨</span></span><br><span class="line">  <span class="comment">// 변수에서 null과 undefined를 제외시킴</span></span><br><span class="line">  <span class="keyword">if</span> (animal.<span class="property">legs</span>) &#123;</span><br><span class="line">    animal.<span class="property">legs</span> = animal.<span class="property">legs</span> + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-2-typeof-타입-가드"><a href="#4-2-typeof-타입-가드" class="headerlink" title="4.2 typeof 타입 가드"></a>4.2 typeof 타입 가드</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">PlusOne</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;number&#x27;</span>) <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span>) <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-3-in-타입-가드"><a href="#4-3-in-타입-가드" class="headerlink" title="4.3 in 타입 가드"></a>4.3 in 타입 가드</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">surname</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Organization</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Contact</span> = <span class="title class_">Person</span> | <span class="title class_">Organization</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">contact: Contact</span>) &#123;</span><br><span class="line">  <span class="comment">// 속성명 in 오브젝트 자료</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&#x27;firstName&#x27;</span> <span class="keyword">in</span> contact) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello &#x27;</span> + contact.<span class="property">firstName</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-4-instanceof-타입-가드"><a href="#4-4-instanceof-타입-가드" class="headerlink" title="4.4 instanceof 타입 가드"></a>4.4 instanceof 타입 가드</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> firstName: <span class="built_in">string</span>, <span class="keyword">public</span> surname: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Organisation</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Contact</span> = <span class="title class_">Person</span> | <span class="title class_">Organisation</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">contact: Contact</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello &#x27;</span> + contact.<span class="property">firstName</span>);</span><br><span class="line">  <span class="comment">// 💥 Property &#x27;firstName&#x27; does not exist on type &#x27;Contact&#x27;.</span></span><br><span class="line">  <span class="comment">// 💥 contact가 firstName 속성를 없는 Organisation 타입일 수 있기 때문</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>인스턴스 instanceof 부모</code>를 사용하면, 편합니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> firstName: <span class="built_in">string</span>, <span class="keyword">public</span> surname: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Organisation</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Contact</span> = <span class="title class_">Person</span> | <span class="title class_">Organisation</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">contact: Contact</span>) &#123;</span><br><span class="line">  <span class="comment">// 인스턴스 instanceof 부모</span></span><br><span class="line">  <span class="comment">// if 문안에서 contact의 타입은 Person으로 좁혀짐(narrow)</span></span><br><span class="line">  <span class="keyword">if</span> (contact <span class="keyword">instanceof</span> <span class="title class_">Person</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello &#x27;</span> + contact.<span class="property">firstName</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-TS-Basic-04-Type-이넘(enum, 열거형)</title>
      <link href="/2023/01/08/Front-TS-Basic-04-Enum/"/>
      <url>/2023/01/08/Front-TS-Basic-04-Enum/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Enum"><a href="#1-Enum" class="headerlink" title="1. Enum"></a>1. Enum</h1><ul><li><code>Enum</code> &#x3D; <strong>여러 개의 관련된 상수들을 모아주는 타입</strong><ul><li><code>enumerated type</code>의 약어,</li><li>무언가 (늘여놓은, 나열, 열거)하는 타입</li><li>cf. <strong>enumberate</strong> &#x3D; 여러가지 것들을 축 늘여놓은 그림</li></ul></li><li>열거자 이름들은 일반적으로 해당 언어의 상수 역할을 하는 식별자</li><li>다른 언어에서는 Enum이 유용하지만, <strong>TS에서는 가능한 Enum 쓰지 않는 것을 권장</strong><ul><li>왜냐하면, Enum 타입으로 선언된 변수에 다른 어떤 숫자로 할당이 가능하다는 문제점이 존재</li><li>대신 <strong>Union 타입( | )을 사용</strong>하기</li></ul></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript에서 Enum은 존재X, 직접 독립적인 상수를 정의해서 사용 ---------</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MAX_NUM</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MAX_STUDENTS_PER_CLASS</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MONDAY</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TUESDAY</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">WEDNESDAY</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DAYS_ENUM</span> = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123; <span class="attr">MONDAY</span>: <span class="number">0</span>, <span class="attr">TUESDAY</span>: <span class="number">1</span>, <span class="attr">WEDNESDAY</span>: <span class="number">2</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> dayOfToday = <span class="variable constant_">DAYS_ENUM</span>.<span class="property">MONDAY</span>; <span class="comment">// 0이 할당됨</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TypeScript ----------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 맨 앞의 첫글자는 대문자로</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DaysOfWeek</span> = <span class="string">&#x27;Monday&#x27;</span> | <span class="string">&#x27;Tuesday&#x27;</span> | <span class="string">&#x27;Wednesday&#x27;</span>;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Days</span> &#123;</span><br><span class="line">  <span class="title class_">Monday</span>,</span><br><span class="line">  <span class="title class_">Tuesday</span>,</span><br><span class="line">  <span class="title class_">Wednesday</span>,</span><br><span class="line">  <span class="title class_">Thursday</span>,</span><br><span class="line">  <span class="title class_">Friday</span>,</span><br><span class="line">  <span class="title class_">Saturday</span>,</span><br><span class="line">  <span class="title class_">Sunday</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 자동으로 맨 앞에서 0부터 값을 할당해줌</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>.<span class="property">Monday</span>); <span class="comment">// 0이 출력</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">day</span>: <span class="title class_">Days</span> = <span class="title class_">Days</span>.<span class="property">Saturday</span>; <span class="comment">// 5</span></span><br><span class="line">day = <span class="title class_">Days</span>.<span class="property">Tuesday</span>; <span class="comment">// 4</span></span><br><span class="line">day = <span class="number">10</span>; <span class="comment">// Enum 타입으로 선언된 변수에 다른 어떤 숫자로 할당이 가능하다는 문제점이 존재</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(day); <span class="comment">// 10이 출력</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">dayOfweek</span>: <span class="title class_">DaysOfWeek</span> = <span class="string">&#x27;Monday&#x27;</span>;</span><br><span class="line">dayOfweek = <span class="string">&#x27;Wednesday&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-TS-Basic-03-Type-interface</title>
      <link href="/2023/01/08/Front-TS-Basic-03-Interface/"/>
      <url>/2023/01/08/Front-TS-Basic-03-Interface/</url>
      
        <content type="html"><![CDATA[<h1 id="1-interface-인터페이스"><a href="#1-interface-인터페이스" class="headerlink" title="1. interface(인터페이스)"></a>1. interface(인터페이스)</h1><p><code>interface</code> 문법을 쓰면, <strong>object 자료형의 타입을 보다 편리하게 지정가능</strong>합니다.</p><ul><li>cf. interface : 상호 간에 정의한 약속 혹은 규칙</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>, <span class="attr">age</span>: <span class="number">36</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x27;age를 속성으로 갖는 객체&#x27;를 파라미터로 받음</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logAge</span>(<span class="params">obj: &#123; age: <span class="built_in">number</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">logAge</span>(person); <span class="comment">// 28</span></span><br></pre></td></tr></table></figure><p>이렇게 인자를 받을 때 단순한 타입 뿐만 아니라 객체의 속성 타입까지 정의할 수 있죠.<br>만약 위 코드에 interface를 적용하면 어떤 모습일까요?</p><p><strong>type을 미리 정의하고 싶으면 interface 키워드</strong>를 이렇게 만들어봅시다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. interface로 객체 타입을 정의</span></span><br><span class="line"><span class="keyword">interface</span> personAge &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 파라미터는 personAge타입으로 받는다.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logAge</span>(<span class="params">obj: personAge</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. interface 타입 속성의 개수와 일치하지 않아도됨</span></span><br><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>, <span class="attr">age</span>: <span class="number">28</span> &#125;;</span><br><span class="line"><span class="title function_">logAge</span>(person);</span><br></pre></td></tr></table></figure><p>그리고 위 코드를 보면, 파라미터로 interface를 받을 때,<br><strong>interface의 속성 개수</strong>와 <strong>파라미터로 받는 객체의 속성 개수</strong>가 일치하지 않아도 됩니다.<br>즉, interface에 정의된 속성, 타입의 조건만 만족하면, 객체의 속성 개수가 많아도 상관없습니다.</p><hr><h1 id="2-옵션-속성"><a href="#2-옵션-속성" class="headerlink" title="2. 옵션 속성 (?)"></a>2. 옵션 속성 (?)</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> interface_이름 &#123;</span><br><span class="line">  속성?: 타입;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>옵션 속성을 사용하면, 정의되어 있는 속성을 꼭 사용하지 않아도 됩니다.</p><ul><li>사용법은 속성의 끝에 <code>?</code>를 붙이면 됩니다.</li><li>Optional Parameter를 사용하는 경우 해당 매개변수는 필수 매개변수의 뒤쪽으로 가야 됨</li></ul><p>예시</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">FootballPlayer</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>; <span class="comment">// 📝 옵션속성(?) : 사용해도 되고, 안해도 되고</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> centerForard = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SoccerPlayer 타입을 파라미터로 받는 함수</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Team</span>(<span class="params">player: FootballPlayer</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(player.<span class="property">name</span>); <span class="comment">// 메시</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// age가 없어도 동작함</span></span><br><span class="line"><span class="title class_">Team</span>(centerForard);</span><br></pre></td></tr></table></figure><hr><h2 id="2-1-장점"><a href="#2-1-장점" class="headerlink" title="2.1 장점"></a>2.1 장점</h2><p>단순히 interface를 사용할 때 속성을 선택적으로 적용할 수 있다는 것 뿐만 아니라,<br>interface에 정의되어 있지 않은 속성에 대해서 인지시켜줄 수 있습니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">FootballPlayer</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>; <span class="comment">// 📝 옵션속성(?) : 사용해도 되고, 안해도 되고</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> centerForard = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SoccerPlayer 타입을 파라미터로 받는 함수</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Team</span>(<span class="params">player: FootballPlayer</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(player.<span class="property">addrees</span>);</span><br><span class="line">  <span class="comment">// ^ Error: Property &#x27;addrees&#x27; does not exist on type &#x27;FootballPlayer&#x27; 🌐</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// age가 없어도 동작함</span></span><br><span class="line"><span class="title class_">Team</span>(centerForard);</span><br></pre></td></tr></table></figure><p>interface에 정의되어 있지 않은 속성에 대해서 오류를 표시합니다.<br>마찬가지로 오타가 났어도 알려줍니다.</p><hr><h1 id="3-읽기-전용-속성"><a href="#3-읽기-전용-속성" class="headerlink" title="3. 읽기 전용 속성"></a>3. 읽기 전용 속성</h1><p><code>readonly</code> 속성을 붙이면, <strong>객체를 처음 생성할 때만 값을 할당</strong>하고, 그 이후에는 변경할 수 없습니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">FootballPlayer</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">centerForard</span>: <span class="title class_">FootballPlayer</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">centerForard.<span class="property">name</span> = <span class="string">&#x27;호날두&#x27;</span>;</span><br><span class="line"><span class="comment">// ^ error: 읽기 전용 속성이므로 &#x27;name&#x27;에 할당할 수 없음</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-1-읽기-전용-배열"><a href="#3-1-읽기-전용-배열" class="headerlink" title="3.1 읽기 전용 배열"></a>3.1 읽기 전용 배열</h2><p>배열을 선언할 때 <code>ReadonlyArray&lt;T&gt;</code> 타입을 사용하면 읽기 전용 배열을 생성할 수 있습니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReadonlyArray로 선언하면 배열의 내용을 변경 불가능</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">ReadonlyArray</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">// error</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>); <span class="comment">// error</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">100</span>; <span class="comment">// error</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-객체-선언과-관련된-타입-체크"><a href="#4-객체-선언과-관련된-타입-체크" class="headerlink" title="4. 객체 선언과 관련된 타입 체크"></a>4. 객체 선언과 관련된 타입 체크</h1><p>타입스크립트는 interface를 이용하여 객체를 선언할 때 좀 더 엄밀한 속성 검사를 진행합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">FootballPlayer</span> &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>; <span class="comment">// name이라 적혀있음</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Team</span>(<span class="params">player: FootballPlayer</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(player.<span class="property">name</span>); <span class="comment">// 메시</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 😅 names라고 오타났음</span></span><br><span class="line"><span class="title class_">Team</span>(&#123; <span class="attr">names</span>: <span class="string">&#x27;호날두&#x27;</span> &#125;); <span class="comment">// Error : Object literal에 적혀진 속성만 지정해야 함</span></span><br><span class="line"><span class="comment">// Object literal may only specify known properties,</span></span><br><span class="line"><span class="comment">// but &#x27;names&#x27; does not exist in type &#x27;FootballPlayer&#x27;.</span></span><br><span class="line"><span class="comment">// Did you mean to write &#x27;name&#x27;?</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-1-Type-Assertion-타입-덮어쓰기"><a href="#4-1-Type-Assertion-타입-덮어쓰기" class="headerlink" title="4.1 Type Assertion(타입 덮어쓰기)"></a>4.1 Type Assertion(타입 덮어쓰기)</h2><p>만약 이런 타입 추론을 무시하고 싶다면, <code>as</code> 키워드를 사용해 다음과 같이 선언합니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addOne</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="comment">// x라는 변수는 number라고 확신</span></span><br><span class="line">  <span class="comment">// 무조건 숫자가 들어올 것이라는 사실을 알고 있어야 안전하게 쓸 수 있음</span></span><br><span class="line">  <span class="keyword">return</span> (x <span class="keyword">as</span> <span class="built_in">number</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addOne</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>as 키워드는 타입을 개발자 맘대로 주장하는 역할이라 때문에 엄격한 타입체크기능을 잠깐 안쓰겠다는 뜻과 동일합니다. 그래서 <strong>as 문법은 이럴 때 쓰도록 합시다</strong>.</p><ul><li>타입에러가 나는지 모르겠는 상황에 <strong>임시로 에러해결용</strong></li><li>어떤 타입이 들어올지 <strong>정말 100% 확실하게 알고 있는데 컴파일러 에러가 방해</strong>할 때</li></ul><p>대부분의 상황에선 as 보다 훨씬 엄격하고 좋은 type narrowing으로 해결할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">FootballPlayer</span> &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>; <span class="comment">// name이라 적혀있음</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Team</span>(<span class="params">player: FootballPlayer</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(player.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> centerForard = &#123;</span><br><span class="line">  <span class="attr">names</span>: <span class="string">&#x27;호날두&#x27;</span>, <span class="comment">// 😅 names라고 오타났음</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Team</span>(centerForard <span class="keyword">as</span> <span class="title class_">FootballPlayer</span>); <span class="comment">// 호날두</span></span><br></pre></td></tr></table></figure><p>만약 interface의 정의하지 않은 속성들을 추가로 사용하고 싶을 때는 아래와 같은 방법을 사용합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">FootballPlayer</span> &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>;</span><br><span class="line">  [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>; <span class="comment">// 1. 정의하지 않은 속성들을 추가로 사용하고 싶을 때</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Team</span>(<span class="params">player: FootballPlayer</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(player.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> centerForard = &#123;</span><br><span class="line">  <span class="attr">names</span>: <span class="string">&#x27;호날두&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">38</span>, <span class="comment">// 2. 정의하지 않은 속성 사용하기</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Team</span>(centerForard <span class="keyword">as</span> <span class="title class_">FootballPlayer</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="5-함수-타입"><a href="#5-함수-타입" class="headerlink" title="5. 함수 타입"></a>5. 함수 타입</h1><p>interface는 함수의 타입을 정의할 때에도 사용할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수의 타입 정의</span></span><br><span class="line"><span class="keyword">interface</span> login &#123;</span><br><span class="line">  (<span class="attr">id</span>: <span class="built_in">string</span>, <span class="attr">password</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수의 파라미터 타입과 반환값의 타입 정의</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">loginUser</span>: login;</span><br><span class="line">loginUser = <span class="function">(<span class="params">id: <span class="built_in">string</span>, pw: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;로그인함&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="5-1-인터페이스와-함수"><a href="#5-1-인터페이스와-함수" class="headerlink" title="5.1 인터페이스와 함수"></a>5.1 인터페이스와 함수</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Leo</span>: <span class="title class_">User</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// this가 어떤 타입인지 알 수 없어서 에러 뜸</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// Error : &#x27;this&#x27; implicitly has type &#x27;any&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = showName.<span class="title function_">bind</span>(<span class="title class_">Leo</span>);</span><br><span class="line"><span class="title function_">a</span>();</span><br></pre></td></tr></table></figure><p>this의 타입을 정의하려면 첫 번째 매개변수로 this의 타입을 정의해야 합니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Leo</span>: <span class="title class_">User</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"><span class="variable language_">this</span>: User</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = showName.<span class="title function_">bind</span>(<span class="title class_">Leo</span>);</span><br><span class="line"><span class="title function_">a</span>(); <span class="comment">// 메시</span></span><br></pre></td></tr></table></figure><p>만약 다른 매개변수가 있더라도 맨 앞에 this의 타입을 정의해줄 수 있습니다.<br>이 때는 매개변수를 받더라도 this가 아닌 다음 요소에 받은 매개변수가 들어갑니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Leo</span>: <span class="title class_">User</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"><span class="variable language_">this</span>: User, age: <span class="built_in">number</span>, gender: <span class="string">&#x27;m&#x27;</span> | <span class="string">&#x27;f&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, age, gender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = showName.<span class="title function_">bind</span>(<span class="title class_">Leo</span>);</span><br><span class="line"><span class="title function_">a</span>(<span class="number">36</span>, <span class="string">&#x27;m&#x27;</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="5-2-오버로딩"><a href="#5-2-오버로딩" class="headerlink" title="5.2 오버로딩"></a>5.2 오버로딩</h2><p>매개변수로 number 타입의 요소를 받는지, string 타입의 요소를 받는지에 따라 다른 결과값을 반환하고 싶을 수 있습니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">join</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="title class_">User</span> | <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> age === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name,</span><br><span class="line">      age,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;나이를 숫자로 입력하셈&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 둘다 User나 String 객체를 반환하는 것에 확신이 없어서 둘 다 에러</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Leo</span>: <span class="title class_">User</span> = <span class="title function_">join</span>(<span class="string">&#x27;메시&#x27;</span>, <span class="number">37</span>); <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Cristiano</span>: <span class="built_in">string</span> = <span class="title function_">join</span>(<span class="string">&#x27;호날두&#x27;</span>, <span class="string">&#x27;39&#x27;</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p>이 문제를 해결하기 위해서는 함수 오버로딩을 사용합니다. 어떤 타입의 age를 받았을 때 어떤 타입의 리턴값을 반환할 것인지를 명확하게 해줘야 합니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// **** 함수 오버로딩</span></span><br><span class="line"><span class="comment">// age가 string이면 string타입의 리턴값,</span></span><br><span class="line"><span class="comment">// age가 number이면 User타입의 리턴값을 반환한다고 명시적으로 작성</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">join</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">join</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>): <span class="title class_">User</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">join</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="title class_">User</span> | <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> age === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name,</span><br><span class="line">      age,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;나이를 숫자로 입력하셈&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Leo</span>: <span class="title class_">User</span> = <span class="title function_">join</span>(<span class="string">&#x27;메시&#x27;</span>, <span class="number">37</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Cristiano</span>: <span class="built_in">string</span> = <span class="title function_">join</span>(<span class="string">&#x27;호날두&#x27;</span>, <span class="string">&#x27;39&#x27;</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="6-class-타입"><a href="#6-class-타입" class="headerlink" title="6. class 타입"></a>6. class 타입</h1><p>C#이나 Java처럼 TS도 클래스가 일정 조건을 만족하도록 타입 규칙을 정할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Player</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">newLeage</span>(<span class="title class_">PlayerName</span>: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KoreaPlayer</span> <span class="keyword">implements</span> <span class="title class_">Player</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;손흥민&#x27;</span>;</span><br><span class="line">  <span class="title function_">newLeage</span>(<span class="params">newPlayer: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = newPlayer;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="7-interface를-클래스에-상속-implements"><a href="#7-interface를-클래스에-상속-implements" class="headerlink" title="7. interface를 클래스에 상속 : implements"></a>7. interface를 클래스에 상속 : implements</h1><p>만들어준 인터페이스는 implements를 통해 사용할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="title class_">String</span>;</span><br><span class="line">  <span class="attr">wheels</span>: <span class="title class_">Number</span>;</span><br><span class="line">  <span class="title function_">start</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">  wheels = <span class="number">4</span>;</span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;움직이기&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성자가 들어가도 큰 차이는 없습니다.</p><ul><li>주의할 점 : 인터페이스에서 선언한 속성들은 모두 들어가야 함</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="title class_">String</span>;</span><br><span class="line">  <span class="attr">wheels</span>: <span class="title class_">Number</span>;</span><br><span class="line">  <span class="title function_">start</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">  wheels = <span class="number">4</span>;</span><br><span class="line">  <span class="comment">// 생성자가 들어가더라도</span></span><br><span class="line">  <span class="comment">// 인터페이스에서 선언한 속성(property)는 모두 들어가야 함</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">c: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = c;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;움직이기&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title function_">BMW</span>(<span class="string">&#x27;green&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// BMW &#123; color: &#x27;green&#x27;, wheels: 4 &#125;</span></span><br></pre></td></tr></table></figure><hr><h1 id="8-인터페이스-확장-extends"><a href="#8-인터페이스-확장-extends" class="headerlink" title="8. 인터페이스 확장 : extends"></a>8. 인터페이스 확장 : extends</h1><p>class와 마찬가지로 interface도 interface 간 확장이 가능합니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person 인터페이스</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x27;Person 인터페이스&#x27;를 상속받은 &#x27;Developer 인터페이스&#x27;</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Developer</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">skill</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 두 인터페이스의 속성들을 모두 정의해야 함</span></span><br><span class="line"><span class="keyword">let</span> frontEnd = &#123;&#125; <span class="keyword">as</span> <span class="title class_">Developer</span>;</span><br><span class="line">frontEnd.<span class="property">name</span> = <span class="string">&#x27;메시&#x27;</span>;</span><br><span class="line">frontEnd.<span class="property">skill</span> = <span class="string">&#x27;TypeScript&#x27;</span>;</span><br></pre></td></tr></table></figure><p>다음과 같이 interface를 여러 개 상속받아 사용할 수 있습니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">salary</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person과 Employee 인터페이스들을 상속받음</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Developer</span> <span class="keyword">extends</span> <span class="title class_">Person</span>, <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="attr">language</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">dev</span>: <span class="title class_">Developer</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">  <span class="attr">salary</span>: <span class="number">10000</span>,</span><br><span class="line">  <span class="attr">language</span>: <span class="string">&#x27;TypeScript&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="8-하이브리드-타입"><a href="#8-하이브리드-타입" class="headerlink" title="8. 하이브리드 타입"></a>8. 하이브리드 타입</h1><p>JS의 유연하고 동적인 타입 특성에 따라, interface도 여러 가지 타입을 조합하여 만들 수 있습니다.<br>e.g. 함수 타입이면서 객체 타입을 정의할 수 있는 interface</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">  (<span class="attr">start</span>: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">interval</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">reset</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCounter</span>(<span class="params"></span>): <span class="title class_">Counter</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> counter = <span class="keyword">function</span> (<span class="params">start: <span class="built_in">number</span></span>) &#123;&#125; <span class="keyword">as</span> <span class="title class_">Counter</span>;</span><br><span class="line">  counter.<span class="property">interval</span> = <span class="number">123</span>;</span><br><span class="line">  counter.<span class="property">reset</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="title function_">getCounter</span>();</span><br><span class="line"><span class="title function_">c</span>(<span class="number">10</span>);</span><br><span class="line">c.<span class="title function_">reset</span>();</span><br><span class="line">c.<span class="property">interval</span> = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure><hr><h1 id="10-type-vs-interface"><a href="#10-type-vs-interface" class="headerlink" title="10. type vs interface"></a>10. type vs interface</h1><p>type과 interface의 가장 큰 차이점은 <strong>타입의 확장 가능 &#x2F; 불가능 여부</strong>입니다.</p><ul><li><code>interface</code> : 확장(extends 키워드) 가능</li><li><code>type</code> : 확장(extends 키워드) 불가능</li></ul><p>따라서, 가능한한 <code>type</code> 보다는 <code>interface</code>로 선언해서 사용하는 것을 추천합니다.</p>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-TS-Basic-02-Type-기본 타입</title>
      <link href="/2023/01/08/Front-TS-Basic-02-BasicType/"/>
      <url>/2023/01/08/Front-TS-Basic-02-BasicType/</url>
      
        <content type="html"><![CDATA[<h1 id="1-TS-기본-타입"><a href="#1-TS-기본-타입" class="headerlink" title="1. TS 기본 타입"></a>1. TS 기본 타입</h1><p>JS의 타입 종류</p><ul><li><code>Primitive</code>: number, string, boolean, bigint, symbol, null, undefined</li><li><code>Object</code>: function, array…</li></ul><p>TS의 기본 타입 종류</p><ul><li>number, string, boolean, undefined, null</li><li>unknown, any, void, never, object</li><li>array, tuple</li></ul><hr><h2 id="1-1-Type-Annotation-타입-표기"><a href="#1-1-Type-Annotation-타입-표기" class="headerlink" title="1.1 Type Annotation(타입 표기)"></a>1.1 Type Annotation(타입 표기)</h2><blockquote><p>💡 타입 표기(Type Annotation)과 타입 추론(Type inference)</p><ul><li><strong>타입 표기(Type Annotation)</strong><ul><li><code>:</code>를 이용하여 자바스크립트 코드에 타입을 정의하는 방식</li><li><code>변수명:타입</code> 이렇게 정하면 됩니다.</li><li>개발자가 타입을 타입스크립트에게 직접 말해주는 것</li></ul></li><li><strong>타입 추론(Type inference)</strong></li><li>타입스크립트가 알아서 타입을 추론하는 것</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 타입 표기</span></span><br><span class="line"><span class="keyword">const</span> age : <span class="built_in">number</span> : <span class="number">5</span>; <span class="comment">// 개발자가 타입을 타입스크립트에게 직접 표기</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 타입 추론</span></span><br><span class="line"><span class="keyword">const</span> rate = <span class="number">5</span>; <span class="comment">// TS가 알아서 rate가 number 타입이라고 추론해줌</span></span><br></pre></td></tr></table></figure></blockquote><hr><h1 id="2-기본타입"><a href="#2-기본타입" class="headerlink" title="2. 기본타입"></a>2. 기본타입</h1><h2 id="2-1-number-string-boolean-undefined-null"><a href="#2-1-number-string-boolean-undefined-null" class="headerlink" title="2.1 number, string, boolean, undefined, null"></a>2.1 number, string, boolean, undefined, null</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 📝 number, string, boolean -------------------------</span></span><br><span class="line"><span class="keyword">let</span> 이름: <span class="built_in">string</span> = <span class="string">&#x27;메시&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> 나이: <span class="built_in">number</span> = <span class="number">36</span>;</span><br><span class="line"><span class="keyword">let</span> 결혼: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 undefined  -------------------------------------💩</span></span><br><span class="line"><span class="keyword">let</span> 이름<span class="number">2</span>: <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> 나이<span class="number">2</span>: <span class="built_in">number</span> | <span class="literal">undefined</span>; <span class="comment">// number 또는 undefined 타입 할당 가능</span></span><br><span class="line">나이<span class="number">2</span> = <span class="literal">undefined</span>;</span><br><span class="line">나이<span class="number">2</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 null -------------------------------------------💩</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">person2</span>: <span class="built_in">string</span> | <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><code>null, undefined</code>타입도 있지만, 굳이 사용하지 않습니다.</p><ul><li><code>undefined</code> : 값이 있는지 없는지 모름<ul><li>데이터 타입이 있거나 결정되지 않았을 때 사용</li></ul></li><li><code>null </code>: 값이 없음</li></ul><p>cf. 💩는 가급적 사용하지 않기</p><hr><h2 id="2-2-unknown-any-void-never-object"><a href="#2-2-unknown-any-void-never-object" class="headerlink" title="2.2 unknown, any, void, never, object"></a>2.2 unknown, any, void, never, object</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 📝 unknown ------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 무슨 타입인지 알 수 없는 (JS 연동을 위해 있음) 💩</span></span><br><span class="line"><span class="keyword">let</span> 타입몰라: <span class="built_in">unknown</span> = <span class="number">0</span>;</span><br><span class="line">타입몰라 = <span class="string">&#x27;he&#x27;</span>;</span><br><span class="line">타입몰라 = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 any ----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 무엇이든 할당 가능 (JS 연동을 위해 있음) 💩</span></span><br><span class="line"><span class="keyword">let</span> 타입전부가능: <span class="built_in">any</span> = <span class="number">0</span>;</span><br><span class="line">타입전부가능 = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 void : 함수에서 아무 것도 반환하지 않을 때 사용  ------------------------</span></span><br><span class="line"><span class="comment">// undefined와 null만 할당하고, 함수에는 반환 값을 설정할 수 없는 타입</span></span><br><span class="line"><span class="comment">// 이 함수는 뭔가를 return하려고 하면 에러남</span></span><br><span class="line"><span class="comment">// void : 아무것도 없이 공허함, 비어있는</span></span><br><span class="line"><span class="comment">// 생략 가능</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">unusable</span>: <span class="built_in">void</span> = <span class="literal">undefined</span>; <span class="comment">// 💩</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 never : 에러를 반환하거나 영원히 끝나지 않는 함수의 타입으로 사용 -------</span></span><br><span class="line"><span class="comment">// 이 함수는 절대 함수의 끝까지 실행되지 않는다는 의미</span></span><br><span class="line"><span class="comment">// 리턴하지 않는 함수일 떄, 이를 감안하고 코딩하라고 알려줄 떄</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throwError</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="comment">// message -&gt; server (log)</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">neverEnding</span>: <span class="built_in">never</span>; <span class="comment">// 💩</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 objet ---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 어떠한 object(객체) 타입이든 받을 수 있음</span></span><br><span class="line"><span class="keyword">let</span> 학생명: <span class="built_in">object</span>; <span class="comment">// 💩</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">acceptSomeObject</span>(<span class="params">학생명: <span class="built_in">object</span></span>) &#123;&#125;</span><br><span class="line"><span class="title function_">acceptSomeObject</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;kim&#x27;</span> &#125;);</span><br><span class="line"><span class="title function_">acceptSomeObject</span>(&#123; <span class="attr">animal</span>: <span class="string">&#x27;dog&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 타입 객체</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: &#123; <span class="attr">age</span>: <span class="built_in">number</span>; <span class="attr">name</span>: <span class="built_in">string</span> &#125; = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Capt&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">person.<span class="property">age</span> = <span class="number">101</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="2-3-array-tuple"><a href="#2-3-array-tuple" class="headerlink" title="2.3 array, tuple"></a>2.3 array, tuple</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 📝 Array  : 같은 타입의 배열을 담을 수 있는 타입</span></span><br><span class="line"><span class="keyword">const</span> 과일: <span class="built_in">string</span>[] = [<span class="string">&#x27;🍅&#x27;</span>, <span class="string">&#x27;🍌&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> 점수판: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 Tuple : 서로 다른 타입의 배열을 담을 수 있는 타입</span></span><br><span class="line"><span class="keyword">let</span> 학생정보: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">학생정보 = [<span class="string">&#x27;메시&#x27;</span>, <span class="number">123</span>];</span><br><span class="line">학생정보[<span class="number">0</span>]; <span class="comment">// 메시</span></span><br><span class="line">학생정보[<span class="number">1</span>]; <span class="comment">// 123</span></span><br><span class="line"><span class="keyword">const</span> [학생명, 학생나이] = 학생정보;</span><br></pre></td></tr></table></figure><p><strong>튜플은 사용하는 것을 권장하지 않습니다</strong>.</p><ul><li>데이터 접근할 떄, 인덱스로 접근하는 것은 가독성이 떨어짐</li><li>튜플을 사용할 수 있는 곳에서는 <strong>대신에 interface, type alias, class 등을 사용하기</strong></li><li>c.f. React의 useState의 API 정의를 보면 튜플임</li></ul><hr><h1 id="3-함수-타입"><a href="#3-함수-타입" class="headerlink" title="3. 함수 타입"></a>3. 함수 타입</h1><h2 id="3-1-함수에서-타입-이용-가능"><a href="#3-1-함수에서-타입-이용-가능" class="headerlink" title="3.1 함수에서 타입 이용 가능"></a>3.1 함수에서 타입 이용 가능</h2><p>함수는 총 두 군데 타입지정이 가능합니다.</p><ol><li><code>함수로 들어오는 자료(파라미터)</code> : 함수로 들어오는 <strong>파라미터 타입지정은 파라미터 옆에 작성</strong></li><li><code>함수에서 나가는 자료 (return)</code> : <strong>return 값 타입지정</strong>하고 싶으면 <strong>함수명() 우측에</strong></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchNum</span>(<span class="params">id: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-2-optional-default-rest"><a href="#3-2-optional-default-rest" class="headerlink" title="3.2 optional, default, rest"></a>3.2 optional, default, rest</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Optional parameter --------------------------------------------</span></span><br><span class="line"><span class="comment">// 전달하려는 값이 있을 수도 있고, 없을 수도 있을 경우 ? 사용</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(firstName);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(lastName); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">printName</span>(<span class="string">&#x27;메시&#x27;</span>, <span class="string">&#x27;리오넬&#x27;</span>);</span><br><span class="line"><span class="title function_">printName</span>(<span class="string">&#x27;음바페&#x27;</span>);</span><br><span class="line"><span class="title function_">printName</span>(<span class="string">&#x27;홀란드&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Default parameter -----------------------------------------------</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printMessage</span>(<span class="params">message: <span class="built_in">string</span> = <span class="string">&#x27;기본 값임&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">printMessage</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Rest parameter --------------------------------------------------</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addNumbers</span>(<span class="params">...numbers: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addNumbers</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addNumbers</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addNumbers</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>));</span><br></pre></td></tr></table></figure><hr><h1 id="4-Type-Alias-타입-별칭"><a href="#4-Type-Alias-타입-별칭" class="headerlink" title="4. Type Alias(타입 별칭)"></a>4. Type Alias(타입 별칭)</h1><p><code>Type Aliases</code> &#x3D; 새로운 타입을 정의할 수 있는 것</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Text라는 새로운 타입 정의 -----------------------------------------------</span></span><br><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span>; <span class="comment">//</span></span><br><span class="line"><span class="keyword">const</span> 이름: str = <span class="string">&#x27;메시&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> 집주소: str = <span class="string">&#x27;아르헨티나&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Student라는 새로운 타입 정의 ---------------------------------------------</span></span><br><span class="line"><span class="comment">// 여기 정의된 데이터만 넣을 수 있음</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Student</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">student</span>: <span class="title class_">Student</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">36</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String Literal Types : 타입을 특정 문자열로 지정하는 것 --------------------</span></span><br><span class="line"><span class="keyword">type</span> 축구선수 = <span class="string">&#x27;호날두&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> 네이마르: 축구선수;</span><br><span class="line">네이마르 = <span class="string">&#x27;name&#x27;</span>; <span class="comment">// Error: 다른 문자열을 할당할 수 없고, &#x27;호날두&#x27;이라는 문자열 값만 사용 가능</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> 제이슨 = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">json</span>: 제이슨 = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Boal</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><hr><h1 id="5-Type-Inference-타입-추론"><a href="#5-Type-Inference-타입-추론" class="headerlink" title="5. Type Inference(타입 추론)"></a>5. Type Inference(타입 추론)</h1><p><code>Type Inference</code> : <strong>타입이 값을 통해 알 수 있는 경우 타입을 생략</strong>하는 법</p><ul><li>TS가 자동으로 타입을 추론해주지만,</li><li>프로젝트 크기가 커지면 타입을 알 수 없기 때문에 정확하게 타입을 명시해주는 것이 좋음</li><li>cf. <strong>Inference &#x3D; 추론, 추측, 추리</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// &#x27;hello&#x27;가 문자열 타입이니, TS가 :string을 추론해서 생략 가능</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">message = <span class="string">&#x27;hello&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-TS-Basic-01-TS-Intro</title>
      <link href="/2023/01/08/Front-TS-Basic-01-introduce/"/>
      <url>/2023/01/08/Front-TS-Basic-01-introduce/</url>
      
        <content type="html"><![CDATA[<h1 id="1-TypeScript란"><a href="#1-TypeScript란" class="headerlink" title="1. TypeScript란?"></a>1. TypeScript란?</h1><p>자바스크립트는 현재 3가지 종류가 있습니다.</p><ul><li><p><code>ES5(ECMAScript 5)</code> : 웹 브라우저에서 동작하는 표준 자바스크립트</p></li><li><p><code>ESNext</code> : 2015년부터 매년 새로운 버전을 발표하는 모던 자바스크립트</p><ul><li>ES5의 모든 문법을 포함</li><li>자바스크립트의 공식 표준은 ECMAScript(줄여서 ES)</li><li>ES6 이후 버전을 통틀어<code>ESNext</code>라고 함</li></ul></li><li><p><code>타입스크립트(TypeScript)</code> : ESNext에 타입(type) 기능을 추가한 것</p><ul><li><p>ESNext의 모든 문법을 포함</p></li><li><p>마이크로소프트가 개발하고 유지하고 있는 오픈소스 프로그래밍 언어로 2012년 말 처음 발표</p><ul><li>Open-source Language이기에 모든 코드를 확인 가능</li><li>TS가 완전히 새로운 언어가 아니라 JS를 베이스로 하는 언어</li></ul></li><li><p>소프트웨어는 복잡해서 보통 여러 사람이 협력해 하나의 제품을 개발함</p><ul><li>그래서 커뮤니케이션이 중요</li><li>개발자 A가 타입 관련해서 이상한 코드를 짜면, B가 오류의 원인을 찾기가 힘듬</li><li>TS를 이용하면 이런 타입 관련 문제를 해결할 수 있음</li></ul></li><li><p>따라서 대규모 소프트웨어를 개발할 때 JavaScript보다 TypeScript를 선호</p></li><li><p>타입스크립트를 쓰는 이유는 크게 2가지</p><ul><li><code>TYPE</code> : 타입 에러를 받아볼 수 있음</li><li><code>OOP (Object-Oriented Programming, 객체지향 프로그래밍)</code><ul><li>Encapsulation(캡슐화)</li><li>Abstraction(추상화)</li><li>Inheritance(상속성)</li><li>Polymorphism(다형성)</li></ul></li></ul></li></ul></li></ul><p>따라서 TS로 개발했더라도 타입 기능을 사용하지 않는다면 ESNext나 마찬가지입니다.</p><hr><h1 id="2-JS-문제점-너무-관대함"><a href="#2-JS-문제점-너무-관대함" class="headerlink" title="2. JS 문제점: 너무 관대함"></a>2. JS 문제점: 너무 관대함</h1><p>JS는 다른 언어들에 비해 상대적으로 굉장히 너그러움</p><ul><li>따로 타입을 지정해 주지 않아도 알아서 인식</li><li>호이스팅 등의 기능을 통해 선언과 초기화의 위치가 바뀌어도 문제 없이 동작</li></ul><p>하지만 이런 관대함은 디버깅을 어렵게 한다는 단점이 존재합니다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(); <span class="comment">// NaN</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// 7</span></span><br><span class="line"><span class="title function_">add</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>); <span class="comment">// helloworld</span></span><br></pre></td></tr></table></figure><p>위 예제 코드를 보면 원하는 동작은 세 번째에 위치한 <code>add(1,2)</code>인데, 나머지 요소들도 문제 없이 돌아갑니다.</p><ul><li>요소가 들어가있지 않으면 오류를 뿜는 것이 아니라 undefined로 처리</li><li>추가로 들어간 데이터는 무시</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showItems</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">showItems</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 1, 2, 3</span></span><br><span class="line"><span class="title function_">showItems</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// TypeError: arr.forEach is not a function</span></span><br></pre></td></tr></table></figure><p>또 다른 예시를 보겠습니다.</p><ul><li>매개변수로 배열이 들어간 경우 정상적으로 작동</li><li>1,2,3 처럼 number 형태가 들어간 경우 forEach를 사용할 수 없기 때문에 TypeError가 뜸</li></ul><p>그런데 문제는 오류가 동작할 때 떴습니다.<br>개발자는 빨간 밑줄이 없고 정상적으로 서버가 작동하기 때문에 괜찮겠지 생각하지만 알고보니 오류가 발생한 것이죠.</p><ul><li>JavaScript<ul><li>런타임에 타입이 결정되는 동적 언어</li><li>그렇기 때문에 개발자가 실수하면 사용자는 고스란히 그 실수들을 볼 수 있음</li></ul></li><li>TypeScript<ul><li>컴파일타임에 타입이 결정되는 정적 언어</li><li>컴파일 오류를 해결하기 위해 상대적으로 오랜 시간이 걸리지만,</li><li>해결해두면 동적 언어에 비해 안정적으로 동작할 수 있다는 장점이 존재</li></ul></li></ul><hr><h1 id="2-트랜스파일-transpile"><a href="#2-트랜스파일-transpile" class="headerlink" title="2. 트랜스파일(transpile)"></a>2. 트랜스파일(transpile)</h1><ul><li><code>트랜스파일(transpile)</code><ul><li><strong>어떤 프로그래밍 언어로 작성된 코드를 또 다른 프로그래밍 언어로 된 코드로 바꿔주는</strong> 프로그램</li><li>텍스트로 된 소스코드를 바이너리 코드로 바꿔주는 <strong>컴파일러(compiler)와 구분</strong>하기 위해 생긴 용어</li></ul></li><li>ESNext는 <code>바벨(Babel)</code>이라는 <strong>트랜스파일러를 통해</strong> ES5로 변환</li><li>TypeScript는 <code>TSC(TypeScript compiler)</code>라는 <strong>트랜스파일러를 통해</strong> ES5로 변환</li></ul><hr><h1 id="3-TS-개발-환경"><a href="#3-TS-개발-환경" class="headerlink" title="3. TS 개발 환경"></a>3. TS 개발 환경</h1><p>타입스크립트 개발 환경은 Node.js 개발 환경과 똑같습니다.</p><ul><li>브라우저</li><li>Node.js</li><li>Visual Studio Code<ul><li>VS Code에 TS 컴파일러가 내장되어 있다.</li><li>내장된 컴파일러 버전은 VS Code가 업데이트되면 올라간다.</li><li>내장된 컴파일러를 선택할 수 있고, 직접 설치한 컴파일러를 선택할 수 있음</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i typescript -g <span class="comment"># 타입스크립트 전역 설치</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-1-TS-트랜스파일과-실행"><a href="#3-1-TS-트랜스파일과-실행" class="headerlink" title="3.1 TS 트랜스파일과 실행"></a>3.1 TS 트랜스파일과 실행</h2><p>이제 <code>hello.ts</code> 파일에 다음 코드를 입력하고 <code>Ctrl + S</code>를 눌러 저장합니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.ts</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello world!&#x27;</span>);</span><br></pre></td></tr></table></figure><p>그리고 터미널에서 다음 명령을 실행하면 <code>hello.js</code> 파일이 생기는 것을 확인할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tsc hello.ts</span><br></pre></td></tr></table></figure><p><code>hello.ts</code>가 TSC에 의해 트랜스파일되어 <code>hello.js</code>파일이 생성됩니다.</p><hr><h1 id="4-트랜스파일러-설정"><a href="#4-트랜스파일러-설정" class="headerlink" title="4. 트랜스파일러 설정"></a>4. 트랜스파일러 설정</h1><p>프로젝트 폴더에 <code>tsconfig.json</code>이라는 파일을 하나 생성하면,<br>여기엔 ts 파일들을 js 파일로 변환할 때 어떻게 변환할 것인지 세부설정이 가능합니다.</p><ul><li><a href="https://www.typescriptlang.org/tsconfig">https://www.typescriptlang.org/tsconfig</a><ul><li>cf. 다른 옵션들은 공식 홈페이지의 TSConfig 확인</li></ul></li><li>cf. React, Vue 같은 것을 쓰는 중이면 이미 있을 수 있음.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 신버전을 원하면 &#x27;es2015&#x27;, &#x27;es2016&#x27;, &#x27;es2017&#x27;,&#x27;es2018&#x27;, &#x27;esnext&#x27;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span> <span class="comment">// 어떤 버전의 자바스크립트로 바꿔줄지 정하는 부분</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// import 문법을 구현할 때 어떤 문법을 쓸지 정하는 곳</span></span><br><span class="line">    <span class="comment">// - commonjs는 require 문법</span></span><br><span class="line">    <span class="comment">// - es2015, esnext는 import 문법을 사용</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// js 파일들 ts에서 import해서 쓸 수 있는지</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 일반 js 파일에서도 에러체크 여부</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span> <span class="comment">// tsx 파일을 jsx로 어떻게 컴파일할 것인지 &#x27;preserve&#x27;, &#x27;react-native&#x27;, &#x27;react&#x27;</span></span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 컴파일시 .d.ts 파일도 자동으로 함께생성 (현재쓰는 모든 타입이 정의된 파일)</span></span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span> <span class="comment">// 모든 ts파일을 js파일 하나로 컴파일해줌 (module이 none, amd, system일 때만 가능)</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span> <span class="comment">// js파일 아웃풋 경로바꾸기</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span> <span class="comment">// 루트경로 바꾸기 (js 파일 아웃풋 경로에 영향줌)</span></span><br><span class="line">    <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 컴파일시 주석제거</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// strict 관련, noimplicit 어쩌구 관련 모드 전부 켜기</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// any타입 금지 여부</span></span><br><span class="line">    <span class="attr">&quot;strictNullChecks&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// null, undefined 타입에 이상한 짓 할시 에러내기</span></span><br><span class="line">    <span class="attr">&quot;strictFunctionTypes&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 함수파라미터 타입체크 강하게</span></span><br><span class="line">    <span class="attr">&quot;strictPropertyInitialization&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// class constructor 작성시 타입체크 강하게</span></span><br><span class="line">    <span class="attr">&quot;noImplicitThis&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// this 키워드가 any 타입일 경우 에러내기</span></span><br><span class="line">    <span class="attr">&quot;alwaysStrict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 자바스크립트 &quot;use strict&quot; 모드 켜기</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;noUnusedLocals&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 쓰지않는 지역변수 있으면 에러내기</span></span><br><span class="line">    <span class="attr">&quot;noUnusedParameters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 쓰지않는 파라미터 있으면 에러내기</span></span><br><span class="line">    <span class="attr">&quot;noImplicitReturns&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 함수에서 return 빼먹으면 에러내기</span></span><br><span class="line">    <span class="attr">&quot;noFallthroughCasesInSwitch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// switch문 이상하면 에러내기</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h1 id="5-TS-제공-타입-미리보기"><a href="#5-TS-제공-타입-미리보기" class="headerlink" title="5. TS 제공 타입 미리보기"></a>5. TS 제공 타입 미리보기</h1><ul><li><code>Primitive Types</code> : <strong>number, boolean, string, symbol, undefined, null</strong></li><li><code>Object Types</code> : <strong>functions, arrays, classes, objects</strong></li><li><code>TS 추가 제공 타입</code><ul><li><strong>Any</strong> : 잘 알지 못하는 타입을 표현<ul><li>이 타입은 최대한 쓰지 않는게 좋음</li></ul></li><li><strong>Union</strong> : 변수 또는 함수 매개변수에 대해 둘 이상의 데이터 유형을 사용</li><li><strong>Tuple</strong> : 배열 타입을 보다 특수한 형태로 사용<ul><li>지정된 형식에 따라 아이템 순서를 설 정</li></ul></li><li><strong>Enum</strong> : enumerated type(열거형)을 의미<ul><li>값들의 집합을 명명하고 이를 사용</li><li>열거된 각 PrintMedia는 별도의 값이 설정되지 않은 경우 기본적으로 0부터 시작</li></ul></li><li><strong>Void</strong> : 데이터가 없는 경우 void가 사용<ul><li>e.g. 함수가 값을 반환하지 않으면 반환 유형으로 void를 지정</li><li>any 와 반대의 의미</li></ul></li><li><strong>Never</strong> : 절대 발생하지 않을 값을 나타내는 새 Type never를 도입<ul><li>어떤 일이 절대 일어나지 않을 것이라고 확신할 때 사용</li><li>함수의 리턴 타입으로 never가 사용될 경우, 항상 오류를 리턴하거나 리턴 값을 절대로 내보내지 않음을 의미</li></ul></li></ul></li></ul><blockquote><p>💡 Void 와 Never의 차이</p><ul><li><code>Void</code>은 값으로 undefind 이나 null 값을 가질 수 있으며</li><li><code>Never</code>는 어떠한 값도 가질 수 없음</li></ul></blockquote><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li><a href="https://www.typescriptlang.org/docs/handbook/">타입스크립트 공식 문서</a></li><li><a href="https://typescript-kr.github.io/">타입스크립트 공식 문서 한글 번역</a></li><li><a href="https://www.typescriptlang.org/tools">TS PlayGround</a> : 온라인으로 TS를 JS파일로 변환되는지 확인 가능</li><li><a href="https://en.wikipedia.org/wiki/TypeScript">Wikipedia TS 버전 history</a></li><li><a href="https://youtu.be/5oGAkQsGWkc">코딩악마 TS 강좌</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-24-Data Fetching 라이브러리 - GraphQL 기반</title>
      <link href="/2023/01/08/Front-React-Basic-24-Fetch02/"/>
      <url>/2023/01/08/Front-React-Basic-24-Fetch02/</url>
      
        <content type="html"><![CDATA[<h1 id="1-REST-API의-문제점"><a href="#1-REST-API의-문제점" class="headerlink" title="1. REST API의 문제점"></a>1. REST API의 문제점</h1><h2 id="1-1-Over-Fatching"><a href="#1-1-Over-Fatching" class="headerlink" title="1.1 Over-Fatching"></a>1.1 Over-Fatching</h2><ul><li><strong>필요한 정보보다 더 많은 데이터를 전달받는 것</strong></li><li>불필요한 리소스 낭비가 발생</li><li>필요한 정보만 골라내는 추가 작업이 발생<ul><li>e.g. id, url, category, tag, data 형태를 가진 데이터가 있다고 가정하면</li><li>url과 tag 정보만 필요한데, id, data, categor 다른 필요없는 데이터까지 가져옴</li><li>또 id만 필요하거나, id와 data만 필요하거나 등의 모든 요청을 고려해 API를 설계하기 힘듬</li></ul></li></ul><hr><h2 id="1-2-Uner-Fetching"><a href="#1-2-Uner-Fetching" class="headerlink" title="1.2 Uner-Fetching"></a>1.2 Uner-Fetching</h2><ul><li><strong>필요한 데이터를 만들기 위해 여러 번의 호출이 필요</strong></li><li>추가적인 리소스 요청이 발생</li><li>여러 요청을 통해 전달받은 정보를 조합하는 추가 작업이 발생<ul><li>e.g. 사진의 리스트와 카테고리 리스트가 동시에 필요하면? 2번의 API 호출이 필요</li><li>e.g. id 1번, id 3번, 카테고리 리스트가 동시에 필요하면? 3번의 API 호출이 필요</li></ul></li></ul><hr><h2 id="1-3-API마다-다른-URL이-존재"><a href="#1-3-API마다-다른-URL이-존재" class="headerlink" title="1.3 API마다 다른 URL이 존재"></a>1.3 API마다 다른 URL이 존재</h2><p>REST API는 API마다 다른 URL이 존재해서</p><ul><li>API를 만든다면? <strong>일일히 이름을 지어줘야 합니다.</strong></li><li>API를 사용한다면? <strong>API URL을 계속해서 확인해야 합니다.</strong></li></ul><hr><h1 id="2-GraphQL"><a href="#2-GraphQL" class="headerlink" title="2. GraphQL"></a>2. GraphQL</h1><p>기존 REST API의 3가지 문제점을 해결하기 위해 Facebook에서,<br><strong>정보를 요청하는 쪽에서 원하는 형태로 정보를 가져오고 수정할 수 있는</strong> Query Language를 만들었습니다.</p><ul><li><code>GrqphQL = Graph Query Language</code></li><li>데이터베이스 또는 데이터 관리 시스템에 접근하기 위한 언어</li><li><strong>한 번의 요청으로 앱에 필요한 모든 데이터를 가져옴</strong></li><li>Server API로 정보를 주고받는 것에 특화된 Query Language</li><li>Graph QL은 Structed Query Language(이하 sql)와 마찬가지로 쿼리 언어임</li><li>GraphQL 라이브러리<ul><li><a href="https://www.apollographql.com/">Apollo 공식 사이트</a>✔️</li><li><a href="https://relay.dev/">Relay 공식 사이트</a></li><li><a href="https://formidable.com/open-source/urql/">urql 공식 사이트</a></li></ul></li></ul><blockquote><p>💡 REST API 와 GraphQL 정리</p><table><thead><tr><th align="center">REST</th><th align="center">GraphQL</th></tr></thead><tbody><tr><td align="center">요청은 쉽지만 응답받는 데이터는 비효율적</td><td align="center">요청은 복잡하지만 응답받는 데이터는 효율적</td></tr></tbody></table><ul><li>API의 특성을 고려하여 REST나 GraphQL 중 선택해서 사용하면 됨</li><li>REST API 서버를 그대로 두고, 이를 GraphQL 서버로 전환해도 됨<ul><li>두 형태를 제공해 사용자가 필요에 따라 선택하는 것도 좋은 방법 중 하나</li></ul></li></ul></blockquote><hr><h2 id="2-1-Operation-type"><a href="#2-1-Operation-type" class="headerlink" title="2.1 Operation type"></a>2.1 Operation type</h2><ul><li><code>Query</code> : 데이터 조회</li><li><code>Mutation</code> : 데이터 수정</li><li><code>Subscription</code> : 주로 실시간 애플리케이션 구현을 위해 사용</li></ul><hr><h2 id="2-2-GraphQL-사이트"><a href="#2-2-GraphQL-사이트" class="headerlink" title="2.2 GraphQL 사이트"></a>2.2 GraphQL 사이트</h2><ul><li><a href="https://graphql.org/">https://graphql.org/</a></li><li><a href="https://graphql-kr.github.io/learn/">https://graphql-kr.github.io/learn/</a></li><li>cf. <a href="https://youtu.be/9BIXcXHsj0A">얄판한 GraphQL &amp; Apollo 강좌 무료</a></li></ul><p>GraphQL은 API 테스트를 위한 UI를 자체적으로 제공해줌</p><hr><h1 id="2-APOLLO"><a href="#2-APOLLO" class="headerlink" title="2. APOLLO"></a>2. APOLLO</h1><p><a href="https://www.apollographql.com/">https://www.apollographql.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-25-React 테스트 주도 개발(TDD)</title>
      <link href="/2023/01/08/Front-React-Basic-25-TDD/"/>
      <url>/2023/01/08/Front-React-Basic-25-TDD/</url>
      
        <content type="html"><![CDATA[<h1 id="1-테스트-주도-개발-TDD"><a href="#1-테스트-주도-개발-TDD" class="headerlink" title="1. 테스트 주도 개발(TDD)"></a>1. 테스트 주도 개발(TDD)</h1><h2 id="1-1-Test-Driven-Development-TDD"><a href="#1-1-Test-Driven-Development-TDD" class="headerlink" title="1.1 Test Driven Development(TDD)"></a>1.1 Test Driven Development(TDD)</h2><ul><li>실제 코드를 작성하기 전에 테스트 코드를 먼저 작성</li><li>테스트 코드를 작성한 후 <strong>그 테스트 코드를 Pass 할 수 있는 실제 코드를 작성</strong></li></ul><hr><h1 id="1-2-TDD를-하면-좋은-점"><a href="#1-2-TDD를-하면-좋은-점" class="headerlink" title="1.2 TDD를 하면 좋은 점"></a>1.2 TDD를 하면 좋은 점</h1><ul><li>TDD를 하면, 코드에 안정감이 부여</li><li>개발하는데 많은 시간이 소요되는 부분은 디버깅 부분이라서, TDD를 사용하면 디버깅 시간이 줄어들고 개발 시간도 줄어듬</li><li>소스 코드 하나하나를 더욱 신중하게 짤 수 있기 때문에 깨끗한 코드가 나올 확률이 높음</li></ul><hr><h1 id="2-React-Testing-Library"><a href="#2-React-Testing-Library" class="headerlink" title="2. React Testing Library"></a>2. React Testing Library</h1><p>Create React App로 리액트 앱을 생성하면 기본적으로 테스팅 할 때, React Testing Library를 사용합니다.</p><ul><li>Airbnb에서 만든 Enzyme을 대처하는 솔루션<ul><li>cf. <code>Enzyme</code> : 다른 테스트 솔루션 , 구성 요소의 세부 정보를 테스트</li><li>차이점<ul><li><code>Enzyme</code> : 구현 주도 테스트 (Implementation Driven Test)</li><li><code>React Testing Library</code> : 행위 주도 테스트 (Behavior Driven Test)</li></ul></li></ul></li><li>React 구성 요소 작업을 위한 API를 추가하여 DOM Testing Library 위에 구축</li><li>DOM Testing Library란 Dom 노드(Node)를 테스트하기 위한 가벼운 솔루션</li><li><strong>Create React App으로 생성된 프로젝트는 React Testing Library를 지원</strong></li><li>그렇지 않은 경우 npm으로 추가<ul><li><code>npm install --save-dev @testing-library/react</code></li></ul></li><li>cf. <a href="https://testing-library.com/docs/react-testing-library/intro/">React Testing Library 공식문서</a></li></ul><hr><h1 id="3-Jest"><a href="#3-Jest" class="headerlink" title="3. Jest"></a>3. Jest</h1><ul><li>FaceBook이 만들어진 테스팅 프레임워크</li><li>React Testing Library와 같이 같이 사용됨</li><li>최소한의 설정으로 동작하며 Test Case를 만들어서 어플리케이션 코드가 잘 돌아가는지 확인</li><li>단위 (Unit) 테스트를 위해서 이용</li><li><strong>Create React App으로 생성된 프로젝트는 Jest를 지원</strong></li><li>그렇지 않은 경우 npm으로 추가<ul><li><code>npm install jest --save-dev</code></li></ul></li><li>Jest가 Test 파일을 찾을 떄 다음 이름 규칙을 가진 파일 등은 전부 Test 파일로 판단함<ul><li><code>파일명.test.js</code></li><li><code>파일명.spec.js</code></li><li><code>tests 폴더</code> 안에 들어있는 파일</li></ul></li><li>cf. <a href="https://jestjs.io/">Jest 공식문서</a></li></ul><hr><h2 id="3-1-Jest-파일-구조"><a href="#3-1-Jest-파일-구조" class="headerlink" title="3.1 Jest 파일 구조"></a>3.1 Jest 파일 구조</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">📦 describe <span class="comment"># 여러 관련 테스트를 그룹화하는 블록</span></span><br><span class="line">├─ <span class="built_in">test</span>(it) <span class="comment"># 개별 테스트를 수행하는 곳. 각 테스트를 작은 문장처럼 설명</span></span><br><span class="line">│  ├─ expect <span class="comment"># 값을 테스트할 때마다 사용,</span></span><br><span class="line">│  ├─ <span class="comment"># expect 함수 혼자서는 거의 사용 되지 않으며 matcher와 함께 사용</span></span><br><span class="line">│  └─ matcher <span class="comment"># 다른 방법으로 값을 테스트 할 때 사용</span></span><br><span class="line">├─ <span class="built_in">test</span>(it)</span><br><span class="line">├─ <span class="built_in">test</span>(it)</span><br><span class="line">└─ <span class="built_in">test</span>(it)</span><br></pre></td></tr></table></figure><hr><h3 id="3-1-1-test-it-예시"><a href="#3-1-1-test-it-예시" class="headerlink" title="3.1.1 test(it) 예시"></a>3.1.1 test(it) 예시</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">📦 describe 과일</span><br><span class="line">└─ it 사과</span><br><span class="line">└─ it 바나나</span><br></pre></td></tr></table></figure><hr><h3 id="3-1-2-expect-matcher-예시"><a href="#3-1-2-expect-matcher-예시" class="headerlink" title="3.1.2 expect, matcher 예시"></a>3.1.2 expect, matcher 예시</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;2+2는 4임&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="number">2</span> + <span class="number">2</span>).<span class="title function_">toBe</span>(<span class="number">4</span>); <span class="comment">// toBe(4) 부분이 matcher</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;2+2는 5가 아님&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="number">2</span> + <span class="number">2</span>)not.<span class="title function_">toBe</span>(<span class="number">4</span>); <span class="comment">// not.toBe(4) 부분이 matcher</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="3-2-CRA-Test"><a href="#3-2-CRA-Test" class="headerlink" title="3.2 CRA Test"></a>3.2 CRA Test</h2><ul><li>Create React App으로 생성된 프로젝트의 <code>App.test.js</code>가 기본 테스트가 진행되는 곳임</li><li><code>npm test</code>로 실행<ul><li>실행해보면 a를 누르면 전체 실행</li><li>q를 누르면 빠져나올 수 있음</li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.test.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; render, screen &#125; <span class="keyword">from</span> <span class="string">&#x27;@testing-library/react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;renders learn react link&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ** render : DOM에 컴포넌트를 랜더링하는 함수</span></span><br><span class="line">  <span class="comment">// 인자로 랜더링할 React 컴포넌트가 들어감</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// render의 인자로 들어있는 컴포넌트에 learn react라는 텍스트가 들어있는지 없는지 테스트</span></span><br><span class="line">  <span class="keyword">const</span> linkElement = screen.<span class="title function_">getByText</span>(<span class="regexp">/learn react/i</span>);</span><br><span class="line">  <span class="title function_">expect</span>(linkElement).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="3-3-쿼리-함수"><a href="#3-3-쿼리-함수" class="headerlink" title="3.3 쿼리 함수"></a>3.3 쿼리 함수</h2><ul><li>cf. <a href="https://testing-library.com/docs/queries/about/">Testing Library 공식 문서 About Queries</a></li><li>쿼리는 페이지에서 요소를 찾기 위해 테스트 라이브러리가 제공하는 방법</li><li>여러 유형의 쿼리(<code>&quot;get&quot;, &quot;find&quot;, &quot;query&quot;</code>)가 존재</li><li>상황에 맞게 적절하게 사용해야 함</li></ul><h3 id="3-3-1-get-find-query"><a href="#3-3-1-get-find-query" class="headerlink" title="3.3.1 get, find, query"></a>3.3.1 get, find, query</h3><p><code>getBy...</code></p><ul><li>쿼리에 대해 일치하는 노드를 반환하고 일치하는 요소가 없거나 둘 이상의 일치가 발견되면, <strong>오류를 발생</strong></li><li>둘 이상의 요소가 예쌍되는 경우에는 대신 getAllBy 사용</li></ul><hr><p><code>findBy...</code></p><ul><li>주어진 쿼리와 일치하는 요소가 발견되면 <strong>Promise를 반환</strong></li><li>요소 가 발견되지 않거나 기본 제한 시간인 1000ms 후에 둘 이상의 요소가 발견되면 약속이 거부</li><li>둘 이 상의 요소를 찾아야 하는 경우 findAllBy를 사용</li><li>getBy + waitFor &#x3D; findBy</li></ul><hr><p><code>queryBy...</code></p><ul><li>쿼리에 대해 일치하는 노드를 반환 하고 일치하는 <strong>요소가 없으면 null을 반환</strong></li><li>존재하지 않는요소를 어설션하는데 유용</li><li>둘 이상의 일치 항목이 발견되면 오류가 발생</li><li>확인된 경우 대신 queryAllBy 사용</li></ul><hr><p><code>&quot;waitFor</code></p><ul><li>일정 기간 동안 기다려야 할 때 waitFor를 사용</li><li>기대가 통과할 때까지 기다릴 수 있음</li></ul><hr><h3 id="3-3-2-정리"><a href="#3-3-2-정리" class="headerlink" title="3.3.2 정리"></a>3.3.2 정리</h3><p>cf. <a href="https://testing-library.com/docs/queries/about/#types-of-queries">https://testing-library.com/docs/queries/about/#types-of-queries</a></p><table><thead><tr><th align="center">Type of Query</th><th align="center">0 Matches</th><th align="center">1 Match</th><th align="center">&gt;1 Matches</th><th align="center">Retry (Async&#x2F;Await)</th></tr></thead><tbody><tr><td align="center"><strong>Single Element</strong></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><code>getBy...</code></td><td align="center">Throw error</td><td align="center">Return element</td><td align="center">Throw error</td><td align="center">No</td></tr><tr><td align="center"><code>queryBy...</code></td><td align="center">Return <code>null</code></td><td align="center">Return element</td><td align="center">Throw error</td><td align="center">No</td></tr><tr><td align="center"><code>findBy...</code></td><td align="center">Throw error</td><td align="center">Return element</td><td align="center">Throw error</td><td align="center">Yes</td></tr><tr><td align="center"><strong>Multiple Elements</strong></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><code>getAllBy...</code></td><td align="center">Throw error</td><td align="center">Return array</td><td align="center">Return array</td><td align="center">No</td></tr><tr><td align="center"><code>queryAllBy...</code></td><td align="center">Return <code>[]</code></td><td align="center">Return array</td><td align="center">Return array</td><td align="center">No</td></tr><tr><td align="center"><code>findAllBy...</code></td><td align="center">Throw error</td><td align="center">Return array</td><td align="center">Return array</td><td align="center">Yes</td></tr></tbody></table><hr><h1 id="4-CRA에서-eslint"><a href="#4-CRA에서-eslint" class="headerlink" title="4. CRA에서 eslint"></a>4. CRA에서 eslint</h1><p>cf. 리액트 개발할 떄, Create React App에서는기본 eslint가 설정있음</p><ul><li>하지만, VS Code에서 바로 에러 확인할 수 없고,</li><li>앱을 시작했을 때 터미널 상에서 볼 수 있음</li></ul><p>대신 <code>package.json</code>에 <strong>eslintConfig 부분 지우고</strong></p><ul><li><code>.eslintrc.json</code> 파일 생성하면,</li><li>PROBELMS 탭에서 ESLint에서 주는 기본적인 경고들을 확인 가능</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;react-app&quot;</span><span class="punctuation">,</span> <span class="string">&quot;react-app/jest&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-1-eslint-플러그인"><a href="#4-1-eslint-플러그인" class="headerlink" title="4.1 eslint 플러그인"></a>4.1 eslint 플러그인</h2><p>eslint에서 기본으로 제공하지 않는 다양한 규칙을 플러그인을 통해 사용 가능</p><ul><li>e.g. react에 관련된 린트설정을 위해서는 eslintplugin-react를 사용</li><li>e.g. react hooks에 관련 규칙을 적용하려면 eslint-plugin-react-hooks를 사용</li><li><code>eslint-plugin-testing-library</code><ul><li>render로 Dom 그리는 부분</li></ul></li><li><code>eslint-plugin-jest-dom</code><ul><li>expect-matcher로 테스트</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint-plugin-testing-library eslint-plugin-jest-dom</span><br></pre></td></tr></table></figure><hr><h3 id="4-1-1-내부-설정"><a href="#4-1-1-내부-설정" class="headerlink" title="4.1.1 내부 설정"></a>4.1.1 내부 설정</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;testing-library&quot;</span><span class="punctuation">,</span> <span class="string">&quot;jest-dom&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;react-app&quot;</span><span class="punctuation">,</span> <span class="string">&quot;react-app/jest&quot;</span><span class="punctuation">,</span> <span class="string">&quot;plugin:testing-library/react&quot;</span><span class="punctuation">,</span> <span class="string">&quot;plugin:jest-dom/recommend&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>plugins 항목 </code><ul><li>플러그인 추가 추가할 때, eslint-plugin- 부분 생략가능</li></ul></li><li><code>extends 항목</code><ul><li>플러그인을 추가한 후에 규칙을 정해줘야 사용가능</li><li>extends 항목에 사용하고자 하는 규칙을 설정</li><li>vue, angular, react 중 react를 위한 규칙 recommended는 추천이 되는 걸 사용</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-23-Data Fetching 라이브러리 - REST API 기반</title>
      <link href="/2023/01/08/Front-React-Basic-23-Fetch01/"/>
      <url>/2023/01/08/Front-React-Basic-23-Fetch01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Data-Fetching-라이브러리-종류"><a href="#1-Data-Fetching-라이브러리-종류" class="headerlink" title="1. Data Fetching 라이브러리 종류"></a>1. Data Fetching 라이브러리 종류</h1><ul><li>JS에서 기본 제공하는 fetch</li><li>REST 라이브러리<ul><li><a href="https://swr.vercel.app/">SWR 공식 사이트</a>✔️</li><li><a href="https://github.com/TanStack/query">React Query - TanStack Query 공식 사이트</a>✔️</li><li><a href="https://axios-http.com/docs/intro">Axios 공식 사이트</a></li><li><a href="https://redux-toolkit.js.org/rtk-query/overview">RTK Query 공식 사이트</a></li></ul></li><li>GraphQL 라이브러리<ul><li><a href="https://www.apollographql.com/">Apollo 공식 사이트</a>✔️</li><li><a href="https://relay.dev/">Relay 공식 사이트</a></li><li><a href="https://formidable.com/open-source/urql/">urql 공식 사이트</a></li></ul></li></ul><hr><h1 id="2-API"><a href="#2-API" class="headerlink" title="2. API"></a>2. API</h1><ul><li><strong>API (Application Programming Interface)</strong> : 서로 다른 프로그램간에 소통할 수 있게 도와주는 통신 규약<ul><li>웹에서 사용하면 ‘<strong>서버와 고객간의 통신 규약</strong>‘</li><li>풀어말하면 ‘<strong>서버에게 요청해서 데이터 가져오는 방법</strong>‘</li></ul></li><li>e.g. “<strong>누군가 &#x2F;write로 접속하면 write.html을 보내주세요</strong>“같은 건 서버의 API<ul><li><code>write.html</code>을 보고싶으면 <code>/write</code>로 접속하라는 API를 정의</li></ul></li></ul><blockquote><p>💡 서버(Server) &#x3D; 알바생</p><ul><li><strong>요청을 받으면 데이터를 보내주는 기계</strong></li><li>알바생을 영어로 Server라고 함.<ul><li>(음식을) 서빙(Serving)한다 &#x3D; 무언가를 갖다준다.</li><li>(컴퓨터) 서버(Server) &#x3D; 무언가를 갖다주는 컴퓨터</li></ul></li><li>e.g. 웹서버 &#x3D; “웹툰 페이지 주세요“하면, 웹툰 페이지를 가져다주는 기계</li><li>전문용어로는 클라이언트의 요청을 받으면 서비스, 데이터를 제공하는 컴퓨터 혹은 프로그램</li></ul></blockquote><blockquote><p>💡 GET 요청 &#x3D; 읽기 요청</p><ul><li>무언가 읽는 요청</li><li>e.g. 브라우저 주소창에 URL 입력란이 GET 요청하는 곳임<ul><li>브라우저 주소창에 웹툰 주소창을 치면, 서버는 웹툰 페이지를 가져다줌</li></ul></li></ul></blockquote><hr><h1 id="3-RSET-API란"><a href="#3-RSET-API란" class="headerlink" title="3. RSET API란?"></a>3. RSET API란?</h1><ul><li><code>REST(Representational State Transfer)</code></li><li>웹의 창시자(HTTP) 중의 한 사람인 Roy Fielding의 2000년 논문에 의해서 소개<ul><li>HTTP 요청 시스템(GET, POST, PUT, DELETE)</li><li>REST 원칙에 의해서 쓰면 인터넷 세상이 평화로워짐 (이라고 졸업논문씀)</li></ul></li><li>“웹 API 짤 때 REST 원칙을 지켜서 짜면 좋다”고 하는 <strong>API 디자인 패턴</strong></li><li>말 그대로 형식이기에 특정 기술에 제한받지 않음</li><li>총 6개의 원칙이 존재</li><li>cf. <a href="https://youtu.be/RP_f5dMoHFc">그런 REST API로 괜찮은가</a></li><li>cf. 옛날에는 SOAP라는 걸 사용했다고 함</li></ul><hr><h2 id="3-1-REST-6-원칙"><a href="#3-1-REST-6-원칙" class="headerlink" title="3.1 REST 6 원칙"></a>3.1 REST 6 원칙</h2><h3 id="3-1-1-Uniform-Interface⭐"><a href="#3-1-1-Uniform-Interface⭐" class="headerlink" title="3.1.1 Uniform Interface⭐"></a>3.1.1 Uniform Interface⭐</h3><p><strong>인터페이스는 일관성이 있어야한다</strong></p><ul><li><strong>하나의 URL로는 하나의 데이터</strong>를 가져와야함 (하나를 가져오기 위한 두개의 URL을 만들지 말자)</li><li><strong>간결하고 예측가능하게 짜세요</strong> (URL 하나를 알면 둘을 알게)</li><li><strong>URL 이름짓기 관습을</strong> 잘 따라주세요</li></ul><blockquote><p>💡 URI 와 URL</p><ul><li><code>URI</code> : <strong>자료를 넘버링하고 분류하고 지칭하는 방법</strong></li><li><code>URL</code> : <strong>URL과 비슷하지만 조금 더 큰 의미</strong></li></ul></blockquote><hr><h3 id="3-1-2-Client-server-역할-구분"><a href="#3-1-2-Client-server-역할-구분" class="headerlink" title="3.1.2 Client-server 역할 구분"></a>3.1.2 Client-server 역할 구분</h3><p>고객들은 URL 하나만 알면, 서버에 있는 자료를 갖다쓸 수 있습니다.<br><strong>고객에게 서버역할을 맡기거나 고객에게 DB에 있는 자료를 직접 꺼내라고 하든지 그런 식으로 코드를 짜면 안된다</strong>.</p><hr><h3 id="3-1-3-Stateless"><a href="#3-1-3-Stateless" class="headerlink" title="3.1.3 Stateless"></a>3.1.3 Stateless</h3><p><strong>요청들은 각각 독립적으로 처리</strong>되어야 한다.</p><ul><li>요청1이 성공해야 요청2를 보내주고, <strong>요청간의 의존성이 존재하는 코드를 짜시면 안됩니다</strong>.</li><li>다시 말해, <strong>요청하나 만으로 자료를 가져오기 충분하도록 요청에 필요한 모든 정보들을 실어 보내는게 좋다</strong></li></ul><hr><h3 id="3-1-4-Cacheable"><a href="#3-1-4-Cacheable" class="headerlink" title="3.1.4 Cacheable"></a>3.1.4 Cacheable</h3><ul><li><strong>요청을 통해 보내는 자료들은 캐싱이 가능해야 한다.</strong></li><li><strong>캐싱가능하다고 표시하거나 캐싱 기간을 설정</strong>해주어야 한다</li></ul><blockquote><p>💡 캐싱(Caching)</p><p>네이버를 방문하면 브라우저는 자동으로 자주 사용하는 이미지 파일, CSS 파일 등을 하드에 저장해놓습니다.<br>e.g. 별로 바뀔일 없는 네이버 로고나 아이콘</p><p><strong>하드에 저장해놓고 네이버 방문할 때 “네이버서버에 네이버 로고주세요~”라고 요청하지 않고 하드에서 불러옵니다</strong>.<br>이 행위를 <strong>캐싱</strong>이라고 합니다.</p></blockquote><hr><h3 id="3-1-5-Layered-System"><a href="#3-1-5-Layered-System" class="headerlink" title="3.1.5 Layered System"></a>3.1.5 Layered System</h3><p><strong>여러개의 레이어를 거쳐서 요청을 처리하게 만들어도 된다</strong></p><ul><li>요청처리하는곳, DB에 저장하는곳 이런 여러가지 단계를 거쳐서 요청을 처리해도 된다.</li></ul><hr><h3 id="3-1-6-Code-on-Demand"><a href="#3-1-6-Code-on-Demand" class="headerlink" title="3.1.6 Code on Demand"></a>3.1.6 Code on Demand</h3><p>서버는 <strong>고객에게 실제 실행가능한 코드를 전송</strong>해줄 수도 있습니다.</p><hr><h2 id="3-2-좋은-URL-이름짓기-관습"><a href="#3-2-좋은-URL-이름짓기-관습" class="headerlink" title="3.2 좋은 URL 이름짓기 관습"></a>3.2 좋은 URL 이름짓기 관습</h2><ul><li>instagram.com&#x2F;explore&#x2F;tags&#x2F;kpop</li><li>instagram.com&#x2F;explore&#x2F;tags&#x2F;food</li><li>facebook.com&#x2F;natgeo&#x2F;photos</li><li>facebook.com&#x2F;bbc&#x2F;photos</li></ul><p>위 URL은 좋은 API들입니다.<br>왜냐면 <code>facebook.com/bbc/photos</code> 이거만 봐도 BBC 뉴스 페북 계정의 사진첩인지 알 수 있습니다.</p><p>정리하면 이런 특징을 가지고 있는데, 따라하면 됩니다.</p><ul><li>단어들을 <strong>동사보다는 명사 위주</strong>로 구성</li><li>응용해서 <strong>다른 정보들을 쉽게 가져올 수 있을 정도로 일관성</strong> 있음</li><li><strong>대충 봐도 어떤 정보가 들어올지 예측이 가능해야</strong> 함</li><li>띄어쓰기는 <strong>언더바(_)대신 대시(-)기호</strong> 사용</li><li><strong>파일 확장자 쓰지 말기</strong> (<code>.html</code> 이런거)</li><li><strong>하위 문서들을 뜻할 땐 &#x2F; 기호를 사용</strong>함 (하위폴더같은 느낌)</li></ul><p>여러가지가 있습니다. 이것만 잘 지켜주시면 예쁜 서버 API들이 완성됩니다.</p><hr><h2 id="3-3-HTTP-메서드"><a href="#3-3-HTTP-메서드" class="headerlink" title="3.3 HTTP 메서드"></a>3.3 HTTP 메서드</h2><p>메서드들이 특정 용도에 제한되어 있지 않음. POST 하나로 데이터 읽고 수정하고 지우고 다 할 수 있지만,<br>각 요청의 의도에 맞게 <strong>RESTful하게 API를 만들기 위해서는 목적에 따라 구분해서 사용</strong>해야 함</p><ul><li><code>GET</code> : 데이터를 Read(조회)할 떄 사용</li><li><code>POST</code> (BODY 포함)<ul><li>새로운 정보를 Create(추가)하는데 사용</li><li>Body에 새 데이터 정보를 실어서 보냄</li></ul></li><li><code>PUT</code> (BODY 포함)</li><li><code>PATCH</code> (BODY 포함)<ul><li>데이터가 변경될 때, PUT 또는 PATCH를 사용해서 변경(Update)될 새 정보들을 Body에 실어서 보냄</li><li>PUT과 PATCH는 쓰는 곳마다 다르지만,</li><li>정석은<ul><li>PUT은 정보를 통쟤로 변경할 떄</li><li>PATCH는 일부 정보만 특정 방식으로 변경할 떄</li></ul></li></ul></li><li><code>DELETE</code> : 데이터 삭제 요청</li></ul><hr><h1 id="3-SWR"><a href="#3-SWR" class="headerlink" title="3. SWR"></a>3. SWR</h1><ul><li><a href="https://swr.vercel.app/ko">https://swr.vercel.app/ko</a></li></ul><hr><h1 id="4-React-Query"><a href="#4-React-Query" class="headerlink" title="4. React Query"></a>4. React Query</h1><ul><li><a href="https://tanstack.com/query/v4/?from=reactQueryV3&original=https://react-query-v3.tanstack.com/">https://tanstack.com/query/v4/?from=reactQueryV3&amp;original=https://react-query-v3.tanstack.com/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-22-Babel &amp; Webpack 번들러</title>
      <link href="/2023/01/05/Front-JS-Basic-22-babelWebpack/"/>
      <url>/2023/01/05/Front-JS-Basic-22-babelWebpack/</url>
      
        <content type="html"><![CDATA[<h1 id="1-바벨이란"><a href="#1-바벨이란" class="headerlink" title="1. 바벨이란?"></a>1. 바벨이란?</h1><p>최신 문법으로 코딩하고 사용자에게 배포할 때는, 예전 버전으로 배포해줄 수 있는 툴이 있습니다.<br>그러면 개발자는 호환성을 신경쓰지 않고 최신 문법을 사용할 수 있습니다. 그 툴은 바로 Babel입니다.</p><p>TypeScript를 사용하는 사람들도 있습니다.<br>그리고 프레임워크를 사용하면 굳이 이렇게 바닐라(순수) JS를 변환하는 일을 적을 것입니다.</p><blockquote><p>바벨 : <a href="https://babeljs.io/">https://babeljs.io/</a></p></blockquote><p>바벨 홈페이지에 들어가 <code>Try it out</code>에 들어가 코드를 작성해보세요.<br>JS1까지 예전 버전으로 그냥 배포한다기 보다는,<br>자기가 배포하고자 하는 사용자들의 주된 브라우저를 확인 후 최신 버전을 지원하도록 확인하는 것이 좋습니다.</p><hr><h2 id="1-1-프로젝트에-바벨-셋업하기"><a href="#1-1-프로젝트에-바벨-셋업하기" class="headerlink" title="1.1 프로젝트에 바벨 셋업하기"></a>1.1 프로젝트에 바벨 셋업하기</h2><p>먼저 프로젝트 폴더에 <code>babel</code>이란 폴더를 만들고 <code>index.js</code>를 만들어 봅니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">hello</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> yes = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>그리고 터미널에서 <code>babel</code>폴더로 이동 후 npm을 통해 바벨을 설치해봅시다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> babel</span><br><span class="line">$ npm init --<span class="built_in">yes</span> <span class="comment"># npm 셋업, pakage.json이 생성됨</span></span><br><span class="line">$ npm install --save -dev @babel/core @babel/cli @babel/preset-env</span><br><span class="line"><span class="comment"># 이런 설치 정보는 공식 문서 &#x27;Setup&#x27;을 확인하면 됩니다.</span></span><br></pre></td></tr></table></figure><p><code>package.json</code>으로 가서 test를 지우고 build 문법을 추가합니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18.babel&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;babel index.js -w -o build/index.js&quot;</span> <span class="comment">// 추가</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@babel/cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.17.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.17.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/preset-env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.16.11&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@babel/polyfill&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.12.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>그런 다음 터미널에서 다음과 같이 입력해보면, <code>build</code>라는 폴더 안에 <code>index.js</code>가 생성되었습니다.<br>이 <code>index.js</code>는 babel이 최신 문법으로 작성한 JS를 과거 버전 JS로 바꿔준 파일입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p>어떤 버전까지 빌드할 것인지는 <code>babel.config.json</code>에서 설정해주면 됩니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// babel.config.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;targets&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="comment">// 각 브라우저 별 버전 지정</span></span><br><span class="line">          <span class="attr">&quot;ie&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firefox&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;chrome&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;safari&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11.1&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;useBuiltIns&quot;</span><span class="punctuation">:</span> <span class="string">&quot;usage&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;corejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.6.5&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-웹팩이란"><a href="#2-웹팩이란" class="headerlink" title="2. 웹팩이란?"></a>2. 웹팩이란?</h1><p><strong>웹팩</strong>은 의존 관계에 있는 자바스크립트, CSS, 이미지 등의 리소스들을 하나의 파일로 번들링하는 모듈 번들러입니다.</p><blockquote><p> 💡 모듈 번들러</p><p> <strong>웹 애플리케이션을 구성하는 모든 자원을 각각 모듈로 보고</strong>, 이를 <strong>조합해서 병합된 하나의 결과물을 만드는 도구</strong>를 말합니다.</p></blockquote><h2 id="2-1-웹팩의-등장-배경"><a href="#2-1-웹팩의-등장-배경" class="headerlink" title="2.1 웹팩의 등장 배경"></a>2.1 웹팩의 등장 배경</h2><p>최근 프론트엔드 프레임 워크에서 SPA개발이 인기를 얻고 있으며,<br>이로 인해 자바스크립트의 코드량이 기하급수적으로 증가하게  되었습니다.<br>이러한 환경에서 특정 자바스크립트 코드를 찾아서 수정하기는 어려운 일입니다.<br>따라서 API 기능과 UI 컴포넌트에  따라 자바스크립트 코드를 모듈별로 분리하게 되었습니다. </p><p>하지만 이렇게 분리해 놓은 많은 자바스크립트 파일들을 하나씩 로드한다면 웹 페이지 로딩시 속도 저하를 일으킬 수 있습니다.<br>이때문에 웹팩과 같은 모듈 번들러를 통해 수많은 JS파일들을 하나의 자바스크립트 파일로 번들링하는 작업이 필요하게  되었습니다.<br>그래서 등장한 것이 <code>Web Task Manager</code> (<code>Gulp</code>, <code>Grunt</code>) 입니다.  </p><p>이후에는 <code>Web Task Manager</code>의 기능에 모듈 의존성 관리까지 더해진 <strong>웹팩</strong>이 등장하게 됩니다. </p><ul><li><strong>파일 단위의 자바스크립트 모듈 관리의 필요성</strong><ul><li>수많은 JS파일을 로딩하여 사용한다면 변수를 중복 선언하거나 의도치 않은 값을 할당하는 경우가 발생</li><li>이를 막기위해 파일 단위의 자바스크립 모듈의 관리가 필요합니다.</li></ul></li><li><strong>웹 개발 작업 자동화 도구</strong><ul><li>HTML, CSS, JS, 이미지 압축 등 반복적인 작업들을 자동화 해주는 도구의 필요성으로</li><li><code>Grunt</code>, <code>Gulp</code>와 같은 도구들이 등장</li></ul></li><li><strong>웹 애플리케이션의 빠른 로딩 속도와 높은 성능</strong><ul><li>웹 사이트의 로딩속도를 높이기 위한 대표적인 작업으로는 브라우저에서 서버로 요청하는 파일의 숫자를 줄이는 것</li><li>이를 위해 <code>Web Task Manager</code> 를 이용해 파일을 압축하고 병합합니다.</li><li>이와 더불어 초기 페이지 로딩 속도를 높이기 위해 나중에 필요한 자원은 나중에 요청하는 <code>lazy loading</code>이 등장</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-21-ESLint &amp; Prettier</title>
      <link href="/2023/01/05/Front-JS-Basic-21-lintPrettier/"/>
      <url>/2023/01/05/Front-JS-Basic-21-lintPrettier/</url>
      
        <content type="html"><![CDATA[<h1 id="1-ESLint"><a href="#1-ESLint" class="headerlink" title="1. ESLint"></a>1. ESLint</h1><p>오래된 스웨터의 보푸라기같은 것을 영어로 <code>린트(Lint)</code>라고 부릅니다.<br>보푸라기가 많으면 옷이 보기에 예쁘지 않은데 코드에도 이런 보프라기처럼 들여쓰기를 맞추지 않은 경우,<br>선언한 변수를 사용하지 않은 경우 등 보기에 예쁘지 않은 코드를 의미합니다.<br>보푸라기가 있는 옷을 입을 수는 있듯이 이런 코드로 만든 어플리케이션도 동작은 합니다. </p><p>그러나 코드의 가독성이 떨어지고 점점 유지보수하기가 힘들어 집니다.<br>보푸라기를 제거하는 Lint roller처럼<br>코드의 오류나 버그, 스타일 따위를 점검하는 것을 <code>린트(Lint)</code> 혹은 <code>린터(Linter)</code>라고 부릅니다.</p><ul><li><a href="https://eslint.org/docs/latest/rules/">https://eslint.org/docs/latest/rules/</a></li><li>개발자들이 <strong>특정한 규칙을 가지고 코드를 짤수있게 도와주는 라이브러리</strong></li><li>주요 기능<ul><li>자바스크립트를 쓰는 가이드 라인 제시 등 포맷터(formatter) 역할도 하지만 </li><li>주요 기능은 <strong>문법 오류 잡는 것</strong></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i eslint <span class="comment"># eslint 설치</span></span><br><span class="line">$ <span class="built_in">touch</span> .eslintrc.js <span class="comment"># .eslintrc.js 생성</span></span><br><span class="line">$ npm run lint <span class="comment"># 린트 실행</span></span><br></pre></td></tr></table></figure><p>규칙을 찾아서 <code>.eslintrc.js</code>에 적용합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;eslint:recommended&#x27;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="2-Prettier"><a href="#2-Prettier" class="headerlink" title="2. Prettier"></a>2. Prettier</h1><ul><li>코드 형식을 맞추는데 사 용 작은따옴표(‘)를 사용할지 큰 따 옴표(“)를 사용할지, </li><li>Indent 값을 2로 줄지 4로 줄지등등, 에러 찾는것이 아닌 <strong>코드 포맷터 역할</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i prettier <span class="comment"># prettier 설치</span></span><br><span class="line">$ npx prettier src/**/* --write <span class="comment"># prettier 실행</span></span><br></pre></td></tr></table></figure><p>아니면 <strong>VSCode 확장 기능</strong> 사용</p><ul><li>확장 기능은 혼자 사용할 떄 좋음</li><li>npm으로 설치는 여러 개발자와 같은 포맷을 유지할 떄 사용</li></ul><hr><h2 id="2-1-옵션"><a href="#2-1-옵션" class="headerlink" title="2.1 옵션"></a>2.1 옵션</h2><ul><li><a href="https://prettier.io/docs/en/options.html">https://prettier.io/docs/en/options.html</a></li></ul><hr><h1 id="3-ESLint-Prettier-통합"><a href="#3-ESLint-Prettier-통합" class="headerlink" title="3. ESLint + Prettier 통합"></a>3. ESLint + Prettier 통합</h1><p>Prettier는 Eslint와 통합하는 방법을 제공합니다.<br>서로 충돌하는 옵션이 있으면 프리티어 규칙을 사용하돌고 하는 도구입니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i eslint-config-prettier eslint-plugin-prettier</span><br></pre></td></tr></table></figure><p>설정 파일을 eslint에 추가</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;eslint:recommended&#x27;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="4-명령어-자동화"><a href="#4-명령어-자동화" class="headerlink" title="4. 명령어 자동화"></a>4. 명령어 자동화</h1><ol><li>Git Hook으로 자동화</li><li>에디터 확장 기능으로 자동화</li></ol><hr><h2 id="4-1-에디터-확장-기능으로-자동화⭐"><a href="#4-1-에디터-확장-기능으로-자동화⭐" class="headerlink" title="4.1 에디터 확장 기능으로 자동화⭐"></a>4.1 에디터 확장 기능으로 자동화⭐</h2><ol><li>VSCode 에디터의 확징기능(Estention)의 Eslint, Prettier 확장 기능 설치</li><li><code>setting.json</code> 설정 파일로 가서 eslint를 활성화</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// VSCode setting.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;eslint.enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// eslint 활성화</span></span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 저장할 떄마다 eslint 코드 고치기</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> </span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h1 id="5-설정-파일-쓰는-옵션-정리"><a href="#5-설정-파일-쓰는-옵션-정리" class="headerlink" title="5. 설정 파일 쓰는 옵션 정리"></a>5. 설정 파일 쓰는 옵션 정리</h1><h2 id="5-1-VSCode-setting-json설정"><a href="#5-1-VSCode-setting-json설정" class="headerlink" title="5.1 VSCode setting.json설정"></a>5.1 VSCode setting.json설정</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">/* ESLint, Prettier 언어별 설정 */</span></span><br><span class="line">  <span class="attr">&quot;eslint.enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;prettier.singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[html]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode.html-language-features&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[javascript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// jsx</span></span><br><span class="line">  <span class="attr">&quot;[javascriptreact]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[typescript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 위 언어들 외에도 저장 시 ESLint, Prettier 적용할 언어를 설정하면 된다.</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="5-2-prettierrc-json"><a href="#5-2-prettierrc-json" class="headerlink" title="5.2 .prettierrc.json"></a>5.2 .prettierrc.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bracketSpacing&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bracketSameLine&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avoid&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">120</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="5-3-eslintrc-json"><a href="#5-3-eslintrc-json" class="headerlink" title="5.3 .eslintrc.json"></a>5.3 .eslintrc.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;parserOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ecmaVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latest&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;commonjs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;es2022&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;globals&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;_&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;import&quot;</span><span class="punctuation">,</span> <span class="string">&quot;html&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;airbnb-base&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// &quot;off&quot; or 0 - turn the rule off</span></span><br><span class="line">    <span class="comment">// &quot;warn&quot; or 1 - turn the rule on as a warning (doesn’t affect exit code)</span></span><br><span class="line">    <span class="comment">// &quot;error&quot; or 2 - turn the rule on as an error (exit code is 1 when triggered)</span></span><br><span class="line">    <span class="comment">// &quot;no-var&quot;: &quot;off&quot;,</span></span><br><span class="line">    <span class="attr">&quot;no-console&quot;</span><span class="punctuation">:</span> <span class="string">&quot;warn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no-plusplus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no-shadow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vars-on-top&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no-underscore-dangle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span> <span class="comment">// var _foo;</span></span><br><span class="line">    <span class="attr">&quot;comma-dangle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;func-names&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span> <span class="comment">// setTimeout(function () &#123;&#125;, 0);</span></span><br><span class="line">    <span class="attr">&quot;prefer-template&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no-nested-ternary&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max-classes-per-file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;consistent-return&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no-restricted-syntax&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;off&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ForOfStatement&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// disallow specified syntax(ex. WithStatement)</span></span><br><span class="line">    <span class="attr">&quot;prefer-arrow-callback&quot;</span><span class="punctuation">:</span> <span class="string">&quot;error&quot;</span><span class="punctuation">,</span> <span class="comment">// Require using arrow functions for callbacks</span></span><br><span class="line">    <span class="attr">&quot;require-await&quot;</span><span class="punctuation">:</span> <span class="string">&quot;error&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;arrow-parens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;error&quot;</span><span class="punctuation">,</span> <span class="string">&quot;as-needed&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// a =&gt; &#123;&#125;</span></span><br><span class="line">    <span class="attr">&quot;no-param-reassign&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;error&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;props&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no-unused-expressions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;error&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;allowTernary&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>      <span class="comment">// a || b</span></span><br><span class="line">      <span class="attr">&quot;allowShortCircuit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// a ? b : 0</span></span><br><span class="line">      <span class="attr">&quot;allowTaggedTemplates&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;import/no-extraneous-dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;error&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max-len&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;error&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">120</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ignoreComments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ignoreStrings&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ignoreTemplateLiterals&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span> <span class="comment">// prettier의 printWidth 옵션 대신 사용</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-20-메모리 관리(가비지 컬렉터, 렉시컬 환경, 클로져)</title>
      <link href="/2023/01/05/Front-JS-Basic-20-memory/"/>
      <url>/2023/01/05/Front-JS-Basic-20-memory/</url>
      
        <content type="html"><![CDATA[<h1 id="1-가비지-컬렉터-Garbage-Collector"><a href="#1-가비지-컬렉터-Garbage-Collector" class="headerlink" title="1. 가비지 컬렉터(Garbage Collector)"></a>1. 가비지 컬렉터(Garbage Collector)</h1><p>프로그래밍을 하면, 경우에 따라 메모리를 청소를 해줘야 합니다. 그리고 어떤 프로그래밍 언어를 하냐에 따라 청소하는 법도 다릅니다.<br>C 언어는 개발자가 직접 메모리를 관리하고 청소해야 합니다. 메모리 관리를 잘 하지 못하면 어플리케이션이 죽을 수도 있습니다.</p><p>C#, Go, Java, JavaScript, TypeScript는 메모리를 자동으로 관리해주기 때문에 다 쓴 메모리를 개발자가 직접 청소할 필요도 없습니다. 왜냐하면 <code>Garbage Collector(가비지 컬렉터, 쓰레기 수집가, GC)</code>가 있기 때문입니다.</p><p>가비지 컬렉터가 있다고 아무렇게나 코딩해도 되는 건 아니지만, 어떤 경우에 메모리가 그대로 남아있는지,<br>어떤 경우에 가비지 컬렉터에 의해 메모리가 정리되는지 이해하고 있어야, 메모리 효율적인 어플리케이션을 만들 수 있습니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/js-2-2.png" alt="js-2-2"></p><p>오브젝트를 변수에 할당하면, 메모리의 Heap 영역에 생성됩니다. 변수는 <code>메모리가 만들어진 주소를 가리키기만</code> 합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> apple = &#123;</span><br><span class="line">  name : <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> orange = apple;</span><br><span class="line"><span class="comment">// 새로운 변수 orange에 apple을 할당하면, apple과 orange가 동일한 메모리 주소를 가르킴</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>만약 orange와 apple에 null을 할당하면, 이제 아무것도 오브젝트를 참조하고 있지 않습니다.<br>이렇게 누구도 오브젝트를 참조하고 있지 않을 떄, 가비지 컬렉터가 등장합니다.<br><code>Garbage Collector</code>는 주기적으로 오브젝트를 참조하고 있는지, 없는지 확인한 다음에,<br><strong>아무도 이 오브젝트를 참조하고 있지 않다면, 쓰레기로 간주하고 메모리에서 지워줍니다</strong>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 글로벌 변수는 앱이 종료될때까지 계속 메모리에 유지됨!</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable language_">global</span> = <span class="number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 블럭 내부에서만 존재하고, 블럭이 끝나면 자동으로 소멸됨 </span></span><br><span class="line">  <span class="comment">// Garbage Collector가 청소!</span></span><br><span class="line">  <span class="keyword">const</span> local = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 함수 내부에 블럭 안에서도 변수가 필요한 경우에는</span></span><br><span class="line">  <span class="comment">// 필요한 곳에서만! 블럭 안에서 변수를 선언하고 사용해야 함</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>💡 정리</p><ul><li>Garbage Collector는 JS 엔진에서 제공해주며, 백그라운드에서 동작</li><li>메모리를 주기적으로 감시하면서 아무도 참조하고 있는 메모리가 있다면 알아서 청소</li><li>다만, 가비지 컬렉터가 동작하는 데에도 CPU가 동작함<ul><li>그래서 너무 자주 빈번하게 쓰레기가 수집되면, 청소하는데 리소스를 다 쓰면 안되기 때문에,</li><li>Garbage Collector를 너무 믿지 말고, 불필요한 메모리를 할당, 재할당하는 일을 하지 말아야 함</li></ul></li><li>cf. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management">MDN Memory management</a></li></ul></blockquote><hr><h1 id="2-렉시컬-환경-Lexical-Environtment"><a href="#2-렉시컬-환경-Lexical-Environtment" class="headerlink" title="2. 렉시컬 환경(Lexical Environtment)"></a>2. 렉시컬 환경(Lexical Environtment)</h1><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/js-14-1.png" alt="js-14-1"></p><p>함수들을 호출할 떄, 함수 순서를 기억하는 것은 Call Stack이 기억을 합니다.<br><code>실행 컨텍스트(Execution Context)</code>는 Call Stack과 밀접한 관련이 있는데, <strong>코드의 실행 순서와 스코프를 기억</strong>하기 때문입니다.<br>JS에서는 단 하나의 싱글 컨텍스트 스택이 존재합니다. 그래서 한 번에 하나의 일만 처리합니다.</p><blockquote><p>💡 <code>스코프(Scope, 범위 or 영역)</code> : 변수에 접근할 수 있는 유효한 범위</p></blockquote><p>그래서 일한 이름의 a를 전역, 내부 블록에서도 선언해도 이름 충돌을 피할 수 있습니다.<br>현재 블록 안에 a가 있다면 쓰고, 없다면 근접한 상위 블록을 찾아보고, 없다면 다음 블록에서도 찾아봅니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 각각의 블록은 렉시컬 환경이라는 내부 오브젝트를 갖고있다.</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>; <span class="comment">// 전역 스코프</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">2</span>; <span class="comment">// 블럭 스코프 1</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">3</span>; <span class="comment">// 블럭 스코프 2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>각각의 블록은 <code>렉시컬 환경(Lexical Environtment)</code>라는 내부 오브젝트를 갖고 있습니다.<br>그래서 각각의 블록마다 어떤 변수들이 들어있는지, 부모는 누구인지 등의 정보를 가지고 있습니다.</p><p>그래서 렉시컬 환경 안을 살펴보면, 2가지 종류가 있습니다.</p><ul><li><code>환경 레코드(Environment Record)</code> : 현재 블록의 정보를 담고 있음</li><li><code>외부 환경 참조(Outer Lexical Environment Reference)</code> : 어떤 부모를 참조하고 있는지의 정보를 담고 있음</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 각각의 블록은 &#x27;렉시컬 환경&#x27;이라는 내부 오브젝트를 갖고있다.</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>; <span class="comment">// 전역 스코프</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">2</span>; <span class="comment">// 블럭 스코프 1</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">3</span>; <span class="comment">// 블럭 스코프 2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>예를 들어, 실행 컨텍스트 스택에 전역 스코프를 만나면, 전역스코프 렉시컬 환경이 실행 컨텍스트 스택에 들어옵니다. </p><ul><li>전역 스코프 렉시컬 환경<ul><li><code>환경 레코드</code>가 <code>a=1</code>, </li><li><code>외부 렉시컬 환경 참조</code>는 <code>null</code>을 가리키고 있습니다. 왜냐하면 최상의 부모이기 때문에</li></ul></li><li>블럭1 스코프 렉시컬 환경<ul><li><code>환경 레코드</code>가 <code>a=2</code>,</li><li><code>외부 렉시컬 환경 참조</code>는 <code>전역 렉시컬 환경</code>을 가리키고 있습니다.<ul><li>이렇게 스코프들이 연결되어 있는 것을 <code>스코프 체인(scope chain)</code>이라고 부릅니다.</li></ul></li></ul></li><li>블럭2 스코프 렉시컬 환경<ul><li><code>환경 레코드</code>가 <code>a=3</code>, </li><li><code>외부 렉시컬 환경 참조</code>는 <code>블럭1 렉시컬 환경</code>을 가리키고 있습니다.</li></ul></li></ul><p>여기서 블록이 모두 끝나게 되면, 실행 컨텍스트 스택에 위에서 부터 1개씩 빠지게 됩니다.<br>전역이 끝나면 스택이 텅텅 비게 됩니다.<br>그런데 현재 블록에 변수가 없는데, 접근을 하게 되면,<br>바로 상위에 있는 스코프 체인을 통해 부모 렉시컬 환경의 환경 레코드를 참조하게 됩니다.</p><p>렉시컬 환경을 통해 배울 수 점은 <strong>메모리 절약 뿐만 아니라, 성능</strong>을 위해서라도 <strong>변수는 최대한 필요한 곳에서 정의</strong>해야 된다는 점입니다.<br>이렇게 중첩된 여러 함수나 스코프가 있다면, 필요한 곳에서 선언하지 않으면,<br>계속 스코프 체인을 따라가면서 환경 레코드가 있는지 없는지 검사를 하니 성능에도 좋지 않습니다.</p><hr><h1 id="3-클로져-Clusure"><a href="#3-클로져-Clusure" class="headerlink" title="3. 클로져(Clusure)"></a>3. 클로져(Clusure)</h1><blockquote><p>A clusure is the combination of a <strong>function</strong> bundled together (enclosed) with references to its surrounding state (the <strong>lexical environment</strong>). in other words, a closure gives you <strong>access to an outer function’s scope from an inner function.</strong> - MDN Closures</p><p>클로져는 <strong>함수와 그 외부를 둘러싸고 있는 렉시컬 환경의 조합</strong>이다.<br>다른 말로, 클로져란 <strong>내부 함수에서 외부 함수에 있는 상태에 접근할 수 있는 권한을 주는 것</strong>을 말한다.</p><p>cf. 클로져(clusure) &#x3D; 폐쇄, 닫혀있는</p><p>cf. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures">MDN Closures</a> </p><p><code>클로져 = 중첩된 함수에서 내부에 있는 함수가 외부에 있는 렉시컬 환경에 접근할 수 있는 것</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// outer 스코프-----------------------</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// inner 스코프---------------------</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">inner</span>();</span><br><span class="line">  <span class="comment">// ---------------------------------</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outer</span>();</span><br></pre></td></tr></table></figure><ol><li>코드를 실행하자마자 함수 선언문이라 인식해, 전역 스코프 렉시컬 환경이 만들어짐<ul><li>바로 <code>outer();</code>로 넘어가 <code>outer()</code>를 호출하는 순간 <strong>outer 스코프 렉시컬 환경</strong>이 만들어짐</li></ul></li><li>그 안에 <code>inner()</code>라는 함수를 만나 <strong>inner 스코프 렉시컬 환경</strong>을 만듭니다.</li><li>inner가 호출이 되고 끝나면 스택에서 나가고, 다시 <strong>outer 렉시컬 환경</strong>으로 넘어감</li><li>또 outer 함수가 끝나면 스택에서 나가고, <strong>전역 렉시컬 환경</strong>으로 넘어감</li><li>마지막으로 어플리케이션이 종료가 되면 <strong>실행 컨텍스트 스택이 텅텅 빔</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// outer 스코프-----------------------</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// inner 스코프---------------------</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">  <span class="comment">// ---------------------------------</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> inner = <span class="title function_">outer</span>();</span><br><span class="line"><span class="title function_">inner</span>();</span><br></pre></td></tr></table></figure><ol><li>코드를 실행하자마자 함수 선언문이라 인식해, 전역 스코프 렉시컬 환경이 만들어짐</li><li>바로 <code>outer()</code>가 호출되어 inner라는 변수에 담겨지면서 <strong>outer 렉시컬 환경</strong>이 만들어짐</li><li>호출된 <code>outer()</code> 내부에서 inner()를 선언해서 <strong>inner 렉시컬 환경</strong>이 만들어짐<ul><li>inner는 외부에 있는 outer를 참조하게 됩니다. </li><li>여기서는 inner를 호출하지 않고, return으로 반환해줍니다.</li></ul></li><li>outer() 함수가 끝나면, <strong>outer 스코프 렉시컬 환경</strong>이 스택에서 빠지지만 스코프 체인에는 그대로 남아있습니다</li><li><code>inner()</code>를 호출하게 되면 <strong>inner 렉시컬 환경</strong>에는 x라는 값이 없지만, <ul><li>외부에 outer 렉시컬 환경에는 x값이 존재하기에 이 값에 접근 가능</li></ul></li></ol><hr><h2 id="3-1-예제"><a href="#3-1-예제" class="headerlink" title="3.1 예제"></a>3.1 예제</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 📝 내부에서 외부에서 접근은 가능</span></span><br><span class="line"><span class="comment">// 📝 내부에서 선언된 변수는 외부에서 접근 불가능</span></span><br><span class="line"><span class="keyword">const</span> text = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>(); <span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 클로져 : 중첩된 함수에서 내부에 있는 함수가 외부에 있는 렉시컬 환경에 접근할 수 있는 것</span></span><br><span class="line"><span class="comment">// 내부 함수와 외부 함수가 함께 닫히는 느낌</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`inside inner: <span class="subst">$&#123;x&#125;</span>`</span>); <span class="comment">// 외부에 있는 함수에 접근 가능</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 클로져에 의해서 inner()가 리턴이 될 때, </span></span><br><span class="line"><span class="comment">// inner()와 함수 외부에 변수가 들어있는 렉시컬 환경도 함께 묶여서 클로져로 반환</span></span><br><span class="line"><span class="keyword">const</span> func1 = <span class="title function_">outer</span>();</span><br><span class="line"><span class="title function_">func1</span>(); <span class="comment">// inside inner: 0</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-2-예제2"><a href="#3-2-예제2" class="headerlink" title="3.2 예제2"></a>3.2 예제2</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 📝 클로져를 사용하는 이유?</span></span><br><span class="line"><span class="comment">// 내부 정보를 은닉하고, 공개 함수(public, 외부)를 통한 데이터 조작을 위해</span></span><br><span class="line"><span class="comment">// 즉, 캡슐화와 정보은닉을 위해서</span></span><br><span class="line"><span class="comment">// 클래스 private 필드 또는 메소드를 사용하는 효과와 동일!</span></span><br><span class="line"><span class="comment">// 현재는 클래스 private 필드를 사용하면 되지만, 예전 JS버전에서는 클로져를 활용했었음</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">increase</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> increase;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> increase = <span class="title function_">makeCounter</span>();</span><br><span class="line"><span class="title function_">increase</span>(); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">increase</span>(); <span class="comment">// 2</span></span><br><span class="line"><span class="title function_">increase</span>(); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 Class 문법이 생겼으므로, 이제는 클로져를 사용할 필요가 없습니다.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">  #count = <span class="number">0</span>;</span><br><span class="line">  <span class="title function_">increase</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#count++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#count);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> counter = <span class="keyword">new</span> <span class="title class_">Counter</span>();</span><br><span class="line">counter.<span class="title function_">increase</span>(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><strong>Class 문법이 생겼으므로, 이제는 클로져를 사용할 필요가 없습니다</strong>.</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-19-Destructuring(디스럭쳐링) &amp; module(모듈) - 작성중</title>
      <link href="/2023/01/05/Front-JS-Basic-19-module/"/>
      <url>/2023/01/05/Front-JS-Basic-19-module/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Destructuring-패턴-매칭"><a href="#1-Destructuring-패턴-매칭" class="headerlink" title="1. Destructuring : 패턴 매칭"></a>1. Destructuring : 패턴 매칭</h1><p>Array, Object 자료형에 있는 중요한 자료들을 변수로 꺼내고 싶으면 어떻게 합니까.<br>한두개면 모르겠는데 여러개의 자료를 뽑아서 변수 만들려면 코드가 매우 길어지겠죠?<br>그럴 때 destructuring 문법을 사용하면 변수를 쉽게 만들 수 있습니다. </p><hr><h2 id="1-1-Array-안에-있는-데이터를-변수에-담는-법"><a href="#1-1-Array-안에-있는-데이터를-변수에-담는-법" class="headerlink" title="1.1 Array 안에 있는 데이터를 변수에 담는 법"></a>1.1 Array 안에 있는 데이터를 변수에 담는 법</h2><p>[2,3,4]라는 array가 있는데,  여기안에 있는 3개의 데이터들을 전부 밖으로 꺼내서 변수에 담고 싶으면 어떻게 합니까.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> a = array[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> b = array[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>뭐 이런식 아닐까요? 근데 더 쉽게할 수 있는 방법이 있습니다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br></pre></td></tr></table></figure><p>[2,3,4]라는 자료랑 비슷한 모양으로 변수를 선언해주시면 됩니다. 변수 이름은 아무렇게나 해주시면 되고요.<br>그럼 a,b,c 변수가 세개 생성되는데 각각 2,3,4라는 자료를 가집니다.</p><hr><h2 id="1-2-디폴트-값"><a href="#1-2-디폴트-값" class="headerlink" title="1.2 디폴트 값"></a>1.2 디폴트 값</h2><p>왼쪽 오른쪽 갯수가 다르면 변수가 제대로 만들어지지 않습니다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">2</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>위처럼 쓰시면 c라는 변수는 값이 할당이 안되어서 undefined가 할당되어있습니다.<br>이걸 방지하고 싶으면, 값이 아무것도 안들어오는 변수들은 기본값을 가질 수 있게 만들 수 있습니다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c = <span class="number">5</span>] = [<span class="number">2</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>그럼 c는 아무 값도 안들어오는 경우 5라는 기본값을 할당해줍니다. </p><hr><h2 id="1-3-Object-안에-있는-데이터를-변수에-담는-법"><a href="#1-3-Object-안에-있는-데이터를-변수에-담는-법" class="headerlink" title="1.3 Object 안에 있는 데이터를 변수에 담는 법"></a>1.3 Object 안에 있는 데이터를 변수에 담는 법</h2><p>object도 좌우를 똑같이 맞춰주시면 변수가 생성됩니다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; name : a, age : b &#125; = &#123; name : <span class="string">&#x27;Kim&#x27;</span>, age : <span class="number">30</span> &#125;;</span><br></pre></td></tr></table></figure><p>이렇게 하시면 됩니다. 그럼 a, b라는 변수가 생성되고 Kim과 30이라는 자료를 각각 할당해줍니다.<br>이렇게 쓰시면 조금 더 쉽게 변수를 뽑을 수 있는데,<br>변수 이름을 오브젝트 안의 key 이름과 똑같이 맞춰줄 때는 이렇게만 쓰셔도 됩니다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = &#123; name : <span class="string">&#x27;Kim&#x27;</span>, age : <span class="number">30</span> &#125;;</span><br></pre></td></tr></table></figure><p>name : name을 name 이렇게 하나로 생략이 가능합니다.<br>이렇게 하시면 name, age라는 변수가 생성되고, 각각 Kim, 30이라는 값을 할당해줍니다.<br>object에서 변수꺼내기 끝입니다. + array랑 똑같이 등호로 디폴트값도 적용가능합니다. </p><hr><h2 id="1-4-변수를-object로-집어넣고-싶은-경우"><a href="#1-4-변수를-object로-집어넣고-싶은-경우" class="headerlink" title="1.4 변수를 object로 집어넣고 싶은 경우"></a>1.4 변수를 object로 집어넣고 싶은 경우</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Kim&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; name : name, age : age &#125;</span><br></pre></td></tr></table></figure><p>변수를 object 자료형에 집어넣고 싶은 경우 이런 식으로 쓰면 되겠죠?<br>하지만 destructuring 문법을 이용하시면 이런 것도 가능합니다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Kim&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; name, age &#125;</span><br></pre></td></tr></table></figure><p>name : name 이렇게 key값과 value값이 동일하면, name 이렇게 하나로 생략이 가능합니다. </p><hr><h2 id="1-5-함수-파라미터-변수-만들-때도-적용가능"><a href="#1-5-함수-파라미터-변수-만들-때도-적용가능" class="headerlink" title="1.5 함수 파라미터 변수 만들 때도 적용가능"></a>1.5 함수 파라미터 변수 만들 때도 적용가능</h2><p>함수가 하나 있는데 이 함수는 두개의 파라미터를 입력할 수 있습니다.<br>여기에 object 내의 Kim, 그리고 age 자료들을 입력하고 싶으면 어떻게 할까요? </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 함수(name, age)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; name : <span class="string">&#x27;Kim&#x27;</span>, age : <span class="number">20</span> &#125;</span><br><span class="line">함수(obj.<span class="property">name</span>, obj.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><p>아마 obj.name 이걸 직접 집어넣고 그러면 되겠죠? 혹은 destructuring 문법을 쓰시면 됩니다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 함수( &#123; name, age &#125;)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; name : <span class="string">&#x27;Kim&#x27;</span>, age : <span class="number">20</span> &#125;;</span><br><span class="line">함수(obj);</span><br></pre></td></tr></table></figure><p>아마 obj.name, obj.name 이걸 두개 뽑지 않고도 넣을 수 있습니다.<br>왜냐면 파라미터는 실은 변수만드는 거랑 똑같은 행위기 때문에 변수만드는 문법을 그대로 적용할 수 있는 것이지요.<br>파라미터를 입력할 때, {name, age} &#x3D; { name : ‘Kim’, age : 20 } 이거 한거랑 똑같습니다.<br>(솔직히 많이 쓰진 않습니다)</p><p>이해가 안되면 조금 더 쉬운 array를 보도록 합시다.  함수 파라미터로 array 내의 데이터들을 집어넣고 싶으면 어떻게 하죠?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 함수( name, age )&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array = [ <span class="string">&#x27;Kim&#x27;</span>, <span class="number">30</span> ];</span><br><span class="line">함수(array[<span class="number">0</span>], array[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>위처럼 해도 되지만 destructuring 문법을 이용하시면 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 함수( [name, age] )&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array = [ <span class="string">&#x27;Kim&#x27;</span>, <span class="number">30</span> ];</span><br><span class="line">함수( [<span class="string">&#x27;Kim&#x27;</span>, <span class="number">30</span>] );</span><br></pre></td></tr></table></figure><p>이렇게 하셔도 됩니다. 파라미터인 [name, age] 를 만들 때 [‘Kim’, 30] 이걸 그대로 대입해서 만드는 것이죠.<br>그럼 각각 name과 age에는 Kim과 30이라는 데이터가 들어갑니다. </p><hr><h1 id="2-모듈-import-export"><a href="#2-모듈-import-export" class="headerlink" title="2. 모듈 (import, export)"></a>2. 모듈 (import, export)</h1><p>개발하는 애플리케이션의 크기가 커지면 언젠간 파일을 여러 개로 분리해야 하는 시점이 옵니다.<br>이때 분리된 파일 각각을 ‘모듈(module)’이라고 부르는데,<br>모듈은 대개 클래스 하나 혹은 특정한 목적을 가진 복수의 함수로 구성된 라이브러리 하나로 구성됩니다.</p><blockquote><p>모듈(module) : 프로그램을 기능별로 분할한 논리적인 최소 단위</p><ul><li>모듈과 컴포넌트는 자주 혼용된다.</li><li><code>모듈</code>은 설계 시점에 의미있는 요소이며,</li><li><code>컴포넌트</code>는 런타임 시점에 의미있는 요소이다.</li></ul></blockquote><p> export default &#x2F; import 를 쓰면, 다른 파일에 있는 변수 등을 가져다쓸 수 있습니다. 변수 함수 class 전부 가능합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// library.js</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> a;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">&#x27;library.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JS 파일에서는 특정 변수를 다른 파일에서 이용할 수 있게 내보내고 싶으면, <code>export default 변수명</code>이라고 하시면 됩니다.<br>그리고 그 변수를 가져다쓰고 싶다면, 다른 파일에서 <code>import 어쩌구 from &#39;경로&#39;</code>해주시면 됩니다.<br>(import시 어쩌구라는 변수명은 여러분 아무렇게나 작명이 가능합니다.)</p><hr><h2 id="2-1-여러개를-export-가능"><a href="#2-1-여러개를-export-가능" class="headerlink" title="2.1 여러개를 export 가능"></a>2.1 여러개를 export 가능</h2><p>JS파일에서 변수를 여러개 만들고 그걸 다 내보내고 싶으면, <code>export</code>라는 키워드를 여러번 쓰시면 됩니다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// library.js</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;a, b&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;a,b&#125; <span class="keyword">from</span> <span class="string">&#x27;library.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>근데 export 라고 쓰실 땐, <code>export &#123;변수명1, 변수명2 ...&#125;</code> 이렇게 담아주셔야합니다.<br>혹은 <code>export let a = 10;</code> 이렇게 쓰셔도 됩니다.<br>export 키워드로 내보낸 것들을 import 하실 땐, <code>import &#123;변수명1, 변수명2 ...&#125; from &#39;경로&#39;</code> 이렇게 가져오셔야합니다. </p><p>export default와 차이점은.. </p><ul><li>export default는 한번만 쓸 수 있고 import시엔 변수명을 새롭게 작명가능하다</li><li>export는 {변수명1, 변수명2 …} 이렇게 담아야하고 import 할 때도 정확히 변수명을 써줘야한다</li></ul><p>라는 특징이 있습니다.</p><hr><h2 id="2-2-export와-export-default-동시에-사용하면"><a href="#2-2-export와-export-default-동시에-사용하면" class="headerlink" title="2.2 export와 export default 동시에 사용하면?"></a>2.2 export와 export default 동시에 사용하면?</h2><p>그래도 잘 됩니다. 근데 import할 때 어떻게 해야할지 감이 안오죠? </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// library.js</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;a, b&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> c;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> c, &#123;a,b&#125; <span class="keyword">from</span> <span class="string">&#x27;library.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이렇게 import 해오시면 됩니다. export default 한건 맨 왼쪽에 써주시면 되고,<br>그 다음부터 이제 {} 중괄호 안에 export 했던 변수들을 적어주시면 됩니다.</p><hr><h2 id="2-3-변수명이-마음에-안들면-as로-새로-짓자"><a href="#2-3-변수명이-마음에-안들면-as로-새로-짓자" class="headerlink" title="2.3 변수명이 마음에 안들면 as로 새로 짓자"></a>2.3 변수명이 마음에 안들면 as로 새로 짓자</h2><p><code>import</code>를 쓸 때 변수명 오른쪽에 <code>as</code>라는 키워드를 붙일 수 있습니다.<br><code>변수명 as 새변수명</code> 이렇게 하면 import하는 변수의 변수명을 멋있는걸로 바꿀 수 있습니다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// library.js</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;a&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> c;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> c, &#123;a <span class="keyword">as</span> 폭발&#125; <span class="keyword">from</span> <span class="string">&#x27;library.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(폭발);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>a라는 것은 폭발로 이름을 바꿔봤습니다. </p><hr><h2 id="2-4-import할-때-변수들이-너무-많으면"><a href="#2-4-import할-때-변수들이-너무-많으면" class="headerlink" title="2.4 import할 때 변수들이 너무 많으면"></a>2.4 import할 때 변수들이 너무 많으면</h2><p>export { } 했던 변수들을 한꺼번에 object에 담아서 import 해올 수 있습니다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// library.js</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;a,b&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> c;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> c, * <span class="keyword">as</span> 변수모음 <span class="keyword">from</span> <span class="string">&#x27;library.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(변수모음.<span class="property">a</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>*</code> 이라는 기호는 export { } 했던 애들을 그냥 다 import 해주세요~ 라는 뜻입니다.<br>근데 그냥 쓰면 안되고 as로 별명을 꼭 지어주어야합니다. 그럼 이제 별명에 export { } 했던 변수들이 다 들어갑니다.<br>(export default 했던건 그냥 원래대로 import 하시면 되고요)</p><hr><h2 id="2-5-옛날엔-require-module-exports"><a href="#2-5-옛날엔-require-module-exports" class="headerlink" title="2.5 옛날엔 require, module.exports"></a>2.5 옛날엔 require, module.exports</h2><p>옛날에 Require.js 이상한 라이브러리를 쓰거나 nodejs 개발시 자바스크립트를 모듈식으로 개발이 가능했었습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export 하는 js파일</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">a</span> = <span class="number">10</span> ;</span><br><span class="line">----------------------------------------</span><br><span class="line"><span class="comment">// import 하는 js파일</span></span><br><span class="line"><span class="keyword">let</span> 가져온거 = <span class="built_in">require</span>(<span class="string">&#x27;/library.js&#x27;</span>); </span><br></pre></td></tr></table></figure><p>이러면 a를 쓸 수 있었습니다.<br>근데 이제는 ES6 import&#x2F;export를 쓰면 되기 때문에, 아 그냥 저런게 있었구나 라고 이해만 하셔도 되겠습니다.<br>그리고 <code>import/export</code>는 당연 IE 호환성이 없기 때문에,<br>단순한 HTML, CSS, JS 프론트엔드 개발시 JS파일을 HTML에 첨부하시려면,<code>&lt;script src=&quot;경로&quot;&gt;&lt;/script&gt;</code> 이걸 쓰도록 합시다.<br>이것이 원조 import 문법 아니겠습니까. </p><p>혹은 모던 브라우저에선 <code>&lt;script type=&quot;module&quot; src=&quot;경로&quot;&gt;&lt;/script&gt;</code> 이렇게 하면 import, export 문법이 사용가능해지는데,<br>대부분은 React, Vue, Node.js이런거할 때 많이 사용하게 됩니다. </p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-17-iterators and generators</title>
      <link href="/2023/01/05/Front-JS-Basic-17-iterator/"/>
      <url>/2023/01/05/Front-JS-Basic-17-iterator/</url>
      
        <content type="html"><![CDATA[<h1 id="1-이터러블-iterable"><a href="#1-이터러블-iterable" class="headerlink" title="1. 이터러블(iterable)"></a>1. 이터러블(iterable)</h1><p>이터레이션을 JS에서는 <code>이터레이션 프로토콜(Iteration Protocol)</code>이라 부릅니다. </p><ul><li><code>이터레이션(iteration)</code>는 “반복, 순회”라는 뜻입니다. </li><li><code>프로토콜</code>은 “규격, 약속, 인터페이스”와 동일한 말입니다.</li></ul><p>그래서 <strong>이터레이션 프로토콜을 따른다</strong>는 것은 <strong>“순회가 가능하다”</strong>라고도 말할 수 있습니다.<br>JS에서 이터레이션 프로토콜을 따르는 객체는 <code>for...of</code>, <code>spread</code> 연산자를 사용할 수 있습니다.<br>즉, 이들은 순회가 가능한 연산자입니다.</p><p>이터레이션 프로토콜을 따르는 기본 JS 자료 구조는 <code>Array, String, Map, Set</code>으로<br>이들은 모두 이터레이션 프로토콜을 따르기 때문에 <code>for...of</code>, <code>spread</code> 연산자를 사용할 수 있습니다. </p><p>그런데 프로토콜(규격)을 준수한다는 것은 무슨 의미일까요?<br>규격을 따른다는 것은 어떤 객체든지 순회가 가능하기 위해서는 첫 번째로는 이터러블 프로토콜을 따라야 합니다. </p><p>이터러블 프로토콜을 다른 프로그래밍 언어에서는 프로토콜 대신에 <strong>인터페이스</strong>라는 말을 더 많이 사용합니다.<br>순회하고 싶은 순회가 가능한 객체가 되려면 이터러블 프로토콜을 따르면 되는데,<br>그 어떤 객체 안에서도 <code>symbo.iterater</code>라는 함수를 호출했을 때, 이터러블 프로토콜을 따르는 객체를 반환만 하면,<br>선언한 객체는 “순회가 가능한 객체다. 이터레이션 프로토콜을 따르는 객체다.”라고 부를 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() : iterator 프로토콜 &#123; </span><br><span class="line">    <span class="title function_">next</span>(): 다음값 </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>즉, 순회가 가능한 오브젝트가 되려면 내 오브젝트 안에 <code>symbo.iterater</code>라는 함수를 만들고,<br>그 함수에서 이터레이션 프로토콜을 따르는 순회하는 반복자를 리턴하는 객체를 만들면 된다고 이해하면 됩니다.<br>기본적인 규격 사항만 따르면, <code>for...of</code>, <code>spread</code> 연산자를 사용할 수 있습니다.</p><p>JavaScript에서 이터레이션 프로토콜을 따르기 위해서는 총 2가지 프로토콜을 따라야 합니다.</p><ol><li>이터러블 프로토콜을 따라야 한다.<ul><li>이터러블 프로토콜을 따른다는 말은 <code>Symbol.iterator</code>를 호출하면, 이터레이터 프로토콜을 따르는 객체를 리턴해야 함</li></ul></li><li>이터레이터 프로토콜은 next라는 함수가 있어서 다음 값을 계속 리턴하도록 만들어야 한다.</li></ol><p>cf. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols">MDN iteration protocols</a></p><hr><h2 id="1-1-예제-1"><a href="#1-1-예제-1" class="headerlink" title="1.1 예제 1"></a>1.1 예제 1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Iterable 하다는건? 순회가 가능하다!</span></span><br><span class="line"><span class="comment">// [Symbol.iterator](): IterableIterator&lt;T&gt;;</span></span><br><span class="line"><span class="comment">// 심볼정의를 가진 객체나, 특정한 함수가 IterableIterator&lt;T&gt;를 리턴한다는 것은</span></span><br><span class="line"><span class="comment">// 순회 가능한 객체다! 라는것을 의미</span></span><br><span class="line"><span class="comment">// 순회가 가능하면 무엇을 할 수 있나? for..of, spread 연산자 사용 가능</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 for...of 연산자 : 배열 안에 있는 아이템을 순회하면서 가져옴</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> array) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// 1, 2, 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for...in : key를 출력</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="number">0</span>: <span class="number">1</span>, <span class="number">1</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// obj안에 있는 key를 출력</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-2-예제-2"><a href="#1-2-예제-2" class="headerlink" title="1.2 예제 2"></a>1.2 예제 2</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Iterable 하다는건? 순회가 가능하다!</span></span><br><span class="line"><span class="comment">// [Symbol.iterator](): IterableIterator&lt;T&gt;;</span></span><br><span class="line"><span class="comment">// 심볼정의를 가진 객체나, 특정한 함수가 IterableIterator&lt;T&gt;를 리턴한다는 것은</span></span><br><span class="line"><span class="comment">// 순회 가능한 객체다! 라는것을 의미</span></span><br><span class="line"><span class="comment">// 순회가 가능하면 무엇을 할 수 있나? for..of, spread 연산자 사용 가능</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 for...of 연산자 : 배열 안에 있는 아이템을 순회하면서 가져옴</span></span><br><span class="line"><span class="comment">// 📝 array.entries() : [키, 값] 형태로 출력</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> array.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  [ 0, 1 ]</span></span><br><span class="line"><span class="comment">  [ 1, 2 ]</span></span><br><span class="line"><span class="comment">  [ 2, 3 ]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for...in : key를 출력</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="number">0</span>: <span class="number">1</span>, <span class="number">1</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// obj안에 있는 key를 출력 -&gt; 0, 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterator = array.<span class="title function_">values</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// done은 반복이 끝나면 true, 안끝나면 false</span></span><br><span class="line"><span class="comment">// console.log(iterator.next()); // &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> item = iterator.<span class="title function_">next</span>();</span><br><span class="line">  <span class="keyword">if</span> (item.<span class="property">done</span>) <span class="keyword">break</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(iterator.next().value); // 1</span></span><br><span class="line"><span class="comment">// console.log(iterator.next().value); // 2</span></span><br><span class="line"><span class="comment">// console.log(iterator.next().value); // 3</span></span><br><span class="line"><span class="comment">// console.log(iterator.next().done); // true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for (let item of iterator) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(item); // 1, 2, 3</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-3-예제-3"><a href="#1-3-예제-3" class="headerlink" title="1.3 예제 3"></a>1.3 예제 3</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [Symbol.iterator](): IterableIterator&lt;T&gt;;</span></span><br><span class="line"><span class="comment">// 0부터 10이하까지 숫자의 2배를 순회하는 이터레이터(반복자) 만들기!</span></span><br><span class="line"><span class="comment">// 0, 1, 2, 3, ..., 9</span></span><br><span class="line"><span class="comment">// 0, 2, 4, 6, ..., 18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> multiple = &#123;</span><br><span class="line">  <span class="comment">// [Symbol.iterator] 함수</span></span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> max = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 오브젝트가 반환됨</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// next 함수가 반드시 있어야 함</span></span><br><span class="line">      <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 10 초과되면 done이 true가 되어 순환이 정지</span></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">value</span>: num++ * <span class="number">2</span>, <span class="attr">done</span>: num &gt; max &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">clear</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> multiple) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="2-제너레이터-Generator"><a href="#2-제너레이터-Generator" class="headerlink" title="2. 제너레이터(Generator)"></a>2. 제너레이터(Generator)</h1><p>이터레이터를 쉽게 바꾼 것이 제너레이터(Generator)입니다.<br>Generator도 이터레이션 프로토콜을 준수하지만, 조금 더 간편한 방법으로 이터레이터를 만들 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 📝 제너레이터(생성기) : 값을 생성</span></span><br><span class="line"><span class="comment">// function다음에 *를 붙이면 제너레이터로 인식</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">multipleGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 0까지만 출력</span></span><br><span class="line">      <span class="comment">// return : 바로 값을 리턴</span></span><br><span class="line">      <span class="keyword">yield</span> i ** <span class="number">2</span>; <span class="comment">// yield : 사용자가 next를 호출할 떄까지 기다렸다가 하나씩 리턴</span></span><br><span class="line">      <span class="comment">// 사용자에게 제어권을 양도 = yield</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> multiple = <span class="title function_">multipleGenerator</span>();</span><br><span class="line"><span class="keyword">let</span> next = multiple.<span class="title function_">next</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(next.<span class="property">value</span>, next.<span class="property">done</span>); <span class="comment">// 0 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// multiple.return();</span></span><br><span class="line">multiple.<span class="keyword">throw</span>(<span class="string">&#x27;Error!&#x27;</span>); <span class="comment">// Error!</span></span><br><span class="line"></span><br><span class="line">next = multiple.<span class="title function_">next</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(next.<span class="property">value</span>, next.<span class="property">done</span>); <span class="comment">// undefined true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-16-class(클래스) - 작성중</title>
      <link href="/2023/01/05/Front-JS-Basic-16-Class/"/>
      <url>/2023/01/05/Front-JS-Basic-16-Class/</url>
      
        <content type="html"><![CDATA[<h1 id="1-클래스-class"><a href="#1-클래스-class" class="headerlink" title="1. 클래스(class)"></a>1. 클래스(class)</h1><ul><li><code>생성자 함수</code>는 ‘붕어빵 기계’처럼 객체를 찍어낼 수 있는 ‘템플릿’ 양식 같은 개념이고, </li><li><code>객체</code>는 템플릿을 통해 데이터를 주입해서 만든 ‘붕어빵’에 비유할 수 있습니다.</li></ul><p>이것이 가능한 이유는 JavaScript에서는 <code>프로토타입(Prototype)</code>을 토대로 해서 객체지향 프로그래밍을 지원해주기 때문입니다.<br>대다수 객체 지향 언어들은 프로토타입보다 <code>클래스(Class)</code>를 기반으로 동작합니다.<br>JavaScript의 내부에서는 프로토타입을 쓰고, 개발자들은 클래스를 이용해도 내부에서는 프로토타입을 이용하기 때문입니다. </p><p>참고로 ES6+ 이상의 JavaScript에서 Class 문법을 지원합니다.<br>그리고 현업의 대부분 언어는 클래스를 사용하고, 생성자 함수를 더 이상 사용하고 있지 않습니다.</p><blockquote><p>💡 용어 정리</p><ul><li><code>클래스(Class)</code> : <strong>객체를 생성할 수 있는 템플릿</strong> (e.g. 청사진, 틀, 양식, 설계도)</li><li><code>객체지향 프로그래밍(Object-Oriented Programming)</code> : 객체끼리 서로 호환되도록 프로그래밍하는 것</li><li><code>인스턴스(Instance)</code> : 클래스를 통해 객체를 만들 수 있는데, 이떄 <strong>클래스를 이용해 만들어진 객체들</strong></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체를 손쉽게 만들수 있는 템플릿</span></span><br><span class="line"><span class="comment">// 1. 생성자 함수 (오래된 고전적인 방법)</span></span><br><span class="line"><span class="comment">// 2. 클래스 ✨</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">  <span class="comment">// 모든 클래스는 기본 생성자(constructor)가 존재해야 함</span></span><br><span class="line">  <span class="comment">// 생성자: new 키워드로 객체를 생성할때 호출되는 함수</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, emoji</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">emoji</span> = emoji;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  display = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>: <span class="subst">$&#123;<span class="variable language_">this</span>.emoji&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apple = <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;🍎&#x27;</span>); <span class="comment">// apple은 Fruit 클래스의 인스턴스이다.</span></span><br><span class="line"><span class="keyword">const</span> orange = <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;🍊&#x27;</span>); <span class="comment">// orange은 Fruit 클래스의 인스턴스이다.</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple);  <span class="comment">// Fruit &#123; display: [Function: display], name: &#x27;apple&#x27;, emoji: &#x27;🍎&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(orange); <span class="comment">// Fruit &#123; display: [Function: display], name: &#x27;orange&#x27;, emoji: &#x27;🍊&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple.<span class="property">emoji</span>);</span><br><span class="line">apple.<span class="title function_">display</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj는 객체이고, 그 어떤 클래스의 인스턴스도 아니다.</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;ellie&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure><p>cf. <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/class">MDN Class</a></p><hr><h1 id="2-재사용성을-높이는-방법-static"><a href="#2-재사용성을-높이는-방법-static" class="headerlink" title="2. 재사용성을 높이는 방법(static)"></a>2. 재사용성을 높이는 방법(static)</h1><p>클래스에 정의된 프로퍼티와 메서드는 <code>인스턴스 레벨의 프로퍼티와 메서드</code>라고 합니다.<br>왜냐하면 클래스에서 정의한 프로퍼티와 함수들이 인스턴스에 중복적으로 만들어지기 때문입니다.<br>각각의 인스턴스들을 통해 <code>객체.속성</code> 또는 <code>객체.함수</code>로 호출할 수 있습니다.<br>모든 객체마다 동일하게 참조해야 하는 속성이나 함수가 있다면, <code>클래스 레벨의 프로퍼티와 메서드</code>를 사용하면 됩니다.</p><p>클래스 안에 <code>static</code> 키워드를 프로퍼티나 메서드 앞에 작성하면, 만들어진 인스턴스에 포함되지 않고 클래스에 그대로 남아있게 됩니다. 즉, 클래스에 1번만 정의하고 인스턴스에서 재사용을 하는 것입니다.<br>그래서 호출할 떄도<code>만들어진 인스턴스.</code>이 아니라 <code>클래스명.</code>으로 클래스 레벨의 메서드를 호출할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// static 정적 프로퍼티, 메서드</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="variable constant_">MAX_FRUITS</span> = <span class="number">4</span>;</span><br><span class="line">  <span class="comment">// 생성자: new 키워드로 객체를 생성할때 호출되는 함수</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, emoji</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">emoji</span> = emoji;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 클래스 레벨의 메서드</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">makeRandomFruit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 클래스 레벨의 메서드에서는 this를 참조할 수 없음</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;🍌&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 인스턴스 레벨의 메서드</span></span><br><span class="line">  display = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>: <span class="subst">$&#123;<span class="variable language_">this</span>.emoji&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> banana = <span class="title class_">Fruit</span>.<span class="title function_">makeRandomFruit</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(banana); <span class="comment">// Fruit &#123; display: [Function: display], name: &#x27;banana&#x27;, emoji: &#x27;🍌&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fruit</span>.<span class="property">MAX_FRUITS</span>); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// apple은 Fruit 클래스의 인스턴스이다.</span></span><br><span class="line"><span class="keyword">const</span> apple = <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;🍎&#x27;</span>);</span><br><span class="line"><span class="comment">// orange은 Fruit 클래스의 인스턴스이다.</span></span><br><span class="line"><span class="keyword">const</span> orange = <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;🍊&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple);  <span class="comment">// Fruit &#123; display: [Function: display], name: &#x27;apple&#x27;, emoji: &#x27;🍎&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(orange); <span class="comment">// Fruit &#123; display: [Function: display], name: &#x27;orange&#x27;, emoji: &#x27;🍊&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple.<span class="property">emoji</span>);</span><br><span class="line">apple.<span class="title function_">display</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(); <span class="comment">// math 클래스 API</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">1</span>); <span class="comment">// number 클래스 API</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-필드-field"><a href="#3-필드-field" class="headerlink" title="3. 필드(field)"></a>3. 필드(field)</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 접근제어자 - 캡슐화</span></span><br><span class="line"><span class="comment">// private(#), public(기본), protected</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">  <span class="comment">// # : 내부에서는 사용 가능, 외부에서는 사용 불가</span></span><br><span class="line">  #name;</span><br><span class="line">  #emoji;</span><br><span class="line">  #type = <span class="string">&#x27;과일&#x27;</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, emoji</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#name = name;</span><br><span class="line">    <span class="variable language_">this</span>.#emoji = emoji;</span><br><span class="line">  &#125;</span><br><span class="line">  #display = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.#name&#125;</span>: <span class="subst">$&#123;<span class="variable language_">this</span>.#emoji&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apple = <span class="keyword">new</span> <span class="title class_">Fruit</span>(<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;🍎&#x27;</span>);</span><br><span class="line"><span class="comment">// apple.#name = &#x27;오렌지&#x27;; // #field는 외부에서 접근이 불가능함</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple); <span class="comment">// Fruit &#123;&#125;</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-getter와-setter"><a href="#4-getter와-setter" class="headerlink" title="4. getter와 setter"></a>4. getter와 setter</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 접근자 프로퍼티 (Accessor Property)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">firstName, lastName</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// fullName에 접근(호출)할 떄</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">fullName</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.lastName&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// fullName에 할당할 떄</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">fullName</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;수지&#x27;</span>, <span class="string">&#x27;김&#x27;</span>);</span><br><span class="line">student.<span class="property">firstName</span> = <span class="string">&#x27;안나&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">firstName</span>); <span class="comment">// 안나</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">fullName</span>); <span class="comment">// 김 안나</span></span><br><span class="line">student.<span class="property">fullName</span> = <span class="string">&#x27;김철수&#x27;</span>; <span class="comment">// set 김철수</span></span><br></pre></td></tr></table></figure><hr><h1 id="5-상속-inheritance"><a href="#5-상속-inheritance" class="headerlink" title="5. 상속(inheritance)"></a>5. 상속(inheritance)</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">color</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;먹자!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sleep</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;잔다&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> tiger = <span class="keyword">new</span> <span class="title class_">Tiger</span>(<span class="string">&#x27;노랑이&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tiger); <span class="comment">// Tiger &#123; color: &#x27;노랑이&#x27; &#125;</span></span><br><span class="line">tiger.<span class="title function_">sleep</span>(); <span class="comment">// 잔다</span></span><br><span class="line">tiger.<span class="title function_">eat</span>(); <span class="comment">// 먹자!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">color, ownerName</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(color);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ownerName</span> = ownerName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;놀자아~!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 오버라이딩 overriding</span></span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">eat</span>(); <span class="comment">// 부모의 기능을 그대로 유지하면서 추가적인 기능을 하고 싶을 떄</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;강아지가 먹는다!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;빨강이&#x27;</span>, <span class="string">&#x27;엘리&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog); <span class="comment">// Dog &#123; color: &#x27;빨강이&#x27;, ownerName: &#x27;엘리&#x27; &#125;</span></span><br><span class="line">dog.<span class="title function_">sleep</span>(); <span class="comment">// 잔다</span></span><br><span class="line">dog.<span class="title function_">eat</span>(); <span class="comment">// 먹자! 강아지가 먹는다!</span></span><br><span class="line">dog.<span class="title function_">play</span>(); <span class="comment">// 놀자아~!</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-18-Spread 연산자 &amp; Rest 파라미터 - 작성중</title>
      <link href="/2023/01/05/Front-JS-Basic-18-SpreadRest/"/>
      <url>/2023/01/05/Front-JS-Basic-18-SpreadRest/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spread-Operator"><a href="#1-Spread-Operator" class="headerlink" title="1. Spread Operator"></a>1. Spread Operator</h1><p>마침표를 연달아서 3개<code>..</code> 찍으시면 그게 <strong>spread operator</strong>라는 문법입니다. 한글로는 <strong>펼침 연산자</strong>라고 번역가능한데,<br>무슨 역할을 하냐면 아주 쉽게 설명하자면, <strong>“괄호제거 해주는 연산자”</strong> 입니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 어레이 = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(어레이); <span class="comment">// [ &#x27;hello&#x27;, &#x27;world&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...어레이); <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><p>3번줄처럼 spread operator를 붙여서 출력해보시면 괄호가 제거된 <code>&#39;hello&#39;, &#39;world&#39;</code>만 콘솔창에 출력됩니다.<br><strong>문자에 붙이면 문자에 붙은 괄호를 제거</strong>해줍니다.<br>괄호가 어딨냐고요? 실은 문자도 array 자료형과 매우 비슷합니다. 안보이는 대괄호가 쳐져있다고 보시면 됩니다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 문자 = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(문자[<span class="number">0</span>]); <span class="comment">// h</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(문자[<span class="number">1</span>]); <span class="comment">// e</span></span><br></pre></td></tr></table></figure><p>문자를 이런식으로 array처럼 출력할 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 문자 = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(문자); <span class="comment">// hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...문자); <span class="comment">// h e l l o</span></span><br></pre></td></tr></table></figure><p> 위 코드 셋째줄을 출력해보면 콘솔창에 h e l l o 라는 문자들이 출력됩니다.<br><code>console.log(&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;)</code> 이렇게 한거랑 똑같다고 보시면 됩니다.<br>그래서 spread를 문자에 붙이면 알파벳을 하나씩 펼쳐줍니다.</p><hr><h2 id="1-1-예시-Array-합치기"><a href="#1-1-예시-Array-합치기" class="headerlink" title="1.1 예시 : Array 합치기"></a>1.1 예시 : Array 합치기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> c = [<span class="comment">/* 여기엔 1,2,3,4,5 가 들어오게 만들려면? */</span>];</span><br></pre></td></tr></table></figure><p><code>spread operator</code>를 사용하시면 매우 쉽습니다. </p><ul><li>spread operator &#x3D; <strong>대괄호 제거</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> c = [...a, ...b];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-2-예시-Array-복사"><a href="#1-2-예시-Array-복사" class="headerlink" title="1.2 예시 : Array 복사"></a>1.2 예시 : Array 복사</h2><p>a라는 array를 복사해서 b를 만들고 싶으면,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = a; <span class="comment">// a의 값을 가리키는 화살표를 대입</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure><p>등호 <code>= </code>를 이용하시면 쉽게 a에 있던 값을 b에 집어넣을 수 있습니다. ( [1,2,3] 복사완료!)<br>그런데 자바스크립트에선 복사를 이렇게 하시면 큰일납니다.<br>등호로 복사를 하시면, a와 b 변수는 [1,2,3]을 각각 따로 하나씩 가진게 아니라 <strong>값 공유</strong>가 일어납니다.<br>그래서 <strong>a라는 array를 수정하면 b도 똑같이 바뀌는 신기한 버그</strong>가 일어납니다.<br>왜나하면 값을 복사한게 아니라 <strong>[1,2,3]</strong> <strong>값이 저기있어요~ 라고 가리키는 화살표</strong>를 복사하신 것입니다.</p><p>그래서 값을 공유하지 않고 각각 독립적인 값을 저장하도록, <strong>array를 복사</strong>하시려면,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = [...a]; <span class="comment">// a값의 괄호를 제거해준 다음에 다시 괄호씌워서 배열 복사</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure><p><code>spread</code>를 이용해서 <strong>a값의 괄호를 제거해준 다음에 다시 괄호를 씌우는 겁니다</strong>.<br>이렇게 하면 a와 b 변수의 값 공유가 일어나지 않습니다. </p><hr><h2 id="1-3-예시-Object-합치기-x2F-복사"><a href="#1-3-예시-Object-합치기-x2F-복사" class="headerlink" title="1.3 예시 : Object 합치기&#x2F;복사"></a>1.3 예시 : Object 합치기&#x2F;복사</h2><p>object 두개를 합치고 싶으면,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123; <span class="attr">c</span>: <span class="number">3</span> <span class="comment">/* 그리고 o1에 있는거 전부... */</span> &#125;;</span><br></pre></td></tr></table></figure><p>o2를 만들고 싶은데, o1에 있던 내용들을 그대로 가져다가 추가하고 싶습니다.<br> <code>spread operator</code>는 <strong>대괄호 뿐만아니라 중괄호도 제거</strong>해줍니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123; <span class="attr">c</span>: <span class="number">3</span>, ...o1 &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o2); <span class="comment">// &#123; c: 3, a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure><p>o2라는 오브젝트를 출력해보면 a, b, c키값이 다 들어있습니다.<br>왜냐면 o1오브젝트를 <code>spread</code> 연산자를 이용해 <strong>괄호를 벗겨서 추가</strong>했기 때문입니다. </p><hr><h2 id="1-4-Object의-key값-중복"><a href="#1-4-Object의-key값-중복" class="headerlink" title="1.4 Object의 key값 중복"></a>1.4 Object의 key값 중복</h2><p>Object의 key값 중복이 발생하면,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123; <span class="attr">a</span>: <span class="number">3</span>, ...o1 &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o2); <span class="comment">// &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure><p>o2를 o1항목을 추가해서 만들고 싶은데 a라는 키값이 이미 있는겁니다.<br>이렇게 <strong>a라는 값이 중복이 발생하면 뒤에 오는 a가</strong> 이깁니다.  그래서 출력해보면 <code>a : 1</code>이라는 자료가 담겨져있습니다. </p><hr><h2 id="1-5-예시-Array-모든-값-더하기"><a href="#1-5-예시-Array-모든-값-더하기" class="headerlink" title="1.5 예시 : Array 모든 값 더하기"></a>1.5 예시 : Array 모든 값 더하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 더하기(a, b, c) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 어레이 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line">더하기(...어레이);</span><br></pre></td></tr></table></figure><hr><h1 id="2-Rest-파라미터"><a href="#2-Rest-파라미터" class="headerlink" title="2. Rest 파라미터"></a>2. Rest 파라미터</h1><p>함수를 만들 때 <code>...</code>이라는 기호를 파라미터 왼쪽에 추가가능합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 함수<span class="number">2</span>(...파라미터들) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(파라미터들); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">함수<span class="number">2</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>); <span class="comment">// [1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure><p>위 코드를 실행해보면 <code>파라미터들</code>이라는 변수를 출력해줍니다.<br><code>파라미터들</code>이라는 변수는 모든 파라미터를 <code>[] array</code> 안에 담고 있습니다.<br>이게 바로 ES6 환경에서 쓸 수 있는 rest 파라미터입니다. 원하는 파라미터 왼쪽에 <code>...</code>기호를 붙여주시면,<br><strong>“이 자리에 오는 모든 파라미터를 [] 중괄호로 감싸준 파라미터”</strong> 라는 뜻입니다. </p><hr><h2 id="2-1-응용"><a href="#2-1-응용" class="headerlink" title="2.1 응용"></a>2.1 응용</h2><p>그 자리에 있는 파라미터를 [] 안에 감싸준다고 했으면, 다른 자리에 쓰면 어떻게 될까요?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 함수<span class="number">2</span>(a, b, ...파라미터들) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(파라미터들); <span class="comment">// [ 3, 4, 5, 6, 7 ]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">함수<span class="number">2</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br></pre></td></tr></table></figure><p>위 코드를 실행해보면 [3,4,5,6,7]이 출력됩니다. 첫 두개의 파라미터는 a, b로 쓰는데,<br><strong>a,b 그 뒤에 나오는 모든 파라미터</strong>는 중괄호에 감싸서 파라미터들이라는 array가 됩니다. </p><p>rest(나머지) 파라미터라는 뜻대로 나머지 부분에만 사용가능합니다.<br>그니까 항상 <strong>파라미터가 여러개면 rest는 항상 마지막 파라미터로</strong> 넣으셔야합니다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 함수<span class="number">2</span>(a, ...파라미터들, b)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(파라미터들)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 사용하시면 에러난다는 소리입니다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 함수<span class="number">2</span>(a, ...파라미터들, ...파라미터들<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(파라미터들)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이것도 안됩니다. 2개 이상 사용할 수 없습니다. </p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-15-데이터 호출(api, json, ajax, fetch, axios)</title>
      <link href="/2023/01/05/Front-JS-Basic-15-callAPI/"/>
      <url>/2023/01/05/Front-JS-Basic-15-callAPI/</url>
      
        <content type="html"><![CDATA[<h1 id="1-네트워크-기초-지식"><a href="#1-네트워크-기초-지식" class="headerlink" title="1. 네트워크 기초 지식"></a>1. 네트워크 기초 지식</h1><p>cf. <a href="https://youtu.be/1ID6pfTViXo">코딩애플 - JSON (존슨) 은 자바스크립트 문법이 아닙니다</a></p><h2 id="1-1-JSON"><a href="#1-1-JSON" class="headerlink" title="1.1 JSON"></a>1.1 JSON</h2><p>데이터를 텍스트 형태로만 보낸다면 굉장히 복잡합니다. 그래서 데이터를 담기 위한 깔끔한 형식이 필요합니다.</p><h3 id="1-1-1-데이터-담는-형식"><a href="#1-1-1-데이터-담는-형식" class="headerlink" title="1.1.1 데이터 담는 형식"></a>1.1.1 데이터 담는 형식</h3><ul><li>XML<ul><li><code>&lt;데이터이름&gt;값&lt;/데이터이름&gt;</code><br><code>&lt;데이터이름&gt;값&lt;/데이터이름&gt;</code><br><code>&lt;데이터이름&gt;값&lt;/데이터이름&gt;</code></li><li>2000년대 사용 방식</li><li>작성하기가 불편</li><li>용량이 불필요하게 컸음</li></ul></li><li>CSV<ul><li><code>Year, Brand, Model</code><br><code>1997, Ford, E350</code><br><code>2000, Mercury, Cougar</code></li><li>표 형태로 만든 형식</li><li>데이터베이스를 모방해 만든 방식이라 데이터베이스에 있는 데이터를 CSV로 변환이 쉬움</li><li>표 안에 표를 집어넣은 형태인 고차원 형태를 표현하기 복잡</li></ul></li><li>JSON<ul><li><code>&#123;&#39;name&#39; : &#39;kim&#39;, &#39;age&#39; : 20 &#125;</code></li><li>일반적으로 가장 많이 사용하는 형식</li><li>2013년에 JavaScript 공식 문법에 편입</li></ul></li></ul><hr><h2 id="1-2-서버-Server-x3D-알바생"><a href="#1-2-서버-Server-x3D-알바생" class="headerlink" title="1.2 서버(Server) &#x3D; 알바생"></a>1.2 서버(Server) &#x3D; 알바생</h2><ul><li><strong>요청을 받으면 데이터를 보내주는 기계</strong></li><li>알바생을 영어로 Server라고 함.<ul><li>(음식을) 서빙(Serving)한다 &#x3D; 무언가를 갖다준다.</li><li>(컴퓨터) 서버(Server) &#x3D; 무언가를 갖다주는 컴퓨터</li></ul></li><li>e.g. 웹서버 &#x3D; “웹툰 페이지 주세요“하면, 웹툰 페이지를 가져다주는 기계</li><li>전문용어로는 <strong>클라이언트의 요청을 받으면 서비스, 데이터를 제공하는 컴퓨터 혹은 프로그램</strong></li></ul><hr><h2 id="1-3-API-x3D-식당-메뉴판"><a href="#1-3-API-x3D-식당-메뉴판" class="headerlink" title="1.3 API &#x3D; 식당 메뉴판"></a>1.3 API &#x3D; 식당 메뉴판</h2><p><strong>API (Application Programming Interface)</strong> : 서로 다른 프로그램간에 소통할 수 있게 도와주는 통신 규약</p><ul><li>웹에서 사용하면 ‘<strong>서버와 고객간의 통신 규약</strong>‘</li><li>풀어말하면 ‘<strong>서버에게 요청해서 데이터 가져오는 방법</strong>‘</li><li>e.g. “<strong>누군가 &#x2F;write로 접속하면 write.html을 보내주세요</strong>“같은 건 서버의 API<ul><li><code>write.html</code>을 보고싶으면 <code>/write</code>로 접속하라는 API를 정의</li></ul></li></ul><hr><h3 id="1-3-1-기본-HTTP-메서드-GET-POST"><a href="#1-3-1-기본-HTTP-메서드-GET-POST" class="headerlink" title="1.3.1 기본 HTTP 메서드 (GET, POST)"></a>1.3.1 기본 HTTP 메서드 (GET, POST)</h3><ul><li><code>GET</code> : 데이터를 Read(조회)할 떄 사용</li><li><code>POST</code> (BODY 포함)<ul><li>새로운 정보를 Create(추가)하는데 사용</li><li>Body에 새 데이터 정보를 실어서 보냄</li></ul></li></ul><hr><h3 id="1-3-2-GET-x3D-브라우저-주소창"><a href="#1-3-2-GET-x3D-브라우저-주소창" class="headerlink" title="1.3.2 GET &#x3D; 브라우저 주소창"></a>1.3.2 GET &#x3D; 브라우저 주소창</h3><p>사용자도 GET 요청 코드를 서버에게 보내야만 서버의 데이터를 볼 수 있습니다.<br>서버에 GET 요청 코드는 매일  많은사람들이 사용하고 있습니다.</p><p>일반 사용자들은 <strong>브라우저라는 도구를 이용해서 주소창에서 GET 요청</strong>을 보냅니다.<br>또 직접 타이핑하지 않고, 개발자들이 각 버튼, 이미지 등의 클릭 요소에 GET 요청을 만들어 두었습니다.</p><p>API는 항상 public할 필요는 없습니다.</p><ul><li><code>public API</code> : 누구나 사용가능한 공개 API</li><li><code>private API</code> : 사내에서 몰래 쓰는 API</li><li><code>partner API</code> : 미리 정해둔 놈만 쓰는 API</li></ul><p>모든 프로그램은 API를 가질 수 있습니다.</p><ul><li><code>Windows API</code> : 이거 쓰면 윈도우 운영체제 기능들 사용 가능</li><li><code>Database 관리 프로그램 API</code> : 이거 쓰면 DB 입출력 기능들 사용 가능</li><li><code>XX 프로그램 API</code> : 이거 쓰면 무슨무슨 기능들 사용 가능</li></ul><p>API로 만드는 비즈니스 모델</p><ul><li><code>Naver Cloud Platform</code> : 네이버 파파고 번역 API, Cloba Summary API 등 호출마다 API 요금 발생</li><li>API 마켓 등에서도 판매</li></ul><hr><h1 id="2-RSET-API"><a href="#2-RSET-API" class="headerlink" title="2. RSET API"></a>2. RSET API</h1><ul><li><code>REST(Representational State Transfer)</code></li><li>웹의 창시자(HTTP) 중의 한 사람인 Roy Fielding의 2000년 논문에 의해서 소개<ul><li>HTTP 요청 시스템(GET, POST, PUT, DELETE)</li><li>REST 원칙에 의해서 쓰면 인터넷 세상이 평화로워짐 (이라고 졸업논문씀)</li></ul></li><li>“웹 API 짤 때 REST 원칙을 지켜서 짜면 좋다”고 하는 <strong>API 디자인 패턴</strong></li><li>말 그대로 형식이기에 특정 기술에 제한받지 않음</li><li>총 6개의 원칙이 존재</li><li>cf. <a href="https://youtu.be/RP_f5dMoHFc">그런 REST API로 괜찮은가</a></li><li>cf. 옛날에는 SOAP라는 걸 사용했다고 함</li></ul><hr><h2 id="2-1-REST-6-원칙"><a href="#2-1-REST-6-원칙" class="headerlink" title="2.1 REST 6 원칙"></a>2.1 REST 6 원칙</h2><h3 id="2-1-1-Uniform-Interface⭐"><a href="#2-1-1-Uniform-Interface⭐" class="headerlink" title="2.1.1 Uniform Interface⭐"></a>2.1.1 Uniform Interface⭐</h3><p><strong>인터페이스는 일관성이 있어야한다</strong></p><ul><li><strong>하나의 URL로는 하나의 데이터</strong>를 가져와야함 (하나를 가져오기 위한 두개의 URL을 만들지 말자)</li><li><strong>간결하고 예측가능하게 짜세요</strong> (URL 하나를 알면 둘을 알게)</li><li><strong>URL 이름짓기 관습을</strong> 잘 따라주세요</li></ul><blockquote><p>💡 URI 와 URL</p><ul><li><code>URI</code> : <strong>자료를 넘버링하고 분류하고 지칭하는 방법</strong></li><li><code>URL</code> : <strong>URL과 비슷하지만 조금 더 큰 의미</strong></li></ul></blockquote><hr><h3 id="2-1-2-Client-server-역할-구분"><a href="#2-1-2-Client-server-역할-구분" class="headerlink" title="2.1.2 Client-server 역할 구분"></a>2.1.2 Client-server 역할 구분</h3><p>고객들은 URL 하나만 알면, 서버에 있는 자료를 갖다쓸 수 있습니다.<br><strong>고객에게 서버역할을 맡기거나 고객에게 DB에 있는 자료를 직접 꺼내라고 하든지 그런 식으로 코드를 짜면 안된다</strong>.</p><hr><h3 id="2-1-3-Stateless"><a href="#2-1-3-Stateless" class="headerlink" title="2.1.3 Stateless"></a>2.1.3 Stateless</h3><p><strong>요청들은 각각 독립적으로 처리</strong>되어야 한다.</p><ul><li>요청1이 성공해야 요청2를 보내주고, <strong>요청간의 의존성이 존재하는 코드를 짜시면 안됩니다</strong>.</li><li>다시 말해, <strong>요청하나 만으로 자료를 가져오기 충분하도록 요청에 필요한 모든 정보들을 실어 보내는게 좋다</strong></li></ul><hr><h3 id="2-1-4-Cacheable"><a href="#2-1-4-Cacheable" class="headerlink" title="2.1.4 Cacheable"></a>2.1.4 Cacheable</h3><ul><li><strong>요청을 통해 보내는 자료들은 캐싱이 가능해야 한다.</strong></li><li><strong>캐싱가능하다고 표시하거나 캐싱 기간을 설정</strong>해주어야 한다</li></ul><blockquote><p>💡 캐싱(Caching)</p><p>네이버를 방문하면 브라우저는 자동으로 자주 사용하는 이미지 파일, CSS 파일 등을 하드에 저장해놓습니다.<br>e.g. 별로 바뀔일 없는 네이버 로고나 아이콘</p><p><strong>하드에 저장해놓고 네이버 방문할 때 “네이버서버에 네이버 로고주세요~”라고 요청하지 않고 하드에서 불러옵니다</strong>.<br>이 행위를 <strong>캐싱</strong>이라고 합니다.</p></blockquote><hr><h3 id="2-1-5-Layered-System"><a href="#2-1-5-Layered-System" class="headerlink" title="2.1.5 Layered System"></a>2.1.5 Layered System</h3><p><strong>여러개의 레이어를 거쳐서 요청을 처리하게 만들어도 된다</strong></p><ul><li>요청처리하는곳, DB에 저장하는곳 이런 여러가지 단계를 거쳐서 요청을 처리해도 된다.</li></ul><hr><h3 id="2-1-6-Code-on-Demand"><a href="#2-1-6-Code-on-Demand" class="headerlink" title="2.1.6 Code on Demand"></a>2.1.6 Code on Demand</h3><p>서버는 <strong>고객에게 실제 실행가능한 코드를 전송</strong>해줄 수도 있습니다.</p><hr><h2 id="2-2-좋은-URL-이름짓기-관습"><a href="#2-2-좋은-URL-이름짓기-관습" class="headerlink" title="2.2 좋은 URL 이름짓기 관습"></a>2.2 좋은 URL 이름짓기 관습</h2><ul><li>instagram.com&#x2F;explore&#x2F;tags&#x2F;kpop</li><li>instagram.com&#x2F;explore&#x2F;tags&#x2F;food</li><li>facebook.com&#x2F;natgeo&#x2F;photos</li><li>facebook.com&#x2F;bbc&#x2F;photos</li></ul><p>위 URL은 좋은 API들입니다.<br>왜냐면 <code>facebook.com/bbc/photos</code> 이거만 봐도 BBC 뉴스 페북 계정의 사진첩인지 알 수 있습니다.</p><p>정리하면 이런 특징을 가지고 있는데, 따라하면 됩니다.</p><ul><li>단어들을 <strong>동사보다는 명사 위주</strong>로 구성</li><li>응용해서 <strong>다른 정보들을 쉽게 가져올 수 있을 정도로 일관성</strong> 있음</li><li><strong>대충 봐도 어떤 정보가 들어올지 예측이 가능해야</strong> 함</li><li>띄어쓰기는 <strong>언더바(_)대신 대시(-)기호</strong> 사용</li><li><strong>파일 확장자 쓰지 말기</strong> (<code>.html</code> 이런거)</li><li><strong>하위 문서들을 뜻할 땐 &#x2F; 기호를 사용</strong>함 (하위폴더같은 느낌)</li></ul><p>여러가지가 있습니다. 이것만 잘 지켜주시면 예쁜 서버 API들이 완성됩니다.</p><hr><h2 id="2-3-HTTP-메서드"><a href="#2-3-HTTP-메서드" class="headerlink" title="2.3 HTTP 메서드"></a>2.3 HTTP 메서드</h2><p>메서드들이 특정 용도에 제한되어 있지 않음. POST 하나로 데이터 읽고 수정하고 지우고 다 할 수 있지만,<br>각 요청의 의도에 맞게 <strong>RESTful하게 API를 만들기 위해서는 목적에 따라 구분해서 사용</strong>해야 함</p><ul><li><p><code>GET</code> : 데이터를 Read(조회)할 떄 사용</p><ul><li><strong>가져오다</strong>라는 뜻</li></ul></li><li><p><code>POST</code> (BODY 포함)</p><ul><li>새로운 정보를 Create(추가)하는데 사용</li><li>Body에 새 데이터 정보를 실어서 보냄</li><li><strong>게시하다</strong>라는 뜻</li></ul></li><li><p><code>PUT</code> (BODY 포함)</p><ul><li><strong>집어넣다</strong>라는 뜻</li></ul></li><li><p><code>PATCH</code> (BODY 포함)</p><ul><li><strong>고치다</strong>라는 뜻</li><li>데이터가 변경될 때, PUT 또는 PATCH를 사용해서 변경(Update)될 새 정보들을 Body에 실어서 보냄</li><li>PUT과 PATCH는 쓰는 곳마다 다르지만,</li><li>정석은<ul><li>PUT은 정보를 통쟤로 변경할 떄</li><li>PATCH는 일부 정보만 특정 방식으로 변경할 떄</li></ul></li></ul></li><li><p><code>DELETE</code> : 데이터 삭제 요청</p></li></ul><hr><h1 id="3-AJAX"><a href="#3-AJAX" class="headerlink" title="3. AJAX"></a>3. AJAX</h1><p><code>AJAX</code> &#x3D; 서버에 GET, POST 요청을 할 때 <strong>새로고침 없이</strong> 데이터를 주고받을 수 있게 도와주는 간단한 브라우저 기능</p><ul><li>사용자가 한 페이지 내에서 머무르면서, 필요한 데이터를 서버에서 받아와서, <strong>부분적으로만 업데이트</strong></li><li>e.g. 새로고침 없이도 쇼핑몰 상품을 가져올 수도 있고, 새로고침 없이도 댓글을 서버로 전송 가능</li><li>장점<ul><li>웹페이지의 속도향상</li><li>서버의 처리가 완료될 때까지 기다리지 않고 처리가 가능</li><li>서버에서 Data만 전송하면 되므로 전체적인 코딩의 양이 줄어듬</li><li>기존 웹에서는 불가능했던 다양한 UI를 가능</li></ul></li><li>단점<ul><li>히스토리 관리가 안됨</li><li>페이지 이동없는 통신으로 인한 보안상의 문제 존재</li><li>연속으로 데이터를 요청하면 서버 부하가 증가</li><li>…</li></ul></li></ul><p>AJAX를 개념이라서 이를 구현하기 위한 다양한 라이브러리를 사용함</p><ul><li>XMLHttpRequest<ul><li>1998년에 개발</li><li>이벤트 기반</li><li>초기 API 구현 때, 브라우저 간의 불일치가 존재</li><li>브라우저간 불일치를 메꾸기 위해 jQuery 사용</li><li>2005년, XMLHttpRequest API 방식이 공식적인 AJAX라는 이름을 가짐</li><li>구글에서 AJAX를 이용해서 Gmail, Google Maps같은 서비스 등의 서비스를 만듬</li><li>이것이 현재 널리 쓰이고 있는 <code>SPA(Single Page Application)</code>임</li></ul></li><li>JQuery<ul><li>2006년에 개발</li><li>크로스 브라우징 이슈를 해결하고, DOM API를 쉽게 사용하기 위해 나옴</li></ul></li><li>Fetch<ul><li>JS 기본내장 API</li><li>Promise 기반</li><li>이미 잘 명세된 API가 제공됨으로써 브라우저간의 불일치가 없음</li></ul></li><li>AXIOS, query 등 다양한 라이브러리 등이 존재</li></ul><hr><h1 id="4-네트워크-통신-fetch-하는-법"><a href="#4-네트워크-통신-fetch-하는-법" class="headerlink" title="4. 네트워크 통신(fetch)하는 법"></a>4. 네트워크 통신(fetch)하는 법</h1><h2 id="4-1-기본-사용법"><a href="#4-1-기본-사용법" class="headerlink" title="4.1 기본 사용법"></a>4.1 기본 사용법</h2><ul><li>cf. fetch : (어딘가에서 무언가를) 가지고 오다라는 의미</li><li>fetch : 서버에서 데이터를 가져오는 것</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url, options)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;response:&quot;</span>, response))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error:&quot;</span>, error));</span><br></pre></td></tr></table></figure><ul><li>첫번째 인자로 <strong>URL</strong></li><li>두번째 인자로 <strong>옵션 객체를 받고, Promise 타입의 객체를 반환</strong><ul><li>반환된 객체에는, API 호출이 <ul><li>성공했을 경우에는 <strong>응답(response) 객체</strong>를 resolve하고, </li><li>실패했을 경우에는 <strong>예외(error) 객체</strong>를 reject</li></ul></li></ul></li><li>cf. <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">MDN fetch</a></li><li><strong>옵션(options) 객체</strong> : HTTP 방식(method), HTTP 요청 헤더(headers), HTTP 요청 전문(body) 등을 설정</li><li><strong>응답(response) 객체</strong> :HTTP 응답 상태(status), HTTP 응답 헤더(headers), HTTP 응답 전문(body) 등을 읽어올 수 있음</li></ul><hr><h2 id="4-2-가짜-데이터-준비"><a href="#4-2-가짜-데이터-준비" class="headerlink" title="4.2 가짜 데이터 준비"></a>4.2 가짜 데이터 준비</h2><p><code>JSONPlaceholder</code></p><ul><li><p>JSON 데이터를 가져올 API 서버가 필요하지만, </p></li><li><p>DB를 설치하고 스프링 또는 Node.js를 이용해 백엔드 환경을 구성하게 되면 엄청난 에너지 소모됨</p></li><li><p>그래서 웹 상에서 Github 같은 곳에 데이터를 저장해두거나 무료 가상 API 등을 제공해줌</p></li><li><p>그 <strong>무료 가상 REST API 서비스</strong> 중 하나가 JSONPlaceholder란 곳임</p></li><li><p><a href="https://jsonplaceholder.typicode.com/">https://jsonplaceholder.typicode.com/</a></p><ul><li>가짜 데이터가 필요할 때마다 사용할 수 있는 무료 온라인 REST API</li><li>6가지의 데이터 API 주소를 호출해서 데이터를 JSON으로 받아 볼 수 있다.</li></ul></li><li><p>다음과 같이 JSONPlacehoder 주소에 리소스 접미어를 붙여주면, 가짜 데이터를 보내줌</p><ul><li><a href="https://jsonplaceholder.typicode.com/posts">https://jsonplaceholder.typicode.com/posts</a></li><li><a href="https://jsonplaceholder.typicode.com/comments">https://jsonplaceholder.typicode.com/comments</a></li></ul></li></ul><hr><h2 id="4-3-CORS-에러"><a href="#4-3-CORS-에러" class="headerlink" title="4.3 CORS 에러"></a>4.3 CORS 에러</h2><p><strong>CORS (Cross-Origin Resource Sharing, 교차 출처 리소스 공유)</strong> 에러</p><ul><li><code>Client</code> : localhost:3000 </li><li><code>Server</code> : localhost:4000 (react 개발 서버)<ul><li>origin이 다르다. 클라이언트에서 서버에서 데이터를 막 꺼내면 안됨</li><li>origin이 다르다는 건 데이터를 다룰 떄, 조심해야 된다는 소리</li><li>예를들어, naver.com, google.com의 origin이 다른데,</li><li><strong>naver에서 google의 데이터를 꺼내가려고 하면 CORS 에러가 발생</strong>함</li><li>그래서 웹 개발자는 origin이 다르면 무조건 막는 CORS를 숙지</li><li>CORS를 풀려면, 서버에서 해결해야 함</li></ul></li></ul><hr><h2 id="4-4-실습"><a href="#4-4-실습" class="headerlink" title="4.4 실습"></a>4.4 실습</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// **** fetch : 서버에서 데이터 받아오기</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// response : 받아온 데이터</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// json() : body안에 json 문자열을 객체로 변환해주는 함수, promise를 return</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">fetch</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(json));</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>VSCode의 Live Server 확장 기능으로 켜서, </p><ul><li>콘솔 탭을 확인해보면, <strong>가짜 데이터 서버에서 데이터를 객체 형태로 가지고 온 것</strong>을 알 수 있습니다.</li><li>네트워크 탭에 가서 새로고침 후 확인해보면, <strong>응답 상태가 200 ok로 데이터를 갖고 온 것</strong>을 알 수 있습니다.</li></ul><hr><h1 id="5-AXIOS-라이브러리"><a href="#5-AXIOS-라이브러리" class="headerlink" title="5. AXIOS 라이브러리"></a>5. AXIOS 라이브러리</h1><p>JS에 기본 내장되어 있는 fetch api와 유사한 기능을 하지만 차이점이 몇가지 존재합니다.</p><table><thead><tr><th align="center"></th><th align="center">fetch API</th><th align="center">AXIOS API</th></tr></thead><tbody><tr><td align="center">설치 유무</td><td align="center">모던 브라우저 기본 내장 API라 설치 필요X</td><td align="center">추가적인 설치 필요</td></tr><tr><td align="center">요청객체</td><td align="center">url 없음</td><td align="center">url 있음</td></tr><tr><td align="center">XSRF</td><td align="center">별도 보호 없음</td><td align="center">보호해줌</td></tr><tr><td align="center">속성</td><td align="center">body 속성 사용</td><td align="center">data 속성 사용</td></tr><tr><td align="center">JSON 데이터 형식</td><td align="center">.json()으로 json으로 변환해야 함</td><td align="center">자동으로 JSON 형식으로 변환됨</td></tr><tr><td align="center">HTTP 요청 가로채기</td><td align="center">안됨</td><td align="center">됨</td></tr><tr><td align="center">브라우저 지원</td><td align="center">크롬 42+, 파이어폭스 39+, Edge 14+, Safari 10.1+</td><td align="center">좀 더 많은 브라우저 지원</td></tr><tr><td align="center">등등…</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>그래서 간단한 예제를 테스트할 떄는 fetch API를 쓰고, 실제 개발할 떄는 AXIOS API를 씀</p><ul><li>cf. <a href="https://axios-http.com/">https://axios-http.com/</a></li></ul><hr><h2 id="5-1-설치"><a href="#5-1-설치" class="headerlink" title="5.1 설치"></a>5.1 설치</h2><ul><li>cf. <a href="https://axios-http.com/docs/intro">https://axios-http.com/docs/intro</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 자신이 사용하는 패키지 매니저로 프로젝트에 추가</span></span><br><span class="line">npm install axios</span><br><span class="line">yarn add axios</span><br><span class="line"></span><br><span class="line"><span class="comment"># 설치하고 난 뒤 import axios from &#x27;axios&#x27;</span></span><br></pre></td></tr></table></figure><p>cdn으로도 사용 가능함</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="5-2-HTTP-메서드-요청하는-법"><a href="#5-2-HTTP-메서드-요청하는-법" class="headerlink" title="5.2 HTTP 메서드 요청하는 법"></a>5.2 HTTP 메서드 요청하는 법</h2><p>Promise 기반 HTTP 비동기 통신 라이브러리로 HTTP 메서드를 전부 지원함</p><ul><li><code>axios.get(&quot;url&quot; [, cofnig])</code></li><li><code>axios.post(&quot;url&quot; [, data[, config]])</code></li><li><code>axios.put(&quot;url&quot; [, data[, config]])</code></li><li><code>axios.patch(&quot;url&quot; [, data[, config]])</code></li><li><code>axios.delete(&quot;url&quot; [, cofnig]);</code></li></ul><hr><h2 id="5-3-사용법"><a href="#5-3-사용법" class="headerlink" title="5.3 사용법"></a>5.3 사용법</h2><h3 id="5-2-1-Promise를-이용한-기본-사용법"><a href="#5-2-1-Promise를-이용한-기본-사용법" class="headerlink" title="5.2.1 Promise를 이용한 기본 사용법"></a>5.2.1 Promise를 이용한 기본 사용법</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ID로 사용자 요청</span></span><br><span class="line">axios</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span><br><span class="line">  <span class="comment">// 응답(성공)</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 응답(실패)</span></span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 응답(항상 실행)</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><hr><h3 id="5-2-2-async-await를-이용한-사용법"><a href="#5-2-2-async-await를-이용한-사용법" class="headerlink" title="5.2.2 async await를 이용한 사용법"></a>5.2.2 async await를 이용한 사용법</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>추가로 인스턴스를 하나 생성해서 axios 기본 세팅을 할 수도 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;foobar&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="5-4-실습"><a href="#5-4-실습" class="headerlink" title="5.4 실습"></a>5.4 실습</h2><ul><li><a href="https://reqres.in/?fbclid=IwAR0hhe_cxVwzJHgrT6siWRQloSODOwDd2QQVlmpob3N0a6SyJXiYSVXd12U">reqres</a> 이라는 FakeServer를 사용함</li><li>홈페이지에 POST 요청 중 LOGIN - SUCCESSFUL의 유저를 사용함</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eve.holt@reqres.in&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cityslicka&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h3 id="5-4-1-POST"><a href="#5-4-1-POST" class="headerlink" title="5.4.1 POST"></a>5.4.1 POST</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>AXIOS 연습<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;email 입력하셈&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;비밀번호 입력하셈&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pw&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;onLoggin()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;로그인&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">onLoggin</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> email = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;email&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> password = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pw&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&#x27;https://reqres.in/api/login&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">email</span>: email.<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">password</span>: password.<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(error);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>VSCode의 Live Server 확장 기능으로 켜서, </p><ul><li>이메일 : <code>eve.holt@reqres.in</code>, 비번 : <code>cityslicka</code> 입력</li><li>콘솔 탭을 확인해보면, <strong>가짜 데이터 서버에서 데이터를 객체 형태로 가지고 온 것</strong>을 알 수 있습니다.</li><li>네트워크 탭에 가서 새로고침 후 확인해보면, <strong>응답 상태가 200 ok로 데이터를 갖고 온 것</strong>을 알 수 있습니다.</li><li><a href="https://reqres.in/?fbclid=IwAR0hhe_cxVwzJHgrT6siWRQloSODOwDd2QQVlmpob3N0a6SyJXiYSVXd12U">reqres</a> 가서 다른 요청 객체들도 참고</li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-14-asynchronous(비동기) - 작성중</title>
      <link href="/2023/01/04/Front-JS-Basic-14-Asynchronous/"/>
      <url>/2023/01/04/Front-JS-Basic-14-Asynchronous/</url>
      
        <content type="html"><![CDATA[<h1 id="1-자바스크립트-실행-순서-콜스택"><a href="#1-자바스크립트-실행-순서-콜스택" class="headerlink" title="1. 자바스크립트 실행 순서(콜스택)"></a>1. 자바스크립트 실행 순서(콜스택)</h1><p>JS를 동작하는 환경이라면 항상 JavaScript Engine이 포함되어 있습니다<br>작성한 코드를 JavaScript Engine이 한 줄씩 읽고 번역하고 실행합니다.</p><ul><li><code>동기화</code> &#x3D; 특정 작업 사이에 <strong>일정한 간격을 두고 작업이 발생하도록 시간 간격을 조정</strong>하는 것<ul><li>한가지 동, 기약할 기, 될 화</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 📝 반환되기 전에 오래걸리는 for이 있다면, 최종결과값이 반환되는데 오래걸림</span></span><br><span class="line">  <span class="comment">// 📝 이렇게 함수끼리 긴밀하게 연결된 경우를 &#x27;동기화&#x27;라고 말함</span></span><br><span class="line">  <span class="comment">// 📝 JavaScript는 기본적으로 동기적으로 수행됨</span></span><br><span class="line">  <span class="comment">// for (let i = 0; i &lt; 100000; i++);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">a</span>() + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">b</span>() + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;시작했다!&#x27;</span>);</span><br><span class="line"><span class="comment">// c -&gt; b -&gt; a 순으로 호출되고, Call Stack에 이 순서대로 저장됨</span></span><br><span class="line"><span class="comment">// Call Stack에서 반환될 때는 반대로, a -&gt; b -&gt; c순으로 반환됨</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">c</span>(); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/js-14-1.png" alt="js-14-1"></p><ul><li><code>Memory Heap</code> : 소스코드에서 <strong>객체를 동적으로 생성하면, Memory Heap에 생성</strong></li><li><code>Call Stack</code> : <strong>함수 실행 순서를 기억</strong><ul><li>전역에서 C를 호출하면, C가 <code>Call Stack</code>에 들어오고,</li><li>C에서 B를 호출하고, B에서도 A를 호출하면, C→B→A 순서대로 <code>Call Stack</code>에 들어옴</li></ul></li></ul><p>JS는 <code>동기적(synchronous)</code>으로 동작합니다. 호이스팅이 된 후로 코드가 작성된 순서에 따라 한 줄씩 동기적으로 실행된다.</p><hr><h1 id="2-Callback"><a href="#2-Callback" class="headerlink" title="2. Callback"></a>2. Callback</h1><h2 id="2-1-콜백-함수"><a href="#2-1-콜백-함수" class="headerlink" title="2.1 콜백 함수"></a>2.1 콜백 함수</h2><ul><li>정의 : 함수에 파라미터로 들어가는 함수</li><li>용도 : 순차적으로 실행하고 싶을 떄 사용</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// addEventListener : 함수 안에 function()이 콜백함수</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 1초 뒤 실행하는 함수 setTimeout 안에 function() 역시 콜백함수</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>콜백 함수를 만드는 방법</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">first</span>(<span class="params">파라미터</span>) &#123;</span><br><span class="line">  파라미터();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">seceond</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title function_">first</span>(seceond);</span><br></pre></td></tr></table></figure><p>이제는 단순히 콜백함수를 만드는 건 쓸모가 없습니다. 특정 코드를 순차적으로 정하고 싶을 떄만 사용합니다.</p><hr><h2 id="2-2-JavaScript-Runtime-환경"><a href="#2-2-JavaScript-Runtime-환경" class="headerlink" title="2.2 JavaScript Runtime 환경"></a>2.2 JavaScript Runtime 환경</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/js-14-2.png" alt="js-14-2"></p><p><strong>JS 언어 자체는 동기적으로 동작</strong>하지만, JavaScript Runtime 환경(&#x3D;호스트 환경)에서 제공해주는 다양한 API들이 있습니다.<br>브라우저라면, Web API, Node라면 Node API 등이 있습니다. </p><p><strong>API들은 비동기적으로 동작</strong>하기 떄문에(&#x3D;멀티 쓰레드환경으로 동작하기 떄문에)<br>다양한 일들을 <strong>동시다발적으로 처리</strong>(&#x3D;비동기화)할 수 있습니다.</p><p>예를 들어, 다른 웹 서버에 네트워크 통신을 주고받을 수 있는 fetch와 setTimeout API도 비동기적입니다.</p><p>가령 3초 뒤에 실행하고 싶어서 <code>setTimeout:(Test, 3000);</code>이라고 가정해봅시다.<br>그리고 타이머가 가동되는 동안 다른 코드를 하나씩 끝내놓고,<br>타이머가 끝나면 setTimeout은 던져놓은 <code>callback 함수</code>를 <code>Task Queue</code>라는 곳에 전달해줍니다.</p><p>그러면 <code>Event Loop</code>라는 녀석이 <code>Call Stack</code>과 <code>Task Queue</code>를 감시하면서 <code>Call Stack</code>이 비어있다면,<br><code>Task Queue</code> 작업을 <code>Call Stack</code>으로 전달합니다. 그리고 <code>Call Stack</code>에서 <code>callback 함수</code>를 수행하는 것이죠.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">execute</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>), <span class="number">3000</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">execute</span>(); <span class="comment">// 1, 3이 출력되고 3초 뒤에 2가 출력</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-3-예제"><a href="#2-3-예제" class="headerlink" title="2.3 예제"></a>2.3 예제</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// **** JS는 동기적(synchronous)으로 동작</span></span><br><span class="line"><span class="comment">// - 호이스팅이 된 이후부터 코드가 작성된 순서에 맞춰서 하나하나씩 동기적으로 실행됩니다.</span></span><br><span class="line"><span class="comment">// - 호이스팅: var, function같은 선언들이 제일 위로 올라가는 것</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 동기적(Synchronous) callback</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printImmediately</span>(<span class="params">print</span>) &#123;</span><br><span class="line">  <span class="title function_">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">printImmediately</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 비동기적(Asynchronous) callback</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printWithDelay</span>(<span class="params">print, timeout</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(print, timeout);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">printWithDelay</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async callback&#x27;</span>), <span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p>콘솔창에는</p><blockquote><p>1 → 3 → hello →  2 →  async callback</p><ul><li>hello 는 콜백이지만 동기적으로 호출</li><li>2와 async callback이 비동기적으로 호출<ul><li>이런 콜백함수를 계속 묶어나가서 쌓이게 되는 것을 콜백 지옥이라고 표현</li></ul></li></ul></blockquote><hr><h2 id="2-4-Callback-Hell"><a href="#2-4-Callback-Hell" class="headerlink" title="2.4 Callback Hell"></a>2.4 Callback Hell</h2><p>단순한 코드를 작성할 때는 위와 같이 전통적인 방식으로 콜백 함수를 통해 비동기 처리를 해도 큰 문제가 발생하지 않습니다.<br>하지만, <strong>콜백 함수를 중첩해서 연쇄적으로 호출해야하는 복잡한 코드</strong>의 경우,<br><strong>계속되는 들여쓰기 때문에 코드 가독성이 현저하게 떨어지게</strong> 됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserStorage</span> &#123;</span><br><span class="line">  <span class="title function_">loginUser</span>(<span class="params">id, password, onSuccess, onError</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ((id === <span class="string">&#x27;ellie&#x27;</span> &amp;&amp; password === <span class="string">&#x27;dream&#x27;</span>) || (id === <span class="string">&#x27;coder&#x27;</span> &amp;&amp; password === <span class="string">&#x27;academy&#x27;</span>)) &#123;</span><br><span class="line">        <span class="title function_">onSuccess</span>(id);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">onError</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;not found&#x27;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getRoles</span>(<span class="params">user, onSuccess, onError</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (user === <span class="string">&#x27;ellie&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">onSuccess</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;ellie&#x27;</span>, <span class="attr">role</span>: <span class="string">&#x27;admin&#x27;</span> &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">onError</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;no access&#x27;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class를 만들어 id, password를 입력받음</span></span><br><span class="line"><span class="keyword">const</span> userStorage = <span class="keyword">new</span> <span class="title class_">UserStorage</span>();</span><br><span class="line"><span class="keyword">const</span> id = <span class="title function_">prompt</span>(<span class="string">&#x27;enter your id&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> password = <span class="title function_">prompt</span>(<span class="string">&#x27;enter your passrod&#x27;</span>);</span><br><span class="line"></span><br><span class="line">userStorage.<span class="title function_">loginUser</span>(id, password, <span class="function">(<span class="params">user</span>) =&gt;</span> &#123; <span class="comment">// 로그인 성공시 실행</span></span><br><span class="line">  userStorage.<span class="title function_">getRoles</span>( <span class="comment">// 로그인 성공하면 유저 역할 요청해서 받기</span></span><br><span class="line">    user, <span class="comment">// 유저 데이터 받고</span></span><br><span class="line">    <span class="function">(<span class="params">userWithRole</span>) =&gt;</span> &#123; <span class="comment">// 이것을 처리하는 콜백 하나</span></span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">`Hello <span class="subst">$&#123;userWithRole.name&#125;</span>, you have a <span class="subst">$&#123;userWithRole.role&#125;</span> role`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="comment">// 에러 시 처리할 콜백</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="comment">// 로그인 실패시 실행</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>JS 개발자들 사이에서 소위 <a href="http://callbackhell.com/">콜백 지옥</a>이라고 불리는 이 문제를 해결하기 위해 여러가지 방법들이 논의되었고,<br>그 중 하나가 Promise 입니다. 계속 괄호를 타고 안으로 들어가서 이를 <code>Callback Hell (콜백지옥)</code>이라고 부릅니다.</p><hr><h1 id="3-Promise"><a href="#3-Promise" class="headerlink" title="3. Promise"></a>3. Promise</h1><p>프로미스는 무겁고 오래 걸리는 일이 있다면, 코드 내부에서 좀 더 비동기적으로 처리할 수 있게 도와줍니다.<br><strong>일이 끝나면 원하는 일을 하게 해준다</strong>고 <code>약속(promise)</code>을 합니다.</p><blockquote><p>현실세계의 예</p><ul><li>어떤 사람이 강의를 미리 만들겠다고 함</li><li>학생이 강의가 완성되지 않았지만, Promise로 미리 수업에 등록함</li><li>나중에 강의가 완성되면, 강의가 완료되었다고 학생에게 이메일을 전송</li></ul><p>이것이 가능한 이유는 Promise 객체를 사용했기 때문</p></blockquote><p><code>Promise Object</code>는 자바스크립트 내장 객체입니다. 프로미스는 2가지의 개념을 중심으로 이해하시면 됩니다.</p><ol><li><code>State</code>: 주어진 일을 수행하는 중인지 이미 끝난상태인지 확인하는 것</li><li>producer(정보 제공자)&#x2F;consumer (정보 소비자) 차이 이해를 하는 것</li></ol><blockquote><p>일단 new Promise()로 생성된 변수를 콘솔창에 출력해보시면 현재 상태를 알 수 있습니다.</p><ul><li>Promise를 수행중일 때 -&gt; <code>pending(대기)</code>상태</li><li>pending 상태가 정상적으로 끝나면 -&gt; <code>fulfilled(이행)</code>상태</li><li>파일을 찾을 수 없거나 네트워크에 문제가 생기면 -&gt; <code>rejected(거부)</code>상태</li></ul><p>이렇게 프로미스 오브젝트들은 3개 상태가 있습니다. 그리고 성공을 실패나 대기상태로 다시 되돌릴 순 없습니다.</p><p>cf. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">MDN Promise</a></p></blockquote><hr><h2 id="3-1-기본-사용법"><a href="#3-1-기본-사용법" class="headerlink" title="3.1 기본 사용법"></a>3.1 기본 사용법</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 프로미스 = <span class="keyword">new</span> <span class="title class_">Promise</span>(); <span class="comment">// Promise 객체 생성</span></span><br><span class="line"></span><br><span class="line">프로미스</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 프로미스가 성공일 경우 실행할 코드</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 프로미스가 실패일 경우 실행할 코드</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 프로미스가 성공/실패와 상관 없이 어떤 기능을 마지막으로 실행하고 싶을 때</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>new Promise()</code> 문법으로 프로미스라는 변수 오브젝트를 하나 생성하면,<br>프로미스라는 변수에다가 <code>then()</code>을 붙여서 실행가능합니다.<br>코드가 실행이 실패했을 경우엔 <code>catch()</code> 함수 내의 코드를 실행시켜줍니다.</p><p><code>Promise</code>를 를 쉽게 정의하면, <strong>성공&amp;실패 판정 기계</strong>입니다.</p><hr><h2 id="3-2-Producer"><a href="#3-2-Producer" class="headerlink" title="3.2 Producer"></a>3.2 Producer</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// network 통신, read files 등의 haeavy work를 수행</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;doing something...&#x27;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;ellie&#x27;</span>), <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>new 키워드를 통해 promise 객체를 만들 수 있다.</p><ul><li><code>resolve 함수</code> : 기능을 <strong>정상적으로 수행해서 마지막에 최종 데이터를 전달</strong></li><li><code>reject 함수</code> : 기능을 <strong>수행하다가 중간에 문제가 생기면 호출</strong></li><li><code>&lt;pending&gt;</code> : 판정 대기중</li></ul><p>promise가 만들어지는 순간 excutor가 실행됨</p><ul><li>만약 네트워크 요청을 사용자가 요구했을 때만 해야하는 경우라면 (e.g. 버튼을 눌렀을 때 네트워크 요청) </li><li>위 코드처럼 작성했을 때는 사용자가 요청하지 않았는데 불필요한 통신이 일어날 수 있음</li></ul><p><strong>프로미스가 생성된 순간 executor라는 callback 함수가 바로 실행되기 때문에 이 점에 유의하면서 코드를 작성해야 한다</strong></p><hr><h2 id="3-3-Consumers"><a href="#3-3-Consumers" class="headerlink" title="3.3 Consumers"></a>3.3 Consumers</h2><h3 id="3-3-1-resolve-then"><a href="#3-3-1-resolve-then" class="headerlink" title="3.3.1 resolve - then"></a>3.3.1 resolve - then</h3><ul><li><strong>promise 내부에서 기능이 정상적으로 수행</strong>되고 <strong>마지막에 최종 데이터를 전달</strong>하려고 resolve 함수 호출함</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;예를 들어, network 통신, read files 등의 무거운 작업를 수행...&#x27;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;메시&#x27;</span>), <span class="number">2000</span>); <span class="comment">// resolve가 &#x27;메시&#x27;라는 값을 전달</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 프로미스가 정상적으로 수행되면</span></span><br><span class="line"><span class="comment">// 마지막에 resolve라는 콜백함수를 통해 전달된 값이 value로 들어옴</span></span><br><span class="line">promise</span><br><span class="line">  <span class="comment">// 프로미스가 성공일 경우 실행할 코드</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 프로미스가 실패일 경우 실행할 코드</span></span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 프로미스가 성공/실패와 상관 없이 어떤 기능을 마지막으로 실행하고 싶을 때</span></span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="3-3-2-reject-catch"><a href="#3-3-2-reject-catch" class="headerlink" title="3.3.2 reject - catch"></a>3.3.2 reject - catch</h3><ul><li><strong>promise 내부에서 실행되는 일이 실패</strong>하였을 때는 reject를 호출함</li><li>보통 error 오브젝트로 값을 전달함</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;예를 들어, network 통신, read files 등의 무거운 작업를 수행...&#x27;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;no network&#x27;</span>)), <span class="number">2000</span>); <span class="comment">// reject로 변경하면 uncaught error가 발생</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// catch를 사용해서 에러 발생시 어떻게 처리할 건지에 대한 콜백함수를 등록</span></span><br><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="3-4-Promise-축약-버전"><a href="#3-4-Promise-축약-버전" class="headerlink" title="3.4 Promise 축약 버전"></a>3.4 Promise 축약 버전</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchEgg</span>(<span class="params">chicken</span>) &#123;</span><br><span class="line">  <span class="comment">// new Promise((resolve, reject)) 축약 버전</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">`<span class="subst">$&#123;chicken&#125;</span> =&gt; 🥚`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fryEgg</span>(<span class="params">egg</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">`<span class="subst">$&#123;egg&#125;</span> =&gt; 🍳`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getChicken</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 여기서 에러가 발생했다고 가정</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;치킨을 가지고 올 수 없음!&#x27;</span>));</span><br><span class="line">  <span class="comment">// return Promise.resolve(`🪴 =&gt; 🐓`);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getChicken을 가져온다면</span></span><br><span class="line"><span class="title function_">getChicken</span>()</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;🐔&#x27;</span>) <span class="comment">// 에러가 발생했다면, 🐔를 리턴</span></span><br><span class="line">  .<span class="title function_">then</span>(fetchEgg) <span class="comment">// getChicken이 다 수행되었다면,</span></span><br><span class="line">  .<span class="title function_">then</span>(fryEgg) <span class="comment">// fetchEgg이 다 수행되었다면,</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 🐔 =&gt; 🥚 =&gt; 🍳</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-5-Promise-chaining"><a href="#3-5-Promise-chaining" class="headerlink" title="3.5 Promise chaining"></a>3.5 Promise chaining</h2><p>then은 값을 전달할 수도 있고 promise를 전달 할 수도 있음!!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchNumber = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fetchNumber <span class="comment">// 1</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">num</span> =&gt;</span> num * <span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">num</span> =&gt;</span> num * <span class="number">3</span>) <span class="comment">// 6</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(num-<span class="number">1</span>), <span class="number">1000</span>); <span class="comment">// 5</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">num</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(num)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-6-Error-Handling"><a href="#3-6-Error-Handling" class="headerlink" title="3.6 Error Handling"></a>3.6 Error Handling</h2><h3 id="3-6-1-정상적인-경우-모두-resolve-인-경우"><a href="#3-6-1-정상적인-경우-모두-resolve-인-경우" class="headerlink" title="3.6.1 정상적인 경우(모두 resolve 인 경우)"></a>3.6.1 정상적인 경우(모두 resolve 인 경우)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getHen</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;🐔&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getEgg</span> = hen =&gt; </span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">`<span class="subst">$&#123;hen&#125;</span> =&gt; 🥚`</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">cook</span> = egg =&gt; </span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">`<span class="subst">$&#123;egg&#125;</span> =&gt; 🍳`</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">getHen</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">hen</span> =&gt;</span> <span class="title function_">getEgg</span>(hen))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">egg</span> =&gt;</span> <span class="title function_">cook</span>(egg))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">meal</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(meal));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과는 🐔 =&gt; 🥚 =&gt; 🍳</span></span><br><span class="line"><span class="comment">// 콜백함수를 전달할 때 받아오는 값이 하나이고 다음 함수를 바로 호출하는 경우에는 </span></span><br><span class="line"><span class="comment">// 다음처럼 조금 더 생략하여 사용 가능</span></span><br><span class="line"><span class="title function_">getHen</span>()</span><br><span class="line">  .<span class="title function_">then</span>(getEgg)</span><br><span class="line">  .<span class="title function_">then</span>(cook)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure><h3 id="3-6-2-에러가-포함된-경우-reject-가-포함된-경우"><a href="#3-6-2-에러가-포함된-경우-reject-가-포함된-경우" class="headerlink" title="3.6.2 에러가 포함된 경우(reject 가 포함된 경우)"></a>3.6.2 에러가 포함된 경우(reject 가 포함된 경우)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getHen</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;🐔&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getEgg</span> = hen =&gt; </span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`error! <span class="subst">$&#123;hen&#125;</span> =&gt; 🥚`</span>)), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">cook</span> = egg =&gt; </span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">`<span class="subst">$&#123;egg&#125;</span> =&gt; 🍳`</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">getHen</span>()</span><br><span class="line">  .<span class="title function_">then</span>(getEgg)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;<span class="keyword">return</span> <span class="string">&#x27;🥖&#x27;</span>&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(cook)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과는 🥖 =&gt; 🍳</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-7-Promise-API-병렬-처리"><a href="#3-7-Promise-API-병렬-처리" class="headerlink" title="3.7 Promise API (병렬 처리)"></a>3.7 Promise API (병렬 처리)</h2><p>Promise  API를 사용하면 코드를 더 가독성 좋게 작성할 수 있다.</p><h3 id="3-7-1-Promise-all"><a href="#3-7-1-Promise-all" class="headerlink" title="3.7.1 Promise.all"></a>3.7.1 Promise.all</h3><p>Promise 배열을 전달하게 되면 모든 Promise들이 병렬적으로 다 받을 때까지 모아줌</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">delay</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, ms));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getApple</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;🍎&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getBanana</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;🍌&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pickAllFruits</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Promise.all : 병렬적으로 한번에 모든 Promise들을 실행</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">getApple</span>(), <span class="title function_">getBanana</span>()])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">fruits</span> =&gt;</span> fruits.<span class="title function_">join</span>(<span class="string">&#x27; + &#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">pickAllFruits</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 결과는 🍎 + 🍌</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-7-2-Promise-race"><a href="#3-7-2-Promise-race" class="headerlink" title="3.7.2 Promise.race"></a>3.7.2 Promise.race</h3><p>가장 먼저 처리되는 프로미스의 결과(혹은 에러)를 반환한다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">delay</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, ms));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getApple</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;🍎&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getBanana</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">2000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;🍌&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pickOnlyOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Promise.race : 주어진 Promise중에 제일 빨리 수행된것을 출력</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">race</span>([<span class="title function_">getApple</span>(), <span class="title function_">getBanana</span>()])</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">pickOnlyOne</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 결과는 🍎</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-7-3-정리"><a href="#3-7-3-정리" class="headerlink" title="3.7.3 정리"></a>3.7.3 정리</h3><ul><li><code>Promise.all</code> : 병렬적으로 한번에 모든 Promise들을 실행<ul><li>Promise 배열을 전달하게 되면 모든 Promise들이 병렬적으로 다 받을 때까지 모아줌</li></ul></li><li><code>Promise.race</code> : 주어진 Promise중에 제일 빨리 수행된것을 출력<ul><li>가장 먼저 처리되는 프로미스의 결과(혹은 에러)를 반환</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getBanana</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;🍌&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getApple</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;🍎&#x27;</span>), <span class="number">3000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getOrange</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;no orange&#x27;</span>)); <span class="comment">// 에러가 발생하면</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// **** 바나나과 사과를 같이 가지고 오기</span></span><br><span class="line"><span class="comment">// 바나나 갖고오는데 1초, 사과 갖고오는데 3초, 총 4초 뒤에 바나나, 사과 출력</span></span><br><span class="line"><span class="title function_">getBanana</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">banana</span>) =&gt;</span></span><br><span class="line">    <span class="title function_">getApple</span>() <span class="comment">//</span></span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">apple</span>) =&gt;</span> [banana, apple])</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 Promise.all : 병렬적으로 한번에 모든 Promise들을 실행!</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">getBanana</span>(), <span class="title function_">getApple</span>()]) <span class="comment">// 1초 뒤 바나나, 3초 뒤 사과가 병렬 수행</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">fruits</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;all&#x27;</span>, fruits)); <span class="comment">// 총 3초 뒤에 바나나, 사과 출력</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 Promise.race : 주어진 Promise중에 제일 빨리 수행된것이 이김!</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([<span class="title function_">getBanana</span>(), <span class="title function_">getApple</span>()]) <span class="comment">//</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">fruit</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;race&#x27;</span>, fruit)); <span class="comment">// 먼저 출력되는 1초 뒤 바나나가 출력</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">getBanana</span>(), <span class="title function_">getApple</span>(), <span class="title function_">getOrange</span>()])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">fruits</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;all-error&#x27;</span>, fruits)) <span class="comment">// 모두 완료되야 실행됨</span></span><br><span class="line">  .<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([<span class="title function_">getBanana</span>(), <span class="title function_">getApple</span>(), <span class="title function_">getOrange</span>()])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">fruits</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;all-settle&#x27;</span>, fruits)) <span class="comment">// 성공, 실패를 둘 다 배열로 묶어서 리턴</span></span><br><span class="line">  .<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="4-async-x2F-await"><a href="#4-async-x2F-await" class="headerlink" title="4. async &#x2F; await"></a>4. async &#x2F; await</h1><p>프로미스의 장점은 Callback함수를 사용하지 않고, 좀 더 깔끔하게 사용할 수 있다는 장점이 있습니다.<br>그런데 <code>.then</code>으로 연결되어 있어서 <strong>가독성이 떨어집니다</strong>.<br>그래서 <strong>비동기적인 코드를 동기적인</strong>(&#x3D;절차적인) 형태로 사용할 수 있는 방법이 <code>async, await</code>입니다.</p><ul><li>Promise 위에 더 간편한 API를 제공</li><li>기존에 존재하는 것 위에 간편하게 쓸 수 있는 API를 제공하는 것을 syntactic sugar라고 부름 <ul><li>e.g. class</li></ul></li><li>cf. <code>async(어싱크, 비동기), await(어웨잇, 기다려)</code></li></ul><p>최근에는 Promise를 이용해서 계속해서 메서드 체이닝하는 코딩 스타일은<br>JS의 <code>async/await</code> 키워드를 사용하는 방식으로 대체되고 있는 추세입니다.</p><hr><h2 id="4-1-async"><a href="#4-1-async" class="headerlink" title="4.1 async"></a>4.1 async</h2><h3 id="4-1-1-기본-사용법"><a href="#4-1-1-기본-사용법" class="headerlink" title="4.1.1 기본 사용법"></a>4.1.1 기본 사용법</h3><p><strong>async 키워드를 쓰면 Promise 오브젝트가 자동생성</strong>됩니다. 근데 <strong>async 키워드는 function 선언 앞에만 붙일 수 있습니다</strong>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> 어려운연산() &#123; <span class="comment">// async을 지정해주면 Promise를 리턴하는 함수로 만들어줌</span></span><br><span class="line">  <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그럼 이 함수 자체가 Promise가 되어버립니다. 그래서 <strong>이 함수를 실행할 때 뒤에 then을 붙일 수 있습니다. Promise니까요.</strong><br>(cf. 함수를 실행하면 그 자리에 Promise 인스턴스(new Promise() 로 만든 오브젝트)가 남습니다. )</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> 더하기() &#123;</span><br><span class="line">  <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">더하기().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;더하기 성공&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>그럼 이제 Promise 만들 때 했던거 처럼, <code>then</code>을 붙여서 <code>더하기()</code>함수가 성공한 뒤에 뭔가를 실행시킬 수 있습니다. </p><hr><h3 id="4-1-2-예제"><a href="#4-1-2-예제" class="headerlink" title="4.1.2 예제"></a>4.1.2 예제</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// **** Promise 사용하는 경우</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 네트워크에서 2초 걸리는 연산...</span></span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;메시&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">fetchUser</span>();</span><br><span class="line">user.<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------</span></span><br><span class="line"><span class="comment">// **** Async &amp; Await 사용하는 경우 : 가독성 ^</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 네트워크에서 2초 걸리는 연산...</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;메시&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">fetchUser</span>();</span><br><span class="line">user.<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="4-2-await"><a href="#4-2-await" class="headerlink" title="4.2 await"></a>4.2 await</h2><h3 id="4-2-1-기본-사용법"><a href="#4-2-1-기본-사용법" class="headerlink" title="4.2.1 기본 사용법"></a>4.2.1 기본 사용법</h3><p><code>async</code> 키워드를 쓴 함수 안에서는 <code>await</code>을 사용가능합니다.<br><code>await</code>은 그냥 <code>프로미스.then() 대체품</code>으로 생각하시면 됩니다. 하지만 <strong>then보다 훨씬 문법이 간단합니다.</strong> </p><p>어떤 function 안에서 어려운 연산을 실행한 뒤에 성공&#x2F;실패를 판정해주는 <strong>Promise를 만들려면</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// **** async / then 사용</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> 더하기() &#123;</span><br><span class="line">  <span class="keyword">let</span> 어려운연산 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">성공, 실패</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> 결과 = <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line">    성공();</span><br><span class="line">  &#125;);</span><br><span class="line">  어려운연산.<span class="title function_">then</span>(); <span class="comment">// (1) 여기 부분이</span></span><br><span class="line">&#125;</span><br><span class="line">더하기();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------</span></span><br><span class="line"><span class="comment">// **** async / awit 사용</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> 더하기() &#123;</span><br><span class="line">  <span class="keyword">let</span> 어려운연산 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">성공, 실패</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> 결과 = <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line">    성공();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> 결과 = <span class="keyword">await</span> 어려운연산; <span class="comment">// (2) 이렇게 바뀜</span></span><br><span class="line">  <span class="comment">// 어려운연산 Promise를 기다린 다음에 완료되면 결과를 변수에 담아라</span></span><br><span class="line">&#125;</span><br><span class="line">더하기();</span><br></pre></td></tr></table></figure><p>이렇게하시면 됩니다. (혹은 Promise 만들기 귀찮으면 어려운연산을 함수로 만든 후 async를 쓰시면 됩니다)</p><hr><h3 id="4-2-2-예제"><a href="#4-2-2-예제" class="headerlink" title="4.2.2 예제"></a>4.2.2 예제</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getBanana</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;🍌&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getApple</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;🍎&#x27;</span>), <span class="number">3000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getOrange</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;no orange&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// **** 바나나과 사과를 같이 가지고 오기</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchFruits</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> banana = <span class="keyword">await</span> <span class="title function_">getBanana</span>(); <span class="comment">// getBanana() 값을 받아올 떄까지 기다림(await)</span></span><br><span class="line">  <span class="keyword">const</span> apple = <span class="keyword">await</span> <span class="title function_">getApple</span>(); <span class="comment">// getApple() 값을 받아올 떄까지 기다림(await)</span></span><br><span class="line">  <span class="keyword">return</span> [banana, apple];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchFruits</span>() <span class="comment">//</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">fruits</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(fruits)); <span class="comment">// 4초 뒤 [ &#x27;🍌&#x27;, &#x27;🍎&#x27; ] 출력</span></span><br></pre></td></tr></table></figure><p>위 코드의 경우, <strong>getApple 함수와 getBanana 함수의 연관성이 없음</strong>에도,<br><strong>각 1초와 3초씩 총 4초를 기다려야 하는 상황</strong>이 발생합니다. 이는 <strong>비효율적이므로, 코드 개선이 필요</strong>합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 원래 코드 -&gt; 각 1초씩 총 2초를 기다려야 함</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">pickFruits</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> banana = <span class="keyword">await</span> <span class="title function_">getBanana</span>();</span><br><span class="line">  <span class="keyword">const</span> apple = <span class="keyword">await</span> <span class="title function_">getApple</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;apple&#125;</span> + <span class="subst">$&#123;banana&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 개선된 코드 -&gt; 병렬적으로 실행되어 1초만 기다리면 됨</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchFruits</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> bananaPromise = <span class="title function_">getBanana</span>();</span><br><span class="line">  <span class="keyword">const</span> applePromise = <span class="title function_">getApple</span>();</span><br><span class="line">  <span class="keyword">const</span> banana = <span class="keyword">await</span> bananaPromise;</span><br><span class="line">  <span class="keyword">const</span> apple = <span class="keyword">await</span> applePromise;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;apple&#125;</span> + <span class="subst">$&#123;banana&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>applePromise</code>와 <code>bananaPromise</code>는 만들자마자 각자 실행이 되므로, 둘 중 어느 것이 끝날 때까지 기다릴 필요가 없는 것!</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-13-this &amp; 화살표함수</title>
      <link href="/2023/01/04/Front-JS-Basic-13-This/"/>
      <url>/2023/01/04/Front-JS-Basic-13-This/</url>
      
        <content type="html"><![CDATA[<h1 id="1-This-바인딩"><a href="#1-This-바인딩" class="headerlink" title="1. This 바인딩"></a>1. This 바인딩</h1><p>This를 사용할 떄, 생성자 함수·객체·클래스 안에서 This를 사용했는데,<br>This는 <strong>앞으로 만들어진 인스턴스나 지금의 객체 자기 자신을 가리키는 용도로 사용</strong>했습니다.</p><p>This를 사용하면서, 나 자신의 인스턴스를 가리키는 것,<br>즉, <strong>특정한 객체와 This를 묶어두는 연결된 것</strong>을 <code>This 바인딩</code>이라고 합니다.</p><p><code>JavaScript에서 사용하는 This</code>는 <code>다른 프로그래밍 언어의 This</code>와 살짝 다릅니다.</p><ul><li><code>다른 프로그래밍 언어의 This</code><ul><li>클래스 안에 This를 사용해서 <strong>앞으로 만들어진 인스턴스 자기 자신을 가리킴</strong></li><li>한 번 인스턴스를 가리키는 This가 결정되면, This는 계속 인스턴스 하나만 계속 정적으로 가리킴<ul><li><strong>코드 상에서 정적으로 결정</strong>됨</li></ul></li><li>Java, C# 같은 다른 객체지향 프로그래밍 언어</li></ul></li><li><code>JavaScript에서 사용하는 This</code><ul><li>런타임 상에서 This 바인딩이 동적으로 결정</li><li>JavaSciprt, TypeScript</li></ul></li></ul><hr><h1 id="2-This-뜻"><a href="#2-This-뜻" class="headerlink" title="2. This 뜻"></a>2. This 뜻</h1><p><code>This</code>  &#x3D; <strong>this는 함수를 호출한 객체이다.</strong></p><hr><h2 id="2-1-전역-문맥에서-this"><a href="#2-1-전역-문맥에서-this" class="headerlink" title="2.1 전역 문맥에서 this"></a>2.1 전역 문맥에서 this</h2><ul><li><code>전역 문맥에서 this</code> &#x3D; <strong>그냥 쓰꺼나 함수에서 쓰면 window 전역 객체</strong></li></ul><p>그냥 HTML 파일 아무거나 하나 만들고 JS 파일을 연동시키고 브라우저를 띄웁니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>일단 this를 콘솔창에 출력해봅시다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window 전역 객체</span></span><br></pre></td></tr></table></figure><p>함수에서 this를 쓰면, windows 전역 객체이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window 전역 객체</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>엄격모드에서 전역적인 문맥에서 접근해보면, windows 전역 객체이다. (즉, 전역모드와는 상관없다.)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>; <span class="comment">// 엄격모드</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window 전역 객체</span></span><br></pre></td></tr></table></figure><blockquote><p>💡 Window 전역 객체</p><p><strong>함수들, 전역변수, DOM 등을 보관하는 전역 객체</strong> &#x3D; 보관소</p><ul><li>함수들 : <code>document.getElementById(), alert(), console.log()</code>같은 것들</li><li>전역 변수 : 코드 내 모든 곳에서 참조해서 쓸 수 있는 범용적인, 범위가 넓은 변수</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// script태그 내에 var 변수만들면 전역변수</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> x = <span class="number">300</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="2-2-함수-문맥에서-this"><a href="#2-2-함수-문맥에서-this" class="headerlink" title="2.2 함수 문맥에서 this"></a>2.2 함수 문맥에서 this</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 📝 function으로 선언한 함수는 window 객체에 등록됨</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this는 함수를 호출한 객체이다.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 콘솔로 window 객체를 보면, main 함수가 들어있음</span></span><br><span class="line"><span class="comment">// console.log(window);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 전역적으로 main()를 호출한다는 것은 window.main()과 동일하다.</span></span><br><span class="line"><span class="title function_">main</span>(); <span class="comment">// main()를 호출하면 this는 window 객체가 된다.</span></span><br><span class="line"><span class="comment">// window.main();</span></span><br></pre></td></tr></table></figure><h3 id="2-2-1-엄격모드-함수에서-this-x3D-undefined"><a href="#2-2-1-엄격모드-함수에서-this-x3D-undefined" class="headerlink" title="2.2.1 엄격모드 함수에서 this &#x3D; undefined"></a>2.2.1 엄격모드 함수에서 this &#x3D; undefined</h3><p>여기서 한가지 예외가 있습니다. 엄격모드를 활성화시켜준다면,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 엄격모드에서 함수 안의 this는 undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><p>직접적으로 <code>window.main()</code>라고 명시해야지만, this가 window 전역객체가 됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 엄격모드를 함수 내부에서도 선언해줘도 똑같음</span></span><br><span class="line">  <span class="comment">// &#x27;use strict&#x27;;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window 전역객체</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">main</span>(); <span class="comment">// window 전역객체를 명시</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-3-객체-메서드에서-this"><a href="#2-3-객체-메서드에서-this" class="headerlink" title="2.3 객체 메서드에서 this"></a>2.3 객체 메서드에서 this</h2><p><code>This</code>  &#x3D; <strong>this는 함수를 호출한 객체이다.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">  <span class="attr">main</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// main()안에 있는 this는 작성자가 작성한 Object가 된다.</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">object.<span class="title function_">main</span>(); <span class="comment">// Object &#123; name: &quot;메시&quot;, main: main() &#125;</span></span><br></pre></td></tr></table></figure><p>객체의 다른 속성에 접근할 떄 유용합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">  <span class="attr">main</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// 객체의 다른 속성에 접근할 떄 유용</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">object.<span class="title function_">main</span>(); <span class="comment">// 메시</span></span><br></pre></td></tr></table></figure><p>만든 객체를 새로운 변수에 할당하면, 더 이상 객체가 아니기 때문에 indow 전역 객체가 호출됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">  <span class="attr">main</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">object.<span class="title function_">main</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 더 이상 main2()를 호출하는 것이 객체가 아니기 때문에 window 전역 객체가 호출된다.</span></span><br><span class="line"><span class="keyword">const</span> main2 = object.<span class="property">main</span>;</span><br><span class="line"><span class="title function_">main2</span>(); <span class="comment">// window 전역 객체</span></span><br></pre></td></tr></table></figure><p>this는 함수가 정의된 위치나 방법에 영향을 받지 않습니다.</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체 밖에서 만든 this</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 그 이후에 객체를 만들어서 메서드로 넣어줘도 똑같이 this는 object 객체가 된다</span></span><br><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">  main,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">object.<span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체 밖에서 만든 this</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">object.<span class="property">main</span> = main; <span class="comment">// 그 이후에 객체를 만들어서 메서드로 넣어줘도 똑같이 this는 object 객체</span></span><br><span class="line"></span><br><span class="line">object.<span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><p>마찬가지로 객체 안의 객체 안에 this라도, this는 함수를 호출한 객체입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체 밖에서 만든 this</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">  <span class="attr">smallObject</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;호날두&#x27;</span>,</span><br><span class="line">    main,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">object.<span class="property">smallObject</span>.<span class="title function_">main</span>(); <span class="comment">// Object &#123; name: &quot;호날두&quot;, main: main() &#125;</span></span><br></pre></td></tr></table></figure><p>그래서 <code>mani()</code>를 직접 호출한 객체가 smallObject이기 때문에 this는 <code>smallObject(호출한 객체)</code>가 됩니다.<br>어떤 함수의 this 값이 궁금하다면, 바로 옆의 객체를 보면 됩니다.</p><hr><h3 id="2-3-1-bind"><a href="#2-3-1-bind" class="headerlink" title="2.3.1 bind()"></a>2.3.1 bind()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>(); <span class="comment">// window 전역 객체</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>동적으로 this 값이 바뀌기 때문에 일일히 추적하는 것은 귀찮기 때문에 <strong>원하는 객체로 고정</strong>하고 싶다면,<br><code>bind()</code>를 쓰면 됩니다. (cf. binding, 바인딩 &#x3D; 묶어주다)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 원하는 객체을 this으로 설정하고 싶다면, bind(고정시키고싶은 객체)</span></span><br><span class="line"><span class="keyword">const</span> mainBind = main.<span class="title function_">bind</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;hi&#x27;</span> &#125;);</span><br><span class="line"><span class="title function_">mainBind</span>(); <span class="comment">// Object &#123; name: &quot;hi&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 다른 객체 안에서 호출해도 mainBind()의 this는 고정된다.</span></span><br><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">  mainBind,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">object.<span class="title function_">mainBind</span>(); <span class="comment">// Object &#123; name: &quot;hi&quot; &#125;</span></span><br></pre></td></tr></table></figure><p>이제 mainBind()를 어떻게 호출하든 상관없이 this 값은 넣어준 객체값으로 고정됩니다.</p><ul><li><code>bind()</code>는 넣어준 객체값이 this값으로 설정된 새로운 함수를 반환해줍니다.</li><li>주의할 점 : <strong>이미 bind()된 것을 또 bind()할 수 없다</strong>. 또 bind한 값은 무시해버린다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📌 주의 : 이미 bind()된 것을 또 bind()할 수 없다. 또 bind한 값은 무시해버림</span></span><br><span class="line"><span class="keyword">const</span> mainBind = main.<span class="title function_">bind</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;hi&#x27;</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> mainBindBind = mainBind.<span class="title function_">bind</span>(&#123;&#125;);</span><br><span class="line"><span class="title function_">mainBindBind</span>(); <span class="comment">// Object &#123; name: &quot;hi&quot; &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">  <span class="attr">main</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;.<span class="title function_">bind</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;네이마르&#x27;</span> &#125;),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// ↑ bind()해준 객체값으로 this가 바뀐다.</span></span><br><span class="line"></span><br><span class="line">object.<span class="title function_">main</span>(); <span class="comment">// Object &#123; name: &quot;네이마르&quot; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="2-4-이벤트-처리기에서-this"><a href="#2-4-이벤트-처리기에서-this" class="headerlink" title="2.4 이벤트 처리기에서 this"></a>2.4 이벤트 처리기에서 this</h2><p>함수를 DOM 요소의 이벤트 처리기에서 사용할 떄, this 값은 <code>event.target</code>입니다.<br>버튼 클릭, 스크롤 등 같은 이벤트를 처리할 떄, 이벤트 리스너를 사용합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line"></span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// 버튼을 누르면 true가 출력됩니다.</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span> === <span class="variable language_">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>💡 화살표 함수를 쓰는 이유</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>호출 방법에 따른 this 변화</li><li>this를 고정하기 위해 bind() 사용</li></ul><p>전통적인 함수 문법은 동적인 this 때문에 이리저리 바인딩하느라 귀찮습니다.<br>그럴 때는 화살표 함수(ES6+)를 사용하면 됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">main</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>더 간결한 함수 선언 문법</li><li>동적인 this에 대한 값을 고정시킬 수 있음<ul><li>this가 호출에 따라 바뀌지 않음</li></ul></li><li>화살표 함수의 this값은 그 함수를 감싸는 스코프 외부에서 그대로 가져옴</li><li>개발자 인생을 편하게 해주지만 그렇다고 화살표함수가 모든 상황에서 대체할 수는 없음</li></ul></blockquote><hr><h1 id="3-Arrow-Function-화살표-함수"><a href="#3-Arrow-Function-화살표-함수" class="headerlink" title="3. Arrow Function(화살표 함수)"></a>3. Arrow Function(화살표 함수)</h1><h2 id="3-1-기본-일반-함수-vs-화살표-함수"><a href="#3-1-기본-일반-함수-vs-화살표-함수" class="headerlink" title="3.1 기본 : 일반 함수 vs 화살표 함수"></a>3.1 기본 : 일반 함수 vs 화살표 함수</h2>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-12-Strict Mode(엄격 모드)</title>
      <link href="/2023/01/04/Front-JS-Basic-12-StrictMode/"/>
      <url>/2023/01/04/Front-JS-Basic-12-StrictMode/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Strict-Mode-엄격-모드"><a href="#1-Strict-Mode-엄격-모드" class="headerlink" title="1. Strict Mode(엄격 모드)"></a>1. Strict Mode(엄격 모드)</h1><p>가끔 엄격하지 않은 기본값을 “<a href="https://developer.mozilla.org/ko/docs/Glossary/Sloppy_mode">느슨한 모드</a>(sloppy mode)”라고 부르기도 합니다. 공식 용어는 아니지만 혹시 모르니 알아두세요.<br>엄격 모드는 오래전 JavaScript의 안좋은 방법들을 확인할 떄 유용합니다.</p><ul><li>기존에는 조용히 무시되던 에러들을 throwing합니다.</li><li>JavaScript 엔진의 최적화 작업을 어렵게 만드는 실수들을 바로잡습니다. <ul><li>가끔씩 엄격 모드의 코드는 비-엄격 모드의 동일한 코드보다 더 빨리 작동하도록 만들어집니다.</li></ul></li><li>엄격 모드는 ECMAScript의 차기 버전들에서 정의 될 문법을 금지합니다.</li><li>cf. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode">MDN 엄격모드</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 엄격 모드(strict mode)</span></span><br><span class="line"><span class="comment">// 리액트와 같은 프레임워크 사용시 기본적으로 엄격 모드임</span></span><br><span class="line"><span class="comment">// 전역으로 사용해도 되고, 함수 안에서만 적용하고 싶으면 함수 안에 작성</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>; <span class="comment">// 이 파일을 엄격모드에서 진행하겠다는 뜻</span></span><br><span class="line"><span class="comment">// var x = 1;</span></span><br><span class="line"><span class="comment">// delete x;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="comment">// use strict에서는 var 생략 불가</span></span><br><span class="line">  <span class="keyword">var</span> b = a + x;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// use strict에서는 const num에서 const 생략 불가</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> array) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-11-단축평가 &amp; 옵셔널 체이닝 &amp; null 병합 연산자</title>
      <link href="/2023/01/04/Front-JS-Basic-11-Logical/"/>
      <url>/2023/01/04/Front-JS-Basic-11-Logical/</url>
      
        <content type="html"><![CDATA[<h1 id="1-단축평가"><a href="#1-단축평가" class="headerlink" title="1. 단축평가"></a>1. 단축평가</h1><h2 id="1-1-논리-연산자를-사용한-단축평가"><a href="#1-1-논리-연산자를-사용한-단축평가" class="headerlink" title="1.1 논리 연산자를 사용한 단축평가"></a>1.1 논리 연산자를 사용한 단축평가</h2><p>논리합(<code>||</code>) 또는 논리곱 (<code>&amp;&amp;</code>) 연산자 표현식은 언제나 2개의 피연산자 중 어느 한쪽으로 평가됩니다.</p><hr><h3 id="1-1-1-논리곱-amp-amp-연산자"><a href="#1-1-1-논리곱-amp-amp-연산자" class="headerlink" title="1.1.1 논리곱( &amp;&amp; ) 연산자"></a>1.1.1 논리곱( &amp;&amp; ) 연산자</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Cat&#x27;</span> &amp;&amp; <span class="string">&#x27;Dog&#x27;</span> <span class="comment">// &quot;Dog&quot;</span></span><br></pre></td></tr></table></figure><p>논리곱(<code>&amp;&amp;</code>) 연산자는 <strong>두 개의 피연산자가 모두 true로 평가될 때 true</strong>를 반환하며, <strong>좌항에서 우항으로 평가가 진행</strong>됩니다.<br>첫 번째 피연산자 ‘Cat’은 Truthy 값이므로 true로 평가됩니다. 하지만 위 표현식은 이 시점에서 평가할 수 없습니다.<br>두 번째 피연산자까지 평가해야합니다.<br>즉, 두 번째 피연산자가 논리곱 연산자 표현식의 평가 결과를 결정하며, 두 번째 피연산자 ‘Dog’를 그대로 반환합니다</p><hr><h3 id="1-1-2-논리합-연산자"><a href="#1-1-2-논리합-연산자" class="headerlink" title="1.1.2 논리합( || ) 연산자"></a>1.1.2 논리합( || ) 연산자</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Cat&#x27;</span> || <span class="string">&#x27;Dog&#x27;</span> <span class="comment">// &quot;Cat&quot;</span></span><br></pre></td></tr></table></figure><p>논리합(<code>||</code>) 연산자는 <strong>두 개의 피연산자 중 하나만 true로 평가되어도 true</strong>를 반환하며, <strong>좌항에서 우항으로 평가가 진행</strong>됩니다.<br>첫 번째 피연산자 ‘Cat’은 Truthy 값이므로 true로 평가됩니다.<br>이 시점에 두 번째 피연산자까지 평가하지 않아도 표현식을 평가할 수 있습니다.<br>논리합 연산자는 논리 연산의 결과를 결정한 첫 번째 피연산자, 문자열 ‘Cat’을 그대로  반환합니다. </p><hr><h2 id="1-2-단축-평가란"><a href="#1-2-단축-평가란" class="headerlink" title="1.2 단축 평가란?"></a>1.2 단축 평가란?</h2><p>&amp;&amp; 연산자와 || 연산자는 <strong>논리 연산의 결과를 결정하는 피연산자를 타입 변환하지 않고 그대로 반환</strong>하는데, 이를 <code>단축 평가</code>라고 합니다.<br>단축 평가는 <u>표현식을 평가하는 도중에 평가 결과가 확정된 경우 나머지 평가 과정을 생략하는 것</u>을 말합니다.</p><p>단축 평가는 다음의 규칙을 따릅니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> || anything <span class="comment">// true</span></span><br><span class="line"><span class="literal">false</span> || anything <span class="comment">// anything</span></span><br><span class="line"><span class="literal">true</span> &amp;&amp; anything <span class="comment">// anything</span></span><br><span class="line"><span class="literal">false</span> &amp;&amp; anything <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-undefined-null-체크"><a href="#2-undefined-null-체크" class="headerlink" title="2. undefined, null 체크"></a>2. undefined, null 체크</h1><ul><li><code>undefined</code> : 값이 있는지 없는지 모름</li><li><code>null</code> : 값이 없음</li></ul><hr><h2 id="2-1-일반적인-undefined-체크"><a href="#2-1-일반적인-undefined-체크" class="headerlink" title="2.1 일반적인 undefined 체크"></a>2.1 일반적인 undefined 체크</h2><p>특정 값이 undefined 인지를 체크하기 위해서는 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a == <span class="string">&#x27;undefined&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-2-일반적인-null-체크"><a href="#2-2-일반적인-null-체크" class="headerlink" title="2.2 일반적인 null 체크"></a>2.2 일반적인 null 체크</h2><p>null 인지를 체크하기 위해서는</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b == <span class="literal">null</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>위와 같이 정확하게 값을 체크하는데 사용될 수 있다.</p><hr><h2 id="2-3-간단하게-undefined-null-체크"><a href="#2-3-간단하게-undefined-null-체크" class="headerlink" title="2.3 간단하게 undefined, null 체크"></a>2.3 간단하게 undefined, null 체크</h2><p>하지만, undefined와 null은 논리연산에서는 false로 처리되므로 아래처럼 간단하게 체크하면 되겠다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!a); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// if (a) &#123;&#125;</span></span><br><span class="line"><span class="comment">// if (!a) &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!b); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// if (b) &#123;&#125;</span></span><br><span class="line"><span class="comment">// if (!b) &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>undefined와 null을 철저히 체크하는 경우가 아니라면, <code>if (!a) &#123;&#125;</code>처럼 간단히 사용하면 되겠다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a != <span class="literal">undefined</span> &amp;&amp; a != <span class="literal">null</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> (a != <span class="literal">undefined</span> &amp;&amp; !a) &#123;&#125;</span><br></pre></td></tr></table></figure><p>위 두가지 모두 <code>if (!a) &#123;&#125;</code> 와 동일하다.</p><hr><h1 id="3-undefined-null-체크-예시"><a href="#3-undefined-null-체크-예시" class="headerlink" title="3. undefined, null 체크 예시"></a>3. undefined, null 체크 예시</h1><h2 id="예시-1-if문-파라미터의-값이-비어있는지"><a href="#예시-1-if문-파라미터의-값이-비어있는지" class="headerlink" title="예시 1 : if문 파라미터의 값이 비어있는지"></a>예시 1 : if문 파라미터의 값이 비어있는지</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nIntervId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// check if an interval has already been set up</span></span><br><span class="line">  <span class="comment">// nIntervId이 null이거나 undfined 이라면, (=값이 없다면)</span></span><br><span class="line">  <span class="keyword">if</span> (!nIntervId) &#123;</span><br><span class="line">    nIntervId = <span class="built_in">setInterval</span>(flashText, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="예시-2-배열-길이가-0인지-판단"><a href="#예시-2-배열-길이가-0인지-판단" class="headerlink" title="예시 2 : 배열 길이가 0인지 판단"></a>예시 2 : 배열 길이가 0인지 판단</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( array.<span class="property">length</span> === <span class="number">0</span> ) <span class="comment">// 💩 Bad</span></span><br><span class="line"><span class="keyword">if</span> ( !array.<span class="property">length</span> ) <span class="comment">// array.length 값이 없다면, 👍 Good</span></span><br></pre></td></tr></table></figure><hr><h2 id="예시-3-배열-길이가-0보다-큰지-판단"><a href="#예시-3-배열-길이가-0보다-큰지-판단" class="headerlink" title="예시 3 : 배열 길이가 0보다 큰지 판단"></a>예시 3 : 배열 길이가 0보다 큰지 판단</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( array.<span class="property">length</span> &gt; <span class="number">0</span> ) <span class="comment">// 💩 Bad</span></span><br><span class="line"><span class="keyword">if</span> ( array.<span class="property">length</span> ) <span class="comment">// 👍 Good</span></span><br></pre></td></tr></table></figure><p>array.length &gt; 0이 로직은 <code>array.length</code>의 특성상 음수값은 존재하지 않고 양수값만 존재하게된다.<br>그러므로 0이냐 0이 아니냐로 판단이 가능하다.</p><hr><h2 id="예시-4-문자열이-비어있는지-판단"><a href="#예시-4-문자열이-비어있는지-판단" class="headerlink" title="예시 4: 문자열이 비어있는지 판단"></a>예시 4: 문자열이 비어있는지 판단</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( string === <span class="string">&quot;&quot;</span> ) <span class="comment">// 💩 Bad</span></span><br><span class="line"><span class="keyword">if</span> ( !string ) <span class="comment">// 👍 Good</span></span><br></pre></td></tr></table></figure><p>빈문자열은 조건문안에서 false이다.<br>빈문자열임을 확인하고 싶으면 부정(!)을 더해서 false -&gt; true로 만들어주면 된다.</p><hr><h2 id="예시-5-문자열이-값이-있는지-판단"><a href="#예시-5-문자열이-값이-있는지-판단" class="headerlink" title="예시 5 : 문자열이 값이 있는지 판단"></a>예시 5 : 문자열이 값이 있는지 판단</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( string !== <span class="string">&quot;&quot;</span> ) <span class="comment">// 💩 Bad</span></span><br><span class="line"><span class="keyword">if</span> ( string ) <span class="comment">// 👍 Good</span></span><br></pre></td></tr></table></figure><p>빈문자열은 조건문안에서 false이다.<br>그러므로 빈문자열이 아닐때를 판별할때는 빈문자열이 들어올 변수를 조건문안에 넣어주기만 하면된다.</p><hr><h2 id="예시-6-삼항-조건-연산자"><a href="#예시-6-삼항-조건-연산자" class="headerlink" title="예시 6 : 삼항 조건 연산자"></a>예시 6 : 삼항 조건 연산자</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> done = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> message = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if...else문</span></span><br><span class="line"><span class="keyword">if</span> (done) message = <span class="string">&#x27;완료&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> message = <span class="string">&#x27;미완료&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">//완료</span></span><br><span class="line"></span><br><span class="line">message = done ? <span class="string">&#x27;완료&#x27;</span> : <span class="string">&#x27;미완료&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">//완료</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-옵셔널-체이닝"><a href="#4-옵셔널-체이닝" class="headerlink" title="4. 옵셔널 체이닝 ?."></a>4. 옵셔널 체이닝 ?.</h1><ul><li>좌항의 피연산자가 <code>null</code> 또는 <code>undefined</code>인 경우 <code>undefined</code>를 반환하고, </li><li>그렇지 않으면 우항의 프로퍼티 참조를 이어갑니다.</li><li>ES11에서 도입(ECMAScript 2020)</li><li>cf. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining">MDN 옵셔널 체이닝</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> elem = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// elem이 null또는 undefined이면 undefined 반환, 그렇지 않으면 우항의 프로퍼티 참조를 이어감</span></span><br><span class="line"><span class="keyword">let</span> value = elem?.<span class="property">value</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><code>?.</code>는 객체를 가리키기를 기대하는 변수가 <code>null</code>또는 <code>undefined</code>가 아닌지 확인하고 프로퍼티를 참조할 때 유용합니다.<br><code>?.</code>가 도입되기 전에는 논리 연산자 <code>&amp;&amp;</code>를 사용한 단축 평가를 통해 변수가 <code>null</code> 또는 <code>undefined</code>인지 확인했습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> elem = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// elem이 Falsy 값이면 elem으로 평가, elem이 Truthy 값이면 elem.value로 평가</span></span><br><span class="line"><span class="keyword">let</span> value = elem &amp;&amp; elem.<span class="property">value</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>논리 연산자 <code>&amp;&amp;</code>는 </p><ul><li>좌항 피연산자가 false로 평가되는 <code>Falsy 값(false, undefined, null, 0, -0, NaN, &#39;&#39;)</code>이면 </li><li>좌항 피연산자를 그대로 반환합니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> length = str &amp;&amp; str.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 문자열의 길이를 참조하지 못함</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(length); <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>하지만 옵셔널 체이닝 연산자<code>?.</code>는 </p><ul><li>좌항 피연산자가 false로 평가되는 Falsy 값이라도 <code>null</code>또는 <code>undefined</code>가 아니면 </li><li>우항의 프로퍼티 참조를 이어갑니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> length = str?.<span class="property">length</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(length); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-1-예제"><a href="#4-1-예제" class="headerlink" title="4.1 예제"></a>4.1 예제</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 옵셔널 체이닝 연산자 (Optional Chaining Operator)</span></span><br><span class="line"><span class="comment">// null 또는 undefined을 확인할때</span></span><br><span class="line"><span class="keyword">let</span> item = &#123; <span class="attr">price</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="comment">// const price = item &amp;&amp; item.price;를 옵셔널 체이닝 연산자로 표현</span></span><br><span class="line"><span class="keyword">const</span> price = item?.<span class="property">price</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(price); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;🐶&#x27;</span>, <span class="attr">owner</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printName</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// 📝 obj 오브젝트가 있다면, owner가 있다면, name이 있다면</span></span><br><span class="line">  <span class="comment">// owner가 없다면 undefined, name이 없다면 undefined</span></span><br><span class="line">  <span class="keyword">const</span> ownerName = obj?.<span class="property">owner</span>?.<span class="property">name</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ownerName); <span class="comment">// 메시</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">printName</span>(obj);</span><br></pre></td></tr></table></figure><hr><h1 id="5-null-체크하는-깔끔한-법⭐"><a href="#5-null-체크하는-깔끔한-법⭐" class="headerlink" title="5. null 체크하는 깔끔한 법⭐"></a>5. null 체크하는 깔끔한 법⭐</h1><h2 id="3-1-null-병합-연산자"><a href="#3-1-null-병합-연산자" class="headerlink" title="3.1 null 병합 연산자 ??"></a>3.1 null 병합 연산자 ??</h2><p>ES11에서 도입된  <code>??</code>는 좌항의 피연산자가 <code>null</code> 또는 <code>undefined</code>인 경우 우항의 피연산자를 반환하고,<br>그렇지 않으면 좌항의 피연산자를 반환합니다. </p><p>cf. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator">MDN null 병합연산자(Nullish Coalescing Operator)</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="literal">null</span> ?? <span class="string">&#x27;default string&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// &quot;default string&quot;</span></span><br></pre></td></tr></table></figure><p> <code>??</code>는 변수에 기본값을 설정할 때 유용합니다.<br><code>??</code>가 도입되기 전에는 논리 연산자 <code>||</code>를 사용한 단축 평가를 통해 변수에 기본값을 설정했습니다.</p><p>논리 연산자 <code>||</code>를 사용한 단축 평가의 경우 좌항의 피연산자가 false로 평가되는 Falsy 값이면 우항의 피연산자를 반환합니다.<br>만약 Falsy 값인 <code>0</code>이나 <code>&#39;&#39;</code>도 기본값으로 유효하다면 예기치않은 동작이 발생할 수 있습니다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="string">&#x27;&#x27;</span> || <span class="string">&#x27;default string&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// &quot;default string&quot;</span></span><br></pre></td></tr></table></figure><p>하지만 <code>??</code>는 좌항의 연산자가 false로 평가되는 Falsy 값이라도 <code>null</code> 또는 <code>undefined</code>가 아니면,<br>좌항의 피연산자를 그대로 반환합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="string">&#x27;&#x27;</span> ?? <span class="string">&#x27;default string&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-2-예제"><a href="#3-2-예제" class="headerlink" title="3.2 예제"></a>3.2 예제</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 📝 ?? 연산자 : null, undefined에만</span></span><br><span class="line"><span class="comment">// 📝 || : falshy한 경우 설정(할당) 0, -0, &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// num의 값이 없을 때만, -1을 출력하고 싶을 떄</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num || <span class="string">&#x27;-1&#x27;</span>); <span class="comment">// 0은 falshy에 해당되어 -1이 출력</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num ?? <span class="string">&#x27;-1&#x27;</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-10-함수(Functions)</title>
      <link href="/2023/01/03/Front-JS-Basic-10-Function/"/>
      <url>/2023/01/03/Front-JS-Basic-10-Function/</url>
      
        <content type="html"><![CDATA[<h1 id="1-함수"><a href="#1-함수" class="headerlink" title="1. 함수"></a>1. 함수</h1><p>함수는 특정한 일을 수행하는 코드의 집합으로 이렇게 잘 묶어두면 재사용도 가능하고, 가독성도 높고 유지보수성도 높아집니다.</p><ul><li>함수는 <strong>길고 더러운 코드 한 단어로 축약하고 싶을 때</strong> 쓰는 문법</li><li>개발자말로 표현하면 <strong>특정 기능을 다음에도 쓰기 위해 모듈화해놓는 문법</strong></li></ul><p>함수는 특정 박스 안에 주어진 일을 수행하고, 이 안에서 벌어지는 일들은 외부에서 알 수 없습니다.<br>그리고 입력을 받으면 출력 값을 리턴합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 함수이름(매개변수A, 매개변수B) &#123;</span><br><span class="line">  <span class="keyword">return</span> 매개변수A + 매개변수B; <span class="comment">// 결과값 반환</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">함수이름(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 함수 호출, 인자를 넘겨준다.</span></span><br></pre></td></tr></table></figure><ul><li><code>parameter(매개변수)</code> : <strong>함수를 정의할 때 사용되는 변수</strong></li><li><code>Argument(인자)</code> : <strong>실제로 함수가 호출될 때 넘기는 변수값</strong></li><li>cf. <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/function">MDN 함수</a></li></ul><hr><h2 id="1-1-함수와-메모리"><a href="#1-1-함수와-메모리" class="headerlink" title="1.1 함수와 메모리"></a>1.1 함수와 메모리</h2><p>함수도 결국 객체이기 때문에 함수를 정의하면 Heap이라는 메모리에 저장됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수의 이름 add는 함수 오브젝트가 담겨있는 메모리 주소를 가지고 있음</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123; </span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 또 다른 변수에 함수 이름을 할당하면, sum이라는 변수는 동일하게  add가 가리키고 있는 주소를 가리킴</span></span><br><span class="line"><span class="keyword">const</span> sum = add; </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-2-템플릿-리터럴"><a href="#1-2-템플릿-리터럴" class="headerlink" title="1.2 템플릿 리터럴"></a>1.2 템플릿 리터럴</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;function&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 사용예제 2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fullName</span>(<span class="params">firstName, lastName</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span> ✋`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">&quot;김&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> firstName = <span class="string">&quot;지수&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fullName</span>(firstName, lastName)); <span class="comment">// 지수 김 ✋</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lastName2 = <span class="string">&quot;박&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> firstName2 = <span class="string">&quot;철수&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fullName</span>(firstName2, lastName2)); <span class="comment">// 철수 박 ✋</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-3-return문-반환"><a href="#1-3-return문-반환" class="headerlink" title="1.3 return문 반환"></a>1.3 return문 반환</h2><p><code>return</code> 문을 명시하지 않으면, 자동으로 <code>undefined</code>이 반환됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// return문을 명시하지 않으면 자동으로 undefined이 반환됨!</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="comment">//return a + b;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>; <span class="comment">// return문을 명시하지 않으면 자동 생성됨</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// return을 함수 중간에 하게 되면 함수가 종료됨</span></span><br><span class="line"><span class="comment">// 사용예: 조건이 맞지 않는 경우 함수 도입부분에서 함수를 일찍 종료함!</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">print</span>(<span class="number">12</span>);  <span class="comment">// 12 </span></span><br><span class="line"><span class="title function_">print</span>(-<span class="number">12</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-4-함수의-인자"><a href="#1-4-함수의-인자" class="headerlink" title="1.4 함수의 인자"></a>1.4 함수의 인자</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 매개변수의 기본값은 무조건 undefined</span></span><br><span class="line"><span class="comment">// 매개변수의 정보는 함수 내부에서 접근이 가능한 arguments 객체에 저장됨</span></span><br><span class="line"><span class="comment">// 매개변수 기본값(Default Parameters) : a = 1, b = 1 / 외부에 값이 들어오면 외부값 사용</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a = <span class="number">1</span>, b = <span class="number">1</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// arguments 변수는 잘 사용하지는 않음</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">// 전달된 매개변수들을 &#x27;키:값&#x27;형태로 출력하는 변수</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>]); <span class="comment">// 1번쨰 매개변수 출력</span></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rest 매개변수(Rest Parameters) : 얼마나 많은 수의 매개변수가 전달될지 모를 떄 사용</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, ...numbers</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(numbers); <span class="comment">// 그 외 나머지 숫자, [3, 4, 5, 6, 7, 8]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="1-5-함수-표현식"><a href="#1-5-함수-표현식" class="headerlink" title="1.5 함수 표현식"></a>1.5 함수 표현식</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1) 함수 선언문 function name() &#123; &#125;</span></span><br><span class="line"><span class="comment">// (2) 함수 표현식 const name = function () &#123; &#125;</span></span><br><span class="line"><span class="comment">// 이는 함수가 객체이기 때문에 가능한 것임!</span></span><br><span class="line"><span class="keyword">let</span> add = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (3) 화살표 함수 const name = () =&gt; &#123; &#125;</span></span><br><span class="line">add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b; <span class="comment">// 값만 리턴하면 중괄호&#123;&#125; 생략 가능</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// (4) 생성자 함수 const object = new Function(); // 뒷장 객체편에서 다룸</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (5) IIFE (Immediately-Invoked Function Expressions, 즉각적으로 호출되는 함수 표현식)</span></span><br><span class="line"><span class="comment">// 함수를 정의하면서 호출하고 싶을 떄 사용</span></span><br><span class="line"><span class="comment">// 많이 사용하지는 않음</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;😍&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><hr><h1 id="2-콜백함수"><a href="#2-콜백함수" class="headerlink" title="2. 콜백함수"></a>2. 콜백함수</h1><h2 id="2-1-일급-함수"><a href="#2-1-일급-함수" class="headerlink" title="2.1 일급 함수"></a>2.1 일급 함수</h2><ul><li><code>일급 객체(first-class object)</code> : 일반 객체처럼 모든 연산이 가능한 것<ul><li>함수의 매개변수로 전달</li><li>함수의 반환값</li><li>할당 명령문</li><li>동일 비교 대상</li></ul></li><li><code>일급 함수(first-class function)</code> : 함수가 일반 객체처럼 모든 연산이 가능한 것<ul><li>함수의 매개변수로 전달</li><li>함수의 반환값</li><li>할당 명령문</li><li>동일 비교 대상</li></ul></li></ul><p>일급함수의 기능이 모두 가능할 떄, 해당 프로그래밍 언어는 일급 함수를 지원한다고 말합니다. 일급 함수를 지원하는 언어로는 Java 8+, Python, Swift, Kotlin 등이 있습니다.</p><hr><h2 id="2-2-고차함수-x3D-콜백함수"><a href="#2-2-고차함수-x3D-콜백함수" class="headerlink" title="2.2 고차함수(&#x3D;콜백함수)"></a>2.2 고차함수(&#x3D;콜백함수)</h2><p><code>고차 함수(Higher-order function)</code></p><ul><li>인자로 함수를 받거나(콜백 함수), 함수를 반환하는 함수를 고차함수라고 부름</li><li><code>하나 이상의 함수를 매개변수로 받거나, 함수를 결과로 반환하는 함수</code></li><li>매개변수로 전달되는 함수는 콜백 함수(Callback Function)</li><li>에러 ↓, 가독성↑<ul><li>데이터를 변경 ❌</li><li>변수 사용 ❌</li><li>조건문 ❌</li><li>반복문 ❌</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 콜백함수(callback) : 나중에(back) 호출되는(call) 함수</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">a, b</span>) =&gt; a * b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 전달된 action은 콜백함수이다.</span></span><br><span class="line"><span class="comment">// 전달될 당시에 함수를 바로 호출해서 반환된 값을 전달하는 것이 아니라</span></span><br><span class="line"><span class="comment">// 함수를 가리키고 있는 함수의 레퍼런스(참조값)가 전달된다.</span></span><br><span class="line"><span class="comment">// 그래서 함수는 고차함수안에서 필요한 순간에 호출이 나중에 됨</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculator</span>(<span class="params">a, b, action</span>) &#123; <span class="comment">// action은 콜백함수</span></span><br><span class="line">  <span class="keyword">if</span> (a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span>) &#123; <span class="comment">// a 또는 b가 0보다 작다면 undefined 반환</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="title function_">action</span>(a, b); <span class="comment">// add함수가 오면 add, multiply함수가 오면 multiply</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">calculator</span>(<span class="number">1</span>, <span class="number">1</span>, add);      <span class="comment">// 3, add함수를 콜백함수로 보냄</span></span><br><span class="line"><span class="title function_">calculator</span>(<span class="number">1</span>, <span class="number">2</span>, multiply); <span class="comment">// 2, multiply함수를 콜백함수로 보냄</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-고차함수-종류"><a href="#3-고차함수-종류" class="headerlink" title="3. 고차함수 종류"></a>3. 고차함수 종류</h1><h2 id="3-1-forEach-순회"><a href="#3-1-forEach-순회" class="headerlink" title="3.1 forEach() : 순회"></a>3.1 forEach() : 순회</h2><ul><li>for문을 대체하는 고차 함수.</li><li>반복문을 추상화하여 구현된 메서드이고 내부에서 주어진 배열을 순회하면서 연산을 수행</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, thisArr</span>) =&gt;</span> &#123;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * item : 배열 요소 값</span></span><br><span class="line"><span class="comment"> * index : 배열 인덱스</span></span><br><span class="line"><span class="comment"> * thisArr : 참조한 배열</span></span><br><span class="line"><span class="comment"> * 리턴값 없음</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numberArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">numberArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    total += item;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-2-map-순회하면서-새-배열⭐"><a href="#3-2-map-순회하면서-새-배열⭐" class="headerlink" title="3.2 map() : 순회하면서 새 배열⭐"></a>3.2 map() : 순회하면서 새 배열⭐</h2><ul><li>forEach 같이 순회하면서, 콜백함수에서의 실행결과를 리턴한 값으로 이루어진 새로운 배열을 만들어 반환</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">map</span>(<span class="function">(<span class="params">currentValue, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">&#125;, thisArg);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * currentValue : 현재 배열 요소 값</span></span><br><span class="line"><span class="comment"> * index : 배열 인덱스</span></span><br><span class="line"><span class="comment"> * array : 참조한 배열</span></span><br><span class="line"><span class="comment"> * thisArr : 콜백함수에서 this로 사용할 값</span></span><br><span class="line"><span class="comment"> * 리턴값 : 반환 타입은 찾은 요소의 타입 / 없다면 undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numberArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numberMapArr = numberArr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">&#x27;even&#x27;</span> : <span class="string">&#x27;odd&#x27;</span>; <span class="comment">// 연산한 결과값을 넣어 배열 반환</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberMapArr); <span class="comment">// [&#x27;odd&#x27;, &#x27;even&#x27;, &#x27;odd&#x27;, &#x27;even&#x27;, &#x27;odd&#x27;]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map 메서드는 콜백 함수를 호출하면서 3개(요소값, 인덱스, this)의 인수를 전달한다.</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`요소값: <span class="subst">$&#123;item&#125;</span>, 인덱스: <span class="subst">$&#123;index&#125;</span>, this: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(arr)&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> item;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 요소값: 1, 인덱스: 0, this: [1,2,3]</span></span><br><span class="line"><span class="comment">// 요소값: 2, 인덱스: 1, this: [1,2,3]</span></span><br><span class="line"><span class="comment">// 요소값: 3, 인덱스: 2, this: [1,2,3]</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-3-find-true인-값-반환"><a href="#3-3-find-true인-값-반환" class="headerlink" title="3.3 find() : true인 값 반환"></a>3.3 find() : true인 값 반환</h2><ul><li><code>indexOf()</code> 가 찾고자 하는 값을 인덱스로 주는거고,<br><code>include()</code>가 찾고자 하는 값을 Bool로 주는거면,<br><code>find()</code>는 찾고자 하는 값을 그대로 반환한다</li><li>주어진 배열을 순회하면서 콜백 함수 실행의 반환값이 true에 해당하는 첫번째 요소를 반환</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">find</span>(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">&#125;, thisArg);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * element : 현재 배열 요소 값</span></span><br><span class="line"><span class="comment"> * index : 배열 인덱스</span></span><br><span class="line"><span class="comment"> * array : 참조한 배열</span></span><br><span class="line"><span class="comment"> * thisArr : 콜백함수에서 this로 사용할 값</span></span><br><span class="line"><span class="comment"> * 리턴값 : 반환 타입은 찾은 요소의 타입 / 없다면 undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numberArr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> objectArr = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Harry&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Kim&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Steve&#x27;</span>, <span class="attr">age</span>: <span class="number">40</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 해당조건에 부합하면 item값 반환</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objectArr.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">age</span> === <span class="number">20</span>));</span><br><span class="line"><span class="comment">// &#123; name: &#x27;Harry&#x27;, age: 20 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// find는 하나만 찾음. 뒤에서 배울 filter은 여러개를 배열로</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberArr.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item === <span class="number">3</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberArr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item === <span class="number">3</span>)); <span class="comment">// [3, 3]</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-4-findIndex-true인-인덱스-반환"><a href="#3-4-findIndex-true인-인덱스-반환" class="headerlink" title="3.4 findIndex() : true인 인덱스 반환"></a>3.4 findIndex() : true인 인덱스 반환</h2><ul><li>배열 메소드 indexOf() 의 콜백함수 버젼.</li><li>고차함수 find()의 리턴값이 인덱스인 버젼.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">&#125;, thisArg);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * element : 현재 배열 요소 값</span></span><br><span class="line"><span class="comment"> * index : 배열 인덱스</span></span><br><span class="line"><span class="comment"> * array : 참조한 배열</span></span><br><span class="line"><span class="comment"> * thisArr : 콜백함수에서 this로 사용할 값</span></span><br><span class="line"><span class="comment"> * 리턴값 : 요소가 테스트를 통과하면 배열의 인덱스 / 그렇지 않다면 -1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objectArr = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Harry&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Kim&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Steve&#x27;</span>, <span class="attr">age</span>: <span class="number">40</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 해당조건에 부합하면 item의 인덱스를 반환</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objectArr.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">age</span> === <span class="number">20</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objectArr.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">name</span> === <span class="string">&#x27;Kim&#x27;</span>)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-5-filter-true인-값-새-배열⭐"><a href="#3-5-filter-true인-값-새-배열⭐" class="headerlink" title="3.5 filter() : true인 값 새 배열⭐"></a>3.5 filter() : true인 값 새 배열⭐</h2><ul><li>주어진 배열을 순회하면서 콜백 함수의 반환값이 true에 해당하는 요소로만 구성된 새로운 배열을 생성하여 반환.</li><li>한마디로 find()의 찾아서 값을 반환하는 기능과 map()의 배열 생성 기능의 융합 버젼.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">&#125;, thisArg);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * element : 현재 배열 요소 값</span></span><br><span class="line"><span class="comment"> * index : 배열 인덱스</span></span><br><span class="line"><span class="comment"> * array : 참조한 배열</span></span><br><span class="line"><span class="comment"> * thisArr : 콜백함수에서 this로 사용할 값</span></span><br><span class="line"><span class="comment"> * 리턴값 : 테스트를 통과한 요소로 이루어진 새로운 배열</span></span><br><span class="line"><span class="comment"> * - 어떤 요소도 테스트를 통과하지 못했다면 빈 배열 반환</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numberArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numberFilterArr = numberArr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item % <span class="number">2</span> === <span class="number">0</span>; <span class="comment">// 해당조건에 부합으면 item을 넣어 배열 반환</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberFilterArr); <span class="comment">// [2, 4]</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-6-reduce-누적값-반환⭐"><a href="#3-6-reduce-누적값-반환⭐" class="headerlink" title="3.6 reduce() : 누적값 반환⭐"></a>3.6 reduce() : 누적값 반환⭐</h2><ul><li><p>콜백 함수의 실행된 반환값(initialValue)을 전달 받아 연산의 결과값이 반환.</p></li><li><p>첫번째 인자(accumulator)서부터 시작해서 </p><ul><li>배열값인 두번째 인자(currentvalue) 을 순회하며 accumulator+&#x3D;currentvalue 을 실행.</li></ul></li><li><p>사실상 forEach, map, filter기능을 reduce로 모두 구현해서 쓸순 있어 고차함수의 부모라고 불림</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator, currentValue, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">&#125;, initialValue);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * accumulator : 누산기, 순회하면서 계속 더해져서 합쳐지는 값</span></span><br><span class="line"><span class="comment"> * currentValue : 현재 값</span></span><br><span class="line"><span class="comment"> * index : 배열 인덱스</span></span><br><span class="line"><span class="comment"> * array : 참조한 배열</span></span><br><span class="line"><span class="comment"> * initialValue : 콜백 최초 호출에서 acc 누산기에 제공하는 값</span></span><br><span class="line"><span class="comment"> * - 초기값을 제공하지 않으면 배열의 첫 번쟤 요소를 사용</span></span><br><span class="line"><span class="comment"> * - 빈 배열에서 초기값없이 호출하면 에러</span></span><br><span class="line"><span class="comment"> * 리턴값 : 누적 계산의 결과값</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>reduce()함수 호출시 initialValue 값이 <code>없는 경우</code></p><ul><li>accumulator : 배열의 첫번째 값</li><li>currentValue : 배열의 두번째 값</li></ul><p>reduce()함수 호출시 initialValue 값이 <code>있는 경우</code></p><ul><li>accumulator : initialValue가 지정한 값</li><li>currentValue : 배열의 첫번째 값</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numberArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = numberArr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">previousValue, currentValue, currentIndex, thisArray</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Current Index: &#x27;</span> + currentIndex + <span class="string">&#x27; / Previous Value: &#x27;</span> + previousValue + <span class="string">&#x27; / Current Value: &#x27;</span> + currentValue);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 연산한 결과값을 누산기previousValue에 넣어 최종값을 얻는다.</span></span><br><span class="line">  <span class="keyword">return</span> previousValue + currentValue; </span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Sum: &#x27;</span> + sum);</span><br><span class="line"><span class="comment">// Current Index: 0 / Previous Value: 0 / Current Value: 1</span></span><br><span class="line"><span class="comment">// Current Index: 1 / Previous Value: 1 / Current Value: 2</span></span><br><span class="line"><span class="comment">// Current Index: 2 / Previous Value: 3 / Current Value: 3</span></span><br><span class="line"><span class="comment">// Current Index: 3 / Previous Value: 6 / Current Value: 4</span></span><br><span class="line"><span class="comment">// Current Index: 4 / Previous Value: 10 / Current Value: 5</span></span><br><span class="line"><span class="comment">// Sum: 15</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-7-sort-배열-정렬⭐"><a href="#3-7-sort-배열-정렬⭐" class="headerlink" title="3.7 sort() : 배열 정렬⭐"></a>3.7 sort() : 배열 정렬⭐</h2><ul><li>배열 정렬.</li><li>단, 복사본이 만들어지는게 아니라 원 배열이 정렬됨.</li><li><code>요소를 문자열로 변환 한 후, UTF-16 코드 단위 값</code>으로 비교</li><li>콜백 함수를 통해 배열의 원소들을 어느 기준으로 정렬할지 지정해야함 (번거로움)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;, thisArg);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * compareFunction : 정렬 순서를 정의하는 함수</span></span><br><span class="line"><span class="comment"> * (이 값이 생략되면, 배열의 element들을 문자열로 취급되어, 유니코드 값 순서대로 정렬)</span></span><br><span class="line"><span class="comment"> * (이 값을 사용하면, 반환 값에 따라 정렬된다.)</span></span><br><span class="line"><span class="comment"> * 리턴 값: sorting된 값</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;white&#x27;</span>, <span class="string">&#x27;black&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">sort</span>()); <span class="comment">// [ &#x27;black&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;red&#x27;, &#x27;white&#x27; ]</span></span><br></pre></td></tr></table></figure><p>문자를 정렬할 때는 문제없지만, <code>숫자를 정렬하는 경우에도 ABC 순으로 정렬</code>이 되기 때문에 콜백함수를 넣어 조작이 필요하다. 콜백함수에서 인자 두개를 받아, 두 수의 차가 양수값(큰값)이냐 음수값(작은값)이냐를 이용하여 정렬한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">8</span>, <span class="number">4</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>(); <span class="comment">// [ 1, 10, 2, 3, 4, 50, 70, 8 ]</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10 1</span></span><br><span class="line"><span class="comment">2 10</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">4 3</span></span><br><span class="line"><span class="comment">50 4</span></span><br><span class="line"><span class="comment">70 50</span></span><br><span class="line"><span class="comment">8 70</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">8</span>, <span class="number">4</span>];</span><br><span class="line">arr2.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (a === b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;); <span class="comment">// [ 1, 2, 3, 4, 8, 10, 50, 70 ]</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-7-1-숫자-정렬"><a href="#3-7-1-숫자-정렬" class="headerlink" title="3.7.1 숫자 정렬"></a>3.7.1 숫자 정렬</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 1(양수)은 그대로 출력, -1(음수)은 역순으로 출력</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// a는 2번쨰꺼, b는 비교하고 있는 대상</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 2  = -1 | 1</span></span><br><span class="line"><span class="comment">3 1  = 2  | 2</span></span><br><span class="line"><span class="comment">10 3 = 7  | -7</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// sort() : 음수면 자리가 바뀌고, 양수면 그대로</span></span><br><span class="line"><span class="comment">// 숫자가 작으면 앞으로, 크면 뒤로</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;); <span class="comment">// [1, 2, 3, 10] 오름차순</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> b - a;</span><br><span class="line">&#125;); <span class="comment">// [10, 3, 2, 1] 내립차순</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-7-2-문자-정렬"><a href="#3-7-2-문자-정렬" class="headerlink" title="3.7.2 문자 정렬"></a>3.7.2 문자 정렬</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;boy&#x27;</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>(); <span class="comment">// [&#x27;b&#x27;, &#x27;banana&#x27;, &#x27;boy&#x27;]</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (a === b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;); <span class="comment">// [&#x27;boy&#x27;, &#x27;banana&#x27;, &#x27;b&#x27;] 내림차순</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-7-3-문자-대소문자-구분없이-정렬"><a href="#3-7-3-문자-대소문자-구분없이-정렬" class="headerlink" title="3.7.3 문자(대소문자 구분없이) 정렬"></a>3.7.3 문자(대소문자 구분없이) 정렬</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;Boy&#x27;</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>(); <span class="comment">// [&#x27;Boy&#x27;,&#x27;b&#x27;,&#x27;banana&#x27;]</span></span><br><span class="line"><span class="comment">// sort() 함수로 문자열을 정렬하면, 대문자가 소문자보다 앞에 오도록 정렬이 됩니다.</span></span><br><span class="line"><span class="comment">// 유니코드가 대문자가 소문자보다 앞서기 때문입니다.</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> upperCaseA = a.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  <span class="keyword">const</span> upperCaseB = b.<span class="title function_">toUpperCase</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (upperCaseA &gt; upperCaseB) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (upperCaseA &lt; upperCaseB) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (upperCaseA === upperCaseB) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;); <span class="comment">// [&#x27;b&#x27;, &#x27;banana&#x27;, &#x27;Boy&#x27;] 오름차순</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> upperCaseA = a.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  <span class="keyword">const</span> upperCaseB = b.<span class="title function_">toUpperCase</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (upperCaseA &lt; upperCaseB) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (upperCaseA &gt; upperCaseB) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (upperCaseA === upperCaseB) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;); <span class="comment">// [&#x27;Boy&#x27;, &#x27;banana&#x27;, &#x27;b&#x27;] 내림차순</span></span><br></pre></td></tr></table></figure><h3 id="3-7-4-객체-정렬"><a href="#3-7-4-객체-정렬" class="headerlink" title="3.7.4 객체 정렬"></a>3.7.4 객체 정렬</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;banana&#x27;</span>, <span class="attr">price</span>: <span class="number">3000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="attr">price</span>: <span class="number">1000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;orange&#x27;</span>, <span class="attr">price</span>: <span class="number">500</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a.<span class="property">price</span> - b.<span class="property">price</span>; <span class="comment">// price 숫자값을 기준으로 정렬</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;&quot;name&quot;:&quot;orange&quot;,&quot;price&quot;:500&#125;</span></span><br><span class="line"><span class="comment">&#123;&quot;name&quot;:&quot;apple&quot;,&quot;price&quot;:1000&#125;</span></span><br><span class="line"><span class="comment">&#123;&quot;name&quot;:&quot;banana&quot;,&quot;price&quot;:3000&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-8-some-일부만-맞으면-true"><a href="#3-8-some-일부만-맞으면-true" class="headerlink" title="3.8 some() : 일부만 맞으면 true"></a>3.8 some() : 일부만 맞으면 true</h2><ul><li>배열 메소드인 include()의 콜백함수 버전.</li><li>include는 값이 있냐에 따른 bool이면, some은 함수의 로직에 따른 bool.</li><li>배열의 요소들을 주어진 함수(조건)을 통과하는데 한개라도 통과되면 true, 아닐때에는 false를 출력.</li><li>빈 배열로 함수(조건)을 통과하면 무조건 false를 출력.</li><li>이와같이 some이라는 이름은, 함수(조건)에 부합한 갯수가 some이면 true라는 뜻에서 비롯됨.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">some</span>(<span class="function">(<span class="params">currentValue, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;, thisArg);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * currentValue : 배열 요소 값</span></span><br><span class="line"><span class="comment"> * index : 배열 인덱스</span></span><br><span class="line"><span class="comment"> * array : 참조한 배열</span></span><br><span class="line"><span class="comment"> * thisArr : 콜백함수에서 this로 사용할 값</span></span><br><span class="line"><span class="comment"> * 리턴값 : callback이 어떤 배열 요소라도 대해 참인 값을 반환하는 경우 true, 그 외엔 false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 짝수인지 체크</span></span><br><span class="line"><span class="keyword">const</span> result = array.<span class="title function_">some</span>(<span class="function">(<span class="params">currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> currentValue % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 리턴 값 : false</span></span><br><span class="line"><span class="comment">// 그 이유는 array의 3개의 요소 모두 2로 나눌때 나머지가 0이 아니기 때문이다.</span></span><br><span class="line"><span class="comment">// 하나라도 부합한 조건에 맞으면 true, 모두 부합하지 않으면 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------------------------------</span></span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result2 = array2.<span class="title function_">some</span>(<span class="function">(<span class="params">currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> currentValue % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">// 리턴 값 : true</span></span><br><span class="line"><span class="comment">// 그 이유는 array의 4개의 요소 모두 2로 나눌때 나머지가 0인 요소가 하나라도 있기 때문이다.</span></span><br><span class="line"><span class="comment">// 하나라도 부합한 조건에 맞으면 true, 모두 부합하지 않으면 false</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-9-every-전부-맞아야-true"><a href="#3-9-every-전부-맞아야-true" class="headerlink" title="3.9 every() : 전부 맞아야 true"></a>3.9 every() : 전부 맞아야 true</h2><ul><li>some() 의 반대 버전</li><li>배열안의 모든 요소가 주어진 함수(조건)을 모두 통과하면 true, 한 요소라도 통과하지 못하면 false를 출력.</li><li>빈 배열을 함수에 적용시키면 무조건 true를 반환.</li><li>이와같이 every이라는 이름은, 함수(조건)에 부합한 갯수가 every이면 true라는 뜻에서 비롯됨.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">every</span>(<span class="function">(<span class="params">currentValue, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;, thisArg);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * currentValue : 배열 요소 값</span></span><br><span class="line"><span class="comment"> * index : 배열 인덱스</span></span><br><span class="line"><span class="comment"> * array : 참조한 배열</span></span><br><span class="line"><span class="comment"> * thisArr : 콜백함수에서 this로 사용할 값</span></span><br><span class="line"><span class="comment"> * 리턴값 : callback이 어떤 배열 요소라도 대해 참인 값을 반환하는 경우 true, 그 외엔 false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">30</span>, <span class="number">39</span>, <span class="number">29</span>, <span class="number">13</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = array.<span class="title function_">every</span>(<span class="function">(<span class="params">currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> currentValue &lt; <span class="number">40</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 리턴 값 : true</span></span><br><span class="line"><span class="comment">// 그 이유는 array의 모든 요소가 40보다 작기 때문이다.</span></span><br><span class="line"><span class="comment">// 하나라도 부합한 조건에 맞지 안으면 false, 모두 부합하면 true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------------------------------</span></span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="number">1</span>, <span class="number">30</span>, <span class="number">39</span>, <span class="number">29</span>, <span class="number">100</span>, <span class="number">13</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result2 = array2.<span class="title function_">every</span>(<span class="function">(<span class="params">currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> currentValue &lt; <span class="number">40</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">// 리턴 값 : false</span></span><br><span class="line"><span class="comment">// 그 이유는 array의 1개의 요소 100이 40보다 크기 때문이다.</span></span><br><span class="line"><span class="comment">// 하나라도 부합한 조건에 맞지 안으면 false, 모두 부합하면 true</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-10-flatMap-flat-map"><a href="#3-10-flatMap-flat-map" class="headerlink" title="3.10 flatMap() : flat() + map()"></a>3.10 flatMap() : flat() + map()</h2><ul><li>배열을 평탄화하는 <code>flat()의 기능</code>에 배열의 각 요소에 접근하여 사용자 정의 로직을 수행할 수 있는 <code>map()의 기능</code>을 합친 함수</li><li>flat()과 달리 <code>깊이를 최대 1만큼만 평탄</code>하게 만들 수 있음</li><li><code>여러 깊이까지 가려면 flat()를 사용</code>합니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> children = [[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>]];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(children.<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x * <span class="number">2</span>).<span class="title function_">flat</span>()); <span class="comment">// [ 2, 4, 6, 8 ]</span></span><br><span class="line"><span class="comment">// 위 float과 map 문장을 floatMap을 이용해 만들 수 있다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(children.<span class="title function_">flatMap</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> [x * <span class="number">2</span>])); <span class="comment">// [ 2, 4, 6, 8 ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-11-from-에서-⭐"><a href="#3-11-from-에서-⭐" class="headerlink" title="3.11 from() : ~에서 ⭐"></a>3.11 from() : ~에서 ⭐</h2><p> 문자열 등 유사 배열(Array-like) 객체나 이터러블한 객체를 배열로 만들어주는 메서드</p><blockquote><p>‘유사 배열 객체’란, 키가 인덱스 값으로 되어있고 길이를 나타내는 length 속성을 갖는 객체를 의미</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 문자열을 배열로 만드는 예시</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line"><span class="comment">// [ &#x27;H&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 유사 배열 객체를 배열로 만드는 예시</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="number">0</span>: <span class="string">&quot;찬민&quot;</span>, <span class="number">1</span>: <span class="string">&quot;희진&quot;</span>, <span class="number">2</span>: <span class="string">&quot;태인&quot;</span>, <span class="attr">length</span>: <span class="number">3</span> &#125;));</span><br><span class="line"><span class="comment">// [ &#x27;찬민&#x27;, &#x27;희진&#x27;, &#x27;태인&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 함수의 매개변수들을 순서대로 배열로 만드는 예시</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">funcA</span> = (<span class="params">...<span class="variable language_">arguments</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">funcA</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>));</span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><p><code>Array.from()</code> </p><ul><li>첫 번째 인자는 배열로 만들 이터러블한 객체가 되며,</li><li>두 번째 인자는 생성한 배열의 모든 원소에 대해 수행할 맵핑 함수입니다. (<code>Array.map()</code> 이라고 생각하시면 됩니다.)</li></ul><p> 한번 <code>Array.from()</code>과 반복문을 활용해 1부터 31까지의 수를 원소로 갖는 배열을 생성해 보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 맵핑 함수의 첫 번째 인자 언더스코어(_) 는 특별한 인자가 아니라,</span></span><br><span class="line"><span class="comment">// 불필요한 인자의 공간을 채우기 위한 용도입니다.</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">31</span>), <span class="function">(<span class="params">_, index</span>) =&gt;</span> index + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><p>만약 <code>Array.from()</code>을 사용하지 않는다면 아래처럼 고전적인 반복문을 사용해야 합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">31</span>; i++) &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-09-조건문 &amp; 에러처리(Control Flow)</title>
      <link href="/2023/01/03/Front-JS-Basic-09-ControlFlow/"/>
      <url>/2023/01/03/Front-JS-Basic-09-ControlFlow/</url>
      
        <content type="html"><![CDATA[<h1 id="1-조건문"><a href="#1-조건문" class="headerlink" title="1. 조건문"></a>1. 조건문</h1><h2 id="1-1-if문"><a href="#1-1-if문" class="headerlink" title="1.1 if문"></a>1.1 if문</h2><ul><li>cf. <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/if...else">MDN if</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 조건문 Conditional Statement</span></span><br><span class="line"><span class="comment">// if(조건) &#123; &#125;</span></span><br><span class="line"><span class="comment">// if(조건) &#123; &#125; else &#123;&#125;</span></span><br><span class="line"><span class="comment">// if(조건1) &#123; &#125; else if(조건2) &#123;&#125; else &#123;&#125;</span></span><br><span class="line"><span class="keyword">let</span> fruit = <span class="string">&#x27;orange&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (fruit === <span class="string">&#x27;apple&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🍎&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (fruit === <span class="string">&#x27;orange&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🍊&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;😍&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> &lt; <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;출력되면 안됨!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-2-삼항-연산자"><a href="#1-2-삼항-연산자" class="headerlink" title="1.2 삼항 연산자"></a>1.2 삼항 연산자</h2><ul><li>cf. <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Conditional_Operator">MDN 삼항조건연산자</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 삼항 조건 연산자 Ternary Operator</span></span><br><span class="line"><span class="comment">// 조건식 ? 참인경우 : 거짓인경우</span></span><br><span class="line"><span class="keyword">let</span> fruit = <span class="string">&#x27;apple&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (fruit === <span class="string">&#x27;apple&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🍎&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;😍&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fruit === <span class="string">&#x27;apple&#x27;</span> ? <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🍎&#x27;</span>) : <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;😍&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> emoji = fruit === <span class="string">&#x27;apple&#x27;</span> ? <span class="string">&#x27;🍎&#x27;</span> : <span class="string">&#x27;😍&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(emoji);</span><br></pre></td></tr></table></figure><hr><h2 id="1-3-switch문"><a href="#1-3-switch문" class="headerlink" title="1.3 switch문"></a>1.3 switch문</h2><ul><li>언제 if를 쓰고 언제 switch를 쓰나?<ul><li>정해진 범위안의 값에 대해 특정한 일을 해야 하는 경우</li><li>if문을 쓰면, if else if else if else if … else 길어짐</li></ul></li><li>cf. <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/switch">MDN switch</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 조건문 Conditional Statement</span></span><br><span class="line"><span class="comment">// switch</span></span><br><span class="line"><span class="comment">// if else if else if else if ... else</span></span><br><span class="line"><span class="keyword">let</span> day = <span class="number">6</span>; <span class="comment">// 0:월요일, 1: 화요일... 6: 일요일</span></span><br><span class="line"><span class="keyword">let</span> dayName;</span><br><span class="line"><span class="keyword">if</span> (day === <span class="number">0</span>) &#123;</span><br><span class="line">  dayName = <span class="string">&#x27;월요일&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (day === <span class="number">1</span>) &#123;</span><br><span class="line">  dayName = <span class="string">&#x27;화요일&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (day === <span class="number">2</span>) &#123;</span><br><span class="line">  dayName = <span class="string">&#x27;수요일&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (day === <span class="number">3</span>) &#123;</span><br><span class="line">  dayName = <span class="string">&#x27;목요일&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (day === <span class="number">4</span>) &#123;</span><br><span class="line">  dayName = <span class="string">&#x27;금요일&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (day === <span class="number">5</span>) &#123;</span><br><span class="line">  dayName = <span class="string">&#x27;토요일&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (day === <span class="number">6</span>) &#123;</span><br><span class="line">  dayName = <span class="string">&#x27;일요일&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    dayName = <span class="string">&#x27;월요일&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    dayName = <span class="string">&#x27;화요일&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    dayName = <span class="string">&#x27;수요일&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    dayName = <span class="string">&#x27;목요일&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    dayName = <span class="string">&#x27;금요일&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    dayName = <span class="string">&#x27;토요일&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    dayName = <span class="string">&#x27;일요일&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;해당하는 요일이 없음!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dayName); <span class="comment">// 일요일</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> condition = <span class="string">&#x27;bad&#x27;</span>; <span class="comment">// okay, good  -&gt; 좋음!, bad -&gt; 나쁨!</span></span><br><span class="line"><span class="keyword">let</span> text;</span><br><span class="line"><span class="keyword">switch</span> (condition) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;okay&#x27;</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;good&#x27;</span>:</span><br><span class="line">    text = <span class="string">&#x27;좋음!&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;bad&#x27;</span>:</span><br><span class="line">    text = <span class="string">&#x27;나쁨!&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text); <span class="comment">// 나쁨!</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-에러-처리"><a href="#2-에러-처리" class="headerlink" title="2. 에러 처리"></a>2. 에러 처리</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.error-handling.js</span></span><br><span class="line"><span class="comment">// try catch finally 문</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readFile</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="comment">// throw : 에러를 던짐, 즉 에러 발생</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;파일 경로를 찾을 수 없음&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;파일의 내용&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processFile</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> content;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    content = <span class="title function_">readFile</span>(path);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 예상하지 못한 에러가 발생하면</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    content = <span class="string">&#x27;기본내용&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;성공하든 실패하든 마지막으로 리소스를 정리함!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="string">&#x27;hi &#x27;</span> + content;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">processFile</span>(<span class="string">&#x27;경로&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><hr><h2 id="2-1-에러-버블링"><a href="#2-1-에러-버블링" class="headerlink" title="2.1 에러 버블링"></a>2.1 에러 버블링</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.error-bubbling.js</span></span><br><span class="line"><span class="comment">// 에러가 Bubbling up(위로 올라가는), Propagating(전파되는) 🧼</span></span><br><span class="line"><span class="comment">// 내가 처리할 수 있는 곳에서 에러 처리하는 법</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error!&#x27;</span>); <span class="comment">// 에러 발생할 떄, 에러를 던지는 throw</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title function_">a</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;생각해보니깐 이 에러는 내가 핸들링 할 수 없을 것 같군!&#x27;</span>);</span><br><span class="line">    <span class="keyword">throw</span> error; <span class="comment">// 다시 에러를 던지기</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">b</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">c</span>(); <span class="comment">// C를 실행, c -&gt; b -&gt; a</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Catched!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;done!&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-08-반복문(Loops and Iterations)</title>
      <link href="/2023/01/03/Front-JS-Basic-08-Loop/"/>
      <url>/2023/01/03/Front-JS-Basic-08-Loop/</url>
      
        <content type="html"><![CDATA[<h1 id="1-반복문-for"><a href="#1-반복문-for" class="headerlink" title="1. 반복문 for"></a>1. 반복문 for</h1><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/for">MDN for</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 반복문 Loop Statement</span></span><br><span class="line"><span class="comment">// for(변수선언문; 조건식; 증감식) &#123; &#125;</span></span><br><span class="line"><span class="comment">// 실행순서:</span></span><br><span class="line"><span class="comment">// 1. 변수선언문</span></span><br><span class="line"><span class="comment">// 2. 조건식의 값이 참이면  &#123; &#125; 코드블럭을 수행</span></span><br><span class="line"><span class="comment">// 3. 증감식을 수행</span></span><br><span class="line"><span class="comment">// 4. 조건식이 거짓이 될때까지 2번과 3번을 반복함</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i, j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 무한루프 💩</span></span><br><span class="line"><span class="comment">// for (;;) &#123;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 반복문 제어: continue, break;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>; <span class="comment">// 10을 넘어가고 그 다음 반복문 수행</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i가 드디어 10이 되었다!&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="2-반복문-while"><a href="#2-반복문-while" class="headerlink" title="2. 반복문 while"></a>2. 반복문 while</h1><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/while">MDN while</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while(조건) &#123;&#125;</span></span><br><span class="line"><span class="comment">// 조건이 false가 될때까지 &#123;&#125; 코드를 반복 실행</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">while</span> (num &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 5 4 3 2 1 0</span></span><br><span class="line">  num--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 무한루프문</span></span><br><span class="line"><span class="keyword">let</span> isActive = <span class="literal">false</span>; <span class="comment">// true로 바꾸면 무한 실행</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (isActive) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;아직살아있다!&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">1000</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// do-while문 : do에 있는 문 무조건 한번 실행하고 while문 수행</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;do-while 아직살아있다!&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (isActive);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-07-표현식과 연산자(Express and Operators)</title>
      <link href="/2023/01/02/Front-JS-Basic-07-Operators/"/>
      <url>/2023/01/02/Front-JS-Basic-07-Operators/</url>
      
        <content type="html"><![CDATA[<h1 id="1-연산자"><a href="#1-연산자" class="headerlink" title="1. 연산자"></a>1. 연산자</h1><p>JavaScript의 연산자는 다음과 같은 유형으로 나눌 수 있습니다.</p><ul><li><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators#%ED%95%A0%EB%8B%B9_%EC%97%B0%EC%82%B0%EC%9E%90">할당 연산자</a></p></li><li><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators#%EB%B9%84%EA%B5%90_%EC%97%B0%EC%82%B0%EC%9E%90">비교 연산자</a></p></li><li><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators#%EC%82%B0%EC%88%A0_%EC%97%B0%EC%82%B0%EC%9E%90">산술 연산자</a></p></li><li><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators#%EB%B9%84%ED%8A%B8_%EC%97%B0%EC%82%B0%EC%9E%90">비트 연산자</a></p></li><li><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators#%EB%85%BC%EB%A6%AC_%EC%97%B0%EC%82%B0%EC%9E%90">논리 연산자</a></p><ul><li>단축평가</li></ul></li><li><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators#%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%97%B0%EC%82%B0%EC%9E%90">문자열 연산자</a></p></li><li><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators#%EC%A1%B0%EA%B1%B4_%EC%82%BC%ED%95%AD_%EC%97%B0%EC%82%B0%EC%9E%90">조건 (삼항) 연산자</a></p></li><li><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators#%EC%89%BC%ED%91%9C_%EC%97%B0%EC%82%B0%EC%9E%90">쉼표 연산자</a></p></li><li><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators#%EB%8B%A8%ED%95%AD_%EC%97%B0%EC%82%B0%EC%9E%90">단항 연산자</a></p></li><li><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators#%EA%B4%80%EA%B3%84_%EC%97%B0%EC%82%B0%EC%9E%90">관계 연산자</a></p></li></ul><hr><h2 id="1-1-산술-연산자-arthmetic"><a href="#1-1-산술-연산자-arthmetic" class="headerlink" title="1.1 산술 연산자(arthmetic)"></a>1.1 산술 연산자(arthmetic)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 산술 연산자 (Arithmetic operators)</span></span><br><span class="line"><span class="comment">// 📝 + 더하기</span></span><br><span class="line"><span class="comment">// 📝 - 빼기</span></span><br><span class="line"><span class="comment">// 📝 * 곱하기</span></span><br><span class="line"><span class="comment">// 📝 / 나누기</span></span><br><span class="line"><span class="comment">// 📝 % 나머지값</span></span><br><span class="line"><span class="comment">// 📝 ** 지수 (거듭제곱)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> + <span class="number">2</span>);  <span class="comment">// 7</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> - <span class="number">2</span>);  <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> * <span class="number">2</span>);  <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> / <span class="number">2</span>);  <span class="comment">// 2.5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> % <span class="number">2</span>);  <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> ** <span class="number">2</span>); <span class="comment">// es7에서 추가됨, 25</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">5</span>, <span class="number">2</span>)); <span class="comment">// 25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// + 연산자 주의점! : 숫자와 문자열을 더하면 문자열로 변환됨</span></span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&#x27;두개의&#x27;</span> + <span class="string">&#x27;문자를&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text); <span class="comment">// 두개의 문자를</span></span><br><span class="line">text = <span class="string">&#x27;1&#x27;</span> + <span class="number">1</span>; <span class="comment">// 숫자와 문자열을 더하면 문자열로 변환됨</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text); <span class="comment">// 문자열 11</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-2-단항-연산자-unary"><a href="#1-2-단항-연산자-unary" class="headerlink" title="1.2 단항 연산자(unary)"></a>1.2 단항 연산자(unary)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 단항연산자 Unary Operators</span></span><br><span class="line"><span class="comment">// 📝 + (양)</span></span><br><span class="line"><span class="comment">// 📝 - (음)</span></span><br><span class="line"><span class="comment">// 📝 ! (부정)</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">a = -a; <span class="comment">// -1 * 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// -5</span></span><br><span class="line">a = -a; <span class="comment">// -1 * -5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">a = +a; <span class="comment">// +5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">a = -a; <span class="comment">// -5</span></span><br><span class="line">a = +a; <span class="comment">// +(-5)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// -5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 부정연산자 !</span></span><br><span class="line"><span class="keyword">let</span> boolean = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boolean);   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!boolean);  <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!boolean); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">clear</span>(); <span class="comment">// 이전 값들 지우는 함수 clear</span></span><br><span class="line"><span class="comment">// + 숫자가 아닌 타입들을 숫자로 변환하면 어떤값이 나오는지 확인할 수 있음</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="literal">false</span>);  <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="literal">null</span>);   <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="string">&#x27;&#x27;</span>);     <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="literal">true</span>);   <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="string">&#x27;text&#x27;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="literal">undefined</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="number">1</span>); <span class="comment">// true, ! 부정연산자</span></span><br><span class="line"><span class="comment">// !! 값을 boolean 타입으로 변환함</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-3-할당-연산자-assignment"><a href="#1-3-할당-연산자-assignment" class="headerlink" title="1.3 할당 연산자(assignment)"></a>1.3 할당 연산자(assignment)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 할당연산자 (Assignment operators)</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">a = a + <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">a += <span class="number">2</span>; <span class="comment">// a = a + 2; 축약버전</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">a -= <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">a *= <span class="number">2</span>; <span class="comment">// 3 * 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line">a /= <span class="number">2</span>;</span><br><span class="line">a %= <span class="number">2</span>;</span><br><span class="line">a **= <span class="number">2</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="1-4-증감-연산자-increment"><a href="#1-4-증감-연산자-increment" class="headerlink" title="1.4 증감 연산자(increment)"></a>1.4 증감 연산자(increment)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 증가 &amp; 감소 연산자 Increment &amp; Decrement Operators</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 0</span></span><br><span class="line">a++; <span class="comment">// a = a + 1;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line">a--; <span class="comment">// a = a - 1;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 주의!</span></span><br><span class="line"><span class="comment">// 📝 a++ 필요한 연산을 하고, 그 뒤 값을 증가시킴</span></span><br><span class="line"><span class="comment">// 📝 ++a 값을 먼저 증가하고, 필요한 연산을 함</span></span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a++); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);   <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> b = a++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);   <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);   <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-5-비교-연산자-relational"><a href="#1-5-비교-연산자-relational" class="headerlink" title="1.5 비교 연산자(relational)"></a>1.5 비교 연산자(relational)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 대소 관계 비교 연산자 (Relational operators)</span></span><br><span class="line"><span class="comment">// 📝 &gt; 크다</span></span><br><span class="line"><span class="comment">// 📝 &lt; 작다</span></span><br><span class="line"><span class="comment">// 📝 &gt;= 크거나 같다</span></span><br><span class="line"><span class="comment">// 📝 &lt;= 작거나 같다</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> &gt; <span class="number">3</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> &lt; <span class="number">3</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">2</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt; <span class="number">2</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt;= <span class="number">2</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt;= <span class="number">3</span>); <span class="comment">// ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt;= <span class="number">3</span>); <span class="comment">// ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt;= <span class="number">2</span>); <span class="comment">// ture</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-6-연산자-우선순위-priority"><a href="#1-6-연산자-우선순위-priority" class="headerlink" title="1.6 연산자 우선순위(priority)"></a>1.6 연산자 우선순위(priority)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> result = ((a + b) * <span class="number">4</span>) / <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">result = a++ + b * <span class="number">4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 14</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">MDN 연산자 우선순위</a></li><li>굳이 암기할 필요없음.</li><li>정보처리기사칠 떄 외우는 용<ul><li><code>증산시 관비 논삼대</code>(증산시의 관노비가 논을 산데)</li><li>증감 &#x2F; 산술 &#x2F; 시프트 &#x2F; 관계 &#x2F; 비트 &#x2F; 논리 &#x2F; 삼항 &#x2F; 대입</li></ul></li></ul><hr><h2 id="1-7-동등-비교-연산자-equality"><a href="#1-7-동등-비교-연산자-equality" class="headerlink" title="1.7 동등 비교 연산자(equality)"></a>1.7 동등 비교 연산자(equality)</h2><table><thead><tr><th align="center">의미</th><th align="center">비교 연산자</th><th align="left">설명</th></tr></thead><tbody><tr><td align="center"><code>동등 비교(loose equality)</code></td><td align="center">x &#x3D;&#x3D; y</td><td align="left"><code>x와 y의 값</code>이 같음</td></tr><tr><td align="center"><code>일치 비교(strict equality)</code></td><td align="center">x &#x3D;&#x3D;&#x3D; y</td><td align="left"><code>x와 y의 값과 타입</code>이 같음</td></tr><tr><td align="center">부등 비교</td><td align="center">x !&#x3D; y</td><td align="left">x와 y의 값이 다름</td></tr><tr><td align="center">불일치 비교</td><td align="center">x !&#x3D;&#x3D; y</td><td align="left">x와 y의 값과 타입이 다름</td></tr></tbody></table><ul><li><code>==</code> : 느슨한 비교<ul><li><strong>자료의 타입변환을 JS 엔진이 알아서 해보고 동일하면 true라고 판정</strong></li></ul></li><li><code>===</code> : 엄격한 비교<ul><li><strong>자료의 타입까지 동일해야 true라고 판정</strong></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 동등 비교 관계 연산자 (Equality operators)</span></span><br><span class="line"><span class="comment">// 📝 == 값이 같음</span></span><br><span class="line"><span class="comment">// 📝 != 값이 다름</span></span><br><span class="line"><span class="comment">// 📝 === 값과 타입이 둘다 같음</span></span><br><span class="line"><span class="comment">// 📝 !== 값과 타입이 다름</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> == <span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> != <span class="number">2</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> != <span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> == <span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> == <span class="string">&#x27;2&#x27;</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> === <span class="string">&#x27;2&#x27;</span>); <span class="comment">// false✨</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> == <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> === <span class="number">1</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> == <span class="number">0</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> === <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">clear</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;js&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;js&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 == obj2);  <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 === obj2); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span> == obj2.<span class="property">name</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span> === obj2.<span class="property">name</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = obj2;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3 == obj2);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3 === obj2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h3 id="1-7-1-배열-동등-비교"><a href="#1-7-1-배열-동등-비교" class="headerlink" title="1.7.1 배열 동등 비교"></a>1.7.1 배열 동등 비교</h3><p>숫자나 문자열 비교할때는 <code>==</code> 이나 <code>===</code> 연산자를 이용하면 되지만, 배열이나 객체를 비교할때는 불가능하다.<br>왜냐하면 reference 타입으로써 값이 비교 되는 것이 아닌 주소값이 비교되기 때문이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 구성을 비교하는게 아닌 배열 메모리 주소값 비교가 된다</span></span><br><span class="line">a == b; <span class="comment">// false</span></span><br><span class="line">a === b; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>그래서 배열을 동등비교하려면 <code>JSON.stringify()</code>을 사용해야 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">equals</span> = (<span class="params">a, b</span>) =&gt; <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(a) === <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_">equals</span>(a, b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-표현식"><a href="#2-표현식" class="headerlink" title="2. 표현식"></a>2. 표현식</h1><h2 id="2-1-리터럴-Literal"><a href="#2-1-리터럴-Literal" class="headerlink" title="2.1 리터럴(Literal)"></a>2.1 리터럴(Literal)</h2><p>값에는 다양한 데이터 타입이 있었습니다. <strong>코드에서 값을 나타내는 표기법</strong>을<code>리터럴</code>이라고 합니다.</p><ul><li>숫자만 쓰면 숫자 리터럴</li><li>따옴표 안에 쓰면 문자 리터럴</li><li>true나 false를 쓰면 불리언 리터럴</li><li>괄호를 사용하면 객체 리터럴</li><li>대괄호를 사용하면 배열 리터럴</li><li>템플릿 리터럴은 템플릿을 만들 수 있는 리터럴</li></ul><hr><h2 id="2-2-문-Statement"><a href="#2-2-문-Statement" class="headerlink" title="2.2 문(Statement)"></a>2.2 문(Statement)</h2><p><strong>코드에서 최소로 실행할 수 있는 단위의 한 줄</strong>을 <code>문(Statement, 문장)</code>이라고 합니다.<br>할당하면 할당문, 조건문이 있으면 조건문입니다. 여러 문이 있지만 이 중에서 표현식이 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a, b; <span class="comment">// 변수를 선언하는 문장</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="number">1</span>; <span class="comment">// 선언과 초기화를 한 번에 하는 문장</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 조건을 판별하는 if문장</span></span><br><span class="line"><span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a가 b 보다 큽니다.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a = b; <span class="comment">// 대입 문장</span></span><br><span class="line">c = a + b; <span class="comment">// 계산 문장</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-2-1-표현식-Expressions"><a href="#2-2-1-표현식-Expressions" class="headerlink" title="2.2.1 표현식(Expressions)"></a>2.2.1 표현식(Expressions)</h3><p><strong>문 중에서 값으로 평가될 수 있는 문</strong>을 <code>표현식(Expressions)</code>이라고 부릅니다.</p><ul><li><strong>식별자, 연산자, 리터럴</strong> 등으로 구성되고 결과가 하나의 값으로 표현되는 문장</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>;      <span class="comment">// 숫자 리터럴 표현식</span></span><br><span class="line"><span class="number">1</span> + <span class="number">1</span>;  <span class="comment">// 연산자 표현식</span></span><br><span class="line"><span class="title function_">call</span>(); <span class="comment">// 함수 호출 표현식</span></span><br><span class="line"><span class="keyword">let</span> b;  <span class="comment">// 선언문</span></span><br><span class="line">b = <span class="number">2</span>;  <span class="comment">// 할당문, 할당 표현식인 문</span></span><br><span class="line"></span><br><span class="line">c = a &lt; b ? <span class="number">1</span> : <span class="number">2</span>; <span class="comment">// 삼항연산</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 익명 함수를 반환하는 표현식</span></span><br><span class="line"><span class="keyword">let</span> anonymousFn  = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123; <span class="keyword">return</span> a + b; &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">arrowFn</span> = (<span class="params">a,b</span>) =&gt; &#123; <span class="keyword">return</span> a + b; &#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators">https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-06-기본 자료구조 - Array, Map, Set</title>
      <link href="/2023/01/02/Front-JS-Basic-06-DataStructure/"/>
      <url>/2023/01/02/Front-JS-Basic-06-DataStructure/</url>
      
        <content type="html"><![CDATA[<h1 id="1-자료구조란"><a href="#1-자료구조란" class="headerlink" title="1. 자료구조란?"></a>1. 자료구조란?</h1><p>밀접하게 관련된 상태나 행동을 묶어서 <code>객체</code>로 표현합니다.<br>이떄 (이름, 나이, 성별) 같은 <code>상태</code>와 (말한다, 먹는다) 같은 <code>행동</code>을 묶어놓은 사람이라는 템플릿을 만들 수 있었습니다.<br><code>클래스나 생성자 함수를 이용</code>해서 템플릿을 잘 만들어두면 철수, 영희같은 실질 데이터가 들어있는 사람을 만들 수 있었습니다.<br>이렇게 클래스를 통해 만들어진 것을 <code>인스턴스</code>라고 했습니다. 이렇게 밀접한 정보와 행동들을 묶어서 객체로 만들 수 있습니다.</p><p>이렇게 여러 개의 객체를 특정한 자료구조에 담아둘 수 있습니다. 예를 들면, 어떤 사람들이 집합체를 만들 수 있겠죠. 그래서 사람을 모아놓은 집합체를 어떻게 나타낼 수 있을지 또는 줄을 서서 기다리는 사람도 나타낼 수 있어요. 서버에서 클라이언트에게 들어온 요청을 큐 형태로 보관해서 먼저 들어온 요청을 먼저 처리할 수 있도록 만들 수 있겠죠.</p><hr><h1 id="2-Array-배열"><a href="#2-Array-배열" class="headerlink" title="2. Array(배열)"></a>2. Array(배열)</h1><p><code>배열의 특징</code></p><ul><li>index를 기반으로 필요한 데이터를 저장</li><li><code>순서가 중요</code></li><li><code>중복 가능</code></li><li>cf. <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array">MDN Array</a></li></ul><hr><h2 id="2-1-배열-생성-방법"><a href="#2-1-배열-생성-방법" class="headerlink" title="2.1 배열 생성 방법"></a>2.1 배열 생성 방법</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>); <span class="comment">// 3개의 사이즈를 가진 빈 배열 생성</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [ &lt;3 empty items&gt; ]</span></span><br><span class="line"></span><br><span class="line">array = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 3개의 아이템을 가진 배열 생성</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line"></span><br><span class="line">array = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// of 함수로 배열 생성</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> anotherArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]; <span class="comment">// 리터럴을 이용해 배열 생성</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(anotherArray); <span class="comment">// [ 1, 2, 3, 4 ]</span></span><br><span class="line"></span><br><span class="line">array = <span class="title class_">Array</span>.<span class="title function_">from</span>(anotherArray); <span class="comment">// 기존의 배열에서 새로운 배열을 생성</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [ 1, 2, 3, 4 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 일반적으로 배열은 동일한 메모리 크기를 가지며, 연속적으로 이어져 있어함</span></span><br><span class="line"><span class="comment">// 하지만 자바스크립트에서의 배열은 연속적으로 이어져 있지 않고, 오브젝트와 유사함!</span></span><br><span class="line"><span class="comment">// 자바스크립트의 배열은 일반적인 배열의 동작을 흉내낸 특수한 객체다!</span></span><br><span class="line"><span class="comment">// 이걸 보완하기 위해서 타입이 정해져 있는 타입 배열이 있음 (Typed Collections)</span></span><br><span class="line">array = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123;</span><br><span class="line">  <span class="comment">// 오브젝트로 배열 생성</span></span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;안&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;녕&#x27;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">2</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array); <span class="comment">// [ &#x27;안&#x27;, &#x27;녕&#x27; ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-2-하면-안되는-것"><a href="#2-2-하면-안되는-것" class="headerlink" title="2.2 하면 안되는 것"></a>2.2 하면 안되는 것</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&#x27;🍌&#x27;</span>, <span class="string">&#x27;🍎&#x27;</span>, <span class="string">&#x27;🍇&#x27;</span>, <span class="string">&#x27;🍑&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 아이템을 참조하는 방법</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[<span class="number">0</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[<span class="number">1</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[<span class="number">2</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[<span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="property">length</span>); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for문으로 배열 아이템 참조하는 방법</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fruits.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[i]); <span class="comment">// 🍌, 🍎, 🍇, 🍑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const fruits = [&#x27;🍌&#x27;, &#x27;🍎&#x27;, &#x27;🍇&#x27;, &#x27;🍑&#x27;];</span></span><br><span class="line"><span class="comment">// 추가, 삭제 - 좋지 않은 방식 💩, 참고용</span></span><br><span class="line"><span class="comment">// 인덱스로 바로 접근해서 추가하는 것은 좋은 방식이 아님</span></span><br><span class="line"><span class="comment">// 추가하려면 아래 방식을 사용</span></span><br><span class="line"><span class="comment">// fruits[fruits.length] = &#x27;🍓&#x27;;</span></span><br><span class="line">fruits[<span class="number">6</span>] = <span class="string">&#x27;🍓&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [ &#x27;🍌&#x27;, &#x27;🍎&#x27;, &#x27;🍇&#x27;, &#x27;🍑&#x27;, &lt;2 empty items&gt;, &#x27;🍓&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 동일한 원리로 인덱스로 바로 접근해서 삭제하는 것은 좋은 방식이 아님</span></span><br><span class="line"><span class="keyword">delete</span> fruits[<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [ &#x27;🍌&#x27;, &lt;1 empty item&gt;, &#x27;🍇&#x27;, &#x27;🍑&#x27;, &lt;2 empty items&gt;, &#x27;🍓&#x27; ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-3-사용할-수-있는-함수⭐"><a href="#2-3-사용할-수-있는-함수⭐" class="headerlink" title="2.3 사용할 수 있는 함수⭐"></a>2.3 사용할 수 있는 함수⭐</h2><ol><li><p><code>isArray</code>  : 특정한 오브젝트가 배열인지 체크, <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray">MDN Array.isArray()</a></p></li><li><p><code>indexOf</code> :   특정한 아이템의 위치를 찾을때, <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">MDN Array.prototype.indexOf()</a></p></li><li><p><code>includes</code> :   배열안에 특정한 아이템이 있는지 체크, <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">MDN Array.prototype.includes()</a></p></li><li><p><code>push</code> :   추가 - 제일 뒤, <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/push">MDN Array.prototype.push()</a></p></li><li><p><code>unshift</code>:   추가 - 제일 앞, <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift">MDN Array.prototype.unshift()</a></p></li><li><p><code>pop</code>:   제거 - 제일 뒤, <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/pop">MDN Array.prototype.pop()</a></p></li><li><p><code>shift</code> :   제거 - 제일 앞, <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/shift">MDN Array.prototype.shift()</a> </p></li><li><p><code>splice(붙이다)</code> :   중간에 추가 또는 삭제, <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">MDN Array.prototype.splice()</a></p></li><li><p><code>slice</code> :   잘라진 새로운 배열을 만듬, <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">MDN Array.prototype.slice()</a></p></li><li><p><code>concat</code> :   여러개의 배열을 붙여줌, <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/concat">MDN Array.prototype.concat()</a></p></li><li><p><code>reverse</code> :   순서를 거꾸로, <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse">MDN Array.prototype.reverse()</a></p></li><li><p><code>flat</code> :   중첩 배열을 하나의 배열로 쫙 펴기, <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">MDN Array.prototype.flat()</a></p></li><li><p><code>fill</code> :  특정한 값으로 배열을 채우기, <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/fill">MDN Array.prototype.fill()</a></p></li><li><p><code>join</code> :  배열을 문자열로 합하기, <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/join">MDN Array.prototype.join()</a></p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 배열의 함수들</span></span><br><span class="line"><span class="comment">// 배열 자체를 변경하는지, 새로운 배열을 반환하는지</span></span><br><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&#x27;🍌&#x27;</span>, <span class="string">&#x27;🍎&#x27;</span>, <span class="string">&#x27;🍋&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 특정한 오브젝트가 배열인지 체크</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(fruits)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(&#123;&#125;)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 특정한 아이템의 위치를 찾을때</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">indexOf</span>(<span class="string">&#x27;🍎&#x27;</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 배열안에 특정한 아이팀이 있는지 체크</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">includes</span>(<span class="string">&#x27;🍎&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 추가 - 제일 뒤</span></span><br><span class="line"><span class="keyword">let</span> length = fruits.<span class="title function_">push</span>(<span class="string">&#x27;🍑&#x27;</span>); <span class="comment">// 배열 자체를 수정(업데이트)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [ &#x27;🍌&#x27;, &#x27;🍎&#x27;, &#x27;🍋&#x27;, &#x27;🍑&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(length); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 추가 - 제일 앞</span></span><br><span class="line">length = fruits.<span class="title function_">unshift</span>(<span class="string">&#x27;🍓&#x27;</span>); <span class="comment">// 배열 자체를 수정(업데이트)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [ &#x27;🍓&#x27;, &#x27;🍌&#x27;, &#x27;🍎&#x27;, &#x27;🍋&#x27;, &#x27;🍑&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(length); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 제거 - 제일 뒤</span></span><br><span class="line"><span class="keyword">let</span> lastItem = fruits.<span class="title function_">pop</span>(); <span class="comment">// 배열 자체를 수정(업데이트)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [ &#x27;🍓&#x27;, &#x27;🍌&#x27;, &#x27;🍎&#x27;, &#x27;🍋&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lastItem); <span class="comment">// 🍑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 제거 - 제일 앞</span></span><br><span class="line">lastItem = fruits.<span class="title function_">shift</span>(); <span class="comment">// 배열 자체를 수정(업데이트)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [ &#x27;🍌&#x27;, &#x27;🍎&#x27;, &#x27;🍋&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lastItem); <span class="comment">// 🍓</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 중간에 추가 또는 삭제, splice = 붙이다</span></span><br><span class="line"><span class="keyword">const</span> deleted = fruits.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// 1번 인덱스에 1개를 삭제</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// 배열 자체를 수정(업데이트), [ &#x27;🍌&#x27;, &#x27;🍋&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deleted); <span class="comment">// [ &#x27;🍎&#x27; ]</span></span><br><span class="line">fruits.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;🍎&#x27;</span>, <span class="string">&#x27;🍓&#x27;</span>); <span class="comment">// 1번 인덱스에 1개를 삭제하고, &#x27;🍎&#x27;, &#x27;🍓&#x27;를 추가</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// 배열 자체를 수정(업데이트), [ &#x27;🍌&#x27;, &#x27;🍎&#x27;, &#x27;🍓&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 9. 잘라진 새로운 배열을 만듬, slice = 자르다</span></span><br><span class="line"><span class="keyword">let</span> newArr = fruits.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>); <span class="comment">// 0번에서 2번 인덱스 이전까지 잘라서 새 배열 생성</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// [ &#x27;🍌&#x27;, &#x27;🍎&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits); <span class="comment">// [ &#x27;🍌&#x27;, &#x27;🍎&#x27;, &#x27;🍓&#x27; ]</span></span><br><span class="line">newArr = fruits.<span class="title function_">slice</span>(-<span class="number">1</span>); <span class="comment">// 뒤에서 부터 자르기</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// [ &#x27;🍓&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10. 여러개의 배열을 붙여줌, concatenate = 연결하다</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> arr3 = arr1.<span class="title function_">concat</span>(arr2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3); <span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 11. 순서를 거꾸로</span></span><br><span class="line"><span class="keyword">const</span> arr4 = arr3.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr4); <span class="comment">// [ 6, 5, 4, 3, 2, 1 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 12. 1단계까지만 중첩 배열을 하나의 배열로 쫙 펴기, flat = 평평한</span></span><br><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">3</span>, <span class="number">4</span>]]],</span><br><span class="line">];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [ [ 1, 2, 3 ], [ 4, [ 5, 6, [Array] ] ] ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>(<span class="number">3</span>)); <span class="comment">//  [ 1, 2, 3, 4, 5, 6, 3, 4 ]</span></span><br><span class="line">arr = arr.<span class="title function_">flat</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 13. 특정한 값으로 배열을 채우기, fill = 채우다</span></span><br><span class="line">arr.<span class="title function_">fill</span>(<span class="number">0</span>); <span class="comment">// 배열 자체를 모두 0으로 수정</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [0, 0, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">fill</span>(<span class="string">&#x27;s&#x27;</span>, <span class="number">1</span>, <span class="number">3</span>); <span class="comment">// 1번 인덱스부터 3번 인덱스 이전까지 s로 채우기</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [0, &#x27;s&#x27;, &#x27;s&#x27;, 0, 0, 0, 0, 0]</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">fill</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>); <span class="comment">// 1번 인덱스부터 끝까지 a로 채우기</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [0, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 14. 배열을 문자열로 합하기, join = 합치다</span></span><br><span class="line"><span class="keyword">let</span> text = arr.<span class="title function_">join</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text); <span class="comment">// 0,a,a,a,a,a,a,a</span></span><br><span class="line">text = arr.<span class="title function_">join</span>(<span class="string">&#x27; | &#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text); <span class="comment">// 0 | a | a | a | a | a | a | a</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-4-얕은-복사-Shallow-Copy"><a href="#2-4-얕은-복사-Shallow-Copy" class="headerlink" title="2.4 얕은 복사(Shallow Copy)"></a>2.4 얕은 복사(Shallow Copy)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 얕은 복사(Shallow Copy) - 객체는 메모리 주소 전달</span></span><br><span class="line"><span class="comment">// 자바스크립트에서 복사할때는 항상 얕은 복사가 이루어짐!</span></span><br><span class="line"><span class="comment">// Array.from, concat, slice, spread(...), Object.assign</span></span><br><span class="line"><span class="comment">// 오브젝트(객체) 생성</span></span><br><span class="line"><span class="keyword">const</span> pizza = &#123; <span class="attr">name</span>: <span class="string">&#x27;🍕&#x27;</span>, <span class="attr">price</span>: <span class="number">2</span>, <span class="attr">owner</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;Ellie&#x27;</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> ramen = &#123; <span class="attr">name</span>: <span class="string">&#x27;🍜&#x27;</span>, <span class="attr">price</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> sushi = &#123; <span class="attr">name</span>: <span class="string">&#x27;🍣&#x27;</span>, <span class="attr">price</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store1 = [pizza, ramen]; <span class="comment">// 배열 생성</span></span><br><span class="line"><span class="keyword">const</span> store2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(store1); <span class="comment">// 새로운 배열 생성</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;store1&#x27;</span>, store1);</span><br><span class="line"><span class="comment">// store1[(&#123; name: &#x27;🍕&#x27;, price: 2, owner: &#123; name: &#x27;Ellie&#x27; &#125; &#125;, &#123; name: &#x27;🍜&#x27;, price: 3 &#125;)]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;store2&#x27;</span>, store2);</span><br><span class="line"><span class="comment">// store2[(&#123; name: &#x27;🍕&#x27;, price: 2, owner: &#123; name: &#x27;Ellie&#x27; &#125; &#125;, &#123; name: &#x27;🍜&#x27;, price: 3 &#125;)]</span></span><br><span class="line"></span><br><span class="line">store2.<span class="title function_">push</span>(sushi);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;store1&#x27;</span>, store1);</span><br><span class="line"><span class="comment">// store1 [</span></span><br><span class="line"><span class="comment">//   &#123; name: &#x27;🍕&#x27;, price: 2, owner: &#123; name: &#x27;Ellie&#x27; &#125; &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: &#x27;🍜&#x27;, price: 3 &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;store2&#x27;</span>, store2);</span><br><span class="line"><span class="comment">// store2 [</span></span><br><span class="line"><span class="comment">//   &#123; name: &#x27;🍕&#x27;, price: 2, owner: &#123; name: &#x27;Ellie&#x27; &#125; &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: &#x27;🍜&#x27;, price: 3 &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: &#x27;🍣&#x27;, price: 1 &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 피자의 가격을 4로 인상하면서 배열을 수정하지 않아도, 피자의 가격이 변경됨</span></span><br><span class="line"><span class="comment">// 얕은 복사(Shallow Copy) - 객체는 메모리 주소 전달</span></span><br><span class="line">pizza.<span class="property">price</span> = <span class="number">4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;store1&#x27;</span>, store1);</span><br><span class="line"><span class="comment">// store1 [</span></span><br><span class="line"><span class="comment">//   &#123; name: &#x27;🍕&#x27;, price: 4, owner: &#123; name: &#x27;Ellie&#x27; &#125; &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: &#x27;🍜&#x27;, price: 3 &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;store2&#x27;</span>, store2);</span><br><span class="line"><span class="comment">// store2 [</span></span><br><span class="line"><span class="comment">//   &#123; name: &#x27;🍕&#x27;, price: 4, owner: &#123; name: &#x27;Ellie&#x27; &#125; &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: &#x27;🍜&#x27;, price: 3 &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: &#x27;🍣&#x27;, price: 1 &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-Set"><a href="#2-Set" class="headerlink" title="2. Set"></a>2. Set</h1><p>Set는 <code>데이터의 집합체</code>라고 볼 수 있습니다. <code>순서도 없고, 중복도 불가능</code>합니다.</p><ol><li><code>size</code> : 사이즈 확인</li><li><code>has()</code> : 존재하는지 확인</li><li><code>forEach()</code> : 순회</li><li><code>add()</code> : 추가</li><li><code>delete()</code> :  삭제</li><li><code>clear()</code> : 전부 삭제<ul><li>cf. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">MDN Set</a></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set : 데이터의 집합체, 인덱스 X, 중복X</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set); <span class="comment">// Set(3) &#123; 1, 2, 3 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 사이즈 확인</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 존재하는지 확인</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">2</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">6</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 순회</span></span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item)); <span class="comment">// 1, 2, 3</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> set.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 1, 2, 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 추가</span></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set); <span class="comment">// Set(4) &#123; 1, 2, 3, 6 &#125;</span></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set); <span class="comment">// Set(4) &#123; 1, 2, 3, 6 &#125;, 중복 X</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 삭제</span></span><br><span class="line">set.<span class="title function_">delete</span>(<span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set); <span class="comment">// Set(3) &#123; 1, 2, 3 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 전부 삭제</span></span><br><span class="line">set.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set); <span class="comment">// Set(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-Map"><a href="#3-Map" class="headerlink" title="3. Map"></a>3. Map</h1><p>Map은 <code>[키, 값]형태로 이루어진 자료구조</code>라고 생각하면 됩니다.<br>Map은 <code>순서가 중요하지 않습니다.</code> 다만, Key는 유일해야 합니다. 그래서 <code>Key만 다르다면 중복이 가능</code>합니다.</p><ol><li><code>size</code> : 사이즈 확인</li><li><code>has()</code> : 존재하는지 확인</li><li><code>forEach()</code> : 순회</li><li><code>get()</code> : 찾기</li><li><code>set()</code> : 추가</li><li><code>delete()</code> : 삭제</li><li><code>clear()</code> : 전부삭제</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;🍎&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;key2&#x27;</span>, <span class="string">&#x27;🍌&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map); <span class="comment">// Map(2) &#123; &#x27;key1&#x27; =&gt; &#x27;🍎&#x27;, &#x27;key2&#x27; =&gt; &#x27;🍌&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 사이즈 확인</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 존재하는지 확인</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&#x27;key1&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&#x27;key6&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 순회</span></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value)); <span class="comment">// key1 🍎, key2 🍌</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">keys</span>()); <span class="comment">// [Map Iterator] &#123; &#x27;key1&#x27;, &#x27;key2&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">values</span>()); <span class="comment">// [Map Iterator] &#123; &#x27;🍎&#x27;, &#x27;🍌&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">entries</span>()); <span class="comment">// [Map Entries] &#123; [ &#x27;key1&#x27;, &#x27;🍎&#x27; ], [ &#x27;key2&#x27;, &#x27;🍌&#x27; ] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 찾기</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;key1&#x27;</span>)); <span class="comment">// 🍎</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;key2&#x27;</span>)); <span class="comment">// 🍌</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;key4&#x27;</span>)); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 추가</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;key3&#x27;</span>, <span class="string">&#x27;🥝&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map); <span class="comment">// Map(3) &#123; &#x27;key1&#x27; =&gt; &#x27;🍎&#x27;, &#x27;key2&#x27; =&gt; &#x27;🍌&#x27;, &#x27;key3&#x27; =&gt; &#x27;🥝&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 삭제</span></span><br><span class="line">map.<span class="title function_">delete</span>(<span class="string">&#x27;key3&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map); <span class="comment">// Map(2) &#123; &#x27;key1&#x27; =&gt; &#x27;🍎&#x27;, &#x27;key2&#x27; =&gt; &#x27;🍌&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 전부삭제</span></span><br><span class="line">map.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map); <span class="comment">// Map(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>Object도 [키, 값]으로 이루어져 있습니다. 그래서 Object를 Map처럼 사용할 수 있고, Map을 Object처럼 사용할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 오브젝트와의 큰 차이점?? 사용할 수 있는 함수가 다름, Map키에 직접 접근 불가(get사용해야 함)</span></span><br><span class="line"><span class="keyword">const</span> key = &#123; <span class="attr">name</span>: <span class="string">&#x27;milk&#x27;</span>, <span class="attr">price</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> milk = &#123; <span class="attr">name</span>: <span class="string">&#x27;milk&#x27;</span>, <span class="attr">price</span>: <span class="number">10</span>, <span class="attr">description</span>: <span class="string">&#x27;맛있는우유&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1) 오브젝트를 사용</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [key]: milk,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="comment">// Map(0) &#123;&#125; &#123;</span></span><br><span class="line"><span class="comment">//   &#x27;[object Object]&#x27;: &#123; name: &#x27;milk&#x27;, price: 10, description: &#x27;맛있는우유&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2) Map을 사용</span></span><br><span class="line"><span class="keyword">const</span> map2 = <span class="keyword">new</span> <span class="title class_">Map</span>([[key, milk]]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map2);</span><br><span class="line"><span class="comment">// Map(1) &#123;</span></span><br><span class="line"><span class="comment">//   &#123; name: &#x27;milk&#x27;, price: 10 &#125; =&gt; &#123; name: &#x27;milk&#x27;, price: 10, description: &#x27;맛있는우유&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key]); <span class="comment">// &#123; name: &#x27;milk&#x27;, price: 10, description: &#x27;맛있는우유&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map2[key]); <span class="comment">// undefined, 키에 직접 접근 불가능, get 사용해야 함</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map2.<span class="title function_">get</span>(key)); <span class="comment">// &#123; name: &#x27;milk&#x27;, price: 10, description: &#x27;맛있는우유&#x27; &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-05-타입 변환(Type Casting/Coercion)</title>
      <link href="/2023/01/02/Front-JS-Basic-05-TypeCasting/"/>
      <url>/2023/01/02/Front-JS-Basic-05-TypeCasting/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Type-Conversion-x2F-Coercion"><a href="#1-Type-Conversion-x2F-Coercion" class="headerlink" title="1. Type Conversion&#x2F;Coercion"></a>1. Type Conversion&#x2F;Coercion</h1><p>자바스크립트는 타입이 매우 유연한 언어다.<br>그래서 JS 엔진이 필요에 따라 <strong>암시적변환</strong>을 혹은 개발자의 의도에 따라 <strong>명시적변환</strong>을 실행한다. </p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Type_Conversion">Type Conversion - MDN</a> : 타입 변환, 형 변환</li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion">Type Coercion - MDN</a> : 타입 강제, 강제 형 변환</li></ul><hr><h1 id="2-Explicit-Type-Casting-암시적-형-변환"><a href="#2-Explicit-Type-Casting-암시적-형-변환" class="headerlink" title="2. Explicit Type Casting(암시적 형 변환)"></a>2. Explicit Type Casting(암시적 형 변환)</h1><p><code>Explicit Type Casting</code> &#x3D; JS 엔진이 필요에 따라 <strong>자동으로 데이터 타입을 변환</strong>시키는 것</p><hr><h2 id="2-1-산술-연산자"><a href="#2-1-산술-연산자" class="headerlink" title="2.1 산술 연산자"></a>2.1 산술 연산자</h2><p><strong>더하기(+)</strong> 연산자는 숫자보다 문자열이 우선시 되기 때문에, 숫자형이 문자형을 만나면 문자형으로 변환하여 연산된다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">number + number <span class="comment">// number</span></span><br><span class="line">number + string <span class="comment">// string</span></span><br><span class="line">string + string <span class="comment">// string</span></span><br><span class="line">string + boolean <span class="comment">// string</span></span><br><span class="line">number + boolean <span class="comment">// number</span></span><br><span class="line"><span class="number">50</span> + <span class="number">50</span>; <span class="comment">//100</span></span><br><span class="line"><span class="number">100</span> + “점”; <span class="comment">//”100점”</span></span><br><span class="line">“<span class="number">100</span>” + “점”; <span class="comment">//”100점”</span></span><br><span class="line">“<span class="number">10</span>” + <span class="literal">false</span>; <span class="comment">//”100&quot;</span></span><br><span class="line"><span class="number">99</span> + <span class="literal">true</span>; <span class="comment">//100</span></span><br></pre></td></tr></table></figure><p>다른 연산자(- * &#x2F; %)는 숫자형이 문자형보다 우선시되기 때문에 더하기와 같은 문자형으로의 변환이 일어나지 않는다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//다른 연산자(-,*,/,%)</span></span><br><span class="line">string * number <span class="comment">// number</span></span><br><span class="line">string * string <span class="comment">// number</span></span><br><span class="line">number * number <span class="comment">// number</span></span><br><span class="line">string * boolean <span class="comment">//number</span></span><br><span class="line">number * boolean <span class="comment">//number</span></span><br><span class="line">“<span class="number">2</span>” * <span class="literal">false</span>; <span class="comment">//0</span></span><br><span class="line"><span class="number">2</span> * <span class="literal">true</span>; <span class="comment">//2</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-2-동치비교"><a href="#2-2-동치비교" class="headerlink" title="2.2 동치비교"></a>2.2 동치비교</h2><p>엄격하지 않은 동치(&#x3D;&#x3D;)비교이며, 아래의 결과값은 좌우항 변환할 경우 모두 ‘0&#x3D;&#x3D;0이기 때문에’ ‘true’이다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">// true 0 == 0</span></span><br><span class="line">“<span class="number">0</span>” == <span class="number">0</span> <span class="comment">// true 0 == 0</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">false</span> <span class="comment">// true 0 == 0</span></span><br><span class="line">“<span class="number">0</span>” == <span class="literal">false</span> <span class="comment">// true 0 == 0</span></span><br></pre></td></tr></table></figure><p>cf. 위의 비교는 엄격하지 않은 동치 비교일 경우, 두 값을 비교할때 데이터타입을 변환하지 않는 **엄격한 동치(&#x3D;&#x3D;&#x3D;)**비교와 혼동X</p><hr><h1 id="3-Implicit-Type-Casting-명시적-형-변환"><a href="#3-Implicit-Type-Casting-명시적-형-변환" class="headerlink" title="3. Implicit Type Casting(명시적 형 변환)"></a>3. Implicit Type Casting(명시적 형 변환)</h1><ul><li><code>Implicit Type Casting</code> &#x3D; 개발자가 <strong>의도를 가지고 데이터 타입을 변환</strong>시키는 것이다. </li><li>타입을 변경하는 기본적인 방법은  <code>Object(), Number(), toString(), Boolean()</code> 와 같은 함수를 이용</li><li>new 연산자가 없다면 사용한 함수는 타입을 변환하는 함수로써 사용</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> trans = <span class="number">100</span>; <span class="comment">// Number</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>(trans); <span class="comment">// 100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> trans); <span class="comment">// Number</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">toString</span>(trans); <span class="comment">// ”100&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> trans); <span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Boolean</span>(trans); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> trans); <span class="comment">// Bolean</span></span><br></pre></td></tr></table></figure><h2 id="3-1-A-Type-→-Number-Type"><a href="#3-1-A-Type-→-Number-Type" class="headerlink" title="3.1 A Type → Number Type"></a>3.1 A Type → Number Type</h2><p>다른 자료형을 숫자타입으로 변형하는 방법은 아래와 같다. </p><h3 id="3-1-1-Number"><a href="#3-1-1-Number" class="headerlink" title="3.1.1 Number()"></a>3.1.1 Number()</h3><ul><li><code>Number()</code>는 <strong>정수형과 실수형의 숫자로 변환</strong>한다. </li><li>보통 문자형을 숫자형으로 변경할때 사용한다.</li><li>숫자로 변환되지 않는 경우에는 NaN(Not a Number)을 반환한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>(“<span class="number">12345</span>”); <span class="comment">//12345</span></span><br><span class="line"><span class="title class_">Number</span>(“<span class="number">2</span>”*<span class="number">2</span>); <span class="comment">//4</span></span><br></pre></td></tr></table></figure><p>거짓같은 값(falsy values : null, false,”빈문자열”)에 대해서는 0으로 표현합니다.<br>참같은 값(truthy values)에 대해서는 1로 표현합니다. array의 경우는 <code>Number()</code>함수에서 사용하는 0을 반환합니다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> falsy1 = <span class="literal">null</span>;</span><br><span class="line"><span class="title class_">Number</span>(falsy1); <span class="comment">// 0;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> falsy2 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="title class_">Number</span>(falsy2); <span class="comment">// 0;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> falsy3 = <span class="literal">false</span>;</span><br><span class="line"><span class="title class_">Number</span>(falsy3); <span class="comment">// 0;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> truthy1 = [];</span><br><span class="line"><span class="title class_">Number</span>(truthy1); <span class="comment">// 0;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> truthy2 = <span class="literal">true</span>;</span><br><span class="line"><span class="title class_">Number</span>(truthy2); <span class="comment">// 1;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> truthy3 = &#123;&#125;;</span><br><span class="line"><span class="title class_">Number</span>(&#123;&#125;); <span class="comment">// NaN;</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-1-2-parseInt"><a href="#3-1-2-parseInt" class="headerlink" title="3.1.2 parseInt()"></a>3.1.2 parseInt()</h3><p>parseInt()는 <strong>정수형의 숫자</strong>로 변환한다.<br>만약 문자열이 ‘숫자0’으로 시작하면 8진수로 인식하고, ‘0x, OX’로 시작한다면 해당 문자열을 16진수 숫자로 인식한다.<br>또한 앞부분 빈 공백을 두고 나오는 문자는 모두 무시되어 NaN을 반환한다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(“<span class="number">27</span>”) <span class="comment">//27</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">0033</span>); <span class="comment">//27</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">0x1b</span>); <span class="comment">//27</span></span><br><span class="line"><span class="built_in">parseInt</span>(“ <span class="number">2</span>”); <span class="comment">//2</span></span><br><span class="line"><span class="built_in">parseInt</span>(“ <span class="number">2</span>ㅎ”); <span class="comment">//2</span></span><br><span class="line"><span class="built_in">parseInt</span>(“ ㅎ<span class="number">2</span>”); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><blockquote><p>💡 parseInt() VS Number()</p><ul><li><code>parseInt()</code>는 문자열로 된 부분에서 숫자(정수)만 뽑아서 변환해줌</li><li><code>Number()</code>은 문자열 전체가 숫자일때 소수점까지 숫자타입으로 가져옴</li></ul></blockquote><hr><h3 id="3-1-3-parseFloat"><a href="#3-1-3-parseFloat" class="headerlink" title="3.1.3 parseFloat()"></a>3.1.3 parseFloat()</h3><p>parseFloat()는 부동 소수점의 숫자로 변환한다. parseInt()와는 달리<br> parseFloat()는 항상 10진수를 사용하며 parseFloat() 또한 앞부분 빈 공백을 두고 나오는 문자는 모두 무시되어 NaN을 반환한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>(“!<span class="number">123</span>”); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseFloat</span>(“<span class="number">123.123456</span>”); <span class="comment">//123.123456</span></span><br><span class="line"><span class="built_in">parseInt</span>(“<span class="number">123.123456</span>”); <span class="comment">//123</span></span><br><span class="line"><span class="built_in">parseFloat</span>(“ <span class="number">123.123456</span>”); <span class="comment">//123.123456</span></span><br><span class="line"><span class="built_in">parseFloat</span>(“ a123<span class="number">.123456</span>”); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-1-4-단항연산자-unary-operators-로-숫자형-타입-변경"><a href="#3-1-4-단항연산자-unary-operators-로-숫자형-타입-변경" class="headerlink" title="3.1.4 단항연산자(unary-operators)로 숫자형 타입 변경"></a>3.1.4 단항연산자(unary-operators)로 숫자형 타입 변경</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+<span class="string">&#x27;1000&#x27;</span>; <span class="comment">// 1000</span></span><br><span class="line">+<span class="string">&#x27;-1000&#x27;</span>; <span class="comment">// -1000</span></span><br><span class="line">+<span class="string">&#x27;Infinity&#x27;</span>; <span class="comment">// Infinity</span></span><br><span class="line">-<span class="string">&#x27;1000&#x27;</span>; <span class="comment">// -1000</span></span><br><span class="line">+<span class="literal">true</span>; <span class="comment">// 1</span></span><br><span class="line">+[]; <span class="comment">/// 0</span></span><br><span class="line">+<span class="literal">false</span>; <span class="comment">// 0</span></span><br><span class="line">+<span class="literal">null</span>; <span class="comment">// 0</span></span><br><span class="line">+<span class="string">&#x27;&#x27;</span>;<span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>위 예제를 보면 단일 연산자를 이용한 숫자형 변환은 <code>Number</code>와 동일한 동작을 하는 것을 볼 수 있다.<br>단항 연산자는 자바스크립트 함수를 사용하지 않고 타입변환을 할 수 있는 쉽고 효율적인 방법이다. </p><hr><h2 id="3-2-A-Type-→-String-Type"><a href="#3-2-A-Type-→-String-Type" class="headerlink" title="3.2 A Type → String Type"></a>3.2 A Type → String Type</h2><p>다른 자료형을 문자타입으로 변형하는 방법은 아래와 같다. </p><h3 id="3-2-1-String"><a href="#3-2-1-String" class="headerlink" title="3.2.1 String()"></a>3.2.1 String()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="number">123</span>); <span class="comment">//”123&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="number">123.456</span>); <span class="comment">//”123.456&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-2-2-toString"><a href="#3-2-2-toString" class="headerlink" title="3.2.2 toString()"></a>3.2.2 toString()</h3><p><strong>주어진 값을 문자열로 변환 후 반환</strong>합니다.<br> toString()는 인자로 기수를 선택할 수 있다. 인자를 전달하지 않으면 10진수로 변환한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> trans = <span class="number">100</span>;</span><br><span class="line">trans.<span class="title function_">toString</span>(); <span class="comment">//”100&quot;</span></span><br><span class="line">trans.<span class="title function_">toString</span>(<span class="number">2</span>); <span class="comment">//”1100100&quot;</span></span><br><span class="line">trans.<span class="title function_">toString</span>(<span class="number">8</span>); <span class="comment">//”144&quot;</span></span><br><span class="line"><span class="keyword">var</span> boolT = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> boolF = <span class="literal">false</span>;</span><br><span class="line">boolT.<span class="title function_">toString</span>(); <span class="comment">//”true”</span></span><br><span class="line">boolF.<span class="title function_">toString</span>(); <span class="comment">//”false”</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-2-3-toFixed"><a href="#3-2-3-toFixed" class="headerlink" title="3.2.3 toFixed()"></a>3.2.3 toFixed()</h3><p>toFixed()의 인자를 넣으면 <strong>인자값만큼 반올림하여 소수점을 표현</strong>하며,<br><strong>소수점을 넘치는 값이 인자로 들어오며 ‘0’으로 길이를 맞춘 문자열을 반환</strong>한다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> trans = <span class="number">123.456789</span>;</span><br><span class="line"><span class="keyword">var</span> roundOff = <span class="number">99.987654</span>;</span><br><span class="line">trans.<span class="title function_">toFixed</span>(); <span class="comment">//”123&quot;</span></span><br><span class="line">trans.<span class="title function_">toFixed</span>(<span class="number">0</span>); <span class="comment">//”123&quot;</span></span><br><span class="line">trans.<span class="title function_">toFixed</span>(<span class="number">2</span>); <span class="comment">//”123.46&quot;</span></span><br><span class="line">trans.<span class="title function_">toFixed</span>(<span class="number">8</span>); <span class="comment">//”123.45678900&quot;</span></span><br><span class="line">roundOff.<span class="title function_">toFixed</span>(<span class="number">2</span>); <span class="comment">//”99.99&quot;</span></span><br><span class="line">roundOff.<span class="title function_">toFixed</span>(<span class="number">0</span>); <span class="comment">//”100&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-3-A-Type-→-Boolean-Type"><a href="#3-3-A-Type-→-Boolean-Type" class="headerlink" title="3.3 A Type → Boolean Type"></a>3.3 A Type → Boolean Type</h2><p>자바스크립트에서는 Boolean타입으로 변경은 Boolean 또는 <code>부정연산자(!)</code>를 사용하여 Boolean값을 만들어낸다.<br>부정연산자는 의미그대로 <code>!</code>을 사용하면 <code>Boolean()</code> 반대의 값을 리턴한다.</p><p>다른 자료형을 불린타입으로 변형하는 방법은 아래와 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Boolean</span>(<span class="number">100</span>); <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Boolean</span>(“<span class="number">1</span>”); <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">true</span>); <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="title class_">Object</span>); <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Boolean</span>([]); <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="number">0</span>); <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="title class_">NaN</span>); <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">null</span>); <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">undefined</span>); <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Boolean</span>( ); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numb1 = <span class="number">0</span>;</span><br><span class="line"><span class="title class_">Boolean</span>(numb1); <span class="comment">// false</span></span><br><span class="line">!!numb1; <span class="comment">// false</span></span><br><span class="line">!numb1; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h1 id="참조"><a href="#참조" class="headerlink" title="[참조]"></a>[참조]</h1><ul><li><a href="https://medium.com/gdana/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%ED%98%95%EB%B3%80%ED%99%98%EC%9D%80-%EB%91%90%EA%B0%80%EC%A7%80%EB%8B%A4-b46875be4a88">자바스크립트의 형변환은 2가지다</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>컴퓨터과학 로드맵</title>
      <link href="/2023/01/02/Roadmap-CS/"/>
      <url>/2023/01/02/Roadmap-CS/</url>
      
        <content type="html"><![CDATA[<h1 id="참고-로드맵"><a href="#참고-로드맵" class="headerlink" title="[참고] 로드맵"></a>[참고] 로드맵</h1><ul><li><a href="https://roadmap.sh/computer-science">https://roadmap.sh/computer-science</a></li><li>컴퓨터과학 스스로 학습하기 : <a href="https://github.com/minnsane/TeachYourselfCS-KR">https://github.com/minnsane/TeachYourselfCS-KR</a></li><li><a href="https://github.com/Seogeurim/CS-study">https://github.com/Seogeurim/CS-study</a></li><li>어떻게 공부할 것인가 시리즈 : <a href="https://covenant.tistory.com/222">https://covenant.tistory.com/222</a></li></ul><hr><h1 id="1-언어-선택"><a href="#1-언어-선택" class="headerlink" title="1. 언어 선택"></a>1. 언어 선택</h1><ol><li>C</li><li>Java</li><li>C++</li><li>Python</li><li>Go</li><li>C#</li><li>Rust</li></ol><hr><h1 id="2-자료구조-amp-알고리즘"><a href="#2-자료구조-amp-알고리즘" class="headerlink" title="2. 자료구조 &amp; 알고리즘"></a>2. 자료구조 &amp; 알고리즘</h1><ul><li>자료구조(Data Structure)<ul><li>C언어로 쉽게 풀어쓴 자료구조</li><li>책 &amp; 어플 : 알고리즘 도감</li></ul></li><li>알고리즘(Algorithm)<ul><li>개념 강의 : <a href="https://www.youtube.com/user/damazzang/videos">Youtube 엔지니어 대한민국 </a></li><li>책 : 파이썬 알고리즘 인터뷰</li><li>책 : The Algorithm Design Manual<ul><li>고전</li></ul></li></ul></li></ul><hr><h1 id="3-디자인-패턴"><a href="#3-디자인-패턴" class="headerlink" title="3. 디자인 패턴"></a>3. 디자인 패턴</h1><ul><li>Ebook : <a href="https://refactoring.guru/ko/design-patterns/book">디자인 패턴에 뛰어들기</a></li></ul><hr><h1 id="4-수학"><a href="#4-수학" class="headerlink" title="4. 수학"></a>4. 수학</h1><ul><li>이산수학<ul><li>강의 : <a href="https://youtu.be/TLszG8J8mgs">동빈나 유튜브 이산수학 강의</a></li></ul></li><li>선형대수<ul><li>강의 : <a href="https://youtu.be/525w2Zqh13M">이상엽 선형대수학 강의</a></li></ul></li></ul><hr><h1 id="5-컴퓨터구조"><a href="#5-컴퓨터구조" class="headerlink" title="5. 컴퓨터구조"></a>5. 컴퓨터구조</h1><ul><li>책&amp;강의 : <a href="https://youtu.be/bls_GjX-4U8">혼자 공부하는 컴퓨터구조 &amp; 운영체제</a></li><li>책 : Computer Systems: A Programmer’s Perspective<ul><li><a href="http://csapp.cs.cmu.edu/3e/home.html">Computer Systems: A Programmer’s Perspective</a>(번역본: 컴퓨터시스템, 이하 CS:APP)</li></ul></li></ul><hr><h1 id="6-운영체제"><a href="#6-운영체제" class="headerlink" title="6. 운영체제"></a>6. 운영체제</h1><ul><li>운영체제- 구현희 저(한빛미디어)</li><li>운영체제와 정보기술의 원리 - 반효경 저</li><li>Operating Systems: Three Easy Pieces(번역본: 운영체제 아주 쉬운 세가지 이야기, 이하 OSTEP)<ul><li><a href="https://pages.cs.wisc.edu/~remzi/OSTEP/">https://pages.cs.wisc.edu/~remzi/OSTEP/</a></li></ul></li><li><a href="https://www.amazon.com/dp/013359162X/">Modern Operating Systems(번역본: 운영체제론)</a></li><li><a href="https://www.amazon.com/dp/1118063333/">Operating System Concepts(번역본: 운영체제)</a>(속칭 “공룡책”)<ul><li><a href="https://www.youtube.com/watch?v=zGBm37kze9I&list=PLHqxB9kMLLaOs2BM2KbuvttBYCgDoFm-5">Youtube 주니온TV 강의</a></li></ul></li></ul><hr><h1 id="7-UNIX-시스템"><a href="#7-UNIX-시스템" class="headerlink" title="7. UNIX 시스템"></a>7. UNIX 시스템</h1><ul><li>책 : 이것이 우분투 리눅스다</li><li>책 : 리눅스 입문자를 위한 명령어 사전</li><li>자격증 : 리눅스 마스터</li></ul><hr><h1 id="8-네트워크"><a href="#8-네트워크" class="headerlink" title="8. 네트워크"></a>8. 네트워크</h1><ul><li>입문<ul><li>책 : <a href="http://www.yes24.com/Product/Goods/61794014?OzSrank=11">모두의 네트워크</a></li><li>강의 : <a href="https://www.inflearn.com/course/http-%EC%9B%B9-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC#">인프런. 모든 개발자를 위한 HTTP 웹 기본 지식</a></li><li>책 : 따라하며 배우는 AWS 네트워크 입문</li></ul></li><li>심화<ul><li><a href="http://www.yes24.com/Product/Goods/15381085?OzSrank=1">HTTP 완벽 가이드</a></li><li><a href="http://www.yes24.com/Product/Goods/2355754">TCP&#x2F;IP 완벽 가이드</a></li><li><a href="https://smile.amazon.com/Computer-Networking-Top-Down-Approach-7th/dp/0133594149/">Computer Networking: A Top-Down Approach(번역본: 컴퓨터 네트워킹 하향식 접근)</a><ul><li><a href="http://www.kocw.net/home/search/kemView.do?kemId=1169634">KOCW 이석복(한양대학교)</a></li></ul></li></ul></li></ul><hr><h1 id="9-데이터베이스"><a href="#9-데이터베이스" class="headerlink" title="9. 데이터베이스"></a>9. 데이터베이스</h1><ul><li>책 : 오라클로 배우는 데이터베이스 개론과 실습</li><li>책 : Do it! 오라클로 배우는 데이터베이스 입문<ul><li>Oracle Database 공식 pdf</li><li>책 : 오라클 SQL과 PL&#x2F;SQL을 다루는 기술</li></ul></li><li>책 : 한 권으로 끝내는 오라클 11g부터 12c 완벽 바이블</li><li>책 : 그림으로 공부하는 오라클 구조</li><li>책 : 만화로 보는 오라클 튜닝</li><li>책 : 개발자를 위한 오라클 SQL 튜닝</li><li>책 : 오라클 성능 고도화 원리와 해법 시리즈</li><li>책 : 이것이 MySQL이다</li><li>자격증 : SQLD&#x2F;SQLP</li><li>Mongo DB</li></ul><hr><h1 id="10-컴파일러"><a href="#10-컴파일러" class="headerlink" title="10. 컴파일러"></a>10. 컴파일러</h1><ul><li><a href="https://smile.amazon.com/Compilers-Principles-Techniques-Tools-2nd/dp/0321486811">Compilers: Principles, Techniques &amp; Tools(번역본: 컴파일러)</a>(속칭 “드래곤북”)<ul><li><a href="https://www.edx.org/course/compilers">edX의 Alex Aiken의 강의</a></li></ul></li></ul><hr><h1 id="11-소프트웨어-공학"><a href="#11-소프트웨어-공학" class="headerlink" title="11. 소프트웨어 공학"></a>11. 소프트웨어 공학</h1><ul><li>책 : 방송대 소프트웨어공학</li></ul><hr><h1 id="12-보안"><a href="#12-보안" class="headerlink" title="12. 보안"></a>12. 보안</h1><ul><li>인프런 시큐아카데미 강좌<ul><li>책 : 화이트 해커를 위한 웹 해킹의 기술</li></ul></li><li>…</li></ul>]]></content>
      
      
      <categories>
          
          <category> 정보 </category>
          
          <category> Roadmap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Roadmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-04-데이터 타입(Data Types) - Object(객체)</title>
      <link href="/2023/01/01/Front-JS-Basic-04-DataType02/"/>
      <url>/2023/01/01/Front-JS-Basic-04-DataType02/</url>
      
        <content type="html"><![CDATA[<h1 id="1-객체-타입-object"><a href="#1-객체-타입-object" class="headerlink" title="1. 객체 타입(object)"></a>1. 객체 타입(object)</h1><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/js-3-1.png" alt="js-3-1"></p><p>객체는 <code>여러 개의 데이터 타입을 함께 묶어 놓은 것</code>을 말하며 <code>키:값</code> 형태로 나타냅니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/js-2-2.png" alt="js-2-2"></p><ul><li><code>원시 타입</code>은 어디에 선언되어 있느냐에 따라서 Data 영역 또는 Stack영역에 들어가고,<ul><li><strong>전역에 선언되어 있다면 Data</strong>, <strong>로컬에 선언되어 있다면 Stack</strong>에 저장</li></ul></li><li><code>객체 타입</code>은 Heap 영역에 들어갑니다. <ul><li>데이터 사이즈가 정해져 있지 않고 <strong>동적으로 사이즈가 줄었다 늘었다 하는 것들(객체)이 Heap</strong>에 저장</li></ul></li></ul><blockquote><p>어플리케이션이 메모리에 올라왔을 때, Code, Data, Stack, Heap의 4개의 구조로 구성</p><ul><li><code>Code</code> : 개발자들이 작성하는 <strong>코드를 저장하는 공간</strong></li><li><code>Data</code> : 어플리케이션이 전반적인 필요로 하는 <strong>변수, 데이터 등을 저장하는 공간</strong></li><li><code>Stack</code> : 어플리케이션이 함수를 호출하는 <strong>실행 순서를 저장하는 공간</strong></li><li><code>Heap</code> : 어플리케이션에서 단순한 데이터가 아니라 <strong>여러 개의 데이터타입을 묶은 복잡한 데이터(객체)를 저장하는 공간</strong></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;apple&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> display = <span class="string">&#x27;🍎&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> orangeName = <span class="string">&#x27;orange&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> apple = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  <span class="attr">display</span>: <span class="string">&#x27;🍎&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple);         <span class="comment">// &#123; name: &#x27;apple&#x27;, color: &#x27;red&#x27;, display: &#x27;🍎&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple.<span class="property">name</span>);    <span class="comment">// apple</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple.<span class="property">color</span>);   <span class="comment">// red</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple.<span class="property">display</span>); <span class="comment">// 🍎</span></span><br></pre></td></tr></table></figure><p>객체 타입의 내용은 Heap 영역에 저장되고 <code>apple</code> 변수는 객체의 주소를 가집니다.<br>그래서 <code>apple.name</code>이라고 적으면, <code>apple</code>이 가리키고 있는 메모리 주소를 찾아가 해당 주소의 <code>name</code>을 출력합니다.</p><hr><h1 id="2-값과-참조의-차이"><a href="#2-값과-참조의-차이" class="headerlink" title="2. 값과 참조의 차이"></a>2. 값과 참조의 차이</h1><ul><li><code>원시 타입</code>은 변수가 <strong>메모리 값 자체</strong>를 가리키고 있지만, </li><li><code>객체 타입</code>은 <strong>메모리 주소</strong>(&#x3D;참조 값)을 가리키고 있습니다.</li></ul><hr><h2 id="2-1-Copy-by-Value"><a href="#2-1-Copy-by-Value" class="headerlink" title="2.1 Copy by Value"></a>2.1 Copy by Value</h2><ul><li><code>Copy by Value</code> &#x3D; 변수에 들어있는 메모리 값 자체를 복사하는 것</li><li>원시타입</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 원시타입은 값이 복사되어 전달됨</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = a; <span class="comment">// 1</span></span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-2-Copy-by-Reference"><a href="#2-2-Copy-by-Reference" class="headerlink" title="2.2 Copy by Reference"></a>2.2 Copy by Reference</h2><ul><li><code>Copy by Reference</code> &#x3D; 변수에 들어있는 메모리 주소를 복사하는 것</li><li>객체 타입</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체타입은 참조값(메모리주소, 레퍼런스)가 복사되어 전달됨</span></span><br><span class="line"><span class="keyword">let</span> apple = &#123; <span class="comment">// 0x1234</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;사과&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> orange = apple; <span class="comment">// 0x1234</span></span><br><span class="line">orange.<span class="property">name</span> = <span class="string">&#x27;오렌지&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple);  <span class="comment">// &#123; name: &#x27;오렌지&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(orange); <span class="comment">// &#123; name: &#x27;오렌지&#x27; &#125;</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-객체란"><a href="#3-객체란" class="headerlink" title="3. 객체란?"></a>3. 객체란?</h1><p>객체 &#x3D; 복합 데이터로 여러가지 데이터 타입이 들어있음, ‘키:값’형태</p><ul><li>객체 안에서 상태를 가지고 있는 데이터를 <code>속성(Property)</code>라고 하고, </li><li>함수는 <code>메서드(Method)</code>라고 부릅니다.</li><li>cf. <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object">MDN 객체</a></li></ul><hr><h2 id="3-1-객체-리터럴"><a href="#3-1-객체-리터럴" class="headerlink" title="3.1 객체 리터럴"></a>3.1 객체 리터럴</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> apple = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;hello-bye&#x27;</span>: <span class="string">&#x27;✋&#x27;</span>,</span><br><span class="line">  <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">  [<span class="string">&#x27;hello-bye1&#x27;</span>]: <span class="string">&#x27;✋&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 속성, 데이터에 접근하기 위해서는</span></span><br><span class="line">apple.<span class="property">name</span>; <span class="comment">// 마침표 표기법(dot notation)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple[<span class="string">&#x27;hello-bye1&#x27;</span>]); <span class="comment">// 대괄호 표기법 bracket notation</span></span><br><span class="line">apple[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 속성 추가</span></span><br><span class="line">apple.<span class="property">emoji</span> = <span class="string">&#x27;🍎&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple.<span class="property">emoji</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple[<span class="string">&#x27;emoji&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 속성 삭제(delete)</span></span><br><span class="line"><span class="keyword">delete</span> apple.<span class="property">emoji</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple);</span><br></pre></td></tr></table></figure><hr><h2 id="3-2-객체에-동적으로-접근"><a href="#3-2-객체에-동적으로-접근" class="headerlink" title="3.2 객체에 동적으로 접근"></a>3.2 객체에 동적으로 접근</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Working_with_Objects">MDN 객체로 작업하기</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 코딩하는 시점에, 정적으로 접근이 확정됨</span></span><br><span class="line">obj.<span class="property">name</span>;</span><br><span class="line">obj.<span class="property">age</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 동적으로 속성에 접근하고 싶을때 대괄호 표기법 사용!</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params">obj, key</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key]; <span class="comment">// obj의 key 값 반환</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getValue</span>(obj, <span class="string">&#x27;name&#x27;</span>)); <span class="comment">// 메시</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 새로운 &#x27;키:값&#x27; 추가</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addKey</span>(<span class="params">obj, key, value</span>) &#123;</span><br><span class="line">  obj[key] = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">addKey</span>(obj, <span class="string">&#x27;job&#x27;</span>, <span class="string">&#x27;engineer&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; name: &#x27;메시&#x27;, age: 20, job: &#x27;engineer&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 키 삭제</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deleteKey</span>(<span class="params">obj, key</span>) &#123;</span><br><span class="line">  <span class="keyword">delete</span> object[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3-key와-value-값-이름-똑같으면-축약-가능"><a href="#3-3-key와-value-값-이름-똑같으면-축약-가능" class="headerlink" title="3.3 key와 value 값 이름 똑같으면 축약 가능"></a>3.3 key와 value 값 이름 똑같으면 축약 가능</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 키와 값의 이름이 똑같다면 생략 가능</span></span><br><span class="line"><span class="keyword">const</span> coordinate = &#123; x, y &#125;; <span class="comment">// &#123; x: x, y: y &#125;;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(coordinate);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; name: name, age: age &#125; 축약 버전</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeObj</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="4-JS-객체-종류"><a href="#4-JS-객체-종류" class="headerlink" title="4. JS 객체 종류"></a>4. JS 객체 종류</h1><ul><li><code>표준 빌트인 객체 (standard built-in objects/native objects/global object), 내장객체 </code><ul><li>표준 빌트인 객체는 ECMAScript 사양에 정의된 객체</li><li>애플리케이션 전역의 공통 기능을 제공</li><li>표준 빌트인 객체는 실행환경에 상관없이 사용할 수 있으며 <strong>전역 객체의 프로퍼티</strong>로서 제공<ul><li>따라서 별도 선언없이 전역 변수처럼 언제나 참조할 수 있습니다.</li></ul></li></ul></li><li><code>호스트 객체 (host objects)</code><ul><li>호스트 객체는 ECMAScript 사양에 정의되어 있지 않지만 실행환경에서 추가로 제공하는 객체</li><li>브라우저 환경에서는 DOM, BOM, Canvas, XMLHttpRequest, fetch, requestAnimationFrame, SVG, Web Storage, Web Component, Web Worker와 같은 클라이언트 사이트 Web API를 호스트 객체로 제공</li><li>Node.js환경에서는 Node.js 고유 API를 호스트 객체로 제공</li></ul></li><li><code>사용자 정의 객체(user-defined objects)</code><ul><li>사용자 정의 객체는 사용자가 직접 정의한 객체를 말합니다.</li></ul></li></ul><hr><h1 id="5-빌트인-객체"><a href="#5-빌트인-객체" class="headerlink" title="5. 빌트인 객체"></a>5. 빌트인 객체</h1><h2 id="5-1-래퍼-객체"><a href="#5-1-래퍼-객체" class="headerlink" title="5.1 래퍼 객체"></a>5.1 래퍼 객체</h2><h3 id="5-1-1-toString"><a href="#5-1-1-toString" class="headerlink" title="5.1.1 toString()"></a>5.1.1 toString()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 래퍼 객체 (Wrapper Object)</span></span><br><span class="line"><span class="comment">// 원시값을 필요에 따라서 관련된 빌트인 객체로 변환한다.</span></span><br><span class="line"><span class="keyword">const</span> number = <span class="number">123</span>; <span class="comment">// number 원시 타입</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// number 원시타입을 감싸고 있는 Number 객체로 감싸짐</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number.<span class="title function_">toString</span>()); <span class="comment">// 숫자를 문자열로 변환</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number); <span class="comment">// number 원시 타입</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> text = <span class="string">&#x27;text&#x27;</span>; <span class="comment">// string 문자열 원시타입</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line">text.<span class="property">length</span>; <span class="comment">// string 원시타입을 감싸고 있는 String 객체</span></span><br><span class="line">text.<span class="title function_">trim</span>();</span><br></pre></td></tr></table></figure><hr><h2 id="5-2-글로벌-객체"><a href="#5-2-글로벌-객체" class="headerlink" title="5.2 글로벌 객체"></a>5.2 글로벌 객체</h2><h3 id="5-2-1-isFinite-parseInt-encodeURI"><a href="#5-2-1-isFinite-parseInt-encodeURI" class="headerlink" title="5.2.1 isFinite(), parseInt(), encodeURI()"></a>5.2.1 isFinite(), parseInt(), encodeURI()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 평소에는 가벼운 원시 객체를 사용하다가, 래퍼 객체는 꼭 필요할 떄만 변환해서 사용하고</span></span><br><span class="line"><span class="comment">// 다시 원시 객체로 복귀</span></span><br><span class="line"><span class="comment">// 글로벌 전역 변수들</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalThis); <span class="comment">// &lt;ref *1&gt; Object [global] &#123; ...</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// &#123;&#125;, 전역 객체</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Infinity</span>); <span class="comment">// Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;const num = 2; console.log(num)&#x27;</span>); <span class="comment">// 2, 자바스크립트 코드로 평가</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isFinite</span>(<span class="number">1</span>)); <span class="comment">// true, 숫자가 유한한지 확인</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;12.43&#x27;</span>)); <span class="comment">// 12.43, 문자열을 소수점 숫자로 변환</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;12.43&#x27;</span>)); <span class="comment">// 12, 실수를 정수로 변환</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;11&#x27;</span>)); <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// URL (URI, Uniform Resource Identifier 하위 개념)</span></span><br><span class="line"><span class="comment">// 아스키 문자로만 구성되어야 함</span></span><br><span class="line"><span class="comment">// 한글이나 특수문자는 이스케이프 처리해야 한다</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">URL</span> = <span class="string">&#x27;https://드림코딩.com&#x27;</span>; <span class="comment">// 한글이 들어있는 주소</span></span><br><span class="line"><span class="keyword">const</span> encoded = <span class="built_in">encodeURI</span>(<span class="variable constant_">URL</span>); <span class="comment">// 이스케이프(정해진 다른 문자)로 인코딩</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(encoded); <span class="comment">// https://%EB%93%9C%EB%A6%BC%EC%BD%94%EB%94%A9.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> decoded = <span class="built_in">decodeURI</span>(encoded); <span class="comment">// 원래 한글 주소로 디코딩</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(decoded); <span class="comment">// https://드림코딩.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 전체 URL이 아니라 부분적인 것은 전역함수 Component를 이용</span></span><br><span class="line"><span class="keyword">const</span> part = <span class="string">&#x27;드림코딩.com&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">encodeURIComponent</span>(part));</span><br></pre></td></tr></table></figure><hr><h2 id="5-3-불리언-함수"><a href="#5-3-불리언-함수" class="headerlink" title="5.3 불리언 함수"></a>5.3 불리언 함수</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean">MDN Boolean</a></li><li><a href="https://developer.mozilla.org/ko/docs/Glossary/Falsy">MDN 거짓같은 값</a></li><li><a href="https://developer.mozilla.org/ko/docs/Glossary/Truthy">MDN 참같은 값</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isTrue = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>); <span class="comment">// 객체를 사용하면 메모리를 더 사용함</span></span><br><span class="line"><span class="comment">// const isTrue = true; 위에것보다 이것이 더 효율적</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isTrue.<span class="title function_">valueOf</span>()); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 거짓이 나오는 값</span></span><br><span class="line"><span class="comment"> * Falshy</span></span><br><span class="line"><span class="comment"> * 0</span></span><br><span class="line"><span class="comment"> * -0</span></span><br><span class="line"><span class="comment"> * null</span></span><br><span class="line"><span class="comment"> * NaN</span></span><br><span class="line"><span class="comment"> * undefined</span></span><br><span class="line"><span class="comment"> * &#x27;&#x27;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 참이 나오는 값</span></span><br><span class="line"><span class="comment"> * Truthy</span></span><br><span class="line"><span class="comment"> * 1</span></span><br><span class="line"><span class="comment"> * -1</span></span><br><span class="line"><span class="comment"> * &#x27;0&#x27;</span></span><br><span class="line"><span class="comment"> * &#x27;false&#x27;</span></span><br><span class="line"><span class="comment"> * []</span></span><br><span class="line"><span class="comment"> * &#123;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><hr><h2 id="5-4-숫자-함수"><a href="#5-4-숫자-함수" class="headerlink" title="5.4 숫자 함수"></a>5.4 숫자 함수</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number">MDN Number</a></li></ul><h3 id="5-4-1-Number-속성"><a href="#5-4-1-Number-속성" class="headerlink" title="5.4.1 Number 속성"></a>5.4.1 Number 속성</h3><ol><li><code>MAX_VALUE</code> : 정수로 사용할 수 있는 가장 큰 숫자</li><li><code>MIN_VALUE</code></li><li><code>MAX_SAFE_INTERGER</code> : 안전하게 사용할 수 있는 최대값</li><li><code>MIN_SAFE_INTEGER</code></li><li><code>NaN</code> : 숫자가 아닌 것</li><li><code>NEGATIVE_INFINITY</code> : 음의 무한</li><li><code>POSITIVE_INFINITY</code> : 양의 무한</li><li><code>EPSILON</code> : 0과 1사이에서 나타낼 수 있는 가장 작은 숫자<ul><li>약 2.2204460492503130808472633361816E-16 또는 2-52</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num1 = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">const</span> num2 = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">123</span>); <span class="comment">// 메모리 낭비</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num1); <span class="comment">// number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num2); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// e+308 = 10^308</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>); <span class="comment">// 정수로 사용할 수 있는 가장 큰 숫자, 1.7976931348623157e+308</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>); <span class="comment">// 안전하게 사용할 수 있는 최대값</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_SAFE_INTEGER</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">NaN</span>); <span class="comment">// 숫자가 아닌 것</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">NEGATIVE_INFINITY</span>); <span class="comment">// 음의 무한</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">POSITIVE_INFINITY</span>); <span class="comment">// 양의 무한</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// num1이 최대 정수값보다 작은 숫자인지 확인</span></span><br><span class="line"><span class="keyword">if</span> (num1 &lt; <span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Number</span>.<span class="property">EPSILON</span> &gt; <span class="number">0</span> &amp;&amp; <span class="title class_">Number</span>.<span class="property">EPSILON</span> &lt; <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// 0과 1사이에서 나타낼 수 있는 가장 작은 숫자</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">EPSILON</span>); <span class="comment">// 2.220446049250313e-16</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 10진수를 2진수로 변환하고 계산한 다음 다시 10진수로 변환</span></span><br><span class="line"><span class="comment">// 이 과정에서 정확하게 부동소수점까지 계산되지 않음</span></span><br><span class="line"><span class="comment">// 그래서 작은 오차가 발생함</span></span><br><span class="line"><span class="comment">// 이 오차까지 감지해주는 것이 EPSILON임</span></span><br></pre></td></tr></table></figure><hr><h3 id="5-4-2-Number-메서드"><a href="#5-4-2-Number-메서드" class="headerlink" title="5.4.2 Number 메서드"></a>5.4.2 Number 메서드</h3><ol><li><code>isNaN()</code> : 숫자인지 아닌지 확인</li><li><code>toExponential()</code> : 지수표기법 (매우 크거나 작은 숫자를 표기할때 사용, 10의 n승으로 표기)</li><li><code>toFixed()</code> : 반올림하여 문자열로 변환</li><li><code>toString()</code> : 문자열로 변환</li><li><code>toLocaleString()</code> : 해당 나라에 맞는 언어로 표현</li><li><code>toPrecision()</code> : 원하는 자릿수까지 유효하도록 반올림</li><li><code>isEqual()</code> : 같은지 참 거짓 평가</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 숫자인지 아닌지 확인</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(num1)) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 지수표기법 (매우 크거나 작은 숫자를 표기할때 사용, 10의 n승으로 표기)</span></span><br><span class="line"><span class="keyword">const</span> num3 = <span class="number">102</span>; <span class="comment">// e+2 = 10의 2승</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num3.<span class="title function_">toExponential</span>()); <span class="comment">// 1.02e+2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 반올림하여 문자열로 변환</span></span><br><span class="line"><span class="keyword">const</span> num4 = <span class="number">1234.12</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num4.<span class="title function_">toFixed</span>()); <span class="comment">// 1234, 실수를 반올림한 정수로 변환</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 5.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num4.<span class="title function_">toString</span>()); <span class="comment">// 1234.12, 문자열로 변환</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num4.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;ar-EG&#x27;</span>)); <span class="comment">// ١٬٢٣٤٫١٢, 그 나라에 맞는 언어로 표현</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 원하는 자릿수까지 유효하도록 반올림</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num4.<span class="title function_">toPrecision</span>(<span class="number">5</span>)); <span class="comment">// 1234.1, 5자리까지만 표기</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num4.<span class="title function_">toPrecision</span>(<span class="number">4</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num4.<span class="title function_">toPrecision</span>(<span class="number">2</span>)); <span class="comment">// 전체 자릿수 표기가 안될때는 지수표기법</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">0.1</span> + <span class="number">0.2</span> - <span class="number">0.2</span>; <span class="comment">// 0.1라고 예상하지만 실제 값은 아래와 같음</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 0.10000000000000003</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isEqual</span>(<span class="params">original, expected</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">abs</span>(original - expected) &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEqual</span>(<span class="number">1</span>, <span class="number">1</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEqual</span>(<span class="number">0.1</span>, <span class="number">0.1</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEqual</span>(num, <span class="number">0.1</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h2 id="5-5-수학-관련-함수"><a href="#5-5-수학-관련-함수" class="headerlink" title="5.5 수학 관련 함수"></a>5.5 수학 관련 함수</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math">MDN Math</a></p><ol><li><code>abs</code> : 절대값</li><li><code>ceil</code> : 소수점 이하를 올림</li><li><code>floor</code> : 소수점 이하를 내림</li><li><code>round</code> : 소수점 이하를 반올림</li><li><code>trunc</code> : 정수만 반환</li><li><code>max / min</code> : 최대값, 최소값</li><li><code>pow</code> : 거듭제곱</li><li><code>sqrt</code> : 제곱근</li><li><code>random</code> : 0~1 사이의 랜덤한 값을 반환</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Math</span></span><br><span class="line"><span class="comment">// static properties, method</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">E</span>); <span class="comment">// 오일러의 상수, 자연로그의 밑, 2.718281828459045</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>); <span class="comment">// 원주율 PI값, 3.141592653589793</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1~5. static method</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">10</span>)); <span class="comment">// 절대값, 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.4</span>)); <span class="comment">// 소수점 이하를 올림, 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.4</span>)); <span class="comment">// 소수점 이하를 내림, 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.4</span>)); <span class="comment">// 소수점 이하를 반올림, 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.7</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="number">1.5432</span>)); <span class="comment">// 정수만 반환, 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 최대, 최소값을 찾기</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 거듭제곱</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> ** <span class="number">2</span>); <span class="comment">// 9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">3</span>, <span class="number">2</span>)); <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 제곱근</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">9</span>)); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 9. 0~1 사이의 랜덤한 값을 반환</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1~10 사이의 랜덤한 값을 반환</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span> + <span class="number">1</span>));</span><br></pre></td></tr></table></figure><hr><h2 id="5-6-문자열-함수"><a href="#5-6-문자열-함수" class="headerlink" title="5.6 문자열 함수"></a>5.6 문자열 함수</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String">MDN String</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> textObj = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> text = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(textObj); <span class="comment">// [String: &#x27;Hello World!&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text); <span class="comment">// Hello World!</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="property">length</span>); <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text[<span class="number">0</span>]); <span class="comment">// H</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text[<span class="number">1</span>]); <span class="comment">// e</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text[<span class="number">2</span>]); <span class="comment">// l</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">charAt</span>(<span class="number">0</span>)); <span class="comment">// H, 해당 위치의 문자를 반환</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">charAt</span>(<span class="number">1</span>)); <span class="comment">// e</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">charAt</span>(<span class="number">2</span>)); <span class="comment">// l</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">indexOf</span>(<span class="string">&#x27;l&#x27;</span>)); <span class="comment">// 2, l이 위치한 첫 인덱스를 반환</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;l&#x27;</span>)); <span class="comment">// 9, l이 위치한 마지막 인덱스를 반환</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">includes</span>(<span class="string">&#x27;tx&#x27;</span>)); <span class="comment">// false, tx라는 문자열이 들어있는지 반환</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">includes</span>(<span class="string">&#x27;h&#x27;</span>)); <span class="comment">// false, 소문자 h라는 문자열이 들어있는지 반환</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">includes</span>(<span class="string">&#x27;H&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">startsWith</span>(<span class="string">&#x27;He&#x27;</span>)); <span class="comment">// true, He로 시작하는지 확인</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">endsWith</span>(<span class="string">&#x27;!&#x27;</span>)); <span class="comment">// true, !로 끝나는지 확인</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">toUpperCase</span>()); <span class="comment">// HELLO WORLD! , 전부 대문자 변경</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">toLowerCase</span>()); <span class="comment">// hello world! , 전부 소문자 변경</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">2</span>)); <span class="comment">// He, 0부터 시작해서 2번쨰 인덱스 이전까지 가져오기</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">slice</span>(<span class="number">2</span>)); <span class="comment">// llo World!, 앞에서 2번위치까지 잘라내기</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">slice</span>(-<span class="number">2</span>)); <span class="comment">// d!, 뒤에서 부터 2번위치까지 잘라내기</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> space = <span class="string">&#x27;            space       &#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(space.<span class="title function_">trim</span>()); <span class="comment">// space, 공백 제거</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// split : 스페이스별로 문자열을 끊어줌</span></span><br><span class="line"><span class="comment">// 스페이스별로 끊어진 것 중에 두 덩어리를 붙여서 출력</span></span><br><span class="line"><span class="keyword">const</span> longText = <span class="string">&#x27;Get to the, point&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(longText.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)); <span class="comment">// [ &#x27;Get&#x27;, &#x27;to&#x27;, &#x27;the,&#x27;, &#x27;point&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(longText.<span class="title function_">split</span>(<span class="string">&#x27;, &#x27;</span>, <span class="number">2</span>)); <span class="comment">// [ &#x27;Get to the&#x27;, &#x27;point&#x27; ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="5-7-날짜-관련-함수"><a href="#5-7-날짜-관련-함수" class="headerlink" title="5.7 날짜 관련 함수"></a>5.7 날짜 관련 함수</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date">MDN Date</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 7.date.js</span></span><br><span class="line"><span class="comment">// UTC기준 (협정 세계시, 1970년 1월 1일 UTC 자정과의 시간 차이를 밀리초 단위로 표기)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()); <span class="comment">// 현재 시간을 출력</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;Jun 5, 2022&#x27;</span>)); <span class="comment">// 특정 시간을 출력하고 싶다면</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2022-12-17T03:24:00&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>()); <span class="comment">// UTC기준에서 현재 시간까지 걸린 초</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="string">&#x27;2022-12-17T03:24:00&#x27;</span>)); <span class="comment">// 1671215040000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">now.<span class="title function_">setFullYear</span>(<span class="number">2023</span>); <span class="comment">// 연도를 설정</span></span><br><span class="line">now.<span class="title function_">setMonth</span>(<span class="number">0</span>); <span class="comment">// 월을 설정, 0부터 시작, 0이 1월</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getFullYear</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getDate</span>()); <span class="comment">// 0: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getDay</span>()); <span class="comment">// 0 일요일일부터, 1... 6: 토요일</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">getTime</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now); <span class="comment">// 2023-01-05T13:01:47.427Z</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">toString</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">toDateString</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">toTimeString</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">toISOString</span>()); <span class="comment">// ISO 8601 형식으로 출력</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;en-US&#x27;</span>)); <span class="comment">// 미국 형식, 1/5/2023, 10:02:10 PM</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;ko-KR&#x27;</span>)); <span class="comment">// 한국 형식, 2023. 1. 5. 오후 10:02:10</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-03-데이터 타입(Data Types) - Primitive(원시)</title>
      <link href="/2023/01/01/Front-JS-Basic-03-DataType01/"/>
      <url>/2023/01/01/Front-JS-Basic-03-DataType01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-데이터-타입-Data-Types-종류"><a href="#1-데이터-타입-Data-Types-종류" class="headerlink" title="1. 데이터 타입(Data Types) 종류"></a>1. 데이터 타입(Data Types) 종류</h1><p>JavaScript의 데이터 타입(Data Type)은 크게 <code>primitive(기본, 원시)</code>과 <code>reference(참조)</code>으로 구분합니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/js-3-1.png" alt="js-3-1"></p><ul><li>원시 값(언어의 최고 로우레벨에서 직접 표현되는 불변 데이터) <ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures#number_%ED%83%80%EC%9E%85">Number 타입</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures#string_%ED%83%80%EC%9E%85">String 타입</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures#boolean_%ED%83%80%EC%9E%85">Boolean 타입</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures#null_%ED%83%80%EC%9E%85">Null 타입</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures#undefined_%ED%83%80%EC%9E%85">Undefined 타입</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures#symbol_%ED%83%80%EC%9E%85">Symbol 타입</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures#bigint_%ED%83%80%EC%9E%85">BigInt 타입</a><ul><li>임의 정밀도로 정수를 나타낼 수 있는 JavaScript 숫자 원시 값</li><li>Number의 안전 한계를 넘어서는 큰 정수도 안전하게 저장하고 연산</li></ul></li></ul></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures#%EA%B0%9D%EC%B2%B4">객체</a> (속성의 컬렉션)<ul><li>array</li><li>funciton</li><li>data</li><li>RegExp</li><li>Map, WeakMap</li><li>Set, WeakSet</li></ul></li></ul><hr><h1 id="2-원시타입"><a href="#2-원시타입" class="headerlink" title="2. 원시타입"></a>2. 원시타입</h1><h2 id="2-1-숫자-타입-number"><a href="#2-1-숫자-타입-number" class="headerlink" title="2.1 숫자 타입(number)"></a>2.1 숫자 타입(number)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> integer = <span class="number">123</span>;   <span class="comment">// 정수</span></span><br><span class="line"><span class="keyword">let</span> negative = -<span class="number">123</span>; <span class="comment">// 음수</span></span><br><span class="line"><span class="keyword">let</span> double = <span class="number">1.23</span>;   <span class="comment">// 실수</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(integer);  <span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(negative); <span class="comment">// -123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(double);   <span class="comment">// 1.23</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> binary = <span class="number">0b1111011</span>; <span class="comment">// 2진수</span></span><br><span class="line"><span class="keyword">let</span> octal = <span class="number">0o173</span>;      <span class="comment">// 8진수</span></span><br><span class="line"><span class="keyword">let</span> hex = <span class="number">0x7b</span>;         <span class="comment">// 16진수</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(binary); <span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(octal);  <span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hex);    <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> / <span class="number">123</span>);  <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> / <span class="number">0</span>);  <span class="comment">// Infinity </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> / -<span class="number">0</span>); <span class="comment">// -Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> / <span class="string">&#x27;text&#x27;</span>); <span class="comment">// NaN (Not a Number)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 참고 : 정말 큰 수를 표현할 떄는 뒤에 n을 붙여야 함</span></span><br><span class="line"><span class="keyword">let</span> bigInt = <span class="number">1234567890123456789012345678901234567890n</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigInt);</span><br></pre></td></tr></table></figure><blockquote><p>💡Infinity에 대해</p><p>cf. <a href="https://youtu.be/NKmGVE85GUU">TED - 0으로 나누면 안되는 이유, 자막있음</a></p><p>0은 역수를 가질 수 없음</p></blockquote><hr><h2 id="2-2-문자열-타입-string"><a href="#2-2-문자열-타입-string" class="headerlink" title="2.2 문자열 타입(string)"></a>2.2 문자열 타입(string)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 문자열 타입</span></span><br><span class="line"><span class="keyword">let</span> string = <span class="string">&#x27;안녕하세요&#x27;</span>;</span><br><span class="line">string = <span class="string">`안녕!`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 작은 따옴표 표현</span></span><br><span class="line">string = <span class="string">&quot;&#x27;안녕!&#x27;&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 특수문자 출력하는 법 : 이스케이프 표현</span></span><br><span class="line">string = <span class="string">&#x27;안녕!\n나야!\t\t 내 이름은\\\u09AC&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> id = <span class="string">&#x27;메시&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> greetings = <span class="string">&quot;&#x27;안녕!, &quot;</span> + id + <span class="string">&quot;🖐️\n즐거운 하루 보내요!&#x27;&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greetings);</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-1-템플릿-리터럴-Template-Literal"><a href="#2-2-1-템플릿-리터럴-Template-Literal" class="headerlink" title="2.2.1 템플릿 리터럴(Template Literal)"></a>2.2.1 템플릿 리터럴(Template Literal)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 템플릿 리터럴(Template Literal) ``</span></span><br><span class="line">greetings = <span class="string">`&#x27;안녕, <span class="subst">$&#123;id&#125;</span>🖐️</span></span><br><span class="line"><span class="string">즐거운 하루 보내요!&#x27;`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greetings);</span><br></pre></td></tr></table></figure><p>백틱으로 문자를 만드시면 문자 중간에 ${변수명} 이렇게 쉽게 넣을 수 있습니다.</p><ul><li>문자 중간 엔터키 입력이 가능</li><li>문자 중간에 변수를 집어넣을 때 편리</li><li>자바스크립 문자로 HTML을 작성하실 때도 유용</li></ul><hr><h2 id="2-3-불리언-타입-boolean"><a href="#2-3-불리언-타입-boolean" class="headerlink" title="2.3 불리언 타입(boolean)"></a>2.3 불리언 타입(boolean)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 불리언 타입</span></span><br><span class="line"><span class="keyword">let</span> 참 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> 거짓 = <span class="literal">false</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(참);   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(거짓); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 활용 예:</span></span><br><span class="line"><span class="keyword">let</span> isFree = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> isActivated = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> isEntrolled = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isActivated); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Falshy 거짓인 값</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!-<span class="number">0</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="string">&#x27;&#x27;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="literal">null</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="literal">undefined</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="title class_">NaN</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Truthy 참인 값</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="number">1</span>); <span class="comment">// ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!-<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="string">&#x27;text&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!&#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="title class_">Infinity</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="2-4-null과-undefined-타입"><a href="#2-4-null과-undefined-타입" class="headerlink" title="2.4 null과 undefined 타입"></a>2.4 null과 undefined 타입</h2><ul><li><code>undefined</code> : 값이 있는지 없는지 모름</li><li><code>null</code> : 값이 없음</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// null, undefined</span></span><br><span class="line"><span class="keyword">let</span> variable;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(variable); <span class="comment">// undefined : 값이 있는지 없는지 모름</span></span><br><span class="line"></span><br><span class="line">variable = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(variable); <span class="comment">// null : 값이 없다</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> activeItem;    <span class="comment">// 아직 활성화된 아이템이 있는지 없는지 모르는 상태!</span></span><br><span class="line">activeItem = <span class="literal">null</span>; <span class="comment">// 활성화된 아이템이 없는 상태!</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123</span>);   <span class="comment">// number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;123&#x27;</span>); <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);  <span class="comment">// object : null을 표현하기 위해 만든 object가 할당됨</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-5-symbol-타입"><a href="#2-5-symbol-타입" class="headerlink" title="2.5 symbol 타입"></a>2.5 symbol 타입</h2><p>map과 set을 배운 후에 symbol을 이해합니다. <code>symbol(심벌)</code>은 유일한 값을 나타날 떄, 유용하게 사용할 수 있습니다.</p><ul><li>Symbol은 Symbol() 함수로 생성합니다.</li><li>이때 생성된 Symbol은 객체가 아니라 <strong>변경 불가능한 원시 타입의 값</strong>입니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySymbol2 = <span class="title class_">Symbol</span>(<span class="string">&quot;something&quot;</span>);</span><br><span class="line"><span class="comment">// Symbol()에 문자열을 줄수 있는데 별다릇 뜻은 없고 주석 같은 개념이다. </span></span><br><span class="line"><span class="comment">// 디버깅할때 이 심볼이 어느 심볼인지 구분하기 편하게 하기 위한 장치</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySymbol);        <span class="comment">// Symbol()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> mySymbol); <span class="comment">// symbol</span></span><br></pre></td></tr></table></figure><p>심볼은 유일성이 보장되는 자료형이기 때문에, 설명이 동일한 <strong>심볼을 여러 개 만들어도 각 심볼값은 다릅니다.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id1 = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> id2 = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(id1 == id2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-5-1-Symbol-keyFor"><a href="#2-5-1-Symbol-keyFor" class="headerlink" title="2.5.1 Symbol.keyFor()"></a>2.5.1 Symbol.keyFor()</h3><p><code>Symbol()</code> 은 고유한 심볼을 반환합니다.<br>하지만 Symbol.for() 는 전역으로 존재하는 global symbol table 의 목록을 참조합니다.<br>때문에 Symbol.for(token string) 으로 정의할때, token string 으로 정의 된 심볼이 있다면, 해당 심볼을 반환하게 됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 전역 Symbol 레지스트리에 foo라는 키로 저장된 Symbol이 없으면 새로운 Symbol 생성</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 전역 Symbol 레지스트리에 foo라는 키로 저장된 Symbol이 있으면 해당 Symbol을 반환</span></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-5-2-Symbol-keyFor"><a href="#2-5-2-Symbol-keyFor" class="headerlink" title="2.5.2 Symbol.keyFor()"></a>2.5.2 Symbol.keyFor()</h3><p><code>Symbol.keyFor</code>은 global symbol table로부터 존재하는 Symbol의 token string을 반환합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> token = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;tokenString&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(token) === <span class="string">&quot;tokenString&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-5-3-Symbol-description"><a href="#2-5-3-Symbol-description" class="headerlink" title="2.5.3 Symbol.description"></a>2.5.3 Symbol.description</h3><p>일반 심볼 이름을 반환합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shareSymbol = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;myKey&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(shareSymbol)); <span class="comment">// myKey</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> unsharedSymbol = <span class="title class_">Symbol</span>(<span class="string">&#x27;myKey&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(unsharedSymbol)); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(unsharedSymbol.<span class="property">description</span>); <span class="comment">// myKey</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Symbol(심벌) : 유일한 키를 생성할 수 있음 🔑</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="comment">// const key1 = &#x27;key&#x27;;</span></span><br><span class="line"><span class="comment">// const key2 = &#x27;key&#x27;;</span></span><br><span class="line"><span class="keyword">const</span> key1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> key2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(key1, <span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(key2)); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(key1 === key2); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 동일한 이름으로 하나의 키를 사용하고 싶다면, Symbol.for</span></span><br><span class="line"><span class="comment">// 전역 심벌 레지스트리(Global Symbol Registry) = 전역적으로 심벌을 관리하고 재사용하는 곳</span></span><br><span class="line"><span class="keyword">const</span> k1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> k2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k1 === k2); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(k1)); <span class="comment">// key</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(key1)); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 보안을 위해 외부에서 접근을 막는 Symbol</span></span><br><span class="line"><span class="comment">// 결론 : 문자열이 같아도 유니크한 키값을 만들고 싶을 떄, Symbol을 사용</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; [k1]: <span class="string">&#x27;Hello&#x27;</span>, [<span class="title class_">Symbol</span>(<span class="string">&#x27;key&#x27;</span>)]: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; [Symbol(key)]: &#x27;Hello&#x27;, [Symbol(key)]: 1 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k1]); <span class="comment">// Hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="title class_">Symbol</span>(<span class="string">&#x27;key&#x27;</span>)]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-22-State Management 라이브러리 - Recoil, Zustand</title>
      <link href="/2022/12/30/Front-React-Basic-22-StateManagement03/"/>
      <url>/2022/12/30/Front-React-Basic-22-StateManagement03/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Recoil"><a href="#1-Recoil" class="headerlink" title="1. Recoil"></a>1. Recoil</h1><ul><li><a href="https://recoiljs.org/ko/">https://recoiljs.org/ko/</a></li></ul><p>React의 한계 : <a href="https://recoiljs.org/ko/docs/introduction/motivation/">https://recoiljs.org/ko/docs/introduction/motivation/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install recoil</span><br></pre></td></tr></table></figure><hr><h1 id="2-Zustand"><a href="#2-Zustand" class="headerlink" title="2. Zustand"></a>2. Zustand</h1><ul><li><a href="https://github.com/pmndrs/zustand">https://github.com/pmndrs/zustand</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install zustan</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-21-State Management 라이브러리 - Mobx</title>
      <link href="/2022/12/30/Front-React-Basic-21-StateManagement02/"/>
      <url>/2022/12/30/Front-React-Basic-21-StateManagement02/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Mobx"><a href="#1-Mobx" class="headerlink" title="1. Mobx"></a>1. Mobx</h1><ul><li><a href="https://mobx.js.org/README.html">https://mobx.js.org/README.html</a></li><li><a href="https://mobx.js.org/getting-started">https://mobx.js.org/getting-started</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save mobx</span><br><span class="line">npm install --save mobx-react</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-20-State Management 라이브러리 - Redux/Toolkit</title>
      <link href="/2022/12/30/Front-React-Basic-20-StateManagement01/"/>
      <url>/2022/12/30/Front-React-Basic-20-StateManagement01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-State-Management-상태관리"><a href="#1-State-Management-상태관리" class="headerlink" title="1. State Management(상태관리)"></a>1. State Management(상태관리)</h1><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/React_14_2.png" alt="React_14_2"></p><p><strong>Context API</strong> (리액트 기본 문법)</p><ul><li>props 전송없이 state 공유 가능</li><li>2가지 문제 때문에 많이 쓰이지 않음<ul><li>state 변경시 쓸데없는 컴포넌트까지 전부 재렌더링되어 성능 이슈</li><li>컴포넌트 재활용이 어려움</li></ul></li><li>Context API보다는 redux같은 외부 라이브러리를 많이 사용</li></ul><hr><h2 id="1-1-왜-상태-관리-도구가-필요한가"><a href="#1-1-왜-상태-관리-도구가-필요한가" class="headerlink" title="1.1 왜 상태 관리 도구가 필요한가?"></a>1.1 왜 상태 관리 도구가 필요한가?</h2><ul><li>React에서 State는 component 안에서 관리됨</li><li>자식 컴포넌트들 간의 다이렉트 데이터 전달은 불가능</li><li>자식 컴포넌트들 간의 데이터를 주고 받을 때는 상태를 관리하는 부모 컴포넌트를 통해서 주고 받음</li><li>그런데 자식이 많아진다면 상태 관리가 매우 복잡해짐</li><li><strong>상태를 관리하는 상위 컴포넌트에서 계속 내려 받아야한다.</strong> → <code>Props drilling</code> 이슈</li><li>그래서 상태 관리의 복잡성을 해결해주는 라이브러리를 활용함</li></ul><hr><h2 id="1-2-State-Management-라이브러리-종류"><a href="#1-2-State-Management-라이브러리-종류" class="headerlink" title="1.2 State Management 라이브러리 종류"></a>1.2 State Management 라이브러리 종류</h2><p>props 없이 state를 공유할 수 있게 도와주는 라이브러리들</p><ul><li><p><a href="https://recoiljs.org/">Recoil - Official Website</a>✔️</p><ul><li>Context 만을 사용하여 글로벌 상태 관리를 하는 것이 어느정도 제한이 있어서,</li><li>Meta 개발팀에서 이를 개선하기 위해 만든 상태 관리 라이브러리</li><li>공식적으로는 23&#x2F;01 기준 experimental 단계</li></ul></li><li><p><a href="https://mobx.js.org/">MobX Official Website</a></p></li><li><p><a href="https://redux-toolkit.js.org/">Redux Toolkit - ReduxJS</a></p><ul><li>옛날부터 써왔던 라이브러리라 사용자가 가장 많음</li><li><a href="https://tsh.io/state-of-frontend/">2022 통계</a>에 따르면 약 48%의 개발자들이 리액트 프로젝트에서 리덕스 사용</li><li>그래서 유지보수를 하고 있는 프로젝트에서 리덕스를 사용중이기 때문이 확률이 큼</li><li>Redux 만든사람이 Redux의 문제점을 인식하고, Redux를 개선한 Redux Toolkit을 만듬</li><li>리덕스는 리액트에 종속되는 라이브러리가 아님</li><li>다른 UI 라이브러리&#x2F;프레임워크와 함께 사용 가능</li><li>cf. <a href="https://velog.io/@wooder2050/%EB%A6%AC%EB%8D%95%EC%8A%A4Redux%EB%8A%94-%EC%99%9C-%EC%93%B0%EB%8A%94-%EA%B1%B4%EB%8D%B0">Velog - 리덕스(Redux)는 왜 쓰는 건데⁉</a></li><li>cf. <a href="https://velog.io/@velopert/using-redux-in-2021">Velog - Redux 어떻게 써야 잘 썼다고 소문이 날까?</a></li><li>cf. <a href="https://ko.redux.js.org/introduction/installation">https://ko.redux.js.org/introduction/installation</a></li><li>리덕스의 문제점<ul><li>보일러 플레이트가 많음<ul><li>단순히 하나의 상태를 바꾸기 위해서 요청을 전달하는 action을 만들고,</li><li>상태를 바꿔주는 reducer를 만들고, 필요에 따라 middleware까지 만져야 함</li></ul></li><li>특정 어플리케이션에서는 과한 기술일 수 있음<ul><li>상태가 별로 없으면 props 쓰는 게 편함</li></ul></li></ul></li></ul></li><li><p><a href="https://github.com/pmndrs/zustand">Zustand - Official Website</a>✔️</p><ul><li>Zustand는 독일어로 상태라는 의미</li></ul></li><li><p><a href="https://reactjs.org/docs/context.html">Official React Context Docs</a>✔️</p></li></ul><hr><h2 id="1-3-전역-상태-관리-라이브러리는-언제-쓰나"><a href="#1-3-전역-상태-관리-라이브러리는-언제-쓰나" class="headerlink" title="1.3 전역 상태 관리 라이브러리는 언제 쓰나?"></a>1.3 전역 상태 관리 라이브러리는 언제 쓰나?</h2><ul><li><p>cf. <a href="https://velog.io/@velopert/react-context-tutorial">Velopert - Velog 리액트에서 Context API 잘 쓰는 법</a></p></li><li><p>과거에는 리액트의 Context가 굉장히 불편해서 전역 상태 관리 라이브러리를 사용하는 것이 당연했음</p></li><li><p>이제는 사용하기 편해져서 단순히 전역적인 상태를 관리하기 위함이라면 더 이상 사용해야 할 이유X</p></li><li><p>단, 상태 관리 라이브러리는 상태 관리를 더욱 편하고, 효율적으로 할 수 있게 해주는 기능들을 제공해주는 도구임</p></li><li><p>e.g. Redux의 경우</p><ul><li>액션과 리듀서라는 개념을 사용하여 상태 업데이트 로직을 컴포넌트 밖으로 분리</li><li>상태가 업데이트 될 때 실제로 의존하는 값이 바뀔 때만 컴포넌트가 리렌더링 되도록 최적화</li></ul></li><li><p>e.g. MobX의 경우</p><ul><li>Redux와 마찬가지로 상태 업데이트 로직을 컴포넌트 밖으로 분리</li><li>함수형 리액티브 프로그래밍 방식을 도입하여 mutable한 상태가 리액트에 보여지게 해줌</li><li>상태 업데이트 로직을 더욱 편하게 작성할 수 있게 해주며 최적화</li></ul></li><li><p>e.g. Recoil, Jotai, Zustand의 경우</p><ul><li>Context를 일일이 만드는 과정을 생략하고 Hook 기반으로 아주 편하게 전역 상태 관리</li></ul></li></ul><hr><h2 id="1-4-MVC-패턴과-Flux-패턴"><a href="#1-4-MVC-패턴과-Flux-패턴" class="headerlink" title="1.4 MVC 패턴과 Flux 패턴"></a>1.4 MVC 패턴과 Flux 패턴</h2><h3 id="1-4-1-MVC-패턴"><a href="#1-4-1-MVC-패턴" class="headerlink" title="1.4.1 MVC 패턴"></a>1.4.1 MVC 패턴</h3><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/react_19_1.png" alt="react_19_1"></p><p><code>MVC 패턴(Model-View-Controller)</code></p><ul><li>데이터를 다루는 로직(Controller), 데이터(Model), 사용자 인터페이스(View)를 나누어<br>어플리케이션을 구현하는 하나의 개발 모델</li><li>Controller는 Model의 데이터를 조회하거나 업데이트하는 역할을 하며, Model의 변화는 View에 반영</li></ul><hr><h3 id="1-4-2-MVC-패턴의-문제점"><a href="#1-4-2-MVC-패턴의-문제점" class="headerlink" title="1.4.2 MVC 패턴의 문제점"></a>1.4.2 MVC 패턴의 문제점</h3><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/react_19_2.png" alt="react_19_2"></p><p>기존 MVC 패턴을 가진 대규모 애플리케이션에서 구조가 너무 복잡해지고 예측성이 떨어지는 문제점에 직면</p><ul><li>MVC 구조는 앱이 커지면서 굉장히 복잡해졌다고 한다.</li><li>View가 다양한 상호작용을 위해 여러개의 Model을 동시에 업데이트하는 상황이 나타났기 때문</li></ul><p>이 문제를 해결하기 위해서는 <strong>좀 더 예측 가능한 형태로 코드를 구조화하는 것</strong>이 필요했고,</p><ul><li>Facebook은 <strong>React</strong>와 <strong>Flux</strong>를 이용해서 그것을 달성하고자 했다고 한다.</li></ul><hr><h3 id="1-4-3-Flux-패턴"><a href="#1-4-3-Flux-패턴" class="headerlink" title="1.4.3 Flux 패턴"></a>1.4.3 Flux 패턴</h3><p><code>Flux 패턴</code> : 단방향 데이터 흐름을 가지는 패턴</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/react_19_3.png" alt="react_19_3"></p><ul><li><code>Action</code><ul><li>첫 흐름을 발생시키는 요소이며 Dispatcher에게 해당 액션 메시지를 보내줌</li><li>**타입(type)**과 **데이터(payload)**를 가지고 있다</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EVENT_TYPE&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Huurray&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>Dispatcher</code><ul><li><strong>Flux의 모든 데이터 흐름을 관리</strong>하는 <strong>중앙허브</strong></li><li>Store들이 등록해놓은 Action Type에 대한 맞춤 Callback이 있다.</li><li>그래서 Action이 넘어오면 Store들이 타입에 맞는 Store의 Callback을 실행하도록 해준다.</li></ul></li><li><code>Store</code><ul><li><strong>데이터</strong>와 <strong>데이터를 가공하는 로직</strong>을 가지고 있다.</li><li>Action이 넘어오면 등록된 Callback을 활용해 타입에 맞는 로직을 실행하고 데이터를 업데이트해준다.</li><li>Store는 변경된 데이터를 View에게 알려주고,</li><li>자신의 컴포넌트 트리에 속해 있는 자식 노드 모두를 다시 랜더링하게 한다.</li></ul></li><li><code>View</code><ul><li>Flux에서의 View는 MVC의 뷰와는 달리 화면을 보여주는것 외에도 <strong>Controller</strong>의 성격또한 가지고 있다.</li><li>최상위 View는 Store에서 데이터를 가져와 이를 자식 View 로 내려보내주는 역할을 하고 있다.</li><li>각 요소들은 단방향 흐름에서 순서대로 역할이 수행되고,</li><li>또 다시 새로운 데이터 변경이 있으면 처음부터 이 흐름이 다시 시작된다.</li><li>이렇게 하면 데이터 처리에 예외가 없다.</li><li>Facebook은 이 Flux 패턴을 고안하고 View의 역할로 <strong>React</strong>를 이용했다.</li></ul></li></ul><hr><h2 id="1-5-immutability-불변함"><a href="#1-5-immutability-불변함" class="headerlink" title="1.5 immutability(불변함)"></a>1.5 immutability(불변함)</h2><ul><li>mutate &#x3D; 변화하다</li><li>mutable &#x3D; 변화 가능한</li><li>mutability &#x3D; 변화가능함</li><li>immutability &#x3D; 변화가능하지 않음<ul><li>데이터의 원본이 훼손되는 것을 막는 것을 의미</li></ul></li></ul><p>데이터의 CRUD(Create, Read, Update, Delete) 중에 중요한 건 Create, Read입니다.<br>생성이 없다면 읽을 수 없음, 모든 정보는 존재하고 있다면, 생성과 읽기로 이루어짐.<br>이를 <code>원본(origin)</code>이라고 함</p><p>그 다음으로 중요한 건 수정과 삭제입니다. IT에서 수정과 삭제는 흔한 일이지만, 수정과 삭제가 안되거나 힘든 시스템이 있습니다.<br>e.g. 인쇄되어 배포된 종이책, 역사, 회계, 블록체인</p><p>이처럼 많은 정보들이 불변할 수 밖에 없습니다. 그렇지만 인터넷에서 가변(수정, 삭제)는 너무 쉽게 일어납니다.<br>무질서한 수정과 삭제로 원본이 훼손되는 것을 막는 방법을 살펴볼 것입니다.<br>cf. 그렇다고 수정과 삭제가 꼭 나쁜 것만은 아닙니다.</p><hr><h1 id="2-Redux"><a href="#2-Redux" class="headerlink" title="2. Redux"></a>2. Redux</h1><ul><li><a href="https://redux-toolkit.js.org/">https://redux-toolkit.js.org/</a></li><li>Redux 개발자도구<ul><li><a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd">크롬</a></li><li><a href="https://addons.mozilla.org/en-US/firefox/addon/reduxdevtools/">파이어폭스</a></li></ul></li><li>cf. <a href="https://nomadcoders.co/redux-for-beginners/lobby">Nomard Coder Redux 무료강의</a></li><li>cf. <a href="https://velog.io/@velopert/redux-or-mobx">상태 관리 라이브러리의 미학: Redux 또는 MobX 를 통한 상태 관리</a></li></ul><hr><h2 id="2-1-개념"><a href="#2-1-개념" class="headerlink" title="2.1 개념"></a>2.1 개념</h2><h3 id="2-1-1-액션-Action"><a href="#2-1-1-액션-Action" class="headerlink" title="2.1.1 액션 (Action)"></a>2.1.1 액션 (Action)</h3><ul><li>상태에 어떠한 변화가 필요하게 될 땐, <code>액션</code>이란 것을 발생시킵니다.</li><li>이는, <strong>하나의 객체로 표현</strong>되는데요, 액션 객체는 다음과 같은 형식으로 이뤄져있습니다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;TOGGLE_VALUE&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>액션 객체</code>는 <code>type</code> <strong>필드를 필수적으로 가지고 있어야</strong> 하고, 그 외의 값들은 개발자 마음대로 넣어줄 수 있습니다. 예시:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;ADD_TODO&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&quot;리덕스 배우기&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;CHANGE_INPUT&quot;</span>,</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&quot;안ㄴ&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-1-2-액션-생성함수-Action-Creator"><a href="#2-1-2-액션-생성함수-Action-Creator" class="headerlink" title="2.1.2 액션 생성함수 (Action Creator)"></a>2.1.2 액션 생성함수 (Action Creator)</h3><ul><li><strong>액션을 만드는 함수</strong></li><li>단순히 <strong>파라미터를 받아와서 액션 객체 형태로</strong> 만들어줌</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addTodo</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;ADD_TODO&#x27;</span>,</span><br><span class="line">    data,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 화살표 함수로도 만들 수 있습니다.</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeInput</span> = (<span class="params">text</span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;CHANGE_INPUT&#x27;</span>,</span><br><span class="line">  text,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="2-1-3-리듀서-Reducer"><a href="#2-1-3-리듀서-Reducer" class="headerlink" title="2.1.3 리듀서 (Reducer)"></a>2.1.3 리듀서 (Reducer)</h3><ul><li><strong>변화를 일으키는 함수</strong>입니다.</li><li>리듀서는 두가지의 파라미터를 받아옵니다.</li><li>리듀서는, 현재의 상태와, 전달 받은 액션을 참고하여 새로운 상태를 만들어서 반환합니다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="comment">// 상태 업데이트 로직</span></span><br><span class="line">  <span class="keyword">return</span> alteredState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자세한건, 추후 직접 구현하면서 알아보겠습니다.</p><blockquote><p>💡 Reduce</p><ul><li>to change something into a simpler or more general form</li><li><strong>단순하게 줄이다라는 의미보다 변경이라는 의미에 가까움</strong></li><li>수학에서 어떤 복잡한 수학문제를 간단하게 만들어 푸는 방법을 reduction이라고 함</li><li>“고쳐나간다” (간단하게만들기위해서, 혹은 특정규칙을 적용하기위해서)</li><li>주어진 상태를 고쳐나가는 함수형 프로그래밍에서 자주보이는 reduce()함수</li><li>리덕스에서의 reduce()는 현재상태(previousState)를 새로운상태(newState)로 변경할때 쓰는 함수</li><li>리듀서가 reduce()함수에서 사용하는 콜백함수이기때문에 리듀서라고 불림</li></ul><p><strong>리액트(React) 상태(State) 생성자(Producer)</strong></p><ul><li>액션(Action)이 날라오면 리듀서(Reducer)가 스토어(Store)의 상태(State)를 변경시키는 방식으로 동작</li></ul></blockquote><hr><h3 id="2-1-4-스토어-Store"><a href="#2-1-4-스토어-Store" class="headerlink" title="2.1.4 스토어 (Store)"></a>2.1.4 스토어 (Store)</h3><ul><li><strong>state들을 보관하는 파일</strong></li><li>리덕스에서는 한 애플리케이션 당 하나의 스토어를 만듭니다.</li><li>스토어 안에는, 현재의 앱 상태와, 리듀서가 들어가있고, 추가적으로 몇가지 내장 함수들이 있습니다.</li></ul><hr><h3 id="2-1-5-디스패치-dispatch"><a href="#2-1-5-디스패치-dispatch" class="headerlink" title="2.1.5 디스패치 (dispatch)"></a>2.1.5 디스패치 (dispatch)</h3><ul><li>스토어의 내장함수 중 하나</li><li>디스패치는, <strong>액션을 발생 시키는 것</strong>이라고 이해하시면 됩니다.</li><li>dispatch 라는 함수에는 <strong>액션을 파라미터로 전달</strong>합니다.. dispatch(action) 이런식으로 말이죠.<ul><li>그렇게 호출을 하면, 스토어는 리듀서 함수를 실행시켜서</li><li>해당 액션을 처리하는 로직이 있다면 액션을 참고하여 새로운 상태를 만들어줍니다.</li></ul></li></ul><hr><h3 id="2-1-6-구독-subscribe"><a href="#2-1-6-구독-subscribe" class="headerlink" title="2.1.6 구독 (subscribe)"></a>2.1.6 구독 (subscribe)</h3><ul><li>구독 또한 스토어의 내장함수 중 하나</li><li>subscribe 함수는, <strong>함수 형태의 값을 파라미터로 받아옵니다</strong>.</li><li>subscribe 함수에 특정 함수를 전달해주면, 액션이 디스패치 되었을 때 마다 전달해준 함수가 호출됩니다.</li></ul><hr><h1 id="3-리덕스-without-리액트"><a href="#3-리덕스-without-리액트" class="headerlink" title="3. 리덕스 without 리액트"></a>3. 리덕스 without 리액트</h1><ul><li>리덕스는 리액트에 종속되지 않습니다. 리액트에서 사용하려고 만든거긴 하지만,</li><li>실제로 다른 UI 라이브러리나 프레임워크와 함께 사용 될 수도 있습니다 (예: angular-redux, ember-redux…)</li><li>물론, 바닐라 자바스크립트와도 함께 사용할 수도 있습니다.</li></ul><p>다음 링크를 클릭해주세요:</p><ul><li><a href="https://codesandbox.io/s/pj9jonlxxm">Velopert 강의 SandBox 초기본</a></li><li><a href="https://codesandbox.io/s/vanilla-js-redux-boilerplate-forked-vnb19f?file=/src/index.js:340-457">실습한 것</a></li></ul><hr><h2 id="3-1-DOM-레퍼런스-가져오기"><a href="#3-1-DOM-레퍼런스-가져오기" class="headerlink" title="3.1 DOM 레퍼런스 가져오기"></a>3.1 DOM 레퍼런스 가져오기</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lightDiv = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;light&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> switchButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;switch-btn&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterHeadings = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;h1&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> plusButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;plus-btn&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> minusButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;minus-btn&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>따로 UI 라이브러리를 사용하지 않기 때문에 DOM 을 직접 건들임</li><li>DOM API 들을 사용하여 HTML 상에 나타나고 있는 각 요소들에 대한 레퍼런스 만듬</li></ul><hr><h2 id="3-2-액션-타입-정의"><a href="#3-2-액션-타입-정의" class="headerlink" title="3.2 액션 타입 정의"></a>3.2 액션 타입 정의</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// 생략</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// **** 액션 타입 정의</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TOGGLE_SWITCH</span> = <span class="string">&#x27;TOGGLE_SWITCH&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">INCREMENT</span> = <span class="string">&#x27;INCREMENT&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DECREMENT</span> = <span class="string">&#x27;DECREMENT&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>프로젝트에서 상태에 변화를 일으키는것을 하나의 액션으로 보고, 그 액션에 대한 이름을 정해주는 과정</li><li>이름은 문자열 형태로, 주로 대문자로 작성하며 액션 이름은 고유해야 하고, 중복되면 안됨</li></ul><hr><h2 id="3-3-액션-생성-함수-정의"><a href="#3-3-액션-생성-함수-정의" class="headerlink" title="3.3 액션 생성 함수 정의"></a>3.3 액션 생성 함수 정의</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// 생략</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// **** 액션 생성함수 정의</span></span><br><span class="line"><span class="comment">// 액션 생성 함수 : 액션 객체를 만드는 함수</span></span><br><span class="line"><span class="comment">// 액션 객체는 type 값을 필수</span></span><br><span class="line"><span class="comment">// 나머지 액션에서 참고하고 싶은 값들은 마음대로</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toggleSwitch</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">type</span>: <span class="variable constant_">TOGGLE_SWITCH</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params">diff</span>) =&gt; (&#123; <span class="attr">type</span>: <span class="variable constant_">INCREMENT</span>, diff &#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">decrement</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">type</span>: <span class="variable constant_">DECREMENT</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>액션 객체를 만드는 함수를, 액션 생성 함수라고 부름</li><li>액션 객체는 type 값을 필수로 들고있어야 하며, 나머지 액션에서 참고하고 싶은 값들은 개발자 마음대로</li></ul><hr><h2 id="3-4-초기값-설정"><a href="#3-4-초기값-설정" class="headerlink" title="3.4 초기값 설정"></a>3.4 초기값 설정</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// 생략</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// **** 초깃값 설정</span></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">light</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="3-5-리듀서-함수-정의"><a href="#3-5-리듀서-함수-정의" class="headerlink" title="3.5 리듀서 함수 정의"></a>3.5 리듀서 함수 정의</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// 생략</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// **** 리듀서 함수 정의</span></span><br><span class="line"><span class="comment">// 리듀서 : 변화를 일으키는 함수</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state = initialState, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">TOGGLE_SWITCH</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state, <span class="comment">// 기존의 값은 그대로 두면서 새로운 값을 덮어쓰는 방식(스프레드 연산자)</span></span><br><span class="line">        <span class="attr">light</span>: !state.<span class="property">light</span>, <span class="comment">// light 값 반전시키기</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">INCREMENT</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">counter</span>: state.<span class="property">counter</span> + action.<span class="property">diff</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">DECREMENT</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">counter</span>: state.<span class="property">counter</span> - <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="comment">// 지원하지 않는 액션의 경우 상태 유지</span></span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>리듀서는 변화를 일으키는 함수</li><li>파라미터로는 state 와 action 을 받아옴<ul><li>리듀서 함수가 가장 처음 호출 될 때는 state 가 undefined</li><li>state가 undefined 로 주어졌을땐 initialState 를 사용하도록 설정하기위해 파라미터쪽에서 기본값이 설정</li></ul></li></ul><hr><h2 id="3-6-스토어-만들기"><a href="#3-6-스토어-만들기" class="headerlink" title="3.6 스토어 만들기"></a>3.6 스토어 만들기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// 생략</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// **** 스토어 만들기</span></span><br><span class="line"><span class="comment">// createStore 함수를 사용, 파라미터는 리듀서 함수를 전달</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer);</span><br></pre></td></tr></table></figure><ul><li>스토어를 만들땐 createStore 함수를 사용</li><li>파라미터는 리듀서 함수를 전달</li></ul><hr><h2 id="3-7-render-구현"><a href="#3-7-render-구현" class="headerlink" title="3.7 render() 구현"></a>3.7 render() 구현</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// 생략</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// **** render 함수 만들기</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">render</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> state = store.<span class="title function_">getState</span>(); <span class="comment">// 현재 상태를 가져옵니다.</span></span><br><span class="line">  <span class="keyword">const</span> &#123; light, counter &#125; = state; <span class="comment">// 편의상 비구조화 할당</span></span><br><span class="line">  <span class="keyword">if</span> (light) &#123;</span><br><span class="line">    lightDiv.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;green&#x27;</span>;</span><br><span class="line">    switchButton.<span class="property">innerText</span> = <span class="string">&#x27;끄기&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    lightDiv.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;gray&#x27;</span>;</span><br><span class="line">    switchButton.<span class="property">innerText</span> = <span class="string">&#x27;켜기&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  counterHeadings.<span class="property">innerText</span> = counter;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>();</span><br></pre></td></tr></table></figure><ul><li>스토어의 현재 상태를 가져올 땐 스토어의 내장함수 <code>getState</code>를 사용</li></ul><hr><h2 id="3-8-스토어-구독-subscribe-하기"><a href="#3-8-스토어-구독-subscribe-하기" class="headerlink" title="3.8 스토어 구독(subscribe) 하기"></a>3.8 스토어 구독(subscribe) 하기</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// **** 예시임</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">listener</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;업데이트 됐어요!&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> unsubscribe = store.<span class="title function_">subscribe</span>(listener);</span><br><span class="line"><span class="comment">// 나중에 unsubscribe();</span></span><br></pre></td></tr></table></figure><ul><li>스토어의 상태가 바뀔 때 마다, 우리는 render 함수를 호출해줘야 함</li><li>그러려먼, 스토어를 구독해주어야 합니다.</li><li>구독을 할 때에는 스토어의 내장함수 <code>subscribe</code>를 사용</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// 생략</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// **** 구독하기</span></span><br><span class="line">store.<span class="title function_">subscribe</span>(render);</span><br></pre></td></tr></table></figure><ul><li>subscribe 함수의 파라미터로는, 함수형태의 값을 전달</li><li>전달된 함수는, 액션이 디스패치 될 때 마다 호출이 됨</li><li>subscribe 를 호출하면 반환값으로 구독을 해제하는 unsubscribe()를 받는데 나중에 필요해질 때 호출하면 됨</li><li>cf. 리액트 없이 하기 때문에 이렇게 subscribe 함수에 대한 사용법을 익혀보고 있지만, 나중엔 리액트에서 리덕스를 쉽게 사용하기 위해 react-redux 라는걸 사용하게 되는데 해당 라이브러리에서 대신 해주므로 리액트 프로젝트에서 subscribe 를 직접 해야 되는 일은 특별한 상황을 제외하고는 거의 없음</li></ul><hr><h2 id="3-9-이벤트-달아주기-액션-발생시키기"><a href="#3-9-이벤트-달아주기-액션-발생시키기" class="headerlink" title="3.9 이벤트 달아주기, 액션 발생시키기"></a>3.9 이벤트 달아주기, 액션 발생시키기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// 생략</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// **** 이벤트 달아주기, 액션 발생 시키기</span></span><br><span class="line"><span class="comment">// 액션을 발생시키는것을 디스패치(dispatch) 라고 함</span></span><br><span class="line"><span class="comment">// 디스패치를 할 땐, 스토어의 내장함수 dispatch 를 사용</span></span><br><span class="line">switchButton.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  store.<span class="title function_">dispatch</span>(<span class="title function_">toggleSwitch</span>());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">plusButton.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  store.<span class="title function_">dispatch</span>(<span class="title function_">increment</span>(<span class="number">5</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">minusButton.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  store.<span class="title function_">dispatch</span>(<span class="title function_">decrement</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>액션을 발생시키는것을 <code>디스패치 (dispatch)</code>라고 부름</li><li>디스패치를 할 땐, 스토어의 내장함수 dispatch 를 사용</li><li>파라미터는 액션 객체를 전달</li></ul><p><a href="https://codesandbox.io/s/vvzqnvw17y">https://codesandbox.io/s/vvzqnvw17y</a></p><p>한번 버튼들을 눌러보세요. 값이 잘 바뀌나요? 모두 다 정상 작동한다면, 개념 부분의 키워드를 다시 한번 쭉 훑어보셈</p><hr><h1 id="4-리덕스-with-리액트"><a href="#4-리덕스-with-리액트" class="headerlink" title="4. 리덕스 with 리액트"></a>4. 리덕스 with 리액트</h1><h2 id="4-1-리덕스의-3가지-규칙"><a href="#4-1-리덕스의-3가지-규칙" class="headerlink" title="4.1 리덕스의 3가지 규칙"></a>4.1 리덕스의 3가지 규칙</h2><ol><li><code>하나의 앱에선 스토어 1개만 만들어서 사용</code><ol><li>여러개의 스토어를 사용하는것은 사실 가능하기는 하나, 권장하지 않음</li></ol></li><li><code>상태는 읽기전용</code><ul><li>리액트에서 state 를 업데이트 해야 할 때, setState 를 사용하고,</li><li>배열을 업데이트할 떄는 배열 자체에 push 를 직접 하지 않고,<ul><li>concat 같은 함수를 사용해 기존의 배열은 수정하지 않고</li><li>새로운 배열을 만들어서 교체하는 방식으로 업데이트</li></ul></li><li>엄청 깊은 구조로 되어있는 객체를 업데이트를 할 때도 마찬가지로,<ol><li>기존의 객체는 건들이지 않고 <code>Object.assign</code> 을 사용하거나 spread 연산자 (<code>...</code>) 를 사용</li></ol></li><li>리덕스에서도 마찬가지로 기존의 상태는 건들이지 않고 새로운 상태를 생성하여 업데이트</li><li><strong>리덕스에서 불변성을 유지해야 하는 이유</strong>는<ul><li>내부적으로 데이터가 변경 되는 것을 감지하기 위하여 <a href="https://redux.js.org/docs/faq/ImmutableData.html#how-redux-uses-shallow-checking">shallow equality</a> 검사를 하기 때문</li><li>이로 인해 객체의 변화를 감지할 때 객체의 깊숙한 안쪽까지 비교를 하는 것이 아니라,</li><li>겉핥기 식으로 비교를 하여 좋은 성능을 유지할 수 있음</li><li>여기서는 Immer.js 를 사용하여 불변성을 유지하며 상태를 관리하는 방법을 배움</li></ul></li></ul></li><li><code>변화를 일으키는 함수(리듀서)는 순수한 함수여야 합니다.</code><ul><li>리듀서 함수는 이전 상태와, 액션 객체를 파라미터로 받음</li><li>이전의 상태는 절대로 건들이지 않고, 변화를 일으킨 새로운 상태 객체를 만들어서 반환함</li><li>똑같은 파라미터로 호출된 리듀서 함수는 <strong>언제나 똑같은 결과값을 반환</strong>해야만 함</li></ul></li></ol><p>동일한 input이라면 언제나 동일한 output이 있어야 합니다.<br>그런데 new Date(), 랜덤숫자, 네트워크 요청같은 실행마다 다른 결과값이 나오는 작업들은 리듀서 함수 바깥에서 처리해야 합니다.<br>이를 위해 리덕스 미들웨어를 사용합니다.</p><hr><h2 id="4-2-리액트에서-리덕스를-쓰려면"><a href="#4-2-리액트에서-리덕스를-쓰려면" class="headerlink" title="4.2 리액트에서 리덕스를 쓰려면"></a>4.2 리액트에서 리덕스를 쓰려면</h2><p>다음 라이브러리들이 설치되어야 합니다.</p><ul><li><strong>redux</strong>: 리덕스 모듈</li><li><strong>react-redux</strong>: 리액트 컴포넌트에서 리덕스를 사용하기위한 유용한 도구들이 들어가있습니다.</li><li><strong>redux-actions</strong>: 이 라이브러리를 꼭 설치 할 필요는 없습니다. 단, 알아두면 굉장히 유용합니다.</li></ul><p>실습</p><ul><li>cf. <a href="https://velog.io/@velopert/Redux-3-%EB%A6%AC%EB%8D%95%EC%8A%A4%EB%A5%BC-%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%99%80-%ED%95%A8%EA%BB%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-nvjltahf5e">리덕스를 리액트와 함께 사용하기</a></li><li><a href="https://codesandbox.io/s/nr66kv15xm">Velopert sandbox 초기본</a></li><li><a href="https://codesandbox.io/s/colorful-counter-forked-vr34p0?file=/src/components/WaitingList.js">실습한 것</a></li></ul><hr><h2 id="4-3-Immer-js를-사용한-불변성-관리"><a href="#4-3-Immer-js를-사용한-불변성-관리" class="headerlink" title="4.3 Immer.js를 사용한 불변성 관리"></a>4.3 Immer.js를 사용한 불변성 관리</h2><ul><li>cf. <a href="https://velog.io/@velopert/20180908-1909-%EC%9E%91%EC%84%B1%EB%90%A8-etjltaigd1">Immutable.js 혹은 Immer.js 를 사용한 더 쉬운 불변성 관리</a></li></ul><hr><h1 id="5-공식문서-예제-따라해보기"><a href="#5-공식문서-예제-따라해보기" class="headerlink" title="5. 공식문서 예제 따라해보기"></a>5. 공식문서 예제 따라해보기</h1><ul><li><a href="https://react-redux.js.org/tutorials/quick-start">https://react-redux.js.org/tutorials/quick-start</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @reduxjs/toolkit react-redux</span><br></pre></td></tr></table></figure><hr><h2 id="5-1-Redux-Store-만들기"><a href="#5-1-Redux-Store-만들기" class="headerlink" title="5.1 Redux Store 만들기"></a>5.1 Redux Store 만들기</h2><p>store &#x3D; state들을 보관하는 파일</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="5-2-Redux-State-Slice-생성"><a href="#5-2-Redux-State-Slice-생성" class="headerlink" title="5.2 Redux State Slice 생성"></a>5.2 Redux State Slice 생성</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>; <span class="comment">// 추가</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./app/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start the mocking conditionally.</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; worker &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./mocks/browser&#x27;</span>);</span><br><span class="line">  worker.<span class="title function_">start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;/* 추가 */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>Provider라는 컴포넌트와 아까 작성한 파일을 import</li><li><code>&lt;Provider store=&#123;import해온거&#125;&gt;</code> 이걸로 <code>&lt;App/&gt;</code> 을 감싸면 됩니다.</li><li>그럼 이제 <code>&lt;App&gt;</code>과 그 모든 자식 컴포넌트들은 store.js에 있던 state를 맘대로 꺼내쓸 수 있음</li></ul><hr><h2 id="5-3-Store에-Slice-Reducer-추가"><a href="#5-3-Store에-Slice-Reducer-추가" class="headerlink" title="5.3 Store에 Slice Reducer 추가"></a>5.3 Store에 Slice Reducer 추가</h2><p>Redux store에 state 보관하는 법</p><ol><li><code>createSlice()</code>로 state 만들고</li><li><code>configureStore()</code>안에 등록</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// features/counter/counterSlice.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. createSlice()로 state 만들기</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> counterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;counter&#x27;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="comment">// Redux Toolkit은 immer를 사용하여 &quot;불변성&quot;을 보장합니다.</span></span><br><span class="line">    <span class="comment">// 불변성을 보장하면 더 쉽게 예측 가능한 상태를 유지할 수 있습니다.</span></span><br><span class="line">    <span class="attr">increment</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> -= <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">incrementByAmount</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> += action.<span class="property">payload</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Action creators는 reducer 함수 별로 생성됩니다.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; increment, decrement, incrementByAmount &#125; = counterSlice.<span class="property">actions</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterSlice.<span class="property">reducer</span>;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> counterReducer <span class="keyword">from</span> <span class="string">&#x27;../features/counter/counterSlice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. configureStore() 안에 등록</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">counter</span>: counterReducer,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="5-4-컴포넌트에서-State-Actions-사용"><a href="#5-4-컴포넌트에서-State-Actions-사용" class="headerlink" title="5.4 컴포넌트에서 State, Actions 사용"></a>5.4 컴포넌트에서 State, Actions 사용</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; decrement, increment, incrementByAmount &#125; <span class="keyword">from</span> <span class="string">&#x27;./counterSlice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">counter</span>.<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(increment())&#125;&gt;Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(decrement())&#125;&gt;Decrement<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(incrementByAmount(5))&#125;&gt;+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-5-비교용-Counter2"><a href="#5-5-비교용-Counter2" class="headerlink" title="5.5 비교용 Counter2"></a>5.5 비교용 Counter2</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; decrement, increment, incrementByAmount &#125; <span class="keyword">from</span> <span class="string">&#x27;../features/counter/counterSlice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Counter2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">counter</span>.<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(increment())&#125;&gt;Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(decrement())&#125;&gt;Decrement<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(incrementByAmount(5))&#125;&gt;+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TestMocking</span> <span class="keyword">from</span> <span class="string">&#x27;./components/TestMocking&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Counter</span> <span class="keyword">from</span> <span class="string">&#x27;./features/counter/Counter&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Counter2</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Counter2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;App&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TestMocking</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Counter</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Counter2</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li>cf. <a href="https://velog.io/@velopert/redux-or-mobx">Velog - 상태 관리 라이브러리의 미학: Redux 또는 MobX 를 통한 상태 관리</a></li><li>cf. <a href="https://velog.io/@wooder2050/%EB%A6%AC%EB%8D%95%EC%8A%A4Redux%EB%8A%94-%EC%99%9C-%EC%93%B0%EB%8A%94-%EA%B1%B4%EB%8D%B0">Velog 리덕스(Redux)는 왜 쓰는 건데⁉</a></li><li>cf. <a href="https://velog.io/@huurray/React%EC%9D%98-%ED%83%84%EC%83%9D%EA%B3%BC-Flux-%ED%8C%A8%ED%84%B4%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC">Velog React의 탄생과 Flux 패턴</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-19-State Management 기본 - Context API</title>
      <link href="/2022/12/29/Front-React-Basic-19-Context/"/>
      <url>/2022/12/29/Front-React-Basic-19-Context/</url>
      
        <content type="html"><![CDATA[<h1 id="1-State-Management-상태관리"><a href="#1-State-Management-상태관리" class="headerlink" title="1. State Management(상태관리)"></a>1. State Management(상태관리)</h1><p>14에서 쓴 Context 복습</p><h2 id="1-1-Prop-Drilling-Props로만-데이터를-전달하면-발생하는-문제"><a href="#1-1-Prop-Drilling-Props로만-데이터를-전달하면-발생하는-문제" class="headerlink" title="1.1 Prop Drilling (Props로만 데이터를 전달하면 발생하는 문제)"></a>1.1 Prop Drilling (Props로만 데이터를 전달하면 발생하는 문제)</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/React_14_2.png" alt="React_14_2"></p><blockquote><p><code>Prop Drilling</code> &#x3D; Props로만 데이터를 전달하면 발생하는 문제</p></blockquote><p>일반적으로 컴포넌트에게 데이터를 전달해주어야 할 때 Props를 통해 전달합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">GrandParent</span> <span class="attr">value</span>=<span class="string">&#x27;Hello World!&#x27;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">&#123; value &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">&#123; value &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Message</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Message</span>(<span class="params">&#123; value &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Received: &#123;value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그런데 <strong>자식이 많은 컴포넌트에 데이터를 전달</strong>해야 하는 경우,<br><strong>여러 컴포넌트를 거쳐 연달아서 Props를 설정해</strong>주어야 하기 때문에 불편하고 실수할 수 있는 가능성이 존재합니다.<br>이렇게 <strong>많은 자식을 가진 컴포넌트에 state값을 전달하려면 Context를 사용</strong>하면 됩니다.</p><p><strong>Context API</strong> (리액트 기본 문법)</p><ul><li>props 전송없이 state 공유 가능</li><li>2가지 문제 때문에 많이 쓰이지 않음<ul><li>state 변경시 쓸데없는 컴포넌트까지 전부 재렌더링되어 성능 이슈</li><li>컴포넌트 재활용이 어려움</li></ul></li><li>Context API보다는 redux같은 외부 라이브러리를 많이 사용</li><li><a href="https://reactjs.org/docs/context.html">Official React Context Docs</a>✔️</li></ul><hr><h1 id="2-Context-API"><a href="#2-Context-API" class="headerlink" title="2. Context API"></a>2. Context API</h1><ul><li><p>리액트 기본 문법</p></li><li><p><code>context  = state 보관함</code></p></li><li><p>props 없이 state 공유할 때 사용하지만, <strong>성능과 재활용 관점에서 문제가 있어서 많이 사용 안함</strong></p><ul><li>state 변경시 쓸데없는 컴포넌트까지 전부 재렌더링되어 성능 이슈</li><li>useContext()를 쓰고 있는 컴포넌트는 나중에 <strong>다른 파일에서 재사용할 때 Context를 import 하는게 귀찮음</strong></li></ul></li><li><p>위 문제들로 인해 라이브러리를 사용함</p></li><li><p>React v16.3부터 사용하기 쉽게 많이 개선됨</p><ul><li>과거에는 리액트의 Context가 굉장히 불편해서 전역 상태 관리 라이브러리를 사용했었음</li><li>이제는 Context를 사용하기 편해져서 단순히 전역적인 상태를 관리하기 위함이라면 더 이상 사용해야 할 이유 X</li><li>그렇지만 상태 관리 라이브러리는 상태 관리를 더욱 편하고, 효율적으로 할 수 있게 해주는 기능들을 제공</li></ul></li><li><p>Redux, 리액트 라우터, styled-components 등의 라이브러리들은 Context API를 기반으로 구현되어 있음</p></li><li><p>중첩해서 사용한 컴포넌트가 많을 때 편리한 문법</p><ul><li>e.g. 로그인한 유저 정보, 테마(다크 테마), 선호하는 언어 등</li></ul></li><li><p>Context에서 다루는 값은 꼭 전역적일 필요가 없습니다.</p><ul><li>Context는 재사용성이 높은 컴포넌트를 만들때도 매우 유용함</li></ul></li><li><p><strong>중첩된 컴포넌트가 적으면 그냥 props쓰는게 편함</strong></p></li><li><p>c.f. <a href="https://velog.io/@velopert/react-context-tutorial">Velog - 다른 사람들이 안 알려주는 리액트에서 Context API 잘 쓰는 방법</a></p></li><li><p>cf. <a href="https://velog.io/@velopert/react-context-tutorial">Velopert - Velog 리액트에서 Context API 잘 쓰는 법</a></p></li></ul><hr><h2 id="2-1-예제-1-Context-기본-사용법"><a href="#2-1-예제-1-Context-기본-사용법" class="headerlink" title="2.1 예제 1 : Context 기본 사용법"></a>2.1 예제 1 : Context 기본 사용법</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Context 만들기</span></span><br><span class="line"><span class="comment">// - createContext()로 Context 만들 수 있음</span></span><br><span class="line"><span class="comment">// - 기본 값을 설정하고 싶다면, createContext 함수에 인자로 기본 값을 넣어주면 됨</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title function_">createContext</span>(<span class="string">&#x27;기본값&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 2. Context 객체 안에는 Provider라는 컴포넌트가 들어있음</span></span><br><span class="line">  <span class="comment">// Provider 컴포넌트에 공유하고자 하는 값을 value 라는 Props로 설정하면,</span></span><br><span class="line">  <span class="comment">// 자식 컴포넌트들에서 해당 값에 바로 접근 가능</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">&#x27;Hello World&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Parent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Parent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Message</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Message</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 3. Context 안에 있던 state 사용하려면, useContext() 사용</span></span><br><span class="line">  <span class="comment">// - useContext() : Context 해체해주는 함수, 공유했던 모든 state가 담겨있음</span></span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">useContext</span>(<span class="title class_">MyContext</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>데이터 도착함!😁 : &#123;value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-예제-2-Dark-Theme"><a href="#2-2-예제-2-Dark-Theme" class="headerlink" title="2.2 예제 2 : Dark Theme"></a>2.2 예제 2 : Dark Theme</h2><h3 id="2-2-1-Context-생성"><a href="#2-2-1-Context-생성" class="headerlink" title="2.2.1 Context 생성"></a>2.2.1 Context 생성</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Context/ThemeContext.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> themes = &#123;</span><br><span class="line">  <span class="attr">light</span>: &#123;</span><br><span class="line">    <span class="attr">foreground</span>: <span class="string">&#x27;#000000&#x27;</span>,</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&#x27;#eeeeee&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">dark</span>: &#123;</span><br><span class="line">    <span class="attr">foreground</span>: <span class="string">&#x27;#ffffff&#x27;</span>,</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&#x27;#222222&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createContext()로 Context 만들 수 있음</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(themes.<span class="property">dark</span>);</span><br></pre></td></tr></table></figure><p>새 Context를 만들 때는 createContext 함수를 사용합니다. 파라미터에는 해당 Context의 기본 상태를 지정합니다.</p><ul><li>c.f. Context를 만들 때 반드시 contexts 디렉터리에 만들 필요는 없습니다. 경로는 마음대로 정해도 됨</li></ul><hr><h3 id="2-2-2-Provider"><a href="#2-2-2-Provider" class="headerlink" title="2.2.2 Provider"></a>2.2.2 Provider</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Context/Example</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ThemeButton</span> <span class="keyword">from</span> <span class="string">&#x27;./ThemeButton&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ThemeContext</span>, themes &#125; <span class="keyword">from</span> <span class="string">&#x27;./ThemeContext&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Example</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">theme</span>: themes.<span class="property">light</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toggleTheme</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">theme</span>: prev.<span class="property">theme</span> === themes.<span class="property">dark</span> ? themes.<span class="property">light</span> : themes.<span class="property">dark</span>,</span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 📝 Context에 저장된 데이터를 사용하기 위해, Context의 Provider를 사용</span></span><br><span class="line">    <span class="comment">// - 공유를 원하는 state를 value 안에 적어주면 됩니다.</span></span><br><span class="line">    <span class="comment">// - ThemeContext로 감싼 모든 컴포넌트와 그 자식컴포넌트는 state를 props 전송없이 직접 사용가능</span></span><br><span class="line">    <span class="comment">// 📝 데이터를 사용하려는 컴포넌트에서 Context의 Consumer를 사용 → useContext()로 대체 가능</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;this.state.theme&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ThemeButton</span> <span class="attr">changeTheme</span>=<span class="string">&#123;this.toggleTheme&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ThemeContext.Consumer</span>&gt;</span>&#123;(theme) =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> <span class="attr">300</span>, <span class="attr">width:</span> <span class="attr">300</span>, <span class="attr">backgroundColor:</span> <span class="attr">theme.background</span> &#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;<span class="tag">&lt;/<span class="name">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ThemeButton</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-3-useContext"><a href="#2-2-3-useContext" class="headerlink" title="2.2.3 useContext()"></a>2.2.3 useContext()</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// context/ThemeButton.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ThemeContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./ThemeContext&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ThemeButton</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="comment">// Context 안에 있던 state 사용하려면</span></span><br><span class="line">  <span class="comment">// (1) 만들어둔 Context를 import</span></span><br><span class="line">  <span class="comment">// (2) useContext() 안에 넣기</span></span><br><span class="line">  <span class="comment">// -- useContext()는 Context 해체해주는 함수, 공유했던 모든 state가 담겨있음</span></span><br><span class="line">  <span class="keyword">const</span> theme = <span class="title function_">useContext</span>(<span class="title class_">ThemeContext</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">onClick</span>=<span class="string">&#123;props.changeTheme&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">backgroundColor:</span> <span class="attr">theme.background</span>, <span class="attr">color:</span> <span class="attr">theme.foreground</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      버튼</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App 컴포넌트에 추가</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Example</span> <span class="keyword">from</span> <span class="string">&#x27;./components/3-10_Context/Example&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Example</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li>React Context 사용법 : <a href="https://www.daleseo.com/react-context/">https://www.daleseo.com/react-context/</a></li><li><a href="https://ko.reactjs.org/docs/context.html">Context 한국 공식문서</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-18-Routers 라이브러리 - React Router</title>
      <link href="/2022/12/28/Front-React-Basic-18-Routers01/"/>
      <url>/2022/12/28/Front-React-Basic-18-Routers01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Router란"><a href="#1-Router란" class="headerlink" title="1. Router란"></a>1. Router란</h1><ul><li>Route &#x3D; 경로 c.f. 발음 : 루트</li><li>Router &#x3D; 경로찾는 것 c.f. 영국발음 : 루터, 미국발음 : <strong>라우터</strong><ul><li>c.f. 서로 다른 네트워크를 연결해주는 장치를 “라우터”라고 함</li></ul></li><li><strong>라우팅</strong> &#x3D; <strong>사용자가 요청한 URL에 따라 알맞는 페이지를 보여주는 것</strong>을 의미</li><li>React Router 라이브러리 종류<ul><li><a href="https://reactrouter.com/">React Router — Official Website</a>✔️<ul><li>React 애플리케이션에서 라우팅을 구현할 때 가장 유명한 라이브러리</li><li>쉽게 싱글 페이지 애플리케이션 (Single Page Application)을 만들 수 있음</li><li>React Router v6 (22년기준 최신버전)</li><li>참고 : <a href="https://velog.io/@velopert/react-router-v6-tutorial">벨로퍼트 React Router v6 튜토리얼</a></li></ul></li><li><a href="https://reach.tech/router/">Reach Router — Official Website</a></li></ul></li></ul><hr><h1 id="2-React-Router-기본-사용법"><a href="#2-React-Router-기본-사용법" class="headerlink" title="2. React Router 기본 사용법"></a>2. React Router 기본 사용법</h1><h2 id="2-1-설치"><a href="#2-1-설치" class="headerlink" title="2.1 설치"></a>2.1 설치</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yarn create react-app router-tutorial <span class="comment"># 연습용 폴더</span></span><br><span class="line">$ <span class="built_in">cd</span> router-tutorial</span><br><span class="line"></span><br><span class="line">$ yarn add react-router-dom <span class="comment"># React Router 설치</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-2-프로젝트에-라우터-적용"><a href="#2-2-프로젝트에-라우터-적용" class="headerlink" title="2.2 프로젝트에 라우터 적용"></a>2.2 프로젝트에 라우터 적용</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>; <span class="comment">// 추가</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>react-router-dom에 내장되어 있는 <code>BrowserRouter 컴포넌트</code>를 사용하여 감싸기<ul><li>BrowserRouter 컴포넌트<ul><li>웹 애플리케이션에 HTML5의 History API를 사용하여 페이지를 새로 불러오지 않고,</li><li>주소를 변경하고 현재 주소의 경로에 관련된 정보를 리액트 컴포넌트에서 사용할 수 있도록 해줌</li></ul></li></ul></li></ul><hr><h2 id="2-3-예시-페이지-컴포넌트-생성"><a href="#2-3-예시-페이지-컴포넌트-생성" class="headerlink" title="2.3 예시 : 페이지 컴포넌트 생성"></a>2.3 예시 : 페이지 컴포넌트 생성</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/Home.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>홈<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>가장 먼저 보여지는 페이지입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/About.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">About</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>소개<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>리액트 라우터를 사용해 보는 프로젝트입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4-특정-경로에-원하는-컴포넌트-보여주기-Route"><a href="#2-4-특정-경로에-원하는-컴포넌트-보여주기-Route" class="headerlink" title="2.4 특정 경로에 원하는 컴포넌트 보여주기 : Route"></a>2.4 특정 경로에 원하는 컴포넌트 보여주기 : Route</h2><ul><li>주소 경로에 따라 원하는 컴포넌트를 보여주기 위해 <code>Route 컴포넌트</code>를 통해 라우트 설정</li><li><code>Route 컴포넌트</code>는 <code>Routes 컴포넌트</code> 내부에서 사용되어야 함</li><li>사용법 : <code>&lt;Route path=&quot;주소규칙&quot; element=&#123;보여줄 컴포넌트&#125; /&gt;</code></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/About&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>yarn start</code> 를 입력하여 개발 서버를 시작</p><hr><h2 id="2-5-다른-페이지로-이동하는-링크-보여주기-Link"><a href="#2-5-다른-페이지로-이동하는-링크-보여주기-Link" class="headerlink" title="2.5 다른 페이지로 이동하는 링크 보여주기 : Link"></a>2.5 다른 페이지로 이동하는 링크 보여주기 : Link</h2><p>웹 페이지에서는 원래 링크를 보여줄 때, a 태그를 사용하는데,</p><ul><li><strong>리액트 라우터를 사용하는 프로젝트에서 a태그를 바로 사용하면 안됨</strong></li><li>왜냐하면, <strong>a 태그를 클릭해 페이지를 이동하면, 브라우저가 페이지를 새로 불러오게 되기 때문</strong> → 리렌더링</li></ul><p><code>Link 컴포넌트</code></p><ul><li><code>Link 컴포넌트</code> 역시 a 태그를 사용하긴 하지만,</li><li><strong>페이지를 새로 불러오는 것을 막고</strong>, History API를 통해 <strong>브라우저 주소의 경로만 바꾸는 기능이 내장</strong>되어 있음</li><li>사용법 : <code>&lt;Link to=&quot;경로&quot;&gt;링크 이름&lt;/Link&gt;</code></li></ul><h3 id="2-5-1-예시"><a href="#2-5-1-예시" class="headerlink" title="2.5.1 예시"></a>2.5.1 예시</h3><p><code>Home</code> 페이지에서 <code>About</code> 페이지로 이동할 수 있도록 <code>Link  컴포넌트</code>를 <code>Home 컴포넌트</code>에서 사용</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/Home.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>홈<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>가장 먼저 보여지는 페이지입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span>&gt;</span>소개<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="3-URL-파라미터와-쿼리스트링"><a href="#3-URL-파라미터와-쿼리스트링" class="headerlink" title="3. URL 파라미터와 쿼리스트링"></a>3. URL 파라미터와 쿼리스트링</h1><p>페이지 주소를 정의할 때 가끔은 유동적인 값을 사용해야 할 때도 있습니다. 다음과 같이 말이죠.</p><ul><li><code>URL 파라미터 </code><ul><li>주소의 경로에 유동적인 값을 넣는 형태</li><li>ID 또는 이름을 사용하여 특정 데이터를 조회할 때 사용</li><li>e.g. <strong>&#x2F;profile&#x2F;velopert</strong></li></ul></li><li><code>쿼리스트링(Querystring)</code><ul><li>주소의 뒷부분에 <code>?</code> 문자열 이후에 key&#x3D;value 로 값을 정의하며, <code>&amp;</code>로 구분을 하는 형태</li><li>키워드 검색, 페이지네이션, 정렬 방식 등 데이터 조회에 필요한 옵션을 전달할 때 사용</li><li>e.g. <strong>&#x2F;articles?page&#x3D;1&amp;keyword&#x3D;react</strong></li></ul></li></ul><hr><h2 id="3-1-예시-URL-파라미터"><a href="#3-1-예시-URL-파라미터" class="headerlink" title="3.1 예시 : URL 파라미터"></a>3.1 예시 : URL 파라미터</h2><p><code>Profile</code> 컴포넌트를 pages 경로에 다음과 같이 작성</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/Profile.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">velopert</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;김민준&#x27;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&#x27;리액트를 좋아하는 개발자&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">gildong</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;홍길동&#x27;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&#x27;고전 소설 홍길동전의 주인공&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Profile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// URL 파라미터의 이름은 라우트 설정을 할 때 Route 컴포넌트의 path props를 통하여 설정</span></span><br><span class="line">  <span class="keyword">const</span> params = <span class="title function_">useParams</span>(); <span class="comment">// useParams Hook을 사용하여 객체 형태로 조회 가능</span></span><br><span class="line">  <span class="keyword">const</span> profile = data[params.<span class="property">username</span>]; <span class="comment">// username URL 파라미터를 통하여 프로필을 조회</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>사용자 프로필<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;profile ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;profile.name&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;profile.description&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>존재하지 않는 프로필입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>App</code> 컴포넌트 파일을 열어서 새로운 라우트를 다음과 같이 설정하기</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/App.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/About&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Profile</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Profile&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      &#123;/* URL 파라미터는 /profiles/:username 과 같이 경로에 : 를 사용하여 설정 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* 만약 URL 파라미터가 여러개인 경우엔 /profiles/:username/:field 와 같은 형태로 설정 가능 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/profiles/:username&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Profile</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Profile</code> 페이지로 이동을 할 수 있도록 <code>Home</code> 페이지에 <code>Link</code> 를 더 만들기</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/Home.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>홈<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>가장 먼저 보여지는 페이지입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span>&gt;</span>소개<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/profiles/velopert&#x27;</span>&gt;</span>velopert의 프로필<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/profiles/gildong&#x27;</span>&gt;</span>gildong의 프로필<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/profiles/void&#x27;</span>&gt;</span>존재하지 않는 프로필<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 새로 만든 링크를 눌러서 <code>Profile</code> 페이지로 이동해보세요.</p><hr><h2 id="3-2-예시-쿼리스트링"><a href="#3-2-예시-쿼리스트링" class="headerlink" title="3.2 예시 : 쿼리스트링"></a>3.2 예시 : 쿼리스트링</h2><p>쿼리스트링을 사용할 때는 URL 파라미터와 달리 <code>Route</code> 컴포넌트를 사용할 때 별도로 설정해야되는 것은 없습니다.</p><blockquote><p>💡 <code>useLocation()</code></p><p><strong>location 객체를 반환</strong>하며, 이 객체는 <strong>현재 사용자가 보고있는 페이지의 정보를 지닌 Hook</strong></p><p>location객체 안에는 다음과 같은 값이 들어있음</p><ul><li><strong>pathname</strong> : 현재 주소의 경로 (쿼리스트링 제외)</li><li><strong>search</strong> : 맨 앞의 ? 문자 포함한 쿼리스트링 값</li><li><strong>hash</strong> : 주소의 # 문자열 뒤의 값<ul><li>주로 History API가 지원안되는 구형 브라우저에서 클라이언트 라우팅을 사용할 때 쓰는 해시 라우터에서 사용</li></ul></li><li><strong>state</strong> : 페이지로 이동할때 임의로 넣을 수 있는 상태 값</li><li><strong>key</strong> : <code>location</code> 객체의 고유 값<ul><li>초기에는 <code>default</code> 이며 페이지가 변경될때마다 고유의 값이 생성됨</li></ul></li></ul></blockquote><p><code>About</code> 페이지 컴포넌트를 다음과 같이 수정해보세요.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/About.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">About</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// useLocation() : location 객체를 반환</span></span><br><span class="line">  <span class="comment">// - location 객체는 현재 사용자가 보고있는 페이지의 정보를 지닌 Hook</span></span><br><span class="line">  <span class="keyword">const</span> location = <span class="title function_">useLocation</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>소개<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>리액트 라우터를 사용해 보는 프로젝트입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>쿼리스트링: &#123;location.search&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>쿼리스트링은 <code>location.search</code> 값을 통해 조회를 할 수 있습니다.<br>주소창에 <a href="http://localhost:3000/about?detail=true&mode=1%EB%A5%BC">http://localhost:3000/about?detail=true&amp;mode=1를</a> 입력해서 어떤 값이 나타나는지 확인해보세요.</p><p>쿼리스트링 값이 <code>?detail=true&amp;mode=1</code> 으로 표시됩니다.<br>이 문자열에서 <code>?</code> 로 지우고, <code>&amp;</code> 문자열로 분리한뒤 key 와 value 를 파싱하는 작업을 해야 합니다.<br>이 작업은 보통 npm 에서 <code>qs</code> 또는 <code>querystring</code> 패키지를 설치해서 처리할 수 있습니다.</p><p>쿼리스트링을 따로 파싱까지 해야된다면 번거로울수도 있는데,<br>리액트 라우터에서는 v6부터 <code>useSearchParams</code> 라는 Hook을 제공합니다.</p><blockquote><p>💡 <code>useSearchParams</code></p><p>배열 타입의 값을 반환하며,</p><ul><li>첫번째 원소는 <strong>쿼리 파라미터를 조회하거나 수정하는 메서드들이 담긴 객체</strong>를 반환<ul><li><code>get</code> 메서드를 통해 특정 쿼리파라미터를 조회</li><li><code>set</code> 메서드를 통해 특정 쿼리파라미터를 업데이트<ul><li>만약 조회시에 쿼리파라미터가 존재하지 않는다면 <code>null</code> 로 조회</li></ul></li></ul></li><li>두번째 원소는 <strong>쿼리 파라미터를 객체형태로 업데이트할 수 있는 함수</strong>를 반환</li></ul><p>쿼리파라미터를 사용할 때 주의할 점</p><ul><li>쿼리파라미터를 조회할 때 값은 무조건 문자열 타입임</li><li><code>boolean</code> 값을 넣고 값을 비교하려면, 반드시 <code>&#39;true&#39;</code> 같이 따옴표로 감싸서 비교를 해야 함</li><li>숫자를 다루게 된다면 <code>parseInt</code> 를 사용하여 숫자 타입으로 변환</li></ul></blockquote><p>다음은 이 Hook을 사용하여 쿼리스트링을 쉽게 파싱하여 사용하는 예시입니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/About.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSearchParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">About</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [searchParams, setSearchParams] = <span class="title function_">useSearchParams</span>(); <span class="comment">// 쿼리스트링을 파싱해주는 Hook</span></span><br><span class="line">  <span class="keyword">const</span> detail = searchParams.<span class="title function_">get</span>(<span class="string">&#x27;detail&#x27;</span>); <span class="comment">// get() : 특정 쿼리 파라미터를 조회</span></span><br><span class="line">  <span class="keyword">const</span> mode = searchParams.<span class="title function_">get</span>(<span class="string">&#x27;mode&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onToggleDetail</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// detail 쿼리 파라미터의 값이 true이면</span></span><br><span class="line">    <span class="title function_">setSearchParams</span>(&#123; mode, <span class="attr">detail</span>: detail === <span class="string">&#x27;true&#x27;</span> ? <span class="literal">false</span> : <span class="literal">true</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onIncreaseMode</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// mode 쿼리 파라미터의 값이 null이면</span></span><br><span class="line">    <span class="keyword">const</span> nextMode = mode === <span class="literal">null</span> ? <span class="number">1</span> : <span class="built_in">parseInt</span>(mode) + <span class="number">1</span>;</span><br><span class="line">    <span class="title function_">setSearchParams</span>(&#123; <span class="attr">mode</span>: nextMode, detail &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>소개<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>리액트 라우터를 사용해 보는 프로젝트입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>detail: &#123;detail&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>mode: &#123;mode&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onToggleDetail&#125;</span>&gt;</span>Toggle detail<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onIncreaseMode&#125;</span>&gt;</span>mode + 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/React_15_1.png" alt="React_15_1"></p><hr><h1 id="4-중첩된-라우트"><a href="#4-중첩된-라우트" class="headerlink" title="4. 중첩된 라우트"></a>4. 중첩된 라우트</h1><p>중첩된 라우트를 이해해보기 위하여, 게시글 목록을 보여주는 페이지와 게시글을 읽는 페이지를 만들어보겠습니다</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/Articles.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Articles</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/articles/1&#x27;</span>&gt;</span>게시글 1<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/articles/2&#x27;</span>&gt;</span>게시글 2<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/articles/3&#x27;</span>&gt;</span>게시글 3<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/Article.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Article</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; id &#125; = <span class="title function_">useParams</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>게시글 &#123;id&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>두 컴포넌트를 만들었다면, 해당 페이지들의 라우트를 <code>App</code> 컴포넌트에서 설정</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/About&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Article</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Article&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Articles</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Articles&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Profile</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Profile&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/profiles/:username&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Profile</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/articles&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Articles</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/articles/:id&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Article</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그 다음에는 <code>Home</code> 컴포넌트에서 게시글 목록 페이지로 가는 링크를 추가</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/Home.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>홈<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>가장 먼저 보여지는 페이지입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        생략...</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/articles&#x27;</span>&gt;</span>게시글 목록<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>게시글 목록 페이지를 열어서 목록이 잘 나타나는지 확인하고,<br>게시글의 링크를 눌러 게시글 읽기 페이지도 잘 나타나는지 확인해보세요.</p><hr><p>게시글 목록 페이지에서 게시글을 열었을 때, 게시글의 하단에 목록을 보여줘야한다면 어떨까요?<br>만약 기존 방식으로 구현을 한다면 아마 다음과 같이 <code>ArticleList</code> 컴포넌트를 따로 만들어서,<br>각 페이지 컴포넌트에서 사용을 해야됐을 것입니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>게시글 &#123;id&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ArticleList</span> /&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>중첩된 라우트를 사용한다면 좀 더 나은 방식으로 구현을 할 수 있습니다. 이번에는 중첩된 라우트 형태로 라우트를 설정해보겠습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/About&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Article</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Article&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Articles</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Articles&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Profile</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Profile&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/profiles/:username&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Profile</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/articles&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Articles</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/articles&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Articles</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;:id&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Article</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그 다음에는 <code>Articles</code> 컴포넌트에서 리액트 라우터에서 제공하는 <code>Outlet 컴포넌트</code>를 사용해야 합니다.</p><ul><li><code>Outlet 컴포넌트</code> : <code>Route</code> 의 <code>children</code> 으로 들어가는 JSX 엘리먼트를 보여주는 역할<ul><li>지금의 경우엔 다음 내용이 <code>Outlet</code> 컴포넌트를 통해서 보여짐</li><li><code>&lt;Route path=&quot;:id&quot; element=&#123;&lt;Article /&gt;&#125; /&gt;</code></li></ul></li></ul><p><code>Articles  컴포넌트</code>를 다음과 같이 수정해주세요.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/Articles.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span>, <span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Articles</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* Outlet 컴포넌트가 사용된 자리에 중첩된 라우트가 보여짐 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/articles/1&#x27;</span>&gt;</span>게시글 1<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/articles/2&#x27;</span>&gt;</span>게시글 2<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/articles/3&#x27;</span>&gt;</span>게시글 3<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 <code>/articles/1</code> 경로에 들어가보세요. 게시글 하단에 게시글 목록이 잘 나타나는지 확인하세요.</p><hr><h2 id="4-1-공통-레이아웃-컴포넌트"><a href="#4-1-공통-레이아웃-컴포넌트" class="headerlink" title="4.1 공통 레이아웃 컴포넌트"></a>4.1 공통 레이아웃 컴포넌트</h2><p><code>중첩된 라우트</code>와 <code>Outlet</code> 은 페이지끼리 <strong>공통적으로 보여줘야 하는 레이아웃이 있을때도 유용하게 사용</strong>함</p><ul><li>e.g. <code>Home</code>, <code>About</code>, <code>Profile</code> 페이지에서 상단에 헤더를 보여줘야 하는 상황</li><li>중첩된 라우트와 <code>Outlet</code>을 활용하여 구현하면, 컴포넌트를 한번만 사용해도 된다는 장점이 있음</li></ul><p>우선, 공통 레이아웃을 위한 <code>Layout</code> 컴포넌트를 src 디렉터리에 만드세요.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/Layout.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Layout</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">background:</span> &#x27;<span class="attr">lightgray</span>&#x27;, <span class="attr">padding:</span> <span class="attr">16</span>, <span class="attr">fontSize:</span> <span class="attr">24</span> &#125;&#125;&gt;</span>Header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>각 페이지 컴포넌트가 보여져야 하는 부분에 <code>Outlet</code> 컴포넌트를 사용해주었습니다.<br>컴포넌트를 다 작성하셨으면 <code>App</code> 컴포넌트를 다음과 같이 수정하세요.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Layout</span> <span class="keyword">from</span> <span class="string">&#x27;./Layout&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/About&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Article</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Article&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Articles</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Articles&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Profile</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Profile&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Layout</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/profiles/:username&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Profile</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/articles&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Articles</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;:id&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Article</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 <code>Home</code> 페이지에 들어가서, 헤더가 잘 나타났는지 확인하세요.</p><hr><h2 id="4-2-index-props"><a href="#4-2-index-props" class="headerlink" title="4.2 index props"></a>4.2 index props</h2><p><code>Route 컴포넌트</code>에는 <code>index</code> 라는 props가 있습니다.</p><ul><li>props 는 <code>path=&quot;/&quot;</code>와 동일한 의미를 가집니다.</li></ul><p><code>Home  컴포넌트</code>가 사용된 <code>Route  컴포넌트</code>를 다음과 같이 변경해보세요</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Layout</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        &#123;/* path=&quot;/&quot;를 index로 수정 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">index</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/profiles/:username&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Profile</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/articles&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Articles</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;:id&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Article</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고, <code>/</code> 경로로 들어갔을 때 여전히 <code>Home</code> 페이지가 여전히 잘 나오고 있나요?</p><ul><li><code>index</code> prop은 상위 라우트의 경로와 일치하지만, 그 이후에 경로가 주어지지 않았을때 보여지는 라우트를 설정할때 사용</li><li><code>path=&quot;/&quot;</code>와 동일한 역할을 하며 이를 좀 더 명시적으로 표현하는 방법</li></ul><hr><h1 id="5-리액트-라우터-부가기능"><a href="#5-리액트-라우터-부가기능" class="headerlink" title="5. 리액트 라우터 부가기능"></a>5. 리액트 라우터 부가기능</h1><p>리액트 라우터에는 웹 애플리케이션에서 라우팅에 관련된 작업을 할 때 사용할 수 있는 유용한 API들을 제공</p><hr><h2 id="5-1-useNavigate"><a href="#5-1-useNavigate" class="headerlink" title="5.1 useNavigate"></a>5.1 useNavigate</h2><ul><li><code>useNavigate</code> : <code>Link</code> 컴포넌트를 사용하지 않고 다른 페이지로 이동을 해야 하는 상황에 사용하는 Hook</li></ul><p><code>Layout</code> 컴포넌트를 다음과 같이 수정</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/Layout.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Outlet</span>, useNavigate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Layout</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// navigate 파라미터가 숫자 타입이라면 앞으로 가거나, 뒤로 감</span></span><br><span class="line">  <span class="comment">// navigate(-1) 을 하면 한 번 뒤로가고 navigate(-2) 를 하면 두 번 뒤로 감</span></span><br><span class="line">  <span class="comment">// 반대로 navigate(1) 을 하면 앞으로 한 번 감 (단, 뒤로가기를 1번한 상태여야 함)</span></span><br><span class="line">  <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">goBack</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 이전 페이지로 이동</span></span><br><span class="line">    <span class="title function_">navigate</span>(-<span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 다른 페이지로 이동을 할 때 replace 라는 옵션이 존재</span></span><br><span class="line">  <span class="comment">// replace 옵션을 사용하면, 페이지를 이동할 때 현재 페이지를 페이지 기록에 남기지 않음</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">goArticles</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// articles 경로로 이동</span></span><br><span class="line">    <span class="title function_">navigate</span>(<span class="string">&#x27;/articles&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">background:</span> &#x27;<span class="attr">lightgray</span>&#x27;, <span class="attr">padding:</span> <span class="attr">16</span>, <span class="attr">fontSize:</span> <span class="attr">24</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;goBack&#125;</span>&gt;</span>뒤로가기<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;goArticles&#125;</span>&gt;</span>게시글 목록<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>버튼을 눌렀을때 정상적으로 이전 페이지로 이동하거나, 게시글 목록 페이지로 이동이 되는지 확인하세요.</p><hr><h3 id="5-1-1-replace-옵션"><a href="#5-1-1-replace-옵션" class="headerlink" title="5.1.1 replace 옵션"></a>5.1.1 replace 옵션</h3><p>다른 페이지로 이동을 할 때 <code>replace</code> 라는 옵션이 있습니다.<br><code>replace</code> 옵션을 사용하면 페이지를 이동할 때, 현재 페이지를 페이지 기록에 남기지 않습니다.</p><p>방금 작성했던 <code>goArticles</code> 함수를 다음과 같이 수정해보세요.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">goArticles</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">navigate</span>(<span class="string">&#x27;/articles&#x27;</span>, &#123; <span class="attr">replace</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>그 다음에 <code>/</code> 경로로 들어가서 <code>Home</code> 페이지를 띄운 뒤에, 소개 링크를 눌러 <code>About</code> 페이지로 이동하세요.<br>그리고, 상단의 게시글 목록 페이지를 눌러보세요.<br>그 상태에서 브라우저의 뒤로가기 버튼을 눌러 이전 페이지로 이동을 해보세요.</p><p>만약 <code>&#123; replace: true &#125;</code> 설정이 없었더라면 직전에 봤던 페이지인 <code>About</code> 페이지가 나타나야 하지만,<br><code>replace</code> 옵션이 활성화되어있기 때문에, 그 전의 페이지인 <code>Home</code> 페이지가 나타나게 됩니다.</p><hr><h2 id="5-2-NavLink"><a href="#5-2-NavLink" class="headerlink" title="5.2 NavLink"></a>5.2 NavLink</h2><p><code>NavLink 컴포넌트</code></p><ul><li><strong>링크에서 사용하는 경로가 현재 라우트의 경로와 일치하는 경우 특정 스타일 또는 CSS 클래스를 적용</strong>하는 컴포넌트</li><li><code>style</code> 또는 <code>className</code>을 설정할 때, <code>&#123; isActive: boolean &#125;</code> 을 파라미터로 전달받는 함수 타입의 값을 전달함</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">NavLink</span> style=&#123;<span class="function">(<span class="params">&#123;isActive&#125;</span>) =&gt;</span> isActive ? activeStyle : <span class="literal">undefined</span>&#125; /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span> =&gt;</span> isActive ? &#x27;active&#x27; : undefined&#125; /&gt;</span></span><br></pre></td></tr></table></figure><p><code>Articles</code> 페이지 컴포넌트에서 이 컴포넌트를 사용해봅시다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/Articles.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavLink</span>, <span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Articles</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> activeStyle = &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">    <span class="attr">fontSize</span>: <span class="number">21</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/articles/1&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;(&#123;</span> <span class="attr">isActive</span> &#125;) =&gt;</span> (isActive ? activeStyle : undefined)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">            게시글 1</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/articles/2&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;(&#123;</span> <span class="attr">isActive</span> &#125;) =&gt;</span> (isActive ? activeStyle : undefined)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">            게시글 2</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/articles/3&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;(&#123;</span> <span class="attr">isActive</span> &#125;) =&gt;</span> (isActive ? activeStyle : undefined)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">            게시글 3</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>현재 보고 있는 게시글의 링크의 텍스트가 더 커지고 초록색으로 변합니다.</p><p>실제로 비슷한 작업을 하게 되면 현재 <code>NavLink</code> 를 감싼 또 다른 컴포넌트를 만들어서,<br>다음과 같이 리팩토링하여 사용하시는 것을 권장합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/Articles.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavLink</span>, <span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Articles</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ArticleItem</span> <span class="attr">id</span>=<span class="string">&#123;1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ArticleItem</span> <span class="attr">id</span>=<span class="string">&#123;2&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ArticleItem</span> <span class="attr">id</span>=<span class="string">&#123;3&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ArticleItem</span> = (<span class="params">&#123; id &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> activeStyle = &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">    <span class="attr">fontSize</span>: <span class="number">21</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">articles</span>/$&#123;<span class="attr">id</span>&#125;`&#125; <span class="attr">style</span>=<span class="string">&#123;(&#123;</span> <span class="attr">isActive</span> &#125;) =&gt;</span> (isActive ? activeStyle : undefined)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        게시글 &#123;id&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="5-3-NotFound-페이지"><a href="#5-3-NotFound-페이지" class="headerlink" title="5.3 NotFound 페이지"></a>5.3 NotFound 페이지</h2><p><code>NotFound</code> 페이지</p><ul><li>사전에 정의되지 않는 경로에 사용자가 진입했을 때 보여주는 페이지</li><li>다시말해, <strong>페이지를 찾을 수 없을 때 나타나는 페이지</strong></li></ul><p><code>NotFound 컴포넌트</code>를 생성하세요.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/NotFound.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">NotFound</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">display:</span> &#x27;<span class="attr">flex</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">alignItems:</span> &#x27;<span class="attr">center</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">justifyContent:</span> &#x27;<span class="attr">center</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">fontSize:</span> <span class="attr">64</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">position:</span> &#x27;<span class="attr">absolute</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">height:</span> &#x27;<span class="attr">100</span>%&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      404</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그 다음에 <code>App</code> 컴포넌트를 다음과 같이 수정</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Layout</span> <span class="keyword">from</span> <span class="string">&#x27;./Layout&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/About&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Article</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Article&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Articles</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Articles&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/NotFound&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Profile</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Profile&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Layout</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">index</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/profiles/:username&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Profile</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/articles&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Articles</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;:id&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Article</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* * 는 wildcard 문자로 아무 텍스트나 매칭한다는 뜻 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* path=&quot;*&quot;는 위에서 정의한 경로 외 모든 상황에 렌더링됨 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;*&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">NotFound</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-4-Navigate-컴포넌트"><a href="#5-4-Navigate-컴포넌트" class="headerlink" title="5.4 Navigate 컴포넌트"></a>5.4 Navigate 컴포넌트</h2><ul><li>컴포넌트를 화면에 보여주는 순간 다른 페이지로 이동을 하고 싶을 때 사용하는 컴포넌트</li><li>즉, 페이지를 리다이렉트 하고 싶을 때 사용</li><li>e.g. 사용자의 로그인이 필요한 페이지인데 로그인을 안했다면 로그인 페이지로 이동</li></ul><p>두 페이지 컴포넌트를 pages 디렉터리에 만드세요.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/Login.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Login</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>로그인 페이지<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages/MyPage.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">MyPage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 🍊 isLoggedIn 값이 로그인 상태에 따라 true 또는 false를 가르킨다고 가정</span></span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isLoggedIn이 false라면 Navigate 컴포넌트를 통해 /login 경로로 이동</span></span><br><span class="line">  <span class="comment">// - replace props는 useNavigate 에서 설명한 것과 동일함</span></span><br><span class="line">  <span class="comment">// - 페이지를 이동할 때 현재 페이지를 기록에 남기지 않기 때문에,</span></span><br><span class="line">  <span class="comment">// - 이동 후 뒤로가기를 눌렀을 때 2 페이지 전의 페이지로 이동</span></span><br><span class="line">  <span class="keyword">if</span> (!isLoggedIn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&#x27;/login&#x27;</span> <span class="attr">replace</span>=<span class="string">&#123;true&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>마이 페이지<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>컴포넌트를 다 작성하셨으면 <code>App</code> 컴포넌트를 다음과 같이 수정해주세요.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Layout</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">index</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/profiles/:username&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Profile</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/articles&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Articles</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;:id&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Article</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/login&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Login</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/mypage&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">MyPage</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;*&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">NotFound</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그 다음에는 브라우저에서 <code>/mypage</code> 경로로 이동해보세요. 페이지가 로딩되는 순간 바로 <code>Login</code> 페이지로 이동됩니다.</p><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li><a href="https://reactrouter.com/en/6.6.1">React Router 공식사이트 6.6.1</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-17-UI 라이브러리</title>
      <link href="/2022/12/28/Front-React-Basic-17-UI01/"/>
      <url>/2022/12/28/Front-React-Basic-17-UI01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-UI-라이브러리-종류"><a href="#1-UI-라이브러리-종류" class="headerlink" title="1. UI 라이브러리 종류"></a>1. UI 라이브러리 종류</h1><ul><li><p><a href="https://onsen.io/">Onsen UI</a></p></li><li><p><a href="https://ant.design/">Ant Design</a></p></li><li><p><a href="https://react.semantic-ui.com/">React Semantic UI</a></p></li><li><p><a href="https://react-bootstrap.github.io/">React BootStrap</a></p><ul><li><p><a href="https://getbootstrap.com/">bootstrap</a></p><ul><li>유명한 front-end open source toolk</li><li>JQuery과 강하게 결합되어 있음 &#x2F; 반응형 웹 개발에 특화</li></ul></li><li><p>반응형 웹 : xs &#x2F; md &#x2F; lg</p></li><li><p>Sass : @import 해서 쓸 수 있음</p></li><li><p>익숙한 UI : Bootstrap 을 그대로 가져옴</p></li></ul></li><li><p><a href="https://mui.com/">Material UI</a>✔️</p></li><li><p><a href="https://tailwindcss.com/">TailwindCSS 공식사이트</a>✔️</p></li><li><p><a href="https://www.react-spring.dev/">React spring</a></p></li><li><p><a href="https://www.framer.com/motion/">Framer Motion</a></p></li></ul><hr><h1 id="2-Onsen-UI"><a href="#2-Onsen-UI" class="headerlink" title="2. Onsen UI"></a>2. Onsen UI</h1><ul><li><p><a href="https://onsen.io/v2/guide/#getting-started">Onsen UI Get Start</a></p><ul><li>모바일 케이스 대응</li><li>아이콘 (Font Awesome, Ionicons)</li><li>문서 최신화는 잘 안됨(React에 불친절)</li></ul></li><li><p><a href="https://onsen.io/v2/guide/react/#react">https://onsen.io/v2/guide/react/#react</a></p></li></ul><h2 id="2-1-예제-공식문서-따라해보기"><a href="#2-1-예제-공식문서-따라해보기" class="headerlink" title="2.1 예제 : 공식문서 따라해보기"></a>2.1 예제 : 공식문서 따라해보기</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app ui</span><br><span class="line">$ <span class="built_in">cd</span> ui</span><br><span class="line">$ npm install onsenui react-onsenui --save <span class="comment"># Onsen UI 설치</span></span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-예제1-기본-사용법"><a href="#2-2-예제1-기본-사용법" class="headerlink" title="2.2 예제1 : 기본 사용법"></a>2.2 예제1 : 기본 사용법</h2><h3 id="2-2-1-App-js"><a href="#2-2-1-App-js" class="headerlink" title="2.2.1 App.js"></a>2.2.1 App.js</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="comment">// Webpack CSS import, 밑에 2줄 import해야 쓸 수 있음</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;onsenui/css/onsenui.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;onsenui/css/onsen-css-components.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">OnesenUIExample</span> <span class="keyword">from</span> <span class="string">&#x27;./components/OnsenUI/OnesenUIExample&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;App&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">OnesenUIExample</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-2-OnsenUIExample"><a href="#2-2-2-OnsenUIExample" class="headerlink" title="2.2.2 OnsenUIExample"></a>2.2.2 OnsenUIExample</h3><ul><li><a href="https://onsen.io/v2/api/react/Button.html">https://onsen.io/v2/api/react/Button.html</a></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/OnsenUI/OnsenUIExample.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ButtonExample</span> <span class="keyword">from</span> <span class="string">&#x27;./ButtonExample&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Page</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-onsenui&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">OnesenUIExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Page</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ButtonExample</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Page</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-2-ButtonExample"><a href="#2-2-2-ButtonExample" class="headerlink" title="2.2.2 ButtonExample"></a>2.2.2 ButtonExample</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/OnsenUI/ButtonExample.jsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-onsenui&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ButtonExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">hnadleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;눌렀음!&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;hnadleClick&#125;</span> <span class="attr">modifier</span>=<span class="string">&#x27;large--cta&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Tap Me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;hnadleClick&#125;</span> <span class="attr">disabled</span>=<span class="string">&#123;true&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        disabled</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;hnadleClick&#125;</span> <span class="attr">modifier</span>=<span class="string">&#x27;outline&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        outline</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;hnadleClick&#125;</span> <span class="attr">modifier</span>=<span class="string">&#x27;light&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        light</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;hnadleClick&#125;</span> <span class="attr">modifier</span>=<span class="string">&#x27;quiet&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        quiet</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;hnadleClick&#125;</span> <span class="attr">modifier</span>=<span class="string">&#x27;cta&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        cta</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;hnadleClick&#125;</span> <span class="attr">modifier</span>=<span class="string">&#x27;large-quiet&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        large-quiet</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;hnadleClick&#125;</span> <span class="attr">modifier</span>=<span class="string">&#x27;material&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        material</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;hnadleClick&#125;</span> <span class="attr">modifier</span>=<span class="string">&#x27;material-flat&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        material-flat</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-3-예제2-Action-Sheet"><a href="#2-3-예제2-Action-Sheet" class="headerlink" title="2.3 예제2: Action Sheet"></a>2.3 예제2: Action Sheet</h2><ul><li><a href="https://onsen.io/v2/api/react/ActionSheet.html">https://onsen.io/v2/api/react/ActionSheet.html</a></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/OnsenUI/ActionSheetExample.jsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ActionSheetButton</span>, <span class="title class_">ActionSheet</span>, <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-onsenui&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ActionSheetExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [open, setOpen] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setOpen</span>(<span class="literal">true</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Action Sheet 열기<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ActionSheet</span> <span class="attr">isOpen</span>=<span class="string">&#123;open&#125;</span> <span class="attr">title</span>=<span class="string">&#x27;action sheet&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ActionSheetButton</span>&gt;</span>Label 1<span class="tag">&lt;/<span class="name">ActionSheetButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ActionSheetButton</span>&gt;</span>Label 2<span class="tag">&lt;/<span class="name">ActionSheetButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ActionSheetButton</span>&gt;</span>Label 4<span class="tag">&lt;/<span class="name">ActionSheetButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ActionSheetButton</span> <span class="attr">modifier</span>=<span class="string">&#x27;destructive&#x27;</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">ActionSheetButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ActionSheetButton</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">ActionSheetButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ActionSheet</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/OnsenUI/OnsenUIExample.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ButtonExample</span> <span class="keyword">from</span> <span class="string">&#x27;./ButtonExample&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Page</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-onsenui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ActionSheetExample</span> <span class="keyword">from</span> <span class="string">&#x27;./ActionSheetExample&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">OnesenUIExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Page</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ActionSheetExample</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ButtonExample</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Page</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4-예제3-List"><a href="#2-4-예제3-List" class="headerlink" title="2.4 예제3 : List"></a>2.4 예제3 : List</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Checkbox</span>, <span class="title class_">List</span>, <span class="title class_">ListItem</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-onsenui&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">CheckBoxExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">List</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ListItem</span> <span class="attr">tappable</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&#x27;left&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Checkbox</span> <span class="attr">input-id</span>=<span class="string">&#x27;check-1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">Checkbox</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&#x27;check-1&#x27;</span> <span class="attr">class</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Apple</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ListItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ListItem</span> <span class="attr">tappable</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&#x27;left&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Checkbox</span> <span class="attr">input-id</span>=<span class="string">&#x27;check-2&#x27;</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;/<span class="name">Checkbox</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&#x27;check-2&#x27;</span> <span class="attr">class</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Banana</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ListItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">List</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/OnsenUI/OnsenUIExample.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ButtonExample</span> <span class="keyword">from</span> <span class="string">&#x27;./ButtonExample&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Page</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-onsenui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ActionSheetExample</span> <span class="keyword">from</span> <span class="string">&#x27;./ActionSheetExample&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CheckBoxExample</span> <span class="keyword">from</span> <span class="string">&#x27;./CheckBoxExample&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">OnesenUIExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Page</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">CheckBoxExample</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ActionSheetExample</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ButtonExample</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Page</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-5-예제4-Fab-Icon"><a href="#2-5-예제4-Fab-Icon" class="headerlink" title="2.5 예제4 : Fab + Icon"></a>2.5 예제4 : Fab + Icon</h2><ul><li><a href="https://onsen.io/v2/api/js/ons-fab.html">https://onsen.io/v2/api/js/ons-fab.html</a></li><li><a href="https://onsen.io/v2/api/js/ons-icon.html">https://onsen.io/v2/api/js/ons-icon.html</a><ul><li>아이콘 지원<ul><li><a href="https://fontawesome.com/">https://fontawesome.com/</a></li><li><a href="http://ionicons.com/">Ionicons</a></li><li><a href="http://zavoloklom.github.io/material-design-iconic-font/">Material Design Iconic Font</a></li></ul></li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Fab</span>, <span class="title class_">Icon</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-onsenui&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">FabExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Fab</span> <span class="attr">position</span>=<span class="string">&#x27;bottom right&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">icon</span>=<span class="string">&#x27;fa-space-shuttle&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Fab</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OnsenUIExample.jsx에 추가</p><hr><h1 id="3-Ant-Design"><a href="#3-Ant-Design" class="headerlink" title="3. Ant Design"></a>3. Ant Design</h1><ul><li><a href="https://ant.design/docs/react/introduce">https://ant.design/docs/react/introduce</a></li><li><a href="https://ant.design/docs/react/use-with-create-react-app">https://ant.design/docs/react/use-with-create-react-app</a></li><li><a href="https://ant.design/components/overview/">https://ant.design/components/overview/</a></li><li>React 기반</li><li>Day.js 권장, Moment.js 제거 추천</li><li>Design 철학 : 단순한 컴포넌트 제공 + @</li><li>typography : 다양한 사이즈의 Text 제공</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install antd</span><br></pre></td></tr></table></figure><hr><h2 id="3-1-예제1-기본-사용법"><a href="#3-1-예제1-기본-사용법" class="headerlink" title="3.1 예제1 : 기본 사용법"></a>3.1 예제1 : 기본 사용법</h2><h3 id="3-1-1-App-js"><a href="#3-1-1-App-js" class="headerlink" title="3.1.1 App.js"></a>3.1.1 App.js</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Webpack CSS import</span></span><br><span class="line"><span class="comment">// import &#x27;onsenui/css/onsenui.css&#x27;;</span></span><br><span class="line"><span class="comment">// import &#x27;onsenui/css/onsen-css-components.css&#x27;;</span></span><br><span class="line"><span class="comment">// import OnesenUIExample from &#x27;./components/OnsenUI/OnesenUIExample&#x27;;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;~antd/dist/antd.css&#x27;</span>; <span class="comment">// 추가-----------------</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AntDesignExample</span> <span class="keyword">from</span> <span class="string">&#x27;./components/AntDesign/AntDesignExample&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">AntDesignExample</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">OnesenUIExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-1-2-AntDesignExample"><a href="#3-1-2-AntDesignExample" class="headerlink" title="3.1.2 AntDesignExample"></a>3.1.2 AntDesignExample</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  src\components\AntDesign\AntDesignExample.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">GetStart</span> <span class="keyword">from</span> <span class="string">&#x27;./GetStart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">AntDesignExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">GetStart</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-1-3-GetStart"><a href="#3-1-3-GetStart" class="headerlink" title="3.1.3 GetStart"></a>3.1.3 GetStart</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DatePicker</span>, message, <span class="title class_">Alert</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">GetStart</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [date, setDate] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">    message.<span class="title function_">info</span>(<span class="string">`Selected Date: <span class="subst">$&#123;value ? value.format(<span class="string">&#x27;YYYY-MM-DD&#x27;</span>) : <span class="string">&#x27;None&#x27;</span>&#125;</span>`</span>);</span><br><span class="line">    <span class="title function_">setDate</span>(value);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> <span class="attr">400</span>, <span class="attr">margin:</span> &#x27;<span class="attr">100px</span> <span class="attr">auto</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">DatePicker</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginTop:</span> <span class="attr">16</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Alert</span> <span class="attr">message</span>=<span class="string">&#x27;Selected Date&#x27;</span> <span class="attr">description</span>=<span class="string">&#123;date</span> ? <span class="attr">date.format</span>(&#x27;<span class="attr">YYYY-MM-DD</span>&#x27;) <span class="attr">:</span> &#x27;<span class="attr">None</span>&#x27;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-2-예제2-Icon"><a href="#3-2-예제2-Icon" class="headerlink" title="3.2 예제2 : Icon"></a>3.2 예제2 : Icon</h2><ul><li><a href="https://ant.design/components/icon">https://ant.design/components/icon</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save @ant-design/icons</span><br></pre></td></tr></table></figure><h3 id="3-2-1-IconExample"><a href="#3-2-1-IconExample" class="headerlink" title="3.2.1 IconExample"></a>3.2.1 IconExample</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SearchOutlined</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">Tooltip</span>, <span class="title class_">Space</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">IconExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Space</span> <span class="attr">direction</span>=<span class="string">&#x27;vertical&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Space</span> <span class="attr">wrap</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Tooltip</span> <span class="attr">title</span>=<span class="string">&#x27;search&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">shape</span>=<span class="string">&#x27;circle&#x27;</span> <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">SearchOutlined</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Tooltip</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">shape</span>=<span class="string">&#x27;circle&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          A</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">SearchOutlined</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          Search</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Tooltip</span> <span class="attr">title</span>=<span class="string">&#x27;search&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Button</span> <span class="attr">shape</span>=<span class="string">&#x27;circle&#x27;</span> <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">SearchOutlined</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Tooltip</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">SearchOutlined</span> /&gt;</span>&#125;&gt;Search<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Space</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Space</span> <span class="attr">wrap</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Tooltip</span> <span class="attr">title</span>=<span class="string">&#x27;search&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Button</span> <span class="attr">shape</span>=<span class="string">&#x27;circle&#x27;</span> <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">SearchOutlined</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Tooltip</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">SearchOutlined</span> /&gt;</span>&#125;&gt;Search<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Tooltip</span> <span class="attr">title</span>=<span class="string">&#x27;search&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&#x27;dashed&#x27;</span> <span class="attr">shape</span>=<span class="string">&#x27;circle&#x27;</span> <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">SearchOutlined</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Tooltip</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&#x27;dashed&#x27;</span> <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">SearchOutlined</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          Search</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">SearchOutlined</span> /&gt;</span>&#125; href=&#x27;https://www.google.com&#x27; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Space</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Space</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="4-React-Semantic-UI"><a href="#4-React-Semantic-UI" class="headerlink" title="4. React Semantic UI"></a>4. React Semantic UI</h1><ul><li><a href="https://react.semantic-ui.com/usage">https://react.semantic-ui.com/usage</a></li><li>Semantic &#x3D; 의론적인 웹 (기계가 이해할 수 있는 웹페이지, 웹 접근성)</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install semantic-ui-react semantic-ui-css</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;semantic-ui-css/semantic.min.css&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="4-1-예제1-기본-사용법"><a href="#4-1-예제1-기본-사용법" class="headerlink" title="4.1 예제1 : 기본 사용법"></a>4.1 예제1 : 기본 사용법</h2><h3 id="4-1-1-App-js"><a href="#4-1-1-App-js" class="headerlink" title="4.1.1 App.js"></a>4.1.1 App.js</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Webpack CSS import</span></span><br><span class="line"><span class="comment">// import &#x27;onsenui/css/onsenui.css&#x27;;</span></span><br><span class="line"><span class="comment">// import &#x27;onsenui/css/onsen-css-components.css&#x27;;</span></span><br><span class="line"><span class="comment">// import OnesenUIExample from &#x27;./components/OnsenUI/OnesenUIExample&#x27;;</span></span><br><span class="line"><span class="comment">// import AntDesignExample from &#x27;./components/AntDesign/AntDesignExample&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;semantic-ui-css/semantic.min.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactSemanticUIExample</span> <span class="keyword">from</span> <span class="string">&#x27;./components/ReactSemanticUI/ReactSemanticUIExample&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ReactSemanticUIExample</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">AntDesignExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">OnesenUIExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-1-2-ButtonExampleLabeledBasic"><a href="#4-1-2-ButtonExampleLabeledBasic" class="headerlink" title="4.1.2 ButtonExampleLabeledBasic"></a>4.1.2 ButtonExampleLabeledBasic</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">Icon</span>, <span class="title class_">Label</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;semantic-ui-react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">const</span> <span class="title function_">ButtonExampleLabeledBasic</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">as</span>=<span class="string">&quot;div&quot;</span> <span class="attr">labelPosition</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">name</span>=<span class="string">&quot;heart&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        Like</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Label</span> <span class="attr">as</span>=<span class="string">&quot;a&quot;</span> <span class="attr">basic</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">pointing</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        2,048</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">as</span>=<span class="string">&quot;div&quot;</span> <span class="attr">labelPosition</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">basic</span> <span class="attr">color</span>=<span class="string">&quot;blue&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">name</span>=<span class="string">&quot;fork&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        Fork</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Label</span> <span class="attr">as</span>=<span class="string">&quot;a&quot;</span> <span class="attr">basic</span> <span class="attr">color</span>=<span class="string">&quot;blue&quot;</span> <span class="attr">pointing</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        2,048</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h3 id="4-1-3-ReactSemanticUIExample"><a href="#4-1-3-ReactSemanticUIExample" class="headerlink" title="4.1.3 ReactSemanticUIExample"></a>4.1.3 ReactSemanticUIExample</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/ReactSemanticUI/ReactSemanticUIExample.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ButtonExampleLabeledBasic</span> <span class="keyword">from</span> <span class="string">&#x27;./ButtonExampleLabeledBasic&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ReactSemanticUIExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ButtonExampleLabeledBasic</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="5-React-BootStrap"><a href="#5-React-BootStrap" class="headerlink" title="5. React BootStrap"></a>5. React BootStrap</h1><ul><li><p>BootStrap</p><ul><li>유명한 front-end 오픈소스 toolkit</li><li>jQuery와 강하게 결합 &#x2F; 반응형 웹에 특화</li></ul></li><li><p>React BootStrap</p><ul><li>BootStrap 개발팀들이 jQuery제거하고 React에 맞게 생성한 라이브러리</li><li>반응형 웹 : xs | md | lg</li><li>Sass : @import해서 쓸 수 있음</li><li>익숙한 UI : Bootstrap을 그대로 가져옴</li><li><a href="https://react-bootstrap.github.io/">https://react-bootstrap.github.io/</a></li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-bootstrap bootstrap</span><br></pre></td></tr></table></figure><hr><h2 id="5-1-예제1-기본-사용법"><a href="#5-1-예제1-기본-사용법" class="headerlink" title="5.1 예제1 : 기본 사용법"></a>5.1 예제1 : 기본 사용법</h2><ul><li><a href="https://react-bootstrap.github.io/getting-started/why-react-bootstrap/">https://react-bootstrap.github.io/getting-started/why-react-bootstrap/</a></li></ul><h3 id="5-1-1-App-js"><a href="#5-1-1-App-js" class="headerlink" title="5.1.1 App.js"></a>5.1.1 App.js</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Webpack CSS import</span></span><br><span class="line"><span class="comment">// import &#x27;onsenui/css/onsenui.css&#x27;;</span></span><br><span class="line"><span class="comment">// import &#x27;onsenui/css/onsen-css-components.css&#x27;;</span></span><br><span class="line"><span class="comment">// import OnesenUIExample from &#x27;./components/OnsenUI/OnesenUIExample&#x27;;</span></span><br><span class="line"><span class="comment">// import AntDesignExample from &#x27;./components/AntDesign/AntDesignExample&#x27;;</span></span><br><span class="line"><span class="comment">// import &#x27;semantic-ui-css/semantic.min.css&#x27;;</span></span><br><span class="line"><span class="comment">// import ReactSemanticUIExample from &#x27;./components/ReactSemanticUI/ReactSemanticUIExample&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/css/bootstrap.min.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactBootstrapExample</span> <span class="keyword">from</span> <span class="string">&#x27;./components/ReactBootstrap/ReactBootstrapExample&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ReactBootstrapExample</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">ReactSemanticUIExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">AntDesignExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">OnesenUIExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="5-1-2-AlertDismissible"><a href="#5-1-2-AlertDismissible" class="headerlink" title="5.1.2 AlertDismissible"></a>5.1.2 AlertDismissible</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Alert</span>, <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-bootstrap&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">AlertDismissible</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [show, setShow] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Alert</span> <span class="attr">show</span>=<span class="string">&#123;show&#125;</span> <span class="attr">variant</span>=<span class="string">&#x27;success&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Alert.Heading</span>&gt;</span>How&#x27;s it going?!<span class="tag">&lt;/<span class="name">Alert.Heading</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Cras mattis consectetur purus sit amet fermentum.</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;d-flex justify-content-end&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setShow(false)&#125; variant=&#x27;outline-success&#x27;&gt;</span></span><br><span class="line"><span class="language-xml">            Close me y&#x27;all!</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Alert</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;!show &amp;&amp; <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setShow(true)&#125;&gt;Show Alert<span class="tag">&lt;/<span class="name">Button</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="5-1-3-ReactBootstrapExample"><a href="#5-1-3-ReactBootstrapExample" class="headerlink" title="5.1.3 ReactBootstrapExample"></a>5.1.3 ReactBootstrapExample</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AlertDismissible</span> <span class="keyword">from</span> <span class="string">&#x27;./AlertDismissible&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ReactBootstrapExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">AlertDismissible</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-2-예제2-반응형"><a href="#5-2-예제2-반응형" class="headerlink" title="5.2 예제2 : 반응형"></a>5.2 예제2 : 반응형</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* grid.css */</span></span><br><span class="line"><span class="selector-class">.col-color</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Container</span>, <span class="title class_">Row</span>, <span class="title class_">Col</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-bootstrap&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./grid.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">GridExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* Stack the columns on mobile by making one full-width and the other half-width */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Col</span> <span class="attr">xs</span>=<span class="string">&#123;12&#125;</span> <span class="attr">md</span>=<span class="string">&#123;8&#125;</span> <span class="attr">className</span>=<span class="string">&#x27;col-color&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          xs=12 md=8</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Col</span> <span class="attr">className</span>=<span class="string">&#x27;col-color&#x27;</span> <span class="attr">xs</span>=<span class="string">&#123;6&#125;</span> <span class="attr">md</span>=<span class="string">&#123;4&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          xs=6 md=4</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;/* Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Col</span> <span class="attr">className</span>=<span class="string">&#x27;col-color&#x27;</span> <span class="attr">xs</span>=<span class="string">&#123;6&#125;</span> <span class="attr">md</span>=<span class="string">&#123;4&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          xs=6 md=4</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Col</span> <span class="attr">className</span>=<span class="string">&#x27;col-color&#x27;</span> <span class="attr">xs</span>=<span class="string">&#123;6&#125;</span> <span class="attr">md</span>=<span class="string">&#123;4&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          xs=6 md=4</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Col</span> <span class="attr">className</span>=<span class="string">&#x27;col-color&#x27;</span> <span class="attr">xs</span>=<span class="string">&#123;6&#125;</span> <span class="attr">md</span>=<span class="string">&#123;4&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          xs=6 md=4</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;/* Columns are always 50% wide, on mobile and desktop */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Col</span> <span class="attr">className</span>=<span class="string">&#x27;col-color&#x27;</span> <span class="attr">xs</span>=<span class="string">&#123;6&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          xs=6</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Col</span> <span class="attr">className</span>=<span class="string">&#x27;col-color&#x27;</span> <span class="attr">xs</span>=<span class="string">&#123;6&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          xs=6</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">AlertDismissible</span> <span class="keyword">from</span> <span class="string">&#x27;./AlertDismissible&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">GridExample</span> <span class="keyword">from</span> <span class="string">&#x27;./GridExample&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ReactBootstrapExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">GridExample</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">AlertDismissible</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-3-예제3-버튼"><a href="#5-3-예제3-버튼" class="headerlink" title="5.3 예제3 : 버튼"></a>5.3 예제3 : 버튼</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">ButtonGroup</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-bootstrap&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ButtonExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ButtonGroup</span> <span class="attr">size</span>=<span class="string">&#x27;lg&#x27;</span> <span class="attr">className</span>=<span class="string">&#x27;mb-2&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Middle<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ButtonGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ButtonGroup</span> <span class="attr">className</span>=<span class="string">&#x27;mb-2&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Middle<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ButtonGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ButtonGroup</span> <span class="attr">size</span>=<span class="string">&#x27;sm&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Middle<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ButtonGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReactBootstrapExample.jsx에 추가</p><hr><h1 id="6-Material-UI"><a href="#6-Material-UI" class="headerlink" title="6. Material UI"></a>6. Material UI</h1><ul><li><a href="https://m3.material.io/">https://m3.material.io/</a><ul><li>구글이 2014년 안드로이드 스마트폰에 적용하면서 알려짐</li><li>구글이 선도하는 디자인 시스템이라 업데이트가 자주 이루어지고 체계적임</li></ul></li><li><a href="https://mui.com/core/">https://mui.com/core/</a></li><li><a href="https://mui.com/store/?utm_source=docs&utm_medium=referral&utm_campaign=home-store">각종 테마들</a></li></ul><hr><h2 id="6-1-예제-1-기본-사용법"><a href="#6-1-예제-1-기본-사용법" class="headerlink" title="6.1 예제 1 : 기본 사용법"></a>6.1 예제 1 : 기본 사용법</h2><ul><li><a href="https://mui.com/material-ui/getting-started/installation/">https://mui.com/material-ui/getting-started/installation/</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install @mui/material @emotion/react @emotion/styled <span class="comment"># 기본 설치</span></span><br><span class="line">npm install @mui/icons-material <span class="comment"># Icons</span></span><br></pre></td></tr></table></figure><hr><h3 id="6-1-1-index-html"><a href="#6-1-1-index-html" class="headerlink" title="6.1.1 index.html"></a>6.1.1 index.html</h3><p>index.html에 다음 link 태그 추가</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;display=swap&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>각각 Roboto font, Icons<ul><li><a href="https://mui.com/material-ui/getting-started/installation/#roboto-font">https://mui.com/material-ui/getting-started/installation/#roboto-font</a></li><li><a href="https://mui.com/material-ui/getting-started/installation/#icons">https://mui.com/material-ui/getting-started/installation/#icons</a></li></ul></li></ul><hr><h3 id="6-1-2-App-js"><a href="#6-1-2-App-js" class="headerlink" title="6.1.2 App.js"></a>6.1.2 App.js</h3><ul><li><a href="https://mui.com/material-ui/getting-started/usage/#quickstart">https://mui.com/material-ui/getting-started/usage/#quickstart</a></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Webpack CSS import</span></span><br><span class="line"><span class="comment">// import &#x27;onsenui/css/onsenui.css&#x27;;</span></span><br><span class="line"><span class="comment">// import &#x27;onsenui/css/onsen-css-components.css&#x27;;</span></span><br><span class="line"><span class="comment">// import OnesenUIExample from &#x27;./components/OnsenUI/OnesenUIExample&#x27;;</span></span><br><span class="line"><span class="comment">// import AntDesignExample from &#x27;./components/AntDesign/AntDesignExample&#x27;;</span></span><br><span class="line"><span class="comment">// import &#x27;semantic-ui-css/semantic.min.css&#x27;;</span></span><br><span class="line"><span class="comment">// import ReactSemanticUIExample from &#x27;./components/ReactSemanticUI/ReactSemanticUIExample&#x27;;</span></span><br><span class="line"><span class="comment">// import &#x27;bootstrap/dist/css/bootstrap.min.css&#x27;;</span></span><br><span class="line"><span class="comment">// import ReactBootstrapExample from &#x27;./components/ReactBootstrap/ReactBootstrapExample&#x27;;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MaterialUIExample</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MaterialUI/MaterialUIExample&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MaterialUIExample</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">ReactBootstrapExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">ReactSemanticUIExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">AntDesignExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">OnesenUIExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="6-1-3-ButtonExample"><a href="#6-1-3-ButtonExample" class="headerlink" title="6.1.3 ButtonExample"></a>6.1.3 ButtonExample</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&#x27;@mui/material/Button&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ButtonExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">variant</span>=<span class="string">&#x27;contained&#x27;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="6-1-4-MaterialUIExample"><a href="#6-1-4-MaterialUIExample" class="headerlink" title="6.1.4 MaterialUIExample"></a>6.1.4 MaterialUIExample</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ButtonExample</span> <span class="keyword">from</span> <span class="string">&#x27;./ButtonExample&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">MaterialUIExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ButtonExample</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-2-공식-사이트-CRA-예제"><a href="#6-2-공식-사이트-CRA-예제" class="headerlink" title="6.2 공식 사이트 CRA 예제"></a>6.2 공식 사이트 CRA 예제</h2><ul><li><a href="https://github.com/mui/material-ui/tree/master/examples/create-react-app">https://github.com/mui/material-ui/tree/master/examples/create-react-app</a></li><li>위 Github를 clone(복제)하거나 Zip으로 다운받아 만들어놓은 예제를 볼 수 있다.</li><li>아니면 공식 사이트에 예제별로 Code SandBox가 잘 되어 있다.</li></ul><hr><h2 id="6-3-예제3-Grid"><a href="#6-3-예제3-Grid" class="headerlink" title="6.3 예제3 : Grid"></a>6.3 예제3 : Grid</h2><ul><li><a href="https://mui.com/material-ui/react-grid/#basic-grid">https://mui.com/material-ui/react-grid/#basic-grid</a></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; styled &#125; <span class="keyword">from</span> <span class="string">&#x27;@mui/material/styles&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Box</span> <span class="keyword">from</span> <span class="string">&#x27;@mui/material/Box&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Paper</span> <span class="keyword">from</span> <span class="string">&#x27;@mui/material/Paper&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Grid</span> <span class="keyword">from</span> <span class="string">&#x27;@mui/material/Grid&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Item</span> = <span class="title function_">styled</span>(<span class="title class_">Paper</span>)(<span class="function">(<span class="params">&#123; theme &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">backgroundColor</span>: theme.<span class="property">palette</span>.<span class="property">mode</span> === <span class="string">&#x27;dark&#x27;</span> ? <span class="string">&#x27;#1A2027&#x27;</span> : <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">  ...theme.<span class="property">typography</span>.<span class="property">body2</span>,</span><br><span class="line">  <span class="attr">padding</span>: theme.<span class="title function_">spacing</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="attr">textAlign</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  <span class="attr">color</span>: theme.<span class="property">palette</span>.<span class="property">text</span>.<span class="property">secondary</span>,</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">BasicGrid</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Box</span> <span class="attr">sx</span>=<span class="string">&#123;&#123;</span> <span class="attr">flexGrow:</span> <span class="attr">1</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">container</span> <span class="attr">spacing</span>=<span class="string">&#123;2&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">item</span> <span class="attr">xs</span>=<span class="string">&#123;8&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Item</span>&gt;</span>xs=8<span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">item</span> <span class="attr">xs</span>=<span class="string">&#123;4&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Item</span>&gt;</span>xs=4<span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">item</span> <span class="attr">xs</span>=<span class="string">&#123;4&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Item</span>&gt;</span>xs=4<span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">item</span> <span class="attr">xs</span>=<span class="string">&#123;8&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Item</span>&gt;</span>xs=8<span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Box</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MaterialUIExample에 추가</p><hr><h1 id="7-Tailwindcss"><a href="#7-Tailwindcss" class="headerlink" title="7. Tailwindcss"></a>7. Tailwindcss</h1><p><a href="https://tailwindcss.com/docs/installation">https://tailwindcss.com/docs/installation</a></p><ul><li>Utility-first CSS framework,</li><li>즉 미리 정의된 CSS의 특성들을 <code>class</code> 를 통해 불러와 적용시키는 형태의 CSS 프레임워크</li><li>원하는 <code>html</code> 요소에 <code>class</code> 을 부여해주면 바로 사용이 가능하다</li></ul><p>cf. VSCode 확장기능</p><ul><li>Tailwind CSS IntelliSense : 클래스명 자동완성</li><li>Tailwind Docs : 문서 찾아볼 떄 Ctrl + Shipt + P로 검색</li></ul><hr><h2 id="7-1-예제-1-기본-사용법"><a href="#7-1-예제-1-기본-사용법" class="headerlink" title="7.1 예제 1 : 기본 사용법"></a>7.1 예제 1 : 기본 사용법</h2><p><a href="https://tailwindcss.com/docs/installation">https://tailwindcss.com/docs/installation</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -D tailwindcss</span><br><span class="line">npx tailwindcss init</span><br></pre></td></tr></table></figure><p>tailwindcss를 사용하고자 하는 경로, 파일 작성(<strong>확장자명은 띄워쓰면 안됨</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">content</span>: [<span class="string">&#x27;./src/**/*.&#123;html,js,jsx,ts,tsx&#125;&#x27;</span>],</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>전역 CSS에 다음 코드 추가 (CRA에서는 index.css 맨 위에 추가)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base; <span class="comment">/* tailwind 기본 스타일 및 확장된 스타일 주입 */</span></span><br><span class="line"><span class="keyword">@tailwind</span> components; <span class="comment">/* tailwind 기본 컴포넌트 클래스 및 확장된 컴포넌트 클래스 주입 */</span></span><br><span class="line"><span class="keyword">@tailwind</span> utilities; <span class="comment">/* tailwind 기본 유틸리티 클래스 및 확장된 유틸리티 클래스 주입 */</span></span><br></pre></td></tr></table></figure><hr><h3 id="7-1-1-Background"><a href="#7-1-1-Background" class="headerlink" title="7.1.1 Background"></a>7.1.1 Background</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Background</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;bg-gray-700&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> <span class="attr">600</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> <span class="attr">100</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> &#x27;<span class="attr">inherit</span>&#x27; &#125;&#125; <span class="attr">class</span>=<span class="string">&#x27;bg-sky-500/100&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> &#x27;<span class="attr">inherit</span>&#x27; &#125;&#125; <span class="attr">class</span>=<span class="string">&#x27;bg-sky-500/75&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> &#x27;<span class="attr">inherit</span>&#x27; &#125;&#125; <span class="attr">class</span>=<span class="string">&#x27;bg-sky-500/50&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="7-1-2-TailwindExample"><a href="#7-1-2-TailwindExample" class="headerlink" title="7.1.2 TailwindExample"></a>7.1.2 TailwindExample</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Background</span> <span class="keyword">from</span> <span class="string">&#x27;./Background&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">TailwindExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Background</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="7-1-3-App-js"><a href="#7-1-3-App-js" class="headerlink" title="7.1.3 App.js"></a>7.1.3 App.js</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Webpack CSS import</span></span><br><span class="line"><span class="comment">// import &#x27;onsenui/css/onsenui.css&#x27;;</span></span><br><span class="line"><span class="comment">// import &#x27;onsenui/css/onsen-css-components.css&#x27;;</span></span><br><span class="line"><span class="comment">// import OnesenUIExample from &#x27;./components/OnsenUI/OnesenUIExample&#x27;;</span></span><br><span class="line"><span class="comment">// import AntDesignExample from &#x27;./components/AntDesign/AntDesignExample&#x27;;</span></span><br><span class="line"><span class="comment">// import &#x27;semantic-ui-css/semantic.min.css&#x27;;</span></span><br><span class="line"><span class="comment">// import ReactSemanticUIExample from &#x27;./components/ReactSemanticUI/ReactSemanticUIExample&#x27;;</span></span><br><span class="line"><span class="comment">// import &#x27;bootstrap/dist/css/bootstrap.min.css&#x27;;</span></span><br><span class="line"><span class="comment">// import ReactBootstrapExample from &#x27;./components/ReactBootstrap/ReactBootstrapExample&#x27;;</span></span><br><span class="line"><span class="comment">// import MaterialUIExample from &#x27;./components/MaterialUI/MaterialUIExample&#x27;;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TailwindExample</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Tailwind/TailwindExample&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TailwindExample</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">MaterialUIExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">ReactBootstrapExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">ReactSemanticUIExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">AntDesignExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">OnesenUIExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-2-Tailwind-CSS-Tutorial"><a href="#7-2-Tailwind-CSS-Tutorial" class="headerlink" title="7.2 Tailwind CSS Tutorial"></a>7.2 Tailwind CSS Tutorial</h2><ul><li><a href="https://www.youtube.com/watch?v=bxmDnn7lrnk&list=PL4cUxeGkcC9gpXORlEHjc5bgnIi5HEGhw">Tailwind CSS Tutorial(The Net Ninja from youtube)</a></li></ul><hr><h2 id="7-3-참고-Prettier"><a href="#7-3-참고-Prettier" class="headerlink" title="7.3 참고 : Prettier"></a>7.3 참고 : Prettier</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D prettier prettier-plugin-tailwindcss</span><br></pre></td></tr></table></figure><p>해당 플러그인은 tailwindcss 공식 Prettier 플러그인입니다.<br>클래스명을 tailwindcss가 정한 기준대로 나열해주니 한결 코드가 깔끔해짐</p><ul><li><a href="https://tailwindui.com/templates?ref=sidebar">https://tailwindui.com/templates?ref=sidebar</a><ul><li>템플릿도 제공함</li></ul></li></ul><hr><h1 id="8-정리"><a href="#8-정리" class="headerlink" title="8. 정리"></a>8. 정리</h1><ul><li>필요에 따라서 라이브러리를 찾고(alternatives)</li><li>공식 문서로 라이브러리에 대해 파악하고(Introduction)</li><li>공식 문서 따라 설치하고(Installation)</li><li>공식 문서 예제(Examples) 따라해보고 api 문서 보고 적용해본다</li></ul><p>라이브러리의 트렌드 또한 빠르게 변한다.<br>2년전에 당연했던 선택들이 지금은 당연하지 않다.<br>결국 스스로 새로운 라이브러리를 적용해보는 능력(경험)이 관건!</p><p>라이브러리의 적용은 정답이 없다. 맞는 것도 없지만 틀린 것도 없다.<br>만든 이의 설명과 가이드에 따라 내 프로젝트에 적용하는 것으로 성공적임<br>계속 시도 &#x2F; 반복 시도 &#x2F; 새로운 기술에 대한 호기심과 궁금증으로 Just do it!</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-16-Styling 라이브러리</title>
      <link href="/2022/12/28/Front-React-Basic-16-Styling01/"/>
      <url>/2022/12/28/Front-React-Basic-16-Styling01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Styling-라이브러리-종류"><a href="#1-Styling-라이브러리-종류" class="headerlink" title="1. Styling 라이브러리 종류"></a>1. Styling 라이브러리 종류</h1><p>컴포넌트가 많은 경우 일반 CSS로 스타일링을 하다보면 불편함이 생기는데</p><ol><li><strong>class 만들어놓은걸 까먹고 중복해서 또 만들거나</strong></li><li><strong>갑자기 다른 이상한 컴포넌트에 원하지않는 스타일이 적용</strong>되거나</li><li><strong>CSS 파일이 너무 길어져서 수정이 어렵거나</strong></li></ol><p>위 경우를 해결하기 위해 라이브러리들을 사용합니다.</p><blockquote><p>💡 CSS의 문제점</p><ul><li><code>Global Namespace</code> : 글로벌 변수를 지양해야하는 JS와 대치</li><li><code>Dependencies</code> : css 간의 의존 관리</li><li><code>Dead Code Elimination</code> : 안쓰는 css 인지 어려움</li><li><code>Minification</code> : 클래스 이름 최소화</li><li><code>Sharing Constants</code> : JS의 코드와 값을 공유하고 싶음</li><li><code>Non-deterministic Resolution</code> : css 파일 로드 타이밍 이슈</li><li><code>Isolation</code> : 격리</li></ul></blockquote><p>css로 꾸밀 떄 사용하는 라이브러리는 크게 <code>CSS-in-CSS 방식</code>과 <code>CSS-in-JS 방식</code>으로 구분합니다.</p><ul><li><code>CSS-in-JS</code><ul><li><a href="https://styled-components.com/">Styled-Component 공식사이트</a>✔️<ul><li>대표적인 CSS-in-JS</li><li><a href="https://speakerdeck.com/vjeux/react-css-in-js">https://speakerdeck.com/vjeux/react-css-in-js</a></li><li>Basic : <a href="https://styled-components.com/docs/basics">https://styled-components.com/docs/basics</a></li><li>CSS Selector Ref : <a href="https://www.w3schools.com/cssref/css_selectors.php">https://www.w3schools.com/cssref/css_selectors.php</a></li><li>API : <a href="https://styled-components.com/docs/api">https://styled-components.com/docs/api</a></li></ul></li><li><a href="https://emotion.sh/docs/install">Emotion 공식사이트</a>✔️</li></ul></li><li><code>CSS-in-CSS</code> : CSS-in-JS 아닌 것들은 다 CSS-in-CSS<ul><li>Sass (전처리기)✔️</li><li>CSS Module (Post CSS)✔️</li></ul></li><li>cf. <a href="https://2022.stateofcss.com/ko-KR/">CSS 2022 통계</a><ul><li><a href="https://2022.stateofcss.com/ko-KR/css-frameworks/">https://2022.stateofcss.com/ko-KR/css-frameworks/</a></li><li><a href="https://2022.stateofcss.com/ko-KR/css-in-js/">https://2022.stateofcss.com/ko-KR/css-in-js/</a></li></ul></li></ul><hr><h1 id="2-Styled-Components"><a href="#2-Styled-Components" class="headerlink" title="2. Styled Components"></a>2. Styled Components</h1><ul><li><strong>JS 파일 안에서 CSS를 작성할 수 있는</strong> 대표적인 CSS-in-JS 라이브러리</li><li><strong>Styled이 적용된 Componen</strong>t라고 해서 <code>Styled Components</code>라고 부름</li><li><a href="https://styled-components.com/docs/basics#getting-started">https://styled-components.com/docs/basics#getting-started</a></li><li>장점<ul><li><code>Automatic critical CSS</code> : 자동 style injects &amp; 코드 스플릿</li><li><code>No class name bugs</code> : unique &#x2F; overlap x &#x2F; misspellin</li><li><code>Easier deletion of CSS</code> : tied to a specific component</li><li><code>Simple dynamic styling</code> : props &#x2F; global them</li><li><code>Painless maintenance</code> : styling affecting your compon</li><li><code>Automatic vendor prefixing</code> : current standard o</li></ul></li></ul><hr><h2 id="2-1-예제-공식문서-따라해보기"><a href="#2-1-예제-공식문서-따라해보기" class="headerlink" title="2.1 예제 : 공식문서 따라해보기"></a>2.1 예제 : 공식문서 따라해보기</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app styleing</span><br><span class="line">$ <span class="built_in">cd</span> styleing</span><br><span class="line">$ npm install styled-components <span class="comment"># Styled Components 설치</span></span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-예제1-기본-사용법"><a href="#2-2-예제1-기본-사용법" class="headerlink" title="2.2 예제1 : 기본 사용법"></a>2.2 예제1 : 기본 사용법</h2><h3 id="2-2-1-App-js"><a href="#2-2-1-App-js" class="headerlink" title="2.2.1 App.js"></a>2.2.1 App.js</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledComponentsExample</span> <span class="keyword">from</span> <span class="string">&#x27;./components/StyledComponentsExample/StyledComponentsExample&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;App&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">StyledComponentsExample</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-StyledComponentsExample"><a href="#2-2-2-StyledComponentsExample" class="headerlink" title="2.2.2 StyledComponentsExample"></a>2.2.2 StyledComponentsExample</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/StyledComponentsExample/StyledComponentsExample.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">StyledComponentsExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Title</span> = styled.<span class="property">h1</span><span class="string">`</span></span><br><span class="line"><span class="string">    font-size: 1.5em;</span></span><br><span class="line"><span class="string">    text-align: center;</span></span><br><span class="line"><span class="string">    color: palevioletred;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a Wrapper component that&#x27;ll render a &lt;section&gt; tag with some styles</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Wrapper</span> = styled.<span class="property">section</span><span class="string">`</span></span><br><span class="line"><span class="string">    padding: 4em;</span></span><br><span class="line"><span class="string">    background: papayawhip;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Button</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">    /* Adapt the colors based on primary prop */</span></span><br><span class="line"><span class="string">    background: <span class="subst">$&#123;(props) =&gt; (props.primary ? <span class="string">&#x27;palevioletred&#x27;</span> : <span class="string">&#x27;white&#x27;</span>)&#125;</span>;</span></span><br><span class="line"><span class="string">    color: <span class="subst">$&#123;(props) =&gt; (props.primary ? <span class="string">&#x27;white&#x27;</span> : <span class="string">&#x27;palevioletred&#x27;</span>)&#125;</span>;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    font-size: 1em;</span></span><br><span class="line"><span class="string">    margin: 1em;</span></span><br><span class="line"><span class="string">    padding: 0.25em 1em;</span></span><br><span class="line"><span class="string">    border: 2px solid palevioletred;</span></span><br><span class="line"><span class="string">    border-radius: 3px;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">TomatoButton</span> = <span class="title function_">styled</span>(<span class="title class_">Button</span>)<span class="string">`</span></span><br><span class="line"><span class="string">    color: tomato;</span></span><br><span class="line"><span class="string">    border-color: tomato;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">ReversedButton</span> = (<span class="params">props</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">children</span>=<span class="string">&#123;props.children.split(</span>&#x27;&#x27;)<span class="attr">.reverse</span>()&#125; /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Use Title and Wrapper like any other React component – except they&#x27;re styled!</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> alert(&#x27;normal&#x27;)&#125;&gt;Normal<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> alert(&#x27;normal&#x27;)&#125; primary&gt;</span></span><br><span class="line"><span class="language-xml">        Primary</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TomatoButton</span>&gt;</span>Tomato 확장 버튼<span class="tag">&lt;/<span class="name">TomatoButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">as</span>=<span class="string">&#x27;a&#x27;</span> <span class="attr">href</span>=<span class="string">&#x27;#&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Link with Button styles</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TomatoButton</span> <span class="attr">as</span>=<span class="string">&#x27;a&#x27;</span> <span class="attr">href</span>=<span class="string">&#x27;#&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Link with Tomato Button styles</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">TomatoButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">as</span>=<span class="string">&#123;ReversedButton&#125;</span>&gt;</span>Custom Button with Normal Button styles<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-3-예제2-상속-amp"><a href="#2-3-예제2-상속-amp" class="headerlink" title="2.3 예제2 : 상속(&amp;)"></a>2.3 예제2 : 상속(&amp;)</h2><ul><li><a href="https://styled-components.com/docs/basics#getting-started">https://styled-components.com/docs/basics#getting-started</a></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Thing</span> = styled.<span class="property">div</span>.<span class="title function_">attrs</span>(<span class="function">(<span class="params"><span class="comment">/* props */</span></span>) =&gt;</span> (&#123; <span class="attr">tabIndex</span>: <span class="number">0</span> &#125;))<span class="string">`</span></span><br><span class="line"><span class="string">  color: blue;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  // &quot;&amp;(ampersand)&quot;는 현재 선택된 요소를 의미, 해당 컴포넌트 아래에 있는 자식들을 참조할 수 있음</span></span><br><span class="line"><span class="string">  &amp;:hover &#123;</span></span><br><span class="line"><span class="string">    color: red; // &lt;Thing&gt; when hovered</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  // 일반 형제 결합자 : 첫번쟤 요소를 뒤따르면서 같은 부모와 공유하는 2번쟤 형제 요소 선택</span></span><br><span class="line"><span class="string">  // Thing의 바로 옆은 아니지만 형제요소일 때</span></span><br><span class="line"><span class="string">  &amp; ~ &amp; &#123;</span></span><br><span class="line"><span class="string">    background: tomato; // &lt;Thing&gt; as a sibling of &lt;Thing&gt;, but maybe not directly next to it</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  // 인접 형제 결합자 : 첫번쟤 요소를 뒤따르면서 바로 뒤에 있는 2번쟤 형제 요소 선택</span></span><br><span class="line"><span class="string">  // Thing이 바로 옆에 붙어있을 때</span></span><br><span class="line"><span class="string">  &amp; + &amp; &#123;</span></span><br><span class="line"><span class="string">    background: lime; // &lt;Thing&gt; next to &lt;Thing&gt;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  // Thing이 something이라는 클래스를 갖고있을 때</span></span><br><span class="line"><span class="string">  &amp;.something &#123;</span></span><br><span class="line"><span class="string">    background: orange; // &lt;Thing&gt; tagged with an additional CSS class &quot;.something&quot;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  // // something-else라는 클래스를 가진 친구안에 있을 때</span></span><br><span class="line"><span class="string">  .something-else &amp; &#123;</span></span><br><span class="line"><span class="string">    border: 1px solid; // &lt;Thing&gt; inside another element labeled &quot;.something-else&quot;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">StyledComponentsExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Use Title and Wrapper like any other React component – except they&#x27;re styled!</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Thing</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">Thing</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Thing</span>&gt;</span>How ya doing?<span class="tag">&lt;/<span class="name">Thing</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Thing</span> <span class="attr">className</span>=<span class="string">&#x27;something&#x27;</span>&gt;</span>The sun is shining...<span class="tag">&lt;/<span class="name">Thing</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Pretty nice day today.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Thing</span>&gt;</span>Don&#x27;t you think?<span class="tag">&lt;/<span class="name">Thing</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;something-else&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Thing</span>&gt;</span>Splendid.<span class="tag">&lt;/<span class="name">Thing</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4-예제3-Overriding-attrs"><a href="#2-4-예제3-Overriding-attrs" class="headerlink" title="2.4 예제3 : Overriding .attrs"></a>2.4 예제3 : Overriding .attrs</h2><ul><li><a href="https://styled-components.com/docs/basics#overriding-attrs">https://styled-components.com/docs/basics#overriding-attrs</a></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Input</span> = styled.<span class="property">input</span>.<span class="title function_">attrs</span>(<span class="function">(<span class="params">props</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="attr">size</span>: props.<span class="property">size</span> || <span class="string">&#x27;1em&#x27;</span>,</span><br><span class="line">&#125;))<span class="string">`</span></span><br><span class="line"><span class="string">  border: 2px solid palevioletred;</span></span><br><span class="line"><span class="string">  margin: <span class="subst">$&#123;(props) =&gt; props.size&#125;</span>;</span></span><br><span class="line"><span class="string">  padding: <span class="subst">$&#123;(props) =&gt; props.size&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input&#x27;s attrs will be applied first, and then this attrs obj</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PasswordInput</span> = <span class="title function_">styled</span>(<span class="title class_">Input</span>).<span class="title function_">attrs</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">&#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  // similarly, border will override Input&#x27;s border</span></span><br><span class="line"><span class="string">  border: 2px solid aqua;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">StyledComponentsExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Use Title and Wrapper like any other React component – except they&#x27;re styled!</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">&#x27;A bigger text input&#x27;</span> <span class="attr">size</span>=<span class="string">&#x27;2em&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* Notice we can still use the size attr from Input */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">PasswordInput</span> <span class="attr">placeholder</span>=<span class="string">&#x27;A bigger password input&#x27;</span> <span class="attr">size</span>=<span class="string">&#x27;2em&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-5-예제4-Animations"><a href="#2-5-예제4-Animations" class="headerlink" title="2.5 예제4 : Animations"></a>2.5 예제4 : Animations</h2><ul><li><a href="https://styled-components.com/docs/basics#animations">https://styled-components.com/docs/basics#animations</a></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled, &#123; keyframes &#125; <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rotate = keyframes<span class="string">`</span></span><br><span class="line"><span class="string">  from &#123;</span></span><br><span class="line"><span class="string">    transform: rotate(0deg);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  to &#123;</span></span><br><span class="line"><span class="string">    transform: rotate(360deg);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Rotate</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: inline-block;</span></span><br><span class="line"><span class="string">  animation: <span class="subst">$&#123;rotate&#125;</span> 2s linear infinite;</span></span><br><span class="line"><span class="string">  padding: 2rem 1rem;</span></span><br><span class="line"><span class="string">  font-size: 1.2rem;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">StyledComponentsExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Use Title and Wrapper like any other React component – except they&#x27;re styled!</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Rotate</span>&gt;</span><span class="symbol">&amp;lt;</span> 💅🏾 <span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">Rotate</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-6-예제5-Theme"><a href="#2-6-예제5-Theme" class="headerlink" title="2.6 예제5 : Theme"></a>2.6 예제5 : Theme</h2><ul><li><a href="https://styled-components.com/docs/advanced#theming">https://styled-components.com/docs/advanced#theming</a></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled, &#123; <span class="title class_">ThemeProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define our button, but with the use of props.theme this time</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  font-size: 1em;</span></span><br><span class="line"><span class="string">  margin: 1em;</span></span><br><span class="line"><span class="string">  padding: 0.25em 1em;</span></span><br><span class="line"><span class="string">  border-radius: 3px;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  /* Color the border and text with theme.main */</span></span><br><span class="line"><span class="string">  color: <span class="subst">$&#123;(props) =&gt; props.theme.color&#125;</span>;</span></span><br><span class="line"><span class="string">  border: 2px solid <span class="subst">$&#123;(props) =&gt; props.theme.borderColor&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define what props.theme will look like</span></span><br><span class="line"><span class="keyword">const</span> defaultTheme = &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">  <span class="attr">borderColor</span>: <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> redTheme = &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  <span class="attr">borderColor</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">StyledComponentsExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [theme, setTheme] = <span class="title function_">useState</span>(defaultTheme);</span><br><span class="line">  <span class="comment">// Use Title and Wrapper like any other React component – except they&#x27;re styled!</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setTheme(redTheme)&#125;&gt;red<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setTheme(defaultTheme)&#125;&gt;green<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ThemeProvider</span> <span class="attr">theme</span>=<span class="string">&#123;theme&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Normal<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Themed<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ThemeProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-7-예제-6-Helpers"><a href="#2-7-예제-6-Helpers" class="headerlink" title="2.7 예제 6 : Helpers"></a>2.7 예제 6 : Helpers</h2><ul><li><a href="https://styled-components.com/docs/api#helpers">https://styled-components.com/docs/api#helpers</a></li><li>전역 스타일(Global Style) 설정</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled, &#123; <span class="title class_">ThemeProvider</span>, createGlobalStyle &#125; <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define our button, but with the use of props.theme this time</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  font-size: 1em;</span></span><br><span class="line"><span class="string">  margin: 1em;</span></span><br><span class="line"><span class="string">  padding: 0.25em 1em;</span></span><br><span class="line"><span class="string">  border-radius: 3px;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  /* Color the border and text with theme.main */</span></span><br><span class="line"><span class="string">  color: <span class="subst">$&#123;(props) =&gt; props.theme.color&#125;</span>;</span></span><br><span class="line"><span class="string">  border: 2px solid <span class="subst">$&#123;(props) =&gt; props.theme.borderColor&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define what props.theme will look like</span></span><br><span class="line"><span class="keyword">const</span> defaultTheme = &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">  <span class="attr">borderColor</span>: <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> redTheme = &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  <span class="attr">borderColor</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">GlobalStyle</span> = createGlobalStyle<span class="string">`</span></span><br><span class="line"><span class="string">  button &#123;</span></span><br><span class="line"><span class="string">    background-color : pink;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">StyledComponentsExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [theme, setTheme] = <span class="title function_">useState</span>(defaultTheme);</span><br><span class="line">  <span class="comment">// Use Title and Wrapper like any other React component – except they&#x27;re styled!</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">GlobalStyle</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setTheme(redTheme)&#125;&gt;red<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setTheme(defaultTheme)&#125;&gt;green<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ThemeProvider</span> <span class="attr">theme</span>=<span class="string">&#123;theme&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Normal<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Themed<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ThemeProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>Other<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="3-Emotion"><a href="#3-Emotion" class="headerlink" title="3. Emotion"></a>3. Emotion</h1><ul><li><a href="https://emotion.sh/docs/introduction">https://emotion.sh/docs/introduction</a></li></ul><hr><h2 id="3-1-예제-공식문서-따라해보기"><a href="#3-1-예제-공식문서-따라해보기" class="headerlink" title="3.1 예제 : 공식문서 따라해보기"></a>3.1 예제 : 공식문서 따라해보기</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i @emotion/styled @emotion/react</span><br></pre></td></tr></table></figure><hr><h2 id="3-2-예제1-기본-사용법"><a href="#3-2-예제1-기본-사용법" class="headerlink" title="3.2 예제1 : 기본 사용법"></a>3.2 예제1 : 기본 사용법</h2><h3 id="3-2-1-App-js"><a href="#3-2-1-App-js" class="headerlink" title="3.2.1 App.js"></a>3.2.1 App.js</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">EmotionExample</span> <span class="keyword">from</span> <span class="string">&#x27;./components/EmotionExample/EmotionExample&#x27;</span>;</span><br><span class="line"><span class="comment">// import StyledComponentsExample from &#x27;./components/StyledComponentsExample/StyledComponentsExample&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;App&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">EmotionExample</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">StyledComponentsExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-EmotionExample"><a href="#3-2-2-EmotionExample" class="headerlink" title="3.2.2 EmotionExample"></a>3.2.2 EmotionExample</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/EmotionExample/EmotionExample.jsx</span></span><br><span class="line"><span class="comment">/** <span class="doctag">@jsxImportSource</span> <span class="doctag">@emotion</span>/react */</span></span><br><span class="line"><span class="keyword">import</span> &#123; css &#125; <span class="keyword">from</span> <span class="string">&#x27;@emotion/react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;@emotion/styled&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  padding: 32px;</span></span><br><span class="line"><span class="string">  background-color: hotpink;</span></span><br><span class="line"><span class="string">  font-size: 24px;</span></span><br><span class="line"><span class="string">  border-radius: 4px;</span></span><br><span class="line"><span class="string">  color: black;</span></span><br><span class="line"><span class="string">  font-weight: bold;</span></span><br><span class="line"><span class="string">  &amp;:hover &#123;</span></span><br><span class="line"><span class="string">    color: white;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> color = <span class="string">&#x27;white&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> style = css`<span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: hotpink;</span></span><br><span class="line"><span class="language-css">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SomeComponent</span> = (<span class="params">&#123; children &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">css</span>=<span class="string">&#123;style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Some hotpink text.</span></span><br><span class="line"><span class="language-xml">    &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> anotherStyle = <span class="title function_">css</span>(&#123;</span><br><span class="line">  <span class="attr">textDecoration</span>: <span class="string">&#x27;underline&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">P</span> = (<span class="params">props</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">css</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">margin:</span> <span class="attr">0</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">fontSize:</span> <span class="attr">12</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">lineHeight:</span> &#x27;<span class="attr">1.5</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">fontFamily:</span> &#x27;<span class="attr">Sans-Serif</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">color:</span> &#x27;<span class="attr">black</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#123;<span class="attr">...props</span>&#125; // &lt;<span class="attr">-</span> <span class="attr">props</span> <span class="attr">contains</span> <span class="attr">the</span> `<span class="attr">className</span>` <span class="attr">prop</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line"><span class="language-xml">);</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">const ArticleText = (props) =&gt; (</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">P</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">css</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">fontSize:</span> <span class="attr">14</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">fontFamily:</span> &#x27;<span class="attr">Georgia</span>, <span class="attr">serif</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">color:</span> &#x27;<span class="attr">darkgray</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#123;<span class="attr">...props</span>&#125; // &lt;<span class="attr">-</span> <span class="attr">props</span> <span class="attr">contains</span> <span class="attr">the</span> `<span class="attr">className</span>` <span class="attr">prop</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line"><span class="language-xml">);</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">const AnotherComponent = () =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">css</span>=<span class="string">&#123;[anotherStyle,</span> <span class="attr">style</span>]&#125;&gt;</span>Some text with an underline.<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">const danger = css`</span></span><br><span class="line"><span class="language-xml">  color: red;</span></span><br><span class="line"><span class="language-xml">`;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">const base = css`</span></span><br><span class="line"><span class="language-xml">  background-color: darkgreen;</span></span><br><span class="line"><span class="language-xml">  color: turquoise;</span></span><br><span class="line"><span class="language-xml">`;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">export default function EmotionExample() &#123;</span></span><br><span class="line"><span class="language-xml">  return (</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">css</span>=<span class="string">&#123;css</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">padding:</span> <span class="attr">32px</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">background-color:</span> <span class="attr">hotpink</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">font-size:</span> <span class="attr">24px</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">border-radius:</span> <span class="attr">4px</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &amp;<span class="attr">:hover</span> &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">color:</span> $&#123;<span class="attr">color</span>&#125;;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        Hover to change color.</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SomeComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">AnotherComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">P</span>&gt;</span>PPPPP<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ArticleText</span>&gt;</span>Article<span class="tag">&lt;/<span class="name">ArticleText</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">css</span>=<span class="string">&#123;base&#125;</span>&gt;</span>This will be turquoise<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">css</span>=<span class="string">&#123;[danger,</span> <span class="attr">base</span>]&#125;&gt;</span>This will be also be turquoise since the base styles overwrite the danger styles.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">css</span>=<span class="string">&#123;[base,</span> <span class="attr">danger</span>]&#125;&gt;</span>This will be red<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line"><span class="language-xml">  );</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>react에 특화 : @emotion&#x2F;react</li><li>css props : jsx를 대체</li><li>styled components : styled-component + @</li><li>composition : css안에서 css 사용</li></ul><hr><h2 id="3-3-예제2-Media-Queries"><a href="#3-3-예제2-Media-Queries" class="headerlink" title="3.3 예제2 : Media Queries"></a>3.3 예제2 : Media Queries</h2><p><a href="https://emotion.sh/docs/media-queries">https://emotion.sh/docs/media-queries</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/EmotionExample/EmotionExample.jsx</span></span><br><span class="line"><span class="comment">/** <span class="doctag">@jsxImportSource</span> <span class="doctag">@emotion</span>/react */</span></span><br><span class="line"><span class="keyword">import</span> &#123; css &#125; <span class="keyword">from</span> <span class="string">&#x27;@emotion/react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">EmotionExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">css</span>=<span class="string">&#123;css</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">font-size:</span> <span class="attr">30px</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          @<span class="attr">media</span> (<span class="attr">min-width:</span> <span class="attr">420px</span>) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">font-size:</span> <span class="attr">50px</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        Some text!</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3-예제3-Global-Styles"><a href="#3-3-예제3-Global-Styles" class="headerlink" title="3.3 예제3 : Global Styles"></a>3.3 예제3 : Global Styles</h2><p><a href="https://emotion.sh/docs/globals">https://emotion.sh/docs/globals</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/EmotionExample/EmotionExample.jsx</span></span><br><span class="line"><span class="comment">/** <span class="doctag">@jsxImportSource</span> <span class="doctag">@emotion</span>/react */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Global</span>, css &#125; <span class="keyword">from</span> <span class="string">&#x27;@emotion/react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">EmotionExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">css</span>=<span class="string">&#123;css</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">font-size:</span> <span class="attr">30px</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          @<span class="attr">media</span> (<span class="attr">min-width:</span> <span class="attr">420px</span>) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">font-size:</span> <span class="attr">50px</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Global</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">styles</span>=<span class="string">&#123;css</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">p</span> &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">color:</span> <span class="attr">hotpink</span> !<span class="attr">important</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        Some text!</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-4-예제4-Keyframes"><a href="#3-4-예제4-Keyframes" class="headerlink" title="3.4 예제4 : Keyframes"></a>3.4 예제4 : Keyframes</h2><ul><li><a href="https://emotion.sh/docs/keyframes">https://emotion.sh/docs/keyframes</a></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/EmotionExample/EmotionExample.jsx</span></span><br><span class="line"><span class="comment">/** <span class="doctag">@jsxImportSource</span> <span class="doctag">@emotion</span>/react */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Global</span>, css, keyframes &#125; <span class="keyword">from</span> <span class="string">&#x27;@emotion/react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bounce = keyframes<span class="string">`</span></span><br><span class="line"><span class="string">  from, 20%, 53%, 80%, to &#123;</span></span><br><span class="line"><span class="string">    transform: translate3d(0,0,0);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  40%, 43% &#123;</span></span><br><span class="line"><span class="string">    transform: translate3d(0, -30px, 0);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  70% &#123;</span></span><br><span class="line"><span class="string">    transform: translate3d(0, -15px, 0);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  90% &#123;</span></span><br><span class="line"><span class="string">    transform: translate3d(0,-4px,0);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">EmotionExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">css</span>=<span class="string">&#123;css</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">font-size:</span> <span class="attr">30px</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          @<span class="attr">media</span> (<span class="attr">min-width:</span> <span class="attr">420px</span>) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">font-size:</span> <span class="attr">50px</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Global</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">styles</span>=<span class="string">&#123;css</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">p</span> &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">color:</span> <span class="attr">hotpink</span> !<span class="attr">important</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        Some text!</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">css</span>=<span class="string">&#123;css</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">animation:</span> $&#123;<span class="attr">bounce</span>&#125; <span class="attr">2s</span> <span class="attr">ease</span> <span class="attr">infinite</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        some bouncing text!</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-5-예제5-Class-Names"><a href="#3-5-예제5-Class-Names" class="headerlink" title="3.5 예제5 : Class Names"></a>3.5 예제5 : Class Names</h2><p><a href="https://emotion.sh/docs/class-names">https://emotion.sh/docs/class-names</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/EmotionExample/EmotionExample.jsx</span></span><br><span class="line"><span class="comment">/** <span class="doctag">@jsxImportSource</span> <span class="doctag">@emotion</span>/react */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Global</span>, css, keyframes, <span class="title class_">ClassNames</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@emotion/react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bounce = keyframes<span class="string">`</span></span><br><span class="line"><span class="string">  from, 20%, 53%, 80%, to &#123;</span></span><br><span class="line"><span class="string">    transform: translate3d(0,0,0);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  40%, 43% &#123;</span></span><br><span class="line"><span class="string">    transform: translate3d(0, -30px, 0);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  70% &#123;</span></span><br><span class="line"><span class="string">    transform: translate3d(0, -15px, 0);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  90% &#123;</span></span><br><span class="line"><span class="string">    transform: translate3d(0,-4px,0);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this might be a component from npm that accepts a wrapperClassName prop</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">SomeComponent</span> = (<span class="params">props</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;props.wrapperClassName&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    in the wrapper!</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;props.className&#125;</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">EmotionExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">css</span>=<span class="string">&#123;css</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">font-size:</span> <span class="attr">30px</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          @<span class="attr">media</span> (<span class="attr">min-width:</span> <span class="attr">420px</span>) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">font-size:</span> <span class="attr">50px</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Global</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">styles</span>=<span class="string">&#123;css</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">p</span> &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">color:</span> <span class="attr">hotpink</span> !<span class="attr">important</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        Some text!</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">css</span>=<span class="string">&#123;css</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">animation:</span> $&#123;<span class="attr">bounce</span>&#125; <span class="attr">2s</span> <span class="attr">ease</span> <span class="attr">infinite</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        some bouncing text!</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ClassNames</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;(&#123; css, cx &#125;) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">SomeComponent</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">wrapperClassName</span>=<span class="string">&#123;css(&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">green</span>&#x27; &#125;)&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&#123;css</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">color:</span> <span class="attr">hotpink</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            from children!!</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">SomeComponent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ClassNames</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-6-Styled-Component-vs-Emotion"><a href="#3-6-Styled-Component-vs-Emotion" class="headerlink" title="3.6 Styled Component vs Emotion"></a>3.6 Styled Component vs Emotion</h2><ul><li>기능 : Fallbacks, &amp;, Global, keyframes</li><li>styled-component, Emotion 라이브러리 처음에는 조금 달랐지만, 이제 거의 유사해졌다.</li><li><a href="https://github.com/jsjoeio/styled-components-vs-emotion">https://github.com/jsjoeio/styled-components-vs-emotion</a></li><li><a href="https://npmtrends.com/@emotion/core-vs-@emotion/react-vs-styled-components">https://npmtrends.com/@emotion/core-vs-@emotion/react-vs-styled-components</a><ul><li>trend : emotion이 우세</li><li>사이즈 &#x2F; 속도 : emotion이 우세</li></ul></li><li>styled-components도 css를 서포트</li></ul><hr><h1 id="4-Sass"><a href="#4-Sass" class="headerlink" title="4. Sass"></a>4. Sass</h1><ul><li><a href="https://sass-lang.com/">Sass 공식 사이트</a><ul><li>CSS을 확장하는 Preprocessing</li><li><a href="https://sass-lang.com/guide">Sass 가이드</a></li></ul></li><li>cf. <a href="https://developer.mozilla.org/ko/docs/Glossary/CSS_preprocessor">MDN CSS 전처리기</a></li></ul><hr><h2 id="4-1-예제-가이드-따라해보기"><a href="#4-1-예제-가이드-따라해보기" class="headerlink" title="4.1 예제 : 가이드 따라해보기"></a>4.1 예제 : 가이드 따라해보기</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install sass</span><br></pre></td></tr></table></figure><hr><h3 id="4-1-1-App-js"><a href="#4-1-1-App-js" class="headerlink" title="4.1.1 App.js"></a>4.1.1 App.js</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Example</span> <span class="keyword">from</span> <span class="string">&#x27;./components/SassExample/Example&#x27;</span>;</span><br><span class="line"><span class="comment">// import EmotionExample from &#x27;./components/EmotionExample/EmotionExample&#x27;;</span></span><br><span class="line"><span class="comment">// import StyledComponentsExample from &#x27;./components/StyledComponentsExample/StyledComponentsExample&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;App&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Example</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">EmotionExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">StyledComponentsExample</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-1-2-Example-jsx"><a href="#4-1-2-Example-jsx" class="headerlink" title="4.1.2 Example.jsx"></a>4.1.2 Example.jsx</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Example.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;font&#x27;</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-2-예제1-Variables"><a href="#4-2-예제1-Variables" class="headerlink" title="4.2 예제1 : Variables"></a>4.2 예제1 : Variables</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.scss</span></span><br><span class="line"><span class="variable">$font-stack</span>: Helvetica, sans-serif;</span><br><span class="line"><span class="variable">$primary-color</span>: red;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.font</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">100%</span> <span class="variable">$font-stack</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-3-예제2-Nesting"><a href="#4-3-예제2-Nesting" class="headerlink" title="4.3 예제2 : Nesting"></a>4.3 예제2 : Nesting</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Example.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;font&#x27;</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span>&gt;</span>456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">a</span>&gt;</span>456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.scss</span></span><br><span class="line"><span class="comment">// 1. Variables</span></span><br><span class="line"><span class="variable">$font-stack</span>: Helvetica, sans-serif;</span><br><span class="line"><span class="variable">$primary-color</span>: red;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.font</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">100%</span> <span class="variable">$font-stack</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">100%</span> <span class="variable">$font-stack</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Nesting</span></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-4-예제3-Modules"><a href="#4-4-예제3-Modules" class="headerlink" title="4.4 예제3 : Modules"></a>4.4 예제3 : Modules</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/foundation/_base.scss</span></span><br><span class="line"><span class="variable">$font-stack</span>: Helvetica, sans-serif;</span><br><span class="line"><span class="variable">$primary-color</span>: hotpink;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.base</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">100%</span> <span class="variable">$font-stack</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.scss</span></span><br><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;foundation/_base.scss&#x27;</span>; <span class="comment">// 3. Modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 생략</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Modules</span></span><br><span class="line"><span class="selector-class">.inverse</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: base.<span class="variable">$primary-color</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Example.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;font&#x27;</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span>&gt;</span>456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">a</span>&gt;</span>456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;base&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;inverse&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-5-예제4-Mixins"><a href="#4-5-예제4-Mixins" class="headerlink" title="4.5 예제4 : Mixins"></a>4.5 예제4 : Mixins</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.scss</span></span><br><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;foundation/_base.scss&#x27;</span>; <span class="comment">// 3. Modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 생략</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Mixins</span></span><br><span class="line"><span class="keyword">@mixin</span> theme(<span class="variable">$theme</span>: DarkGray) &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$theme</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="variable">$theme</span>, <span class="number">0.25</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.info</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> theme;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> theme(<span class="variable">$theme</span>: DarkRed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> theme(<span class="variable">$theme</span>: DarkGreen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Example.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;font&#x27;</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span>&gt;</span>456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">a</span>&gt;</span>456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;base&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;inverse&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;info&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;alert&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;success&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-6-예제5-Extend-x2F-Inheritance"><a href="#4-6-예제5-Extend-x2F-Inheritance" class="headerlink" title="4.6 예제5 : Extend&#x2F;Inheritance"></a>4.6 예제5 : Extend&#x2F;Inheritance</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.scss</span></span><br><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;foundation/_base.scss&#x27;</span>; <span class="comment">// 3. Modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 생략</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. Extend/Inheritance</span></span><br><span class="line"><span class="comment">/* This CSS will print because %message-shared is extended. */</span></span><br><span class="line">%message-shared &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.message</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %message-shared;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success2</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %message-shared;</span><br><span class="line">  <span class="attribute">border-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %message-shared;</span><br><span class="line">  <span class="attribute">border-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.warning</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %message-shared;</span><br><span class="line">  <span class="attribute">border-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Example.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;font&#x27;</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span>&gt;</span>456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">a</span>&gt;</span>456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;base&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;inverse&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;info&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;alert&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;success&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;message&#x27;</span>&gt;</span>message<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;success2&#x27;</span>&gt;</span>success2,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;error&#x27;</span>&gt;</span>error,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;warning&#x27;</span>&gt;</span>warning,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-7-예제6-if-and-else"><a href="#4-7-예제6-if-and-else" class="headerlink" title="4.7 예제6 : @if and @else"></a>4.7 예제6 : @if and @else</h2><ul><li><a href="https://sass-lang.com/documentation/at-rules/control/if">https://sass-lang.com/documentation/at-rules/control/if</a></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.scss</span></span><br><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;foundation/_base.scss&#x27;</span>; <span class="comment">// 3. Modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 생략</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. @if and @else</span></span><br><span class="line"><span class="keyword">@mixin</span> avatar(<span class="variable">$size</span>, <span class="variable">$circle</span>: false) &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$size</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$size</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: aqua;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$circle</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="variable">$size</span> / <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.square-av</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> avatar(<span class="number">100px</span>, <span class="variable">$circle</span>: false);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.circle-av</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> avatar(<span class="number">100px</span>, <span class="variable">$circle</span>: true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Example.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;font&#x27;</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span>&gt;</span>456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">a</span>&gt;</span>456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;base&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;inverse&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;info&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;alert&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;success&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;message&#x27;</span>&gt;</span>message<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;success2&#x27;</span>&gt;</span>success2,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;error&#x27;</span>&gt;</span>error,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;warning&#x27;</span>&gt;</span>warning,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;square-av&#x27;</span>&gt;</span>square-av,<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;circle-av&#x27;</span>&gt;</span>circle-av,<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-8-예제7-function"><a href="#4-8-예제7-function" class="headerlink" title="4.8 예제7 : @function"></a>4.8 예제7 : @function</h2><p><a href="https://sass-lang.com/documentation/at-rules/function">https://sass-lang.com/documentation/at-rules/function</a></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.scss</span></span><br><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;foundation/_base.scss&#x27;</span>; <span class="comment">// 3. Modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 셍략</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @function</span></span><br><span class="line"><span class="keyword">@function</span> pow(<span class="variable">$base</span>, <span class="variable">$exponent</span>) &#123;</span><br><span class="line">  <span class="variable">$result</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">@for</span> $_ from <span class="number">1</span> through <span class="variable">$exponent</span> &#123;</span><br><span class="line">    <span class="variable">$result</span>: <span class="variable">$result</span> * <span class="variable">$base</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="built_in">pow</span>(<span class="number">4</span>, <span class="number">3</span>) * <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Example.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;font&#x27;</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span>&gt;</span>456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">a</span>&gt;</span>456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;base&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;inverse&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;info&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;alert&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;success&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;message&#x27;</span>&gt;</span>message<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;success2&#x27;</span>&gt;</span>success2,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;error&#x27;</span>&gt;</span>error,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;warning&#x27;</span>&gt;</span>warning,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;square-av&#x27;</span>&gt;</span>square-av,<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;circle-av&#x27;</span>&gt;</span>circle-av,<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;sidebar&#x27;</span>&gt;</span>sidebar,<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-9-에제8-error"><a href="#4-9-에제8-error" class="headerlink" title="4.9 에제8 : @error"></a>4.9 에제8 : @error</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.scss</span></span><br><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;foundation/_base.scss&#x27;</span>; <span class="comment">// 3. Modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 생략</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @error</span></span><br><span class="line"><span class="keyword">@mixin</span> reflexive-position(<span class="variable">$property</span>, <span class="variable">$value</span>) &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$property</span> != left <span class="keyword">and</span> <span class="variable">$property</span> != right &#123;</span><br><span class="line">    <span class="keyword">@error</span> <span class="string">&quot;Property #&#123;$property&#125; must be either left or right.&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$left-value</span>: <span class="built_in">if</span>(<span class="variable">$property</span> == right, initial, <span class="variable">$value</span>);</span><br><span class="line">  <span class="variable">$right-value</span>: <span class="built_in">if</span>(<span class="variable">$property</span> == right, <span class="variable">$value</span>, initial);</span><br><span class="line"></span><br><span class="line">  <span class="attribute">left</span>: <span class="variable">$left-value</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="variable">$right-value</span>;</span><br><span class="line">  <span class="selector-attr">[dir=<span class="string">&#x27;rtl&#x27;</span>]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="variable">$right-value</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="variable">$left-value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> reflexive-position(top, <span class="number">12px</span>); <span class="comment">// 에러날 곳을 띄워줄 수 있다.</span></span><br><span class="line">  <span class="comment">//       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span><br><span class="line">  <span class="comment">// Error: Property top must be either left or right.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>뒤 예제를 위해 확인이 끝나면 주석 처리</p><hr><h2 id="4-10-예제9-Interpolation"><a href="#4-10-예제9-Interpolation" class="headerlink" title="4.10 예제9 : Interpolation"></a>4.10 예제9 : Interpolation</h2><p><a href="https://sass-lang.com/documentation/style-rules/declarations#interpolation">https://sass-lang.com/documentation/style-rules/declarations#interpolation</a></p><p>벤더 프리픽스</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.scss</span></span><br><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;foundation/_base.scss&#x27;</span>; <span class="comment">// 3. Modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 생략</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Interpolation</span></span><br><span class="line"><span class="keyword">@mixin</span> prefix(<span class="variable">$property</span>, <span class="variable">$value</span>, <span class="variable">$prefixes</span>) &#123;</span><br><span class="line">  <span class="keyword">@each</span> <span class="variable">$prefix</span> in <span class="variable">$prefixes</span> &#123;</span><br><span class="line">    -#&#123;<span class="variable">$prefix</span>&#125;-#&#123;<span class="variable">$property</span>&#125;: <span class="variable">$value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  #&#123;<span class="variable">$property</span>&#125;: <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gray</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> prefix(filter, grayscale(<span class="number">50%</span>), moz webkit o ms);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> prefix(background, linear-gradient(red, yellow), moz webkit o ms);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Example.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;font&#x27;</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span>&gt;</span>456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">a</span>&gt;</span>456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;base&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;inverse&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;info&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;alert&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;success&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;message&#x27;</span>&gt;</span>message<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;success2&#x27;</span>&gt;</span>success2,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;error&#x27;</span>&gt;</span>error,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;warning&#x27;</span>&gt;</span>warning,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;square-av&#x27;</span>&gt;</span>square-av,<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;circle-av&#x27;</span>&gt;</span>circle-av,<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;sidebar&#x27;</span>&gt;</span>sidebar,<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;gray&#x27;</span>&gt;</span>Grays<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;button&#x27;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-11-예제10-in-sassscript"><a href="#4-11-예제10-in-sassscript" class="headerlink" title="4.11 예제10 : in-sassscript"></a>4.11 예제10 : in-sassscript</h2><p><a href="https://sass-lang.com/documentation/interpolation#in-sassscript">https://sass-lang.com/documentation/interpolation#in-sassscript</a></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.scss</span></span><br><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;foundation/_base.scss&#x27;</span>; <span class="comment">// 3. Modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 생략</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// In SassScript</span></span><br><span class="line"><span class="keyword">@mixin</span> inline-animation(<span class="variable">$duration</span>) &#123;</span><br><span class="line">  <span class="variable">$name</span>: inline-#&#123;<span class="built_in">unique-id</span>()&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@keyframes</span> #&#123;<span class="variable">$name</span>&#125; &#123;</span><br><span class="line">    <span class="keyword">@content</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">animation-name</span>: <span class="variable">$name</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="variable">$duration</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pulse</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> inline-animation(<span class="number">2s</span>) &#123;</span><br><span class="line">    from &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    &#125;</span><br><span class="line">    to &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/SassExample/Example.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Example.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;font&#x27;</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span>&gt;</span>456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">a</span>&gt;</span>456<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;base&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;inverse&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;info&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;alert&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;success&#x27;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;message&#x27;</span>&gt;</span>message<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;success2&#x27;</span>&gt;</span>success2,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;error&#x27;</span>&gt;</span>error,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;warning&#x27;</span>&gt;</span>warning,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;square-av&#x27;</span>&gt;</span>square-av,<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;circle-av&#x27;</span>&gt;</span>circle-av,<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;sidebar&#x27;</span>&gt;</span>sidebar,<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;gray&#x27;</span>&gt;</span>Grays<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;button&#x27;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;pulse&#x27;</span>&gt;</span>pulse<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="5-PostCSS"><a href="#5-PostCSS" class="headerlink" title="5. PostCSS"></a>5. PostCSS</h1><ul><li><a href="https://postcss.org/">https://postcss.org/</a></li><li>일반 CSS 파일은 똑같은 class명이 존재할 때, 나중에 정의된 똑같은 class명이 앞에 정의된 class명을 덮어버림</li><li>이렇게 이름 충돌이 발생하면, CSS BEM 규칙을 적용하거나 하면되는데, 이렇게 이름을 일일히 지정해주면 귀찮음</li><li>그래서 이를 해결하기 위해 PostCSS가 등장했는데, 일반 css파일에 <code>파일명.module.css</code>이라고 붙여두면,<ul><li>class명이 똑같더라도 덮어씌워주지 않습니다.</li></ul></li></ul><hr><h2 id="5-1-예제"><a href="#5-1-예제" class="headerlink" title="5.1 예제"></a>5.1 예제</h2><p>버튼 컴포넌트 2개 생성<br>버튼1</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./Button1.module.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Button1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#123;styles.button&#125;</span>&gt;</span>Button1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Button1.module.css */</span></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>버튼2</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./Button2.module.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Button2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#123;styles.button&#125;</span>&gt;</span>Button2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Button2.module.css */</span></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: plum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App에 적용</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button1</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Button1&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button2</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Button2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button1</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button2</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="6-스타일링-라이브러리-정리"><a href="#6-스타일링-라이브러리-정리" class="headerlink" title="6. 스타일링 라이브러리 정리"></a>6. 스타일링 라이브러리 정리</h1><p>어떤 라이브러리를 선택할 지는 개발자(본인)에게 달려있음</p><ul><li>반응형 웹을 대응하기 위해 media query를 많이 쓰고, 딱히 design system이 없던 곳에서 sass</li><li>개발 편의성을 생각하면 CSS in JS를 쓸듯 emotion</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-15-라이브러리 생태계, 날짜 라이브러리</title>
      <link href="/2022/12/28/Front-React-Basic-15-Ecosystem/"/>
      <url>/2022/12/28/Front-React-Basic-15-Ecosystem/</url>
      
        <content type="html"><![CDATA[<h1 id="1-라이브러리-vs-프레임워크"><a href="#1-라이브러리-vs-프레임워크" class="headerlink" title="1. 라이브러리 vs 프레임워크"></a>1. 라이브러리 vs 프레임워크</h1><ul><li><code>라이브러리</code>는 개발 편의를 위한 도구의 모음<ul><li>e.g. 라이브러리는 공구</li><li>리액트는 도구 모음</li><li>이미 잘 만들어둔 도구들을 가져다가 쓰면서 리액트 생태계의 이점을 누리자</li><li>리액트와 밀접하게 관련된 라이브러리도 있고, 그렇지 않은 라이브러리도 있음</li><li>라이브러리의 사용법을 익히기 보다 라이브러리를 찾고&#x2F;적용하는 과정을 익혀 혼자 할 수 있는 힘을 기르자</li></ul></li><li><code>프레임워크</code>는 기반 구조까지 잡혀있음<ul><li>e.g. 프레임워크는 공장</li></ul></li></ul><hr><h1 id="2-라이브러리-적용-과정"><a href="#2-라이브러리-적용-과정" class="headerlink" title="2. 라이브러리 적용 과정"></a>2. 라이브러리 적용 과정</h1><p>필요 &gt; 검색 &gt; 사용법 파악 &gt; 적용</p><ul><li>필요<ul><li>특정 기능이 필요해짐(직접 구현하기에는 조금 벅참)</li><li>더 나은 도구가 필요</li><li>트렌드에 따른 새로운 기술에 대한 호기심</li></ul></li><li>검색<ul><li>필요 그대로를 검색</li><li>github &#x2F; npm trends &#x2F; 프론트엔드 커뮤니티 &#x2F; 기술 블로그</li><li>유사한 라이브러리들을 후보로 비교(기능 &#x2F; 성능 &#x2F; 사이즈 &#x2F; 인기 &#x2F; 최신 …)</li></ul></li><li>사용법 파악<ul><li>공식 문서</li><li>github 코드 검색(실제 용례)</li><li>기술 블로그의 적용하기 예제</li></ul></li><li>적용<ul><li>POC(Proof of concept)</li><li>프로젝트 (일부&#x2F;전체)에 적용</li></ul></li></ul><hr><h1 id="3-날짜-라이브러리"><a href="#3-날짜-라이브러리" class="headerlink" title="3. 날짜 라이브러리"></a>3. 날짜 라이브러리</h1><h2 id="3-1-Moment"><a href="#3-1-Moment" class="headerlink" title="3.1 Moment"></a>3.1 Moment</h2><p><a href="https://momentjs.com/">Moment 공식문서</a></p><ul><li>2011년부터~ 명실상부 Date 라이브러리 선두였으나,</li><li>새로운 자바스크립트의 흐름에 맞지 않아 더이상 업데이트 안하기를 선언</li><li>제일 큰 이슈는 사이즈<ul><li>tree shaking 알고리즘이 제대로 워킹하지 않음</li></ul></li><li>다른 라이브러리들을 추천함(Luxon &#x2F; Day.js &#x2F; date-fns &#x2F; js-Joda)</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i moment</span><br><span class="line">$ npm i moment-timezone</span><br></pre></td></tr></table></figure><hr><h2 id="3-2-Day-js"><a href="#3-2-Day-js" class="headerlink" title="3.2 Day.js"></a>3.2 Day.js</h2><p><a href="https://day.js.org/">Day.js 공식문서</a></p><ul><li>가볍다</li><li>문서도 정갈</li><li>간단한 기능들을 적용할때는 좋을 듯</li><li>써보다가 필요한 기능이 추가로 있다면 다른 라이브러리 고려</li></ul><hr><h2 id="3-3-date-fns"><a href="#3-3-date-fns" class="headerlink" title="3.3 date-fns"></a>3.3 date-fns</h2><p><a href="https://date-fns.org/">date-fns 공식문서</a></p><ul><li>커버리지가 제일 높은 라이브러리</li><li>Most comprehensive(가장 포괄적인)</li><li>Modular support tree-shakin</li><li>Immutable &amp; Pure &amp; FP &amp; I18</li></ul><hr><h2 id="3-4-라이브러리를-고르는-기준"><a href="#3-4-라이브러리를-고르는-기준" class="headerlink" title="3.4 라이브러리를 고르는 기준"></a>3.4 라이브러리를 고르는 기준</h2><ul><li>다양한 기준이 존재<ul><li>기능 &#x2F; 성능 &#x2F; 번들 사이즈 &#x2F; tree shaking(안쓰는 기능은 빌드하지 않기)</li><li>문서 가독성 &#x2F; 인기 &#x2F; 관리 상태(최근 관리) &#x2F; 관리 주체</li></ul></li><li>기준을 토대로 Time &#x2F; Date 라이브러리를 고른다면?<ul><li>가벼운게 최우선이라면 Day.js</li><li>FP 패러다임을 따르거나 tree-shaking이 필요하다면 date-fns</li></ul></li><li>Moment 안좋음<ul><li>기능 &#x2F; 성능 &#x2F; Mutable so so</li><li>사이즈 &#x2F; tree shaking BAD</li><li>관리 BAD</li><li>문서 가독성 BAD</li></ul></li><li>Dayjs 중간<ul><li>기능 &#x2F; 성능 OK</li><li>사이즈 GOOD &#x2F; tree shaking BAD</li><li>관리 GOOD</li><li>문서 가독성 GOOD</li></ul></li><li>date-fns 좋음<ul><li>기능 &#x2F; 성능 OK</li><li>사이즈 GOOD &#x2F; tree shaking GOOD</li><li>관리 GOOD</li><li>문서 가독성 GOOD</li></ul></li><li>라이브러리를 선택하는데 도움을 주는 도구들<ul><li><a href="https://bundlephobia.com/">사이즈, bundlephobia</a></li><li><a href="https://npmtrends.com/date-fns-vs-dayjs-vs-luxon-vs-moment">인기, npm trend의 moment, day.js, date-fns 비교</a></li><li><a href="https://github.com/you-dont-need/You-Dont-Need-Momentjs/blob/master/README.md">기능 및 성능</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>용어-CI/CD</title>
      <link href="/2022/12/27/Terminology-CICD/"/>
      <url>/2022/12/27/Terminology-CICD/</url>
      
        <content type="html"><![CDATA[<h1 id="1-CI-x2F-CD"><a href="#1-CI-x2F-CD" class="headerlink" title="1. CI&#x2F;CD"></a>1. CI&#x2F;CD</h1><p>출처 : 드림코딩 (<a href="https://youtu.be/0Emq5FypiMM">https://youtu.be/0Emq5FypiMM</a>)</p><p>빠르게 변하는 시장과 고객의 요구에 빠르게 반응해서 제품을 출시, 업데이트할 것인가는 중요한 문제입니다.<br>바로 이것을 위해서 세계적으로 많은 기업들이 CI&#x2F;CD를 개발 프로세스로 사용하고 있습니다.<br>대부분의 회사에서 CI&#x2F;CD 환경에서 일하고 있기 때문에 개발자이거나 소프트웨어 제품 관련 일을 한다면, 꼭 알아야 합니다.</p><p><code>CI/CD</code>는 간단하게 말해,</p><ul><li>어플리케이션 개발 단계부터 배포까지의 모든 단계들을 자동화를 통해,</li><li>효율적이고 빠르게 사용자에게 빈번히 배포하도록 만드는 것을 의미합니다.</li><li><code>CI (Continuous Integration, 지속적인 통합)</code></li><li><code>CD (Continuous Delivery, 지속적인 제공)</code> or <code>Continuous Deployment=배포)</code></li></ul><hr><h1 id="2-CI-지속적인-통합"><a href="#2-CI-지속적인-통합" class="headerlink" title="2. CI : 지속적인 통합"></a>2. CI : 지속적인 통합</h1><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CI%26CD_1.jpeg" alt="CI&amp;CD_1"></p><p>버그 수정이나 새로 만드는 기능들이 매일 Repository에 주기적으로 빌드되고 테스트되어서 Merge되는 것을 말합니다.<br>1991년 Grady Booch에 의해서 처음으로 사용되어 지다가, 나중에 <code>extreme programming</code>방법론에 채택됩니다.<br>CI는 2가지 포인트가 있습니다.</p><ol><li>코드 변경사항을 <strong>주기적으로 빈번하게 머지</strong>해야 한다.<ul><li>예를 들어, 두 개발자 오랜 기간 머지하지 않고, 머지하려고 하면 코드 충돌이 많아 어디서부터 해결할지 문제</li></ul></li><li>통합을 위한 단계(빌드, 테스트, 머지)의 <strong>자동화</strong><ul><li>주기적으로 머지된 코드 변경사항이 자동으로 빌드되어서 성공적으로 동작하는지 확인해야 함</li><li>새로 추가된 변경사항 뿐만 아니라 기존 시스템의 다른 버그를 처리하지는 않았는지 자동으로 테스트도 되어야 함</li></ul></li></ol><hr><h2 id="2-1-장점"><a href="#2-1-장점" class="headerlink" title="2.1 장점"></a>2.1 장점</h2><p>이렇게 CI 원칙을 따랐을 떄, 장점은 다음과 같습니다.</p><ul><li>주기적으로 머지하기 때문에, 머지 충돌을 피할 수 있어 개발 생산성 향상</li><li>머지되는 모든 코드들은 자동으로 빌드되고 테스트되기 때문에 코드 결함이나 문제점이 빠르게 발견될 수 있음</li><li>발생한 결함은 빠르게 수정이 가능<ul><li>주기적으로 머지를 하기 위해서는 코드의 변경사항이 작기 때문에,</li><li>문제를 수정할 떄도 조금 더 고립된 작은 단위의 문제를 확인이 가능</li></ul></li><li>위 장점들로 조금 더 나은 코드의 퀄리티를 가질 수 있음</li></ul><hr><h1 id="3-CD"><a href="#3-CD" class="headerlink" title="3. CD"></a>3. CD</h1><p>CD는 2가지 종류가 있습니다. 각각 서로 연관이 있고, 섞어서 사용하는 경우가 있기에 비슷하다고 보면 됩니다.</p><ul><li>Continuous Delivery, 지속적인 제공</li><li>Continuous Deployment, 지속적인 배포</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CI%26CD_2.jpeg" alt="CI&amp;CD_2"></p><p>예를 들어, CI를 통해 주기적으로 머지된 코드의 변경사항들이 자동으로 빌드되고, 테스트되면,<br>배포하는 단계에서 배포(릴리즈)할 준비과정을 거치고, 준비된 릴리즈가 괜찮은지 정상적인지 직접 개발자나 검증팀이 검증한 다음에,<br>최종적으로 배포해도 되겠다고 판단하면, 수동적으로 배포하는 단계를 <code>Continuous Delivery</code>라고 합니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CI%26CD_3.jpeg" alt="CI&amp;CD_3"></p><p>또는 릴리즈가 준비되자 마자 사용자에게 자동으로 배포할 수도 있습니다.<br>이렇게 배포를 자동화하는 단계를 <code>Continuous Deployment</code>라고 합니다.<br>Delivery와 차이는 최종 배포단계가 자동화되었는지 유무에 따라 구분할 수 있습니다.</p><p>이런 모든 과정을 어떻게 할 지는 회사마다, 팀마다 다릅니다. 회사마다 어느정도의 얼마만큼 자동화할지 달라지기 때문에,<br>모든 회사가 똑같은 CI&#x2F;CD과정을 거치지 않습니다.</p><hr><h1 id="4-CI-x2F-CD-파이프라인-정리"><a href="#4-CI-x2F-CD-파이프라인-정리" class="headerlink" title="4. CI&#x2F;CD 파이프라인 정리"></a>4. CI&#x2F;CD 파이프라인 정리</h1><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/CI%26CD_4.jpeg" alt="CI&amp;CD_4"></p><ul><li>개발자가 작은 단위로 기능을 나누어 주기적으로 main repository에 build하고 테스트</li><li>테스트 과정을 거쳐서 릴리즈 준비를 하고, 여기서 수동 또는 자동으로 최종 배포를 거칩니다.</li></ul><hr><h1 id="5-CI-x2F-CD를-위한-툴"><a href="#5-CI-x2F-CD를-위한-툴" class="headerlink" title="5. CI&#x2F;CD를 위한 툴"></a>5. CI&#x2F;CD를 위한 툴</h1><ul><li>Jenkins<ul><li>가장 많이 사용되는 툴 중 하나</li><li>지속적 통합과 지속적 배포를 지원</li><li>개발한 프로그램의 빌드, 테스트, 패키지화, 배포 단계를 모두 자동화해 개발 단계를 표준화</li><li>개발된 코드의 빠른 적용과 효과적인 관리를 통해 개발 생산성을 높이는데 초점</li></ul></li><li>Buildkite<ul><li>가장 많이 사용되는 툴 중 하나</li></ul></li><li>Github Actions<ul><li>요즘 많이 사용되는 툴</li></ul></li><li>GitLab CI&#x2F;CD</li><li>Bitbucket Pipelins</li><li>circleci</li><li>… 다양한 툴들이 존재</li></ul>]]></content>
      
      
      <categories>
          
          <category> 정보 </category>
          
          <category> Terminology(용어) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Terminology(용어) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>용어-서버사이드 렌더링(SSR) (ft.CSR, SSR, SSG)</title>
      <link href="/2022/12/24/Terminology-SSR/"/>
      <url>/2022/12/24/Terminology-SSR/</url>
      
        <content type="html"><![CDATA[<h1 id="L1-웹의-역사-SPA-시대까지"><a href="#L1-웹의-역사-SPA-시대까지" class="headerlink" title="L1 웹의 역사 (SPA 시대까지)"></a>L1 웹의 역사 (SPA 시대까지)</h1><p>출처 : 드림코딩 (<a href="https://youtu.be/iZ9csAfU5Os">https://youtu.be/iZ9csAfU5Os</a>)</p><hr><h2 id="1-1-1990년-전까지-Static-Sties"><a href="#1-1-1990년-전까지-Static-Sties" class="headerlink" title="1.1 1990년 전까지 : Static Sties"></a>1.1 1990년 전까지 : Static Sties</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/SSR_1.jpeg" alt="SSR_1"></p><p>1990년 중반까지는 모두 다 Static Sites였습니다.<br>서버에 이미 잘 만들어진 HTML문서들이 있고, 사용자가 브라우저에서 Hello.com같은 주소에 접속하면,<br>서버에 이미 배포되어져 있는 HTML 문서를 받아와서 보여주는 형식이죠.</p><p>문제점은 페이지 내 다른 링크를 클릭하면, 다시 서버에서 해당 페이지의 HTML을 받아와서 페이지 전체가 업데이트 되어야 합니다.</p><hr><h2 id="1-2-1996년-iframe"><a href="#1-2-1996년-iframe" class="headerlink" title="1.2 1996년 : iframe"></a>1.2 1996년 : iframe</h2><p>1996년, 문서 내에서 또 다른 문서를 담을 수 있는 iframe 태그가 도입되었고,<br>페이지 내에서 부분적으로 문서를 받아와서 업데이트 할 수 있게 됩니다.</p><hr><h2 id="1-3-1998년-XMLHttpRequest"><a href="#1-3-1998년-XMLHttpRequest" class="headerlink" title="1.3 1998년 : XMLHttpRequest"></a>1.3 1998년 : XMLHttpRequest</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/SSR_2.jpeg" alt="SSR_2"></p><p>1998년, 현재 많이 쓰는 fetch API의 원조, XMLHttpRequest API가 개발되어,<br>HTML 문서 전체가 아니라 JSON과 같은 포맷으로 서버에서 가볍게 필요한 데이터만 받아올 수 있게 됩니다.<br>그 데이터를 JavaScript를 이용해서, 동적으로 HTML 요소를 생성해서, 페이지에 업데이트하는 방식이죠.</p><hr><h2 id="1-4-2005년-AJAX"><a href="#1-4-2005년-AJAX" class="headerlink" title="1.4 2005년 : AJAX"></a>1.4 2005년 : AJAX</h2><p>2005년, XMLHttpRequest API 방식이 공식적인 AJAX라는 이름을 가지게 되고,<br>구글에서 AJAX를 이용해서 Gmail, Google Maps같은 서비스 등의 서비스를 만들기 시작합니다.<br>이것이 현재 널리 쓰이고 있는 <code>SPA(Single Page Application)</code>입니다.</p><ul><li>사용자가 한 페이지 내에서 머무르면서, <strong>필요한 데이터를 서버에서 받아와서, 부분적으로만 업데이트</strong>하는 방식</li><li>이 방식으로 하나의 어플리케이션을 사용하듯, 웹 사이트에서도 사용성이 조금씩 좋아짐</li></ul><hr><h1 id="L2-CSR-Client-Side-Rendering"><a href="#L2-CSR-Client-Side-Rendering" class="headerlink" title="L2 CSR (Client Side Rendering)"></a>L2 CSR (Client Side Rendering)</h1><p>이런 SPA트렌드와 사용자들의 PC 성능이 점차 좋아져서, 많은 것들을 무리없이 처리할 수 있게 되었고,<br>JS도 표준화가 잘 되면서, 강력한 커뮤니티를 바탕으로 Angular, React, Vue같은 프레임워크가 나와서,<br><code>CSR(Client Side Rendering) </code>시대로 접어듭니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/SSR_3.jpeg" alt="SSR_3"></p><p>CSR을 쉽게 말하자면, <strong>클라이언트측에서 다 해결하는 걸</strong> 말합니다.<br>서버에서 index.html을 클라이언트에 보내주면, 어플리케이션에서 필요한 링크들만 들어있습니다.<br>HTML은 텅텅 비어있기 때문에 처음 접속하면, 빈 화면만 보이고, 다시 링크된 어플리케이션 JavaScript를 서버로부터 다운로드 받습니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/SSR_4.jpeg" alt="SSR_4"></p><p>다운로드한 JavaScript에는 어플리케이션에서 필요한 로직뿐만 아니라,<br>어플리케이션을 구동하는 프레임워크와 라이브러리의 소스코드들도 모두 포함되어 있습니다.<br>그렇기 때문에 굉장히 사이즈가 커서, 다운로드받는데도 오랜 시간이 소요될 수 있겠죠?<br>추가로 필요한 데이터가 있다면, 서버에 요청해서 데이터를 받아온 다음에 이것들을 기반으로 동적으로 HTML을 생성해서,<br>사용자에게 최종적인 어플리케이션을 보여줍니다.</p><p>이런 CSR의 큰 문제점은 2가지입니다.</p><ul><li>Initial Loading may take too long<ul><li><strong>사용자가 첫 화면을 보기까지 오랜 시간이 걸릴 수 있다는 점</strong></li></ul></li><li>Low SEO<ul><li>썩 좋지 않는 SEO(Search Engin Optimization)</li><li>SEO :<ul><li>구글, 네이버같은 검색엔진들은 서버에 등록된 웹사이트를 하나씩 돌아다니며 HTML을 분석하는데,</li><li>이떄 검색할 웹사이트가 빠르게 동작하도록 하는 것</li></ul></li></ul></li></ul><p>CSR에서 사용되는 HTML body는 대부분 텅텅 비어있기 때문에,<br>검색엔진들이 CSR로 작성된 웹페이지를 분석하는데, 많은 어려움을 겪습니다.</p><hr><h1 id="L3-SSR-Server-Side-Rendering"><a href="#L3-SSR-Server-Side-Rendering" class="headerlink" title="L3 SSR (Server Side Rendering)"></a>L3 SSR (Server Side Rendering)</h1><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/SSR_5.jpeg" alt="SSR_5"></p><p>이런 CSR의 과도한 문제점때문에 1990년 중반쯤 사용했던 Static Stite에서 영감을 받은 SSR이 등장합니다.</p><p>클라이언트에서 모든 것을 처리하는 방식과는 다르게 웹사이트에 접속하면,<br>서버에 필요한 데이터를 모두 가져와서 HTML 파일을 만들고,<br>잘 만들어진 HTML파일을 동적으로 조금 제어할 수 있는 소스코드와 함께 클라이언트에게 보내줍니다.<br>그러면 클라이언트 측에서는 잘 만들어진 HTML 문서를 받아와서 사용자에게 보여줄 수 있는 것이죠.</p><blockquote><p>💡 참고</p><p>사실 SSR은 CSR보다 더 오래된 기술입니다. AJAX가 나오 기전 웹페이지를 생성하는 기술이 SSR이였고,<br>PHP, AJP, JSP 등이 다 SSR을 위해 사용되었던 기술이빈다.<br>당시에는 CSR이라는 개념이 없어서 대신 서버사이드 스크립트라고 불렸습니다.<br>AJXX가 등장하며, 서버에서만 가능하던 것들이 클라이언트로 어느정도 넘어가면서 CSR이 발전하고, SSR이 재조명된 것입니다.</p></blockquote><hr><h2 id="3-1-장점"><a href="#3-1-장점" class="headerlink" title="3.1 장점"></a>3.1 장점</h2><p>이런 SSR을 이용하게 되면, CSR을 사용했을 떄보다 다음과 같은 장점이 있습니다.</p><ul><li>Initial page load is faster<ul><li>첫 번쨰 페이지 로딩이 빨라짐</li></ul></li><li>Great SEO<ul><li>모든 컨텐츠가 HTML에 담겨있기 때문에 조금 더 효율적인 SEO를 할 수 있음</li></ul></li></ul><hr><h2 id="3-2-문제점"><a href="#3-2-문제점" class="headerlink" title="3.2 문제점"></a>3.2 문제점</h2><p>그럼 SSR이 모든 것에 솔루션이 될 수 있느냐? 그건 아닙니다. SSR에도 큰 문제점이 존재합니다.</p><ul><li>Blinking issue, Non-rich site interactions<ul><li>Static Sites에서 발생했던 깜박임(Blinking) 이슈가 여전히 존재</li><li>사용자가 클릭을 하게 되면, 전체 웹사이트를 서버에서 다시 받아오는 것과 동일하기 때문에</li><li>썩 좋지 않는 User experience를 겪습니다.</li></ul></li><li>Server side overhead<ul><li>서버에 과부하가 걸리기 쉽습니다.</li><li>특히 사용자가 많은 제품일 수록, 사용자가 클릭할 떄마다 서버에 요청해서</li><li>서버에 필요한 데이터를 가지고 와서 HTML을 만들어야 하므로 서버에 과부하가 걸리기 쉬움</li></ul></li><li>Need to wait before interacting<ul><li>사용자가 빠르게 웹사이트를 확인할 수 있지만,</li><li>동적으로 데이터를 처리하는 자바스크립트를 아직 다운로드 받지 못했는데,</li><li>여기저기 클릭해서 반응이 없는 경우가 발생할 수 있음</li></ul></li></ul><hr><h2 id="3-3-TTV와-TTI-측면에서-한번-더-정리"><a href="#3-3-TTV와-TTI-측면에서-한번-더-정리" class="headerlink" title="3.3 TTV와 TTI 측면에서 한번 더 정리"></a>3.3 TTV와 TTI 측면에서 한번 더 정리</h2><p>SSR의 문제점을 이해하기 위해 TTV와 TTI를 알아야 합니다.</p><ul><li>TTV (Time To View)</li><li>TTI (Time To Interact)</li></ul><p>CSR과 SSR을 시간이 흘러가는 순서대로 분석해보면,</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/SSR_6.jpeg" alt="SSR_6"></p><p>CSR은 사이트에 접속하면,<br>서버에서 인덱스 파일을 받아오고, 인덱스 파일은 텅텅 비어있기 때문에 사용자에게는 아무것도 보여지지 않습니다.<br>HTML 파일에 링크되어져 있는 웹사이트에 필요한 모든 로직이 담겨있는 JavaScript를 요청하게 됩니다.</p><p>그리고 최종적으로 동적으로 HTML을 생성할 수 있는 웹 어플리케이션 로직이 담긴 JavaScript파일을 받아옵니다.<br>그리고 이 순간부터 웹사이트가 사용자에게 보여지게 되고, 또 사용자가 클릭이 가능해집니다.<br>즉, CSR은 TTV(사용자가 웹사이트를 볼 수 있음)과 동시에 TTI(클릭하거나 인터렉션)이 가능하게 됩니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/SSR_7.jpeg" alt="SSR_7"></p><p>반대로 SSR은 사이트에 접속하면,<br>서버에서 이미 잘 만들어진 인덱스 파일을 받아오게 되고, 사용자가 웹 사이트를 볼 수 있습니다.</p><p>하지만 아직 동적으로 제어할 수 있는 JavaScript 파일을 받아오지 않았으므로, 사용자가 클릭을 해도 동작하지 않습니다.<br>그래서 최종적으로 JavaScript파일을 받아와야지만, 그때부터 사용자의 클릭을 처리할 수 있는 인터렉션이 가능해집니다.<br>그래서 서버사이드 렌더링은 사용자가 사이트를 볼 수 있는 시간과 실제로 인터렉션을 할 수 있는 시간의 공백 기간이 꽤 긴 편입니다.</p><hr><h2 id="3-4-어떻게-개선할-수-있을까"><a href="#3-4-어떻게-개선할-수-있을까" class="headerlink" title="3.4 어떻게 개선할 수 있을까?"></a>3.4 어떻게 개선할 수 있을까?</h2><p>그래서 웹사이트 성능을 분석할 때, TTV와 TTI도 중요한 매트릭으로 사용할 수 있는데요,</p><p>CSR을 정말 많이 사용하는 개발자라면, 최종적으로 번들링해서 사용자에게 보내주는 JS파일을 어떻게 하면 효율적으로 많이 분할해서,<br>첫 번째로 사용자가 보기 위해 필요한 정말 필수적인 것만 보낼 수 있는지 고민해야 합니다.</p><p>SSR같은 경우 사용자가 보고, 인터렉션하는 이 시간의 단차를 줄이기 위해 어떤 노력을 할 수 있는지,<br>어떻게 조금 더 매끄러운 UI와 UX를 제공할 수 있을지 고민해야 합니다.</p><hr><h1 id="L4-SSG-Static-Site-Generation"><a href="#L4-SSG-Static-Site-Generation" class="headerlink" title="L4 SSG (Static Site Generation)"></a>L4 SSG (Static Site Generation)</h1><h2 id="4-1-Gatsby"><a href="#4-1-Gatsby" class="headerlink" title="4.1 Gatsby"></a>4.1 Gatsby</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/SSR_8.jpeg" alt="SSR_8"></p><p>요즘에는 꼭 CSR 또는 SSR 만을 고집해서 사용하기보다는 <code>SSG</code>도 있습니다.<br>React의 경우 CSR에 특화된 라이브러리이지만, Gatsby라는 라이브러리와 함께 사용하면,<br>React로 만든 웹어플리케이션을 정적으로 웹페이지를 미리 생성해둬서 서버에 배포해놓을 수 있습니다.</p><p>그러면 이렇게 만들어진 웹사이트들은 모두 정적이냐? 그런 건 아닙니다.<br>추가적으로 데이터를서버에서 받아오거나 또는 동적으로 처리해야 하는 로직이 있다면,<br>JS파일을 함께 가지고 있을 수 있기 때문에 동적인 요소도 추가할 수 있습니다.</p><hr><h2 id="4-2-Next-JS"><a href="#4-2-Next-JS" class="headerlink" title="4.2 Next.JS"></a>4.2 Next.JS</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/SSR_9.jpeg" alt="SSR_9"></p><p>Gatsby다음으로 React에서 많이 사용되는 것이 Next.js입니다.<br>Next.js는 강력한 SSR을 지원하는 라이브러리였는데,<br>요즘에는 SSG도 지원하고, CSR과 SSR을 잘 섞어서 더 강력하고 유연하게 사용할 수 있게 되었습니다.</p>]]></content>
      
      
      <categories>
          
          <category> 정보 </category>
          
          <category> Terminology(용어) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Terminology(용어) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-14-Hooks - Common Hooks (Context, useMemo, useCallback, useReducer, React.memo, Custom Hook)</title>
      <link href="/2022/12/22/Front-React-Basic-14-Hooks02/"/>
      <url>/2022/12/22/Front-React-Basic-14-Hooks02/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Common-Hooks-Hooks-종류"><a href="#1-Common-Hooks-Hooks-종류" class="headerlink" title="1. Common Hooks (Hooks 종류)"></a>1. Common Hooks (Hooks 종류)</h1><ul><li>React는 더 효율적인 React 코드를 작성할 수 있는 많은 Hooks를 지원함</li><li><a href="https://reactjs.org/docs/hooks-reference.html#usereducer">React Hooks Reference</a><ul><li>Basic Hooks (useState, useEffect) → 09에서 다룸</li><li>useRef → 12에서 다룸</li><li>useContext &amp; Context API</li><li>useMemo</li><li>useCallback</li><li>useReducer…</li><li>Custom Hook 만들기</li></ul></li></ul><hr><h1 id="2-useContext-amp-Context-API"><a href="#2-useContext-amp-Context-API" class="headerlink" title="2. useContext &amp; Context API"></a>2. useContext &amp; Context API</h1><p>React로 만든 앱은 여러 개의 컴포넌트로 구성됩니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/React_14_1.png" alt="React_14_1"></p><ul><li>최상위 App 컴포넌트</li><li>그 아래 Tree 형태로 컴포넌트들이 구성되며, 데이터 흐름은 위에서 아래로</li><li>부모 컴포넌트에서 자식 컴포넌트로 <strong>prop를 통해 데이터가 전달</strong>됨</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App 컴포넌트</span></span><br><span class="line">&lt;<span class="title class_">Header</span> user=&#123;user&#125; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------------</span></span><br><span class="line"><span class="comment">// Header 컴포넌트</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">SearchBar</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/React_14_2.png" alt="React_14_2"></p><p>그러다 모든 컴포넌트에서 사용하는 전역적인 데이터가 필요할 수 있습니다. (e.g. 현재 로그인된 사용자 정보, 테마, 언어)<br>props로 일일히 단계별로 데이터를 전달해여 한다면, 매우 고통스러울 겁니다. (이를 <code>Prop Drilling</code>이라고 함)<br>코드도 복잡해지고, 뭐 하나 바뀌면 일일히 컴포넌트를 찾아가서 수정해줘야 할 겁니다.</p><hr><h2 id="2-1-Context-API"><a href="#2-1-Context-API" class="headerlink" title="2.1 Context API"></a>2.1 Context API</h2><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/React_14_3.png" alt="React_14_3"></p><p>React는 Context를 제공하면서 위 문제를 해결해줍니다.</p><ul><li>Context &#x3D; 앱 안에서 전역적으로 사용되는 데이터들을 여러 컴포넌트끼리 쉽게 공유하는 방법을 제공</li><li>맨 아래 C, E 컴포넌트에만 데이터가 필요하면, <code>useContext</code> 사용하면 됨</li><li><code>Context는 꼭 필요할 떄만 사용!</code><ul><li>Context를 사용하면 컴포넌트를 재사용하기 어려워 질 수 있음</li><li>Prop Drilling을 피하기 위한 목적이라면, <code>Component Composition(컴포넌트 합성)</code>을 먼저 고려</li></ul></li></ul><hr><h2 id="2-2-예제1-Context-사용-전"><a href="#2-2-예제1-Context-사용-전" class="headerlink" title="2.2 예제1 : Context 사용 전"></a>2.2 예제1 : Context 사용 전</h2><h3 id="2-2-1-폴더구조"><a href="#2-2-1-폴더구조" class="headerlink" title="2.2.1 폴더구조"></a>2.2.1 폴더구조</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">📦 src</span><br><span class="line">├─ components</span><br><span class="line">│  ├─ Content.jsx</span><br><span class="line">│  ├─ Footer.jsx</span><br><span class="line">│  ├─ Header.jsx</span><br><span class="line">│  └─ Page.jsx</span><br><span class="line">├─ App.css</span><br><span class="line">└─ App.js</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-2-Content-jsx"><a href="#2-2-2-Content-jsx" class="headerlink" title="2.2.2 Content.jsx"></a>2.2.2 Content.jsx</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Content</span>(<span class="params">&#123; isDark &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;content&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">backgroundColor:</span> <span class="attr">isDark</span> ? &#x27;<span class="attr">black</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">lightgray</span>&#x27;, <span class="attr">color:</span> <span class="attr">isDark</span> ? &#x27;<span class="attr">white</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">black</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>메시님, 안녕하세요!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-3-Footer-jsx"><a href="#2-2-3-Footer-jsx" class="headerlink" title="2.2.3 Footer.jsx"></a>2.2.3 Footer.jsx</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Footer</span>(<span class="params">&#123; isDark, setIsDark &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toggleTheme</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setIsDark</span>(!isDark);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">className</span>=<span class="string">&#x27;footer&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">backgroundColor:</span> <span class="attr">isDark</span> ? &#x27;<span class="attr">black</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">lightgray</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#x27;button&#x27;</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleTheme&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Dark Mode</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-4-Header-jsx"><a href="#2-2-4-Header-jsx" class="headerlink" title="2.2.4 Header.jsx"></a>2.2.4 Header.jsx</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Header</span>(<span class="params">&#123; isDark &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">backgroundColor:</span> <span class="attr">isDark</span> ? &#x27;<span class="attr">black</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">lightgray</span>&#x27;, <span class="attr">color:</span> <span class="attr">isDark</span> ? &#x27;<span class="attr">white</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">black</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcom 메시!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-5-Page-jsx"><a href="#2-2-5-Page-jsx" class="headerlink" title="2.2.5 Page.jsx"></a>2.2.5 Page.jsx</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;./Header&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Content</span> <span class="keyword">from</span> <span class="string">&#x27;./Content&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Footer</span> <span class="keyword">from</span> <span class="string">&#x27;./Footer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params">&#123; isDark, setIsDark &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;page&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Header</span> <span class="attr">isDark</span>=<span class="string">&#123;isDark&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Content</span> <span class="attr">isDark</span>=<span class="string">&#123;isDark&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Footer</span> <span class="attr">isDark</span>=<span class="string">&#123;isDark&#125;</span> <span class="attr">setIsDark</span>=<span class="string">&#123;setIsDark&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-6-App-css"><a href="#2-2-6-App-css" class="headerlink" title="2.2.6 App.css"></a>2.2.6 App.css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid gray;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">2px</span> solid gray;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-7-App-js"><a href="#2-2-7-App-js" class="headerlink" title="2.2.7 App.js"></a>2.2.7 App.js</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Page</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Page&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [isDark, setIsDark] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Page</span> <span class="attr">isDark</span>=<span class="string">&#123;isDark&#125;</span> <span class="attr">setIsDark</span>=<span class="string">&#123;setIsDark&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="2-3-예제1-Context-사용-후"><a href="#2-3-예제1-Context-사용-후" class="headerlink" title="2.3 예제1 : Context 사용 후"></a>2.3 예제1 : Context 사용 후</h2><h3 id="2-3-1-폴더-구조"><a href="#2-3-1-폴더-구조" class="headerlink" title="2.3.1 폴더 구조"></a>2.3.1 폴더 구조</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">📦 src</span><br><span class="line">├─ components</span><br><span class="line">│  ├─ Content.jsx</span><br><span class="line">│  ├─ Footer.jsx</span><br><span class="line">│  ├─ Header.jsx</span><br><span class="line">│  └─ Page.jsx</span><br><span class="line">├─ context <span class="comment"># 추가</span></span><br><span class="line">│  ├─ ThemeContext.jsx</span><br><span class="line">│  └─ UserContext.jsx</span><br><span class="line">├─ App.css</span><br><span class="line">└─ App.js</span><br></pre></td></tr></table></figure><h3 id="2-3-2-Context"><a href="#2-3-2-Context" class="headerlink" title="2.3.2 Context"></a>2.3.2 Context</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThemeContext.jsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title function_">createContext</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------------------------------------</span></span><br><span class="line"><span class="comment">// UserContext.jsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">UserContext</span> = <span class="title function_">createContext</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="2-3-3-Context-적용-App-js"><a href="#2-3-3-Context-적용-App-js" class="headerlink" title="2.3.3 Context 적용 : App.js"></a>2.3.3 Context 적용 : App.js</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ThemeContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./context/ThemeContext&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./context/UserContext&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [isDark, setIsDark] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// 모든 하위 컴포넌트에 value의 값을 전달</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">UserContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;</span>&#x27;<span class="attr">사용자</span>&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">isDark</span>, <span class="attr">setIsDark</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Page</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">UserContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-3-4-Context-적용-components들"><a href="#2-3-4-Context-적용-components들" class="headerlink" title="2.3.4 Context 적용 : components들"></a>2.3.4 Context 적용 : components들</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Content</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; isDark &#125; = <span class="title function_">useContext</span>(<span class="title class_">ThemeContext</span>);</span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">useContext</span>(<span class="title class_">UserContext</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;content&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">backgroundColor:</span> <span class="attr">isDark</span> ? &#x27;<span class="attr">black</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">lightgray</span>&#x27;, <span class="attr">color:</span> <span class="attr">isDark</span> ? &#x27;<span class="attr">white</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">black</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;user&#125;님, 안녕하세요!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Footer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; isDark, setIsDark &#125; = <span class="title function_">useContext</span>(<span class="title class_">ThemeContext</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toggleTheme</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setIsDark</span>(!isDark);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">className</span>=<span class="string">&#x27;footer&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">backgroundColor:</span> <span class="attr">isDark</span> ? &#x27;<span class="attr">black</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">lightgray</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#x27;button&#x27;</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleTheme&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Dark Mode</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Header</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; isDark &#125; = <span class="title function_">useContext</span>(<span class="title class_">ThemeContext</span>);</span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">useContext</span>(<span class="title class_">UserContext</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.log(user);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">backgroundColor:</span> <span class="attr">isDark</span> ? &#x27;<span class="attr">black</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">lightgray</span>&#x27;, <span class="attr">color:</span> <span class="attr">isDark</span> ? &#x27;<span class="attr">white</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">black</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcom &#123;user&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;page&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Content</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="3-useMemo"><a href="#3-useMemo" class="headerlink" title="3. useMemo"></a>3. useMemo</h1><p>컴포넌트의 성능 최적화(Optimization)에 사용되는 대표적인 Hook은 다음과 같습니다.</p><ul><li>useMemo</li><li>useCallback</li></ul><hr><h2 id="3-1-개념"><a href="#3-1-개념" class="headerlink" title="3.1 개념"></a>3.1 개념</h2><p>useMemo에서 <code>memo</code>는 Memoization(메모이제이션)을 의미</p><ul><li><code>Memoization</code><ul><li>동일한 값을 리턴하는 함수를 반복적으로 호출해야 한다면,</li><li>맨 처음 값을 계산할 떄, 해당 값을 메모리에 저장해서, 필요할 때마다 또 다시 계산하지 않고</li><li><strong>메모리에서 꺼내서 재사용</strong>을 하는 기법</li><li>쉽게 말해, <strong>자주 사용하는 값을 캐싱을 해둬서 그 값이 필요할 떄마다 다시 계산하는게 아니라 꺼내서 쓰는 것</strong></li></ul></li></ul><h3 id="3-1-1-함수형-컴포넌트의-문제점"><a href="#3-1-1-함수형-컴포넌트의-문제점" class="headerlink" title="3.1.1 함수형 컴포넌트의 문제점"></a>3.1.1 함수형 컴포넌트의 문제점</h3><p>렌더링 될 때마다, Component 함수를 호출 → 모든 내부 변수 초기화</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">calculate</span>(); <span class="comment">// 렌더링될 떄마다, calculate가 반복호출됨 -&gt; 성능이 느려짐(비효율적)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>useMemo를 사용하면, 위 문제를 해결할 수 있습니다.</p><ul><li>렌더링 → <code>Component 함수 호출, Memoization</code> → 렌더링 → <code>Component 함수 호출, Memoize된 값을 재사용</code></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 렌더링</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">calculate</span>(), []);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-1-2-useMemo-구조"><a href="#3-1-2-useMemo-구조" class="headerlink" title="3.1.2 useMemo 구조"></a>3.1.2 useMemo 구조</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useMemo(콜백함수, 의존성배열)</span></span><br><span class="line"><span class="comment">// - 콜백함수 : 메모이제이션해서 리턴해줄 함수</span></span><br><span class="line"><span class="comment">// - 의존성 배열 : 요소의 값이 업데이트될 떄만 콜백함수를 다시 호출</span></span><br><span class="line"><span class="comment">// -- 메모이제이션된 값을 업데이트해서 다시 메모이제이션해줌</span></span><br><span class="line"><span class="comment">// -- 빈 배열을 넘겨주면, 컴포넌트가 mount되었을 때만 값을 계산하고, 이후에는 항상 메모이제이션된 값을 꺼내씀</span></span><br><span class="line"><span class="keyword">const</span> value = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">calculate</span>();</span><br><span class="line">&#125;, [item]);</span><br></pre></td></tr></table></figure><p>useMemo 역시 무분별하게 사용하면, 오히려 성능에 무리가 갑니다. 꼭 필요할 떄만 씁시다.<br>useMemo를 쓴다는 건, 값을 재활용하기 위해, 따로 메모리를 소비해서 저장해놓는 것을 의미하기 때문에,<br>불필요한 값까지 메모이제이션을 한다면, 오히려 성능이 악화될 수 있음</p><hr><h2 id="3-2-예제1"><a href="#3-2-예제1" class="headerlink" title="3.2 예제1"></a>3.2 예제1</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useMemo, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">hardCalculate</span> = (<span class="params">number</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;어려운 계산!&#x27;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">999999</span>; i++) &#123;&#125; <span class="comment">// 생각하는 시간</span></span><br><span class="line">  <span class="keyword">return</span> number + <span class="number">10000</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">eashCalculate</span> = (<span class="params">number</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;짱 쉬운 계산!&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> number + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [hardNumber, setHardNumber] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> [easyNumber, setEashNumber] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// const hardSum = hardCalculate(hardNumber);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. hardNumber가 변경될 떄만 hardCalculate가 다시 호출됨</span></span><br><span class="line">  <span class="comment">// 2. hardNumber가 변경되지 않으면, 그 전에 갖고있던 hardNumber의 값을 재사용함</span></span><br><span class="line">  <span class="keyword">const</span> hardSum = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">hardCalculate</span>(hardNumber);</span><br><span class="line">  &#125;, [hardNumber]);</span><br><span class="line">  <span class="keyword">const</span> easySum = <span class="title function_">eashCalculate</span>(hardNumber);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>어려운 계산기<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;number&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;hardNumber&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setHardNumber(parseInt(e.target.value))&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>+ 10000 = &#123;hardSum&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>쉬운 계산기<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;number&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;easyNumber&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setEashNumber(parseInt(e.target.value))&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>+ 1 = &#123;easySum&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3-예제2"><a href="#3-3-예제2" class="headerlink" title="3.3 예제2"></a>3.3 예제2</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useMemo, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [number, setNumber] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [isKorea, setIsKorea] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. JS 타입 종류 : 원시타입 | 객체타입(원시타입을 제외한 모든 것, Object, Array)</span></span><br><span class="line">  <span class="comment">// - 어떤 변수에 객체타입을 할당하면, 객체타입이 크기가 크기 때문에</span></span><br><span class="line">  <span class="comment">// - 메모리 상에 공간이 할당되어 저장되고, 변수에는 메모리 주소가 할당됨</span></span><br><span class="line">  <span class="comment">// - 똑같은 객체를 할당해도, 두 메모리 주소가 다르기 때문에 ===을 하면 false 나옴</span></span><br><span class="line">  <span class="keyword">const</span> location = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">country</span>: isKorea ? <span class="string">&#x27;한국&#x27;</span> : <span class="string">&#x27;외국&#x27;</span>,</span><br><span class="line">      <span class="comment">// 뭔가 오래걸리는 작업을 해야한다면, 꼭 필요할 떄만 호출</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [isKorea]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;useEffect 호출&#x27;</span>);</span><br><span class="line">  &#125;, [location]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>하루에 몇끼 먹어요?<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;number&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;number&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setNumber(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>어느 나라에 있어요?<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>나라 : &#123;location.country&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setIsKorea(!isKorea)&#125;&gt;비행기 타자<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="4-useCallback"><a href="#4-useCallback" class="headerlink" title="4. useCallback"></a>4. useCallback</h1><p>컴포넌트의 성능 최적화(Optimization)에 사용되는 대표적인 Hook은 다음과 같습니다.</p><ul><li><code>useMemo</code> &#x3D; 특정 함수를 새로 만들지 않고 재사용하고 싶을 때 사용하는 함수</li><li><code>useCallback</code> &#x3D; 특정 함수를 새로 만들지 않고 재사용하고 싶을 때 사용하는 함수</li></ul><p><code>Memoization</code></p><ul><li>동일한 값을 리턴하는 함수를 반복적으로 호출해야 한다면,</li><li>맨 처음 값을 계산할 떄, 해당 값을 메모리에 저장해서, 필요할 때마다 또 다시 계산하지 않고</li><li><strong>메모리에서 꺼내서 재사용</strong>을 하는 기법</li><li>쉽게 말해, <strong>자주 사용하는 값을 캐싱을 해둬서 그 값이 필요할 떄마다 다시 계산하는게 아니라 꺼내서 쓰는 것</strong></li></ul><hr><h2 id="4-1-개념"><a href="#4-1-개념" class="headerlink" title="4.1 개념"></a>4.1 개념</h2><blockquote><p>useMemo 복습</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useMemo(콜백함수, 배열)</span></span><br><span class="line"><span class="comment">// - 콜백함수 : 메모이제이션해서 리턴해줄 함수</span></span><br><span class="line"><span class="comment">// - 배열 : 의존성 배열이라고 불림, 요소의 값이 업데이트될 떄만 콜백함수를 다시 호출</span></span><br><span class="line"><span class="comment">// -- 메모이제이션된 값을 업데이트해서 다시 메모이제이션해줌</span></span><br><span class="line"><span class="comment">// -- 빈 배열을 넘겨주면, 컴포넌트가 mount되었을 때만 값을 계산하고, 이후에는 항상 메모이제이션된 값을 꺼내씀</span></span><br><span class="line"><span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;, [item]);</span><br></pre></td></tr></table></figure></blockquote><p>useMemo와 비슷하지만, <code>useCallback</code>은 인자로 전달한 콜백함수 그 자체를 메모이제이션해줌</p><ul><li><code>useMemo</code> &#x3D; 콜백함수가 리턴하는 값을 메모이제이션해줌</li><li><code>useCallback</code> &#x3D; 인자로 전달한 콜백함수 그 자체를 메모이제이션해줌</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calculate = <span class="title function_">useCallback</span>(</span><br><span class="line">  <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num + <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  [item]</span><br><span class="line">);</span><br><span class="line"><span class="comment">// calculate()를 메모이제이션해준다면, useCallback으로 감싸주면 됨</span></span><br><span class="line"><span class="comment">// 그러면 calculate()가 필요할 때마다 함수를 새로 생성하는 것이 아니라,</span></span><br><span class="line"><span class="comment">// 필요할 떄마다 메모리에서 가져와서 재사용함</span></span><br></pre></td></tr></table></figure><p>참고로 JS에서 함수는 사실 객체의 한 종류입니다.</p><ul><li>React에서 함수형 컴포넌트는 말 그대로 함수이기 때문에,</li><li><code>렌더링 → Component 함수 호출 → 컴포넌트의 모든 내부 변수 초기화</code></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수형 컴포넌트 안에</span></span><br><span class="line"><span class="comment">// calculate변수에 num을 인자로 받는 함수(객체)가 할당되어 있는 형태</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">calculate</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> num + <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>useCallback으로 메모이제이션</code>을 해주면,</p><ul><li><code>렌더링 → Component 함수 호출 → Memoize된 함수를 재사용</code></li><li>즉, 컴포넌트가 다시 렌더링되더라도 calculate가 초기화되는 것을 막을 수 있음<ul><li>컴포넌트가 맨 처음 렌더링될 떄만 함수를 만들어서 calculate를 초기화해주고,</li><li>이후에 렌더링될 떄는 calculate 변수가 새로운 함수 객체를 할당받는게 아니라,</li><li>이전에 받은 함수 객체를 계속 갖고있으면서 재사용함</li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> calculate = <span class="title function_">useCallback</span>(</span><br><span class="line">    <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> num + <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    [item]</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-1-1-useCallback-구조"><a href="#4-1-1-useCallback-구조" class="headerlink" title="4.1.1 useCallback 구조"></a>4.1.1 useCallback 구조</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useCallback(메모이제이션해줄 콜백함수, 의존성배열)</span></span><br><span class="line"><span class="keyword">const</span> calculate = <span class="title function_">useCallback</span>(</span><br><span class="line">  <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num + <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  [item]</span><br><span class="line">);</span><br><span class="line"><span class="comment">// calculate는 메모이제이션된 함수(객체)르 갖게됨</span></span><br><span class="line"><span class="comment">// 의존성배열의 값(=item)이 변경되지 않는 이상 다시 초괴화되지 않음</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-2-예시1"><a href="#4-2-예시1" class="headerlink" title="4.2 예시1"></a>4.2 예시1</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useCallback, useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [number, setNumber] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [toggle, setToggle] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> someFunction = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`someFunc: number: <span class="subst">$&#123;number&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;, [number]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;someFunction이 변경되었습니다.&#x27;</span>);</span><br><span class="line">  &#125;, [someFunction]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;number&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;number&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setNumber(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setToggle(!toggle)&#125;&gt;&#123;toggle.toString()&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;someFunction&#125;</span>&gt;</span>Call someFunc<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-3-예시2"><a href="#4-3-예시2" class="headerlink" title="4.3 예시2"></a>4.3 예시2</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Box</span>(<span class="params">&#123; createBoxStyle &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [style, setStyle] = <span class="title function_">useState</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;박스 키우기&#x27;</span>);</span><br><span class="line">    <span class="title function_">setStyle</span>(<span class="title function_">createBoxStyle</span>());</span><br><span class="line">  &#125;, [createBoxStyle]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useCallback, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Box</span> <span class="keyword">from</span> <span class="string">&#x27;./Box&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [size, setSize] = <span class="title function_">useState</span>(<span class="number">100</span>);</span><br><span class="line">  <span class="keyword">const</span> [isDark, setIsDark] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> createBoxStyle = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">backgroundColor</span>: <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">      <span class="attr">width</span>: <span class="string">`<span class="subst">$&#123;size&#125;</span>px`</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="string">`<span class="subst">$&#123;size&#125;</span>px`</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [size]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">background:</span> <span class="attr">isDark</span> ? &#x27;<span class="attr">black</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">white</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;number&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;size&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setSize(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setIsDark(!isDark)&#125;&gt;Change Theme<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Box</span> <span class="attr">createBoxStyle</span>=<span class="string">&#123;createBoxStyle&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="5-useReducer"><a href="#5-useReducer" class="headerlink" title="5. useReducer"></a>5. useReducer</h1><p><code>useReducer</code> : 여러 개의 복잡한 하위 state를 다뤄야 할 때, useState대신 useReducer를 사용하면 편리</p><ul><li>다양한 컴포넌트 상황에 따라 다양한 상태를 다른 값으로 업데이트해주고 싶을 때 사용하는 Hook</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/React_14_4.png" alt="React_14_4"></p><p>useReducer는 다음 3가지로 구성됨</p><ul><li><code>Reducer</code> : state를 업데이트 해주는 역할<ul><li>e.g. 거내내역(state)를 업데이트해주는 은행</li></ul></li><li><code>Dispatch</code> : Reducer에게 요구를 하는 역할<ul><li>e.g. 은행에 거래내역을 업데이트해달라고 요청하는 고객</li></ul></li><li><code>Action</code> : Reducer에게 요구하는 내용<ul><li>e.g. 고객이 은행에게 “만원을 출금해달라”라는 행동</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/React_14_5.png" alt="React_14_5"></p><p>이를 컴포넌트 관점에서 보면 위 그림과 같습니다.</p><hr><h2 id="5-1-예제-1-은행"><a href="#5-1-예제-1-은행" class="headerlink" title="5.1 예제 1 : 은행"></a>5.1 예제 1 : 은행</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reducer - state를 업데이트하는 역할(은행)</span></span><br><span class="line"><span class="comment">// dispatch - state를 업데이트하는 요구</span></span><br><span class="line"><span class="comment">// action - 요구하는 내용</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ACTION_TYPES</span> = &#123;</span><br><span class="line">  <span class="attr">deposit</span>: <span class="string">&#x27;deposit&#x27;</span>,</span><br><span class="line">  <span class="attr">withdraw</span>: <span class="string">&#x27;withdraw&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reducer가 일을 합니다!&#x27;</span>, state, action);</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="variable constant_">ACTION_TYPES</span>.<span class="property">deposit</span>:</span><br><span class="line">      <span class="keyword">return</span> state + action.<span class="property">payload</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="variable constant_">ACTION_TYPES</span>.<span class="property">withdraw</span>:</span><br><span class="line">      <span class="keyword">return</span> state - action.<span class="property">payload</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [number, setNumber] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [money, dispatch] = <span class="title function_">useReducer</span>(reducer, <span class="number">0</span>); <span class="comment">// reducer, 초기값</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>useReducer 은행에 오신 것을 환영합니다.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>잔고: &#123;money&#125;원<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;number&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;number&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setNumber(parseInt(e.target.value))&#125; step=&#x27;1000&#x27; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: ACTION_TYPES.deposit, payload: number &#125;)&#125;&gt;예금<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: ACTION_TYPES.withdraw, payload: number &#125;)&#125;&gt;출금<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-2-예제-2-출석부-복잡한-state"><a href="#5-2-예제-2-출석부-복잡한-state" class="headerlink" title="5.2 예제 2 : 출석부(복잡한 state)"></a>5.2 예제 2 : 출석부(복잡한 state)</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">&#123; name, dispatch, id, isHere &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">textDecoration:</span> <span class="attr">isHere</span> ? &#x27;<span class="attr">line-through</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">none</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">color:</span> <span class="attr">isHere</span> ? &#x27;<span class="attr">grey</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">black</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;mark-student&#x27;, payload: &#123; id &#125; &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        &#123;name&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;delete-student&#x27;, payload: &#123; id &#125; &#125;)&#125;&gt;삭제<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Student</span> <span class="keyword">from</span> <span class="string">&#x27;./Student&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;add-student&#x27;</span>:</span><br><span class="line">      <span class="keyword">const</span> name = action.<span class="property">payload</span>.<span class="property">name</span>;</span><br><span class="line">      <span class="keyword">const</span> newStudent = &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">        name,</span><br><span class="line">        <span class="attr">isHere</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">        <span class="attr">students</span>: [...state.<span class="property">students</span>, newStudent],</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;delete-student&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span>,</span><br><span class="line">        <span class="attr">students</span>: state.<span class="property">students</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">student</span>) =&gt;</span> student.<span class="property">id</span> !== action.<span class="property">payload</span>.<span class="property">id</span>),</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;mark-student&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span>,</span><br><span class="line">        <span class="attr">students</span>: state.<span class="property">students</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">student</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (student.<span class="property">id</span> === action.<span class="property">payload</span>.<span class="property">id</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123; ...student, <span class="attr">isHere</span>: !student.<span class="property">isHere</span> &#125;;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> student;</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">students</span>: [],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [studentsInfo, dispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>출석부<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>총 학생 수 : &#123;studentsInfo.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;이름을 입력하세요&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;name&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setName(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;add-student&#x27;, payload: &#123; name &#125; &#125;)&#125;&gt;추가<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;studentsInfo.students.map((student) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">Student</span> <span class="attr">key</span>=<span class="string">&#123;student.id&#125;</span> <span class="attr">name</span>=<span class="string">&#123;student.name&#125;</span> <span class="attr">dispatch</span>=<span class="string">&#123;dispatch&#125;</span> <span class="attr">id</span>=<span class="string">&#123;student.id&#125;</span> <span class="attr">isHere</span>=<span class="string">&#123;student.isHere&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="6-React-memo로-컴포넌트-최적화"><a href="#6-React-memo로-컴포넌트-최적화" class="headerlink" title="6. React.memo로 컴포넌트 최적화"></a>6. React.memo로 컴포넌트 최적화</h1><p>굳이 렌더링될 필요없는 Component가 계속 반복적으로 렌더링된다면,<br>또 그 반복적으로 렌더링된 Component가 복잡한 로직이라면, Component 성능이 최악일 것입니다.</p><p>이를 해결하기 위해 React.memo(ft. useMemo, useCallback)를 활용할 수 있습니다.<br>Reaec는 기본적으로 <strong>부모 컴포넌트가 렌더링되면, 모든 자식 컴포넌트들도 자동으로 렌더링</strong>됩니다.<br>만약 부모 컴포넌트가 자주 렌더링되는 컴포넌트라면, 자식 컴포넌트는 렌더링될 필요가 없음에도 렌더링됩니다.<br>그래서 렌더링 횟수를 제한해줄 필요가 있습니다. 여기서 React.memo를 사용하면 됩니다.</p><ul><li><code>고차 컴포넌트(Higher-Order Component; HOC)</code><ul><li>어떤 컴포넌트를 인자로 받아서, 새로운 컴포넌트를 반환해주는 함수</li></ul></li><li><code>React.memo</code> &#x3D; React에서 제공하는 고차 컴포넌트<ul><li>보통 컴포넌트를 React.memo에 인자로 받아, UI나 기능은 똑같으면서, 최적화된 컴포넌트를 반환해주는 함수</li></ul></li><li>최적화된 컴포넌트는 렌더링될 상황마다 <code>Props Check</code>를 통해, <strong>자신이 받는 Props가 변화가 있는지 없는지 체크</strong>함<ul><li>변화가 있다면 → 렌더링</li><li>변화가 없다면 → 렌더링X, 기존 렌더링된 내용을 재사용</li></ul></li><li>React.memo의 memo는? <strong>Memoization(메모이제이션)을 의미</strong><ul><li>맨 처음 값을 계산할 떄, 해당 값을 메모리에 저장해서, 필요할 때마다 또 다시 계산하지 않고</li><li><strong>메모리에서 꺼내서 재사용</strong>을 하는 기법</li></ul></li><li>React.memo는 잘 사용하면 성능이 향상되지만, 무분별하게 사용한다면 오히려 성능이 저하됨!<ul><li>왜냐하면 컴포넌트를 메모이징할 떄, 렌더링된 결과를 어딘가에 저장해야 되는데,</li><li>이떄 메모리를 추가적으로 소비하기 떄문</li></ul></li><li>React.memo를 사용하는 경우<ul><li>컴포넌트가 <strong>같은 Props로 자주 렌더링 될 떄</strong></li><li>컴포넌트가 렌더링될 떄마다 <strong>복잡한 로직을 처리해야 한다면</strong></li></ul></li><li>React.memo는 <strong>오직 Props 변화에만 의존</strong>하는 최적화 방법<ul><li>컴포넌트가 useState, useReducer, useContext같은 상태 관련 Hook이라면,</li><li>Props 변화가 없더라도 state, context가 변할 떄마다 다시 렌더링됨</li></ul></li></ul><hr><h2 id="6-1-예제-1-momo-사용-전"><a href="#6-1-예제-1-momo-사용-전" class="headerlink" title="6.1 예제 1 : momo 사용 전"></a>6.1 예제 1 : momo 사용 전</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">&#123; name, age &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;👶자녀  컴포넌트가 렌더링이 되었어요.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">border:</span> &#x27;<span class="attr">2px</span> <span class="attr">solid</span> <span class="attr">powderblue</span>&#x27;, <span class="attr">padding:</span> &#x27;<span class="attr">10px</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>👶자녀<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>name: &#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>age: &#123;age&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [parentAge, setParentAge] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [childAge, setChildAge] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">incrementParentAge</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setParentAge</span>(parentAge + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">incrementChildAge</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setChildAge</span>(childAge + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🧑부모 컴포넌트가 렌더링이 되었어요.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">border:</span> &#x27;<span class="attr">2px</span> <span class="attr">solid</span> <span class="attr">orange</span>&#x27;, <span class="attr">padding:</span> &#x27;<span class="attr">10px</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>🧑부모<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>age: &#123;parentAge&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementParentAge&#125;</span>&gt;</span>부모 나이 증가<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementChildAge&#125;</span>&gt;</span>자녀 나이 증가<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&#123;</span>&#x27;<span class="attr">홍길동</span>&#x27;&#125; <span class="attr">age</span>=<span class="string">&#123;childAge&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>브라우저 콘솔 창을 확인해보면,</p><ul><li>부모 나이가 증가(부모 컴포넌트가 렌더링)하면, 자식 컴포넌트도 렌더링됨</li><li>자식 나이가 증가(자식 컴포넌트가 렌더링)하면, 부모 컴포넌트도 렌더링됨</li><li>문제점: <strong>렌더링할 필요없는 컴포넌트도 렌더링되고 있음</strong><ul><li>이를 React.memo로 해결할 수 있음</li></ul></li></ul><hr><h2 id="6-2-예제-1-momo-사용-후"><a href="#6-2-예제-1-momo-사용-후" class="headerlink" title="6.2 예제 1: momo 사용 후"></a>6.2 예제 1: momo 사용 후</h2><ul><li>React.memo 사용법<ul><li>최적화하려는 컴포넌트를 memo()로 감싸주면 됨</li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">&#123; name, age &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;👶자녀  컴포넌트가 렌더링이 되었어요.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">border:</span> &#x27;<span class="attr">2px</span> <span class="attr">solid</span> <span class="attr">powderblue</span>&#x27;, <span class="attr">padding:</span> &#x27;<span class="attr">10px</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>👶자녀<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>name: &#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>age: &#123;age&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">Child</span>); <span class="comment">// React.memo 사용법 : 최적화하려는 컴포넌트 memo()로 감싸주기</span></span><br><span class="line"><span class="comment">// memo() : react에서 제공하는 고차 컴포넌트</span></span><br><span class="line"><span class="comment">// - 컴포넌트를 인자로 받아, props체크하는 최적화된 컴포넌트를 반환</span></span><br></pre></td></tr></table></figure><hr><h2 id="6-3-예제-2-useMemo-React-memo"><a href="#6-3-예제-2-useMemo-React-memo" class="headerlink" title="6.3 예제 2 : useMemo + React.memo"></a>6.3 예제 2 : useMemo + React.memo</h2><p>useCallback + useMemo + React.memo를 사용하면 폭 넓은 최적화를 할 수 있음</p><h3 id="6-3-1-React-memo만-적용한-경우"><a href="#6-3-1-React-memo만-적용한-경우" class="headerlink" title="6.3.1 React.memo만 적용한 경우"></a>6.3.1 React.memo만 적용한 경우</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">&#123; name &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;👶자녀  컴포넌트가 렌더링이 되었어요.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">border:</span> &#x27;<span class="attr">2px</span> <span class="attr">solid</span> <span class="attr">powderblue</span>&#x27;, <span class="attr">padding:</span> &#x27;<span class="attr">10px</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>👶자녀<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>성: &#123;name.lastName&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>이름: &#123;name.firstName&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">Child</span>);</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [parentAge, setParentAge] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">incrementParentAge</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setParentAge</span>(parentAge + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🧑부모 컴포넌트가 렌더링이 되었어요.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// JS에서 오브젝트는 참조형 데이터로 메모리의 주소를 가리키고 있다.</span></span><br><span class="line">  <span class="comment">// 함수안의 모든 변수는 렌더링될 떄, 초기화됨</span></span><br><span class="line">  <span class="comment">// 그래서 name이라는 변수는 새로운 메모리 주소를 가리키고 있음</span></span><br><span class="line">  <span class="comment">// Child 컴포넌트는 name이라는 변수가 새로운 메모리 주소를 가리키고 있기 때문에</span></span><br><span class="line">  <span class="comment">// React.memo입장에서는 name이라는 변수가 변경되었다고 판단하고 렌더링을 한다.</span></span><br><span class="line">  <span class="keyword">const</span> name = &#123;</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;홍&#x27;</span>,</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;길동&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">border:</span> &#x27;<span class="attr">2px</span> <span class="attr">solid</span> <span class="attr">orange</span>&#x27;, <span class="attr">padding:</span> &#x27;<span class="attr">10px</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>🧑부모<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>age: &#123;parentAge&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementParentAge&#125;</span>&gt;</span>부모 나이 증가<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-2-useMemo-React-memo-적용한-경우"><a href="#6-3-2-useMemo-React-memo-적용한-경우" class="headerlink" title="6.3.2 useMemo + React.memo 적용한 경우"></a>6.3.2 useMemo + React.memo 적용한 경우</h3><ul><li>어떠한 값을 메모이징하는 경우 사용</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMemo, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [parentAge, setParentAge] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">incrementParentAge</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setParentAge</span>(parentAge + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🧑부모 컴포넌트가 렌더링이 되었어요.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// useMemo를 사용하면, name이라는 변수가 새로운 메모리 주소를 가리키고 있어도</span></span><br><span class="line">  <span class="comment">// name이라는 변수의 값이 같다면, React.memo는 name이라는 변수가 변경되지 않았다고 판단 후 렌더링을 하지 않는다.</span></span><br><span class="line">  <span class="comment">// 즉, React.memo는 name이라는 변수가 변경되었는지를 판단하는 것이 아니라,</span></span><br><span class="line">  <span class="comment">// name이라는 변수가 가리키고 있는 메모리 주소가 변경되었는지를 판단한다.</span></span><br><span class="line">  <span class="comment">// 그래서 name이라는 변수가 가리키고 있는 메모리 주소가 변경되지 않았다면, React.memo는 렌더링을 하지 않는다.</span></span><br><span class="line">  <span class="keyword">const</span> name = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">lastName</span>: <span class="string">&#x27;홍&#x27;</span>,</span><br><span class="line">      <span class="attr">firstName</span>: <span class="string">&#x27;길동&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">border:</span> &#x27;<span class="attr">2px</span> <span class="attr">solid</span> <span class="attr">orange</span>&#x27;, <span class="attr">padding:</span> &#x27;<span class="attr">10px</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>🧑부모<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>age: &#123;parentAge&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementParentAge&#125;</span>&gt;</span>부모 나이 증가<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-4-예제-3-useCallback-React-memo"><a href="#6-4-예제-3-useCallback-React-memo" class="headerlink" title="6.4 예제 3 : useCallback + React.memo"></a>6.4 예제 3 : useCallback + React.memo</h2><h3 id="6-4-1-React-memo만-적용한-경우"><a href="#6-4-1-React-memo만-적용한-경우" class="headerlink" title="6.4.1 React.memo만 적용한 경우"></a>6.4.1 React.memo만 적용한 경우</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">&#123; name, tellMe &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;👶자녀  컴포넌트가 렌더링이 되었어요.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">border:</span> &#x27;<span class="attr">2px</span> <span class="attr">solid</span> <span class="attr">powderblue</span>&#x27;, <span class="attr">padding:</span> &#x27;<span class="attr">10px</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>👶자녀<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>이름: &#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;tellMe&#125;</span>&gt;</span>엄마 나 사랑해?<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">Child</span>);</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [parentAge, setParentAge] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">incrementParentAge</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setParentAge</span>(parentAge + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🧑부모 컴포넌트가 렌더링이 되었어요.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 부모 컴포넌트가 렌더링이 되면 자식 컴포넌트도 렌더링이 되는데,</span></span><br><span class="line">  <span class="comment">// JS에서 함수는 객체의 한 종류입니다.</span></span><br><span class="line">  <span class="comment">// 마찬가지로 tellMe()는 객체이기 때문에 메모리 주소가 들어있습니다.</span></span><br><span class="line">  <span class="comment">// 그래서 컴포넌트가 렌더링될 떄마다, 자식 컴포넌트로 tellMe()를 다른 메모리 주소가 전달됩니다.</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">tellMe</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;길동아 사랑해&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">border:</span> &#x27;<span class="attr">2px</span> <span class="attr">solid</span> <span class="attr">orange</span>&#x27;, <span class="attr">padding:</span> &#x27;<span class="attr">10px</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>🧑부모<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>age: &#123;parentAge&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementParentAge&#125;</span>&gt;</span>부모 나이 증가<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&#123;</span>&#x27;<span class="attr">홍길동</span>&#x27;&#125; <span class="attr">tellMe</span>=<span class="string">&#123;tellMe&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="6-4-2-useCallback-React-memo-적용한-경우"><a href="#6-4-2-useCallback-React-memo-적용한-경우" class="headerlink" title="6.4.2 useCallback + React.memo 적용한 경우"></a>6.4.2 useCallback + React.memo 적용한 경우</h3><ul><li>useMemo : 어떠한 값을 메모이징하는 경우 사용</li><li>useCallback : 어떠한 함수를 메모이징하는 경우 사용</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCallback, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [parentAge, setParentAge] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">incrementParentAge</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setParentAge</span>(parentAge + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🧑부모 컴포넌트가 렌더링이 되었어요.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// useCallback을 사용하면 자식 컴포넌트가 렌더링이 되지 않는다.</span></span><br><span class="line">  <span class="keyword">const</span> tellMe = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;길동아 사랑해&#x27;</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">border:</span> &#x27;<span class="attr">2px</span> <span class="attr">solid</span> <span class="attr">orange</span>&#x27;, <span class="attr">padding:</span> &#x27;<span class="attr">10px</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>🧑부모<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>age: &#123;parentAge&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementParentAge&#125;</span>&gt;</span>부모 나이 증가<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&#123;</span>&#x27;<span class="attr">홍길동</span>&#x27;&#125; <span class="attr">tellMe</span>=<span class="string">&#123;tellMe&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="7-Custom-Hook-커스텀-훅"><a href="#7-Custom-Hook-커스텀-훅" class="headerlink" title="7. Custom Hook (커스텀 훅)"></a>7. Custom Hook (커스텀 훅)</h1><p>React에서 제공해주는 Hook을 조합해서 사용하다보면, 중복된 코드들이 생길 수 있습니다.<br>그래서 이런 중복을 제거하기 위해서 개발자들은 자신들만의 입맛대로 Custom Hook을 만들 수 있습니다.<br>Custom Hook안에서는 기존 React Hook들을 가져다 쓸 수 있습니다.</p><p>여기서는 <code>useInput, useFetch</code>라는 Custom Hook을 만들어 볼 것임. 자기 마음대로 Hook을 만들어 쓰세요.</p><hr><h2 id="7-1-Custom-Hook만들기-useInput"><a href="#7-1-Custom-Hook만들기-useInput" class="headerlink" title="7.1 Custom Hook만들기 : useInput"></a>7.1 Custom Hook만들기 : useInput</h2><h3 id="7-1-1-Custom-Hook-적용-전"><a href="#7-1-1-Custom-Hook-적용-전" class="headerlink" title="7.1.1 Custom Hook 적용 전"></a>7.1.1 Custom Hook 적용 전</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [inputValue, setInputValue] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setInputValue</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">alert</span>(inputValue);</span><br><span class="line">    <span class="title function_">setInputValue</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>useInput<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;inputValue&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleSubmit&#125;</span>&gt;</span>확인<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 여러 개의 컴포넌트가 있고, 컴포넌트마다 input값을 처리해줘야 한다면, 로직을 여러 컴포넌트마다 복사붙여넣기해야 합니다.<br>그렇게 되면 중복코드가 발생합니다. 그래서 로직을 Custom Hook으로 만들어 놓으면, 재사용성이 올라갑니다.</p><hr><h3 id="7-1-2-Custom-Hook-만들기"><a href="#7-1-2-Custom-Hook-만들기" class="headerlink" title="7.1.2 Custom Hook 만들기"></a>7.1.2 Custom Hook 만들기</h3><p><code>hook/useInput.js</code>를 만들어 원하는 로직을 함수 안에서 넣어줍니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useInput</span>(<span class="params">initialValue, submitAction</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [inputValue, setInputValue] = <span class="title function_">useState</span>(initialValue);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setInputValue</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setInputValue</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="title function_">submitAction</span>(inputValue);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [inputValue, handleChange, handleSubmit];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만든 Hook을 App컴포넌트에 적용하기</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useInput <span class="keyword">from</span> <span class="string">&#x27;./hooks/useInput&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">displayMessage</span>(<span class="params">message</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [inputValue, handleChange, handleSubmit] = <span class="title function_">useInput</span>(<span class="string">&#x27;&#x27;</span>, displayMessage);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>useInput<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;inputValue&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleSubmit&#125;</span>&gt;</span>확인<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-2-Custom-Hook-만들기-useFetch"><a href="#7-2-Custom-Hook-만들기-useFetch" class="headerlink" title="7.2 Custom Hook 만들기 : useFetch"></a>7.2 Custom Hook 만들기 : useFetch</h2><h3 id="7-2-1-Custom-Hook-적용-전"><a href="#7-2-1-Custom-Hook-적용-전" class="headerlink" title="7.2.1 Custom Hook 적용 전"></a>7.2.1 Custom Hook 적용 전</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 더미 데이터 반환해주는 API - jsonplaceholder</span></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">&#x27;https://jsonplaceholder.typicode.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">fetchUrl</span> = (<span class="params">type</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(baseURL + <span class="string">&#x27;/&#x27;</span> + type)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="title function_">setData</span>(res));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetchUrl</span>(<span class="string">&#x27;users&#x27;</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>useFetch<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> fetchUrl(&#x27;users&#x27;)&#125;&gt;Users<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> fetchUrl(&#x27;Posts&#x27;)&#125;&gt;Posts<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> fetchUrl(&#x27;Todos&#x27;)&#125;&gt;Todos<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;JSON.stringify(data, null, 2)&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="7-2-2-Custom-Hook-만들기"><a href="#7-2-2-Custom-Hook-만들기" class="headerlink" title="7.2.2 Custom Hook 만들기"></a>7.2.2 Custom Hook 만들기</h3><p><code>hook/useFetch.js</code>를 만들어 원하는 로직을 함수 안에서 넣어줍니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useFetch</span>(<span class="params">baseURL, initialType</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">fetchUrl</span> = (<span class="params">type</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(baseURL + <span class="string">&#x27;/&#x27;</span> + type)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="title function_">setData</span>(res));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetchUrl</span>(initialType);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    data,</span><br><span class="line">    fetchUrl,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만든 Hook을 App컴포넌트에 적용하기</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useFetch <span class="keyword">from</span> <span class="string">&#x27;./hooks/useFetch&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 더미 데이터 반환해주는 API - jsonplaceholder</span></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">&#x27;https://jsonplaceholder.typicode.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: userData &#125; = <span class="title function_">useFetch</span>(baseURL, <span class="string">&#x27;users&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: postData &#125; = <span class="title function_">useFetch</span>(baseURL, <span class="string">&#x27;posts&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>User<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;userData &amp;&amp; <span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;JSON.stringify(userData[0], null, 2)&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Post<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;postData &amp;&amp; <span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;JSON.stringify(postData[0], null, 2)&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li>[React 공식문서 Hooks API Referece](Hooks API Reference)</li><li>별코딩 유튜브</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-13-Hooks - Basic Hooks (useState, useEffect)</title>
      <link href="/2022/12/22/Front-React-Basic-13-Hooks01/"/>
      <url>/2022/12/22/Front-React-Basic-13-Hooks01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Hooks-x3D-컴포넌트-인생에-간섭하는-함수"><a href="#1-Hooks-x3D-컴포넌트-인생에-간섭하는-함수" class="headerlink" title="1. Hooks &#x3D; 컴포넌트 인생에 간섭하는 함수"></a>1. Hooks &#x3D; 컴포넌트 인생에 간섭하는 함수</h1><p>Hooks는 버전 16.8부터 React 요소로 새로 추가됨<br>왜 도입되었냐면? 기존의 클래스형 컴포넌트들은 복잡해지면 이해하기 어려워짐</p><ul><li>“<strong>Detail 컴포넌트 등장 전에</strong> 이것좀 해줘”</li><li>“<strong>Detail 컴포넌트 사라지기 전에</strong> 이것좀 해줘”</li><li>“<strong>Detail 컴포넌트 업데이트 되고나서</strong> 이것좀 해줘”</li></ul><p>이렇게 코드좀 실행해달라고 간섭할 수 있는데, 간섭은 <code>갈고리(Hooks)</code>를 달아서 합니다. 그래서 저걸 <strong>Lifecycle hook</strong>이라고 부름</p><hr><h1 id="2-과거-클래스형-컴포넌트-Lifecycle-hook-쓰는-법"><a href="#2-과거-클래스형-컴포넌트-Lifecycle-hook-쓰는-법" class="headerlink" title="2. 과거 클래스형 컴포넌트 Lifecycle hook 쓰는 법"></a>2. 과거 클래스형 컴포넌트 Lifecycle hook 쓰는 법</h1><ul><li>옛날에는 안에 함수명을 저렇게 써주면 각각 특정 Lifecycle에서 코드를 실행할 수 있었습니다.</li><li>현재는 권장되는 방식이 아님</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Detail2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Detail2 컴포넌트가 로드되고나서 실행할 코드</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Detail2 컴포넌트가 업데이트 되고나서 실행할 코드</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Detail2 컴포넌트가 삭제되기전에 실행할 코드</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="3-useState-Hook"><a href="#3-useState-Hook" class="headerlink" title="3. useState Hook"></a>3. useState Hook</h1><ul><li><p><a href="https://reactjs.org/docs/hooks-state.html">Using the State Hook</a></p></li><li><p><code>state</code> &#x3D; 컴포넌트의 상태</p><ul><li>e.g. 시계라는 컴포넌트가 있다면?<ul><li>현재 시간</li></ul></li></ul></li><li><p>기본적인 Hook으로, <code>함수형 컴포넌트</code>에서도 가변적인 상태를 지닐 수 있게 해줌</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>; <span class="comment">// useState 불러오기</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">const</span> <span class="title function_">Counter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// [변하는 초기값을 담을 변수, 왼쪽초기값의 변경을 도와주는 함수]  = useState(초기값 설정);</span></span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>현재 카운터 값은 &#123;value&#125;입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setValue(value + 1)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setValue(value - 1)&#125;&gt;-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="4-useEffect-Hook"><a href="#4-useEffect-Hook" class="headerlink" title="4. useEffect Hook"></a>4. useEffect Hook</h1><ul><li><a href="https://reactjs.org/docs/hooks-effect.html">Using the Effect Hook</a></li><li><code>useEffect</code> &#x3D; 리액트 <strong>컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 설정</strong>할 수 있는 Hook</li><li>useEffect 안에 적은 코드는 HTML 렌더링 이후에 동작</li><li>시간이 오래 걸리는 작업이 있다면? <strong>useEffect에 넣어두기!</strong><ul><li>useEffect 안에 적으면 HTML 보여주고 나서 시간이 오래 걸리는 작업 실행</li><li>조금이라도 HTML 렌더링이 빠른 사이트를 원하면, useEffect 안에 넣어놓기</li></ul></li><li>React 만든사람이 이 함수를 useEffect라고 작명한 이유<ul><li>함수안에 코드짤 때 <strong>함수의 핵심기능 외에 쓸데없는 기능</strong>들을 프로그래밍 용어로 <code>side effect</code>라고 부름</li><li>useEffect도 컴포넌트의 핵심 기능은 HTML 렌더링이라 <strong>그거 외의 쓸데없는 기능들은 useEffect 안에</strong> 적으라는 소리</li><li>오래걸리는 반복연산, 서버에서 데이터가져오는 작업, 타이머다는거 이런건 useEffect 안에 많이 적기</li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useState, useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 여기적은 코드는 컴포넌트 로드 &amp; 업데이트 마다 실행됨</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-1-useEffect-2가지-형태"><a href="#4-1-useEffect-2가지-형태" class="headerlink" title="4.1 useEffect 2가지 형태"></a>4.1 useEffect 2가지 형태</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 함수의 인자로 콜백함수만 받는 경우</span></span><br><span class="line"><span class="comment">// - 컴포넌트가 렌더링 될때 마다 실행</span></span><br><span class="line"><span class="comment">// - 컴포넌트가 맨 처음 화면에 렌더링 &amp; 다시 렌더링될 떄</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 작업</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 함수의 인자로 (콜백함수, 배열)을 받는 경우</span></span><br><span class="line"><span class="comment">// - (1) 컴포넌트가 맨 처음 화면 렌더링될 떄 실행</span></span><br><span class="line"><span class="comment">// - (2) 배열 요소 안에 있는 value값이 바뀔 떄 실행</span></span><br><span class="line"><span class="comment">// - 2번쨰 배열 요소로 빈 배열[]을 전달하면, (1)만 실행됨</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 작업</span></span><br><span class="line">&#125;, [value]);</span><br></pre></td></tr></table></figure><hr><h2 id="4-2-Clean-Up-정리-작업"><a href="#4-2-Clean-Up-정리-작업" class="headerlink" title="4.2 Clean Up (정리 작업)"></a>4.2 Clean Up (정리 작업)</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 작업</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 예를 들어, 등록한 리스너를 제거해주는 작업을 여기서 함</span></span><br><span class="line">    <span class="comment">// 작업 정리</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><hr><h2 id="4-3-예제1-useEffect-사용"><a href="#4-3-예제1-useEffect-사용" class="headerlink" title="4.3 예제1 : useEffect 사용"></a>4.3 예제1 : useEffect 사용</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleCountUpdate</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleInputChange</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setName</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// // 렌더링마다 매번 실행 - 렌더링 이후</span></span><br><span class="line">  <span class="comment">// useEffect(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(&#x27;렌더링&#x27;);</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// // 마운트 + [count]가 변경될 떄만 useEffect 실행</span></span><br><span class="line">  <span class="comment">// useEffect(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(&#x27;🍉count 변화&#x27;);</span></span><br><span class="line">  <span class="comment">// &#125;, [count]);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// // 마운트 + [name]이 변경될 떄만 useEffect 실행</span></span><br><span class="line">  <span class="comment">// useEffect(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(&#x27;🍊name 변화&#x27;);</span></span><br><span class="line">  <span class="comment">// &#125;, [name]);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 맨 처음 렌더링될 떄만 실행</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;마운팅&#x27;</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleCountUpdate&#125;</span>&gt;</span>업데이트<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>count : &#123;count&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;name&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleInputChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>name : &#123;name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="4-4-예제2-useEffect-amp-Clean-Up"><a href="#4-4-예제2-useEffect-amp-Clean-Up" class="headerlink" title="4.4 예제2 : useEffect &amp; Clean Up"></a>4.4 예제2 : useEffect &amp; Clean Up</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [showTimer, setShowTimer] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;showTimer &amp;&amp; <span class="tag">&lt;<span class="name">Timer</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setShowTimer(!showTimer)&#125;&gt;Toggle Timer<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Timer</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;타이머 돌아가는중&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 정리 작업</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;타이머가 종료되었습니다.&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>타이머를 시작합니다. 콘솔 확인하세요.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><hr><h1 id="참고-공식문서"><a href="#참고-공식문서" class="headerlink" title="[참고] 공식문서"></a>[참고] 공식문서</h1><ul><li><a href="https://reactjs.org/docs/hooks-intro.html">Introduction to Hooks</a></li><li><a href="https://reactjs.org/docs/hooks-reference.html">Hooks Reference</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-12-Rendering - High Order Components(고차 컴포넌트)</title>
      <link href="/2022/12/22/Front-React-Basic-12-rendering06/"/>
      <url>/2022/12/22/Front-React-Basic-12-rendering06/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Higher-Order-Components"><a href="#1-Higher-Order-Components" class="headerlink" title="1. Higher-Order Components"></a>1. Higher-Order Components</h1><ul><li>고차 컴포넌트(HOC, Higher Order Component)<ul><li><strong>컴포넌트를 인자로 받거나 반환하는 반환하는 함수</strong></li><li>장점 : <strong>컴포넌트 로직을 재사용</strong>할 수 있음</li><li>결국 재사용할려고 씀</li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EnhancedComponent</span> = <span class="title function_">higherOrderComponent</span>(<span class="title class_">WrappedComponent</span>);</span><br></pre></td></tr></table></figure><p>컴포넌트는 props를 UI로 변환하는 반면에, 고차 컴포넌트는 컴포넌트를 새로운 컴포넌트로 변환합니다.</p><hr><h1 id="2-예시"><a href="#2-예시" class="headerlink" title="2. 예시"></a>2. 예시</h1><p>2개의 컴포넌트(Button, Input)를 만듭니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Input</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">defaultValue</span>=<span class="string">&#x27;input 기본값&#x27;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Input</span> <span class="keyword">from</span> <span class="string">&#x27;./components/12_HOC/Input&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&#x27;./components/12_HOC/Button&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Input</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 상태에서 공통적인 기능을 넣고싶다면?</p><ol><li>HOC으로 하기<ul><li>함수형 컴포넌트가 생기고 hook이 도입된 이후, HOC을 사용하는 경우는 많이 줄어들고 있음</li><li>HOC이 보통 클래스형 컴포넌트에서 LifeCycle을 고려한 재사용 가능한 로직을 만들기 위해 사용되기 때문</li><li>함수형 컴포넌트에서는 거의 대부분 hook으로 대체 가능</li><li>대표적 HOC인 Redux 라이브러리의 connect만 봐도, useSelector와 useDispatch를 사용하는게 직관적이고 간편</li></ul></li><li>Custom Hook으로 하기 - 14에 나옴</li></ol><hr><h2 id="2-1-공통-기능-넣기"><a href="#2-1-공통-기능-넣기" class="headerlink" title="2.1 공통 기능 넣기"></a>2.1 공통 기능 넣기</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">setLoading</span>(<span class="literal">false</span>), <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> loading ? <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>로딩 중...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 Button 컴포넌트의 기능들을 모든 컴포넌트에 넣고싶다면?</p><ul><li>해당 로직을 HOC로 분리</li><li>HOC는 이름 지을 떄는 with로 시작하는게 관행임</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">withLoading</span>(<span class="params">Component</span>) &#123;</span><br><span class="line">  <span class="comment">// 로딩화면을 3초 보여준 후에 컴포넌트를 보여주는 기능</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">WithLoaindgComponent</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">setLoading</span>(<span class="literal">false</span>), <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loading ? <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>로딩 중...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">WithLoaindgComponent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 기능을 분리하고, 다음처럼 재사용하고 싶은 컴포넌트를 인자로 붙여주면 됩니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> withLoading <span class="keyword">from</span> <span class="string">&#x27;./withLoading&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>버튼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withLoading</span>(<span class="title class_">Button</span>); <span class="comment">// HOC함수(재사용할 컴포넌트)</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> withLoading <span class="keyword">from</span> <span class="string">&#x27;./withLoading&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Input</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">defaultValue</span>=<span class="string">&#x27;input 기본값&#x27;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withLoading</span>(<span class="title class_">Input</span>); <span class="comment">// HOC함수(재사용할 컴포넌트)</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-주의사항"><a href="#3-주의사항" class="headerlink" title="3. 주의사항"></a>3. 주의사항</h1><ul><li><p>render 메서드 안에 고차 컴포넌트 사용 X</p><ul><li>React는 가상 DOM으로 기존 서브트리를 업데이트할지 새 노드를 추가할지 결정함</li><li>이전 렌더링된 컴포넌트와 동일하면, 새 서브 트리와 비교해 재귀적으로 업데이트함</li></ul></li><li><p>정적 메서드는 반드시 따로 복사</p><ul><li>컴포넌트에 HOC를 적용하면, 기존 컴포넌트는 컨테이너의 컴포넌트로 감싸짐</li><li>새 컴포넌트는 기존 컴포넌트의 정적 메서드를 가지고 있지 않음</li><li><a href="https://github.com/mridgway/hoist-non-react-statics">hoist-non-react-statics</a>를 사용해 모든 non-React 정적 메서드를 자동으로 복사함</li></ul></li><li><p>ref는 전달안됨</p><ul><li>React는 ref를 prop이 아닌 key처럼 특별하게 취급해서</li></ul></li></ul><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li><a href="https://reactjs.org/docs/higher-order-components.html">https://reactjs.org/docs/higher-order-components.html</a></li><li><a href="https://ko.reactjs.org/docs/higher-order-components.html">https://ko.reactjs.org/docs/higher-order-components.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-11-Rendering - Events(이벤트)</title>
      <link href="/2022/12/22/Front-React-Basic-11-rendering05/"/>
      <url>/2022/12/22/Front-React-Basic-11-rendering05/</url>
      
        <content type="html"><![CDATA[<h1 id="1-HTML의-Event"><a href="#1-HTML의-Event" class="headerlink" title="1. HTML의 Event"></a>1. HTML의 Event</h1><ul><li><code>이벤트(event)</code> : 사용자가 웹 브라우저에서 DOM 요소들과 상호 작용하는 것<ul><li>e.g. 버튼에 마우스 커서를 올렸을 때는 <code>onmouseover</code>이벤트를 실행</li><li>e.g. 클릭했을 때는 <code>onclick</code>이벤트를 실행</li><li>e.g. <code>Form</code>요소는 값이 바뀔 때 <code>onchange</code>이벤트를 실행</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Event 예제<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;눌렀네?&#x27;)&quot;</span>&gt;</span>눌러보세용<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-React의-Event"><a href="#2-React의-Event" class="headerlink" title="2. React의 Event"></a>2. React의 Event</h1><p>리액트의 이벤트 시스템은 웹 브라우저의 HTML 이벤트와 인터페이스가 동일하기 때문에 사용법이 비슷합니다.</p><h2 id="2-1-이벤트는-카멜-표기법으로-작성"><a href="#2-1-이벤트는-카멜-표기법으로-작성" class="headerlink" title="2.1 이벤트는 카멜 표기법으로 작성"></a>2.1 이벤트는 카멜 표기법으로 작성</h2><p>예를 들어, HTML은 다음과 작성</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;activateLasers()&quot;</span>&gt;</span>Activate Lasers<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>React에서는 이벤트를 카멜표기법으로 작성 (HTML의 onclick은 리액트에서는 onClick)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;activateLasers&#125;&gt;<span class="title class_">Activate</span> <span class="title class_">Lasers</span>&lt;/button&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-preventDefault를-명시적으로-호출"><a href="#2-2-preventDefault를-명시적으로-호출" class="headerlink" title="2.2 preventDefault를 명시적으로 호출"></a>2.2 preventDefault를 명시적으로 호출</h2><p>React에서는 <code>false</code>를 반환해도 기본 동작을 방지할 수 없습니다. 반드시 <code>preventDefault</code>를 꼭 호출해야 합니다.</p><p>예를 들어, 일반 HTML에서 폼을 제출할 때 가지고 있는 기본 동작을 방지하기 위해 다음과 같은 코드를 작성할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&quot;console.log(&#x27;You clicked submit.&#x27;); return false&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>React에서는 다음과 같이 작성할 수 있습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Form</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 여기서 e는 합성 이벤트</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleSubmit</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;You clicked submit.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서 <code>e</code>는 합성 이벤트입니다.<br>React는 <a href="https://www.w3.org/TR/DOM-Level-3-Events/">W3C 명세</a>에 따라 합성 이벤트를 정의하기 때문에 브라우저 호환성에 대해 걱정할 필요가 없습니다.<br>React 이벤트는 브라우저 고유 이벤트와 정확히 동일하게 동작하지는 않습니다.<br>더 자세한 사항은 <a href="https://ko.reactjs.org/docs/events.html"><code>합성 이벤트</code></a>을 참고하시기 바랍니다.</p><p>React를 사용할 때 DOM 엘리먼트가 생성된 후 리스너를 추가하기 위해 <code>addEventListener</code>를 호출할 필요가 없습니다.<br>대신, 엘리먼트가 처음 렌더링될 때 리스너를 제공하면 됩니다.</p><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes">ES6 클래스</a>를 사용하여 컴포넌트를 정의할 때, 일반적인 패턴은 이벤트 핸들러를 클래스의 메서드로 만드는 것입니다.<br>예를 들어, 다음 <code>Toggle</code> 컴포넌트는 사용자가 “ON”과 “OFF” 상태를 토글 할 수 있는 버튼을 렌더링합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Toggle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">isToggleOn</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 콜백에서 `this`가 작동하려면 아래와 같이 바인딩 해주어야 함</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">prevState</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">isToggleOn</span>: !prevState.<span class="property">isToggleOn</span>,</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>&#123;this.state.isToggleOn ? &#x27;ON&#x27; : &#x27;OFF&#x27;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Toggle</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure><p>JSX 콜백 안에서 <code>this</code>의 의미에 대해 주의해야 합니다.<br>JavaScript에서 클래스 메서드는 기본적으로 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">바인딩</a>되어 있지 않습니다.<br><code>this.handleClick</code>을 바인딩하지 않고 <code>onClick</code>에 전달하였다면, 함수가 실제 호출될 때 <code>this</code>는 <code>undefined</code>가 됩니다.</p><p>이건 JS에서 함수가 동작하는 방식으로 <code>onClick=&#123;this.handleClick&#125;</code>과 같이 뒤에 <code>()</code>를 사용하지 않고 메서드를 참조할 경우,<br>해당 메서드를 바인딩 해야 합니다.</p><hr><h2 id="2-3-주의사항-정리"><a href="#2-3-주의사항-정리" class="headerlink" title="2.3 주의사항 정리"></a>2.3 주의사항 정리</h2><ul><li><code>이벤트는 카멜 표기법으로 작성</code><ul><li>HTML의 onclick은 리액트에서는 onClick</li></ul></li><li>React에서는 <code>false</code>를 반환해도 기본 동작을 방지할 수 없습니다.<ul><li>반드시 <code>preventDefault</code>를 명시적으로 호출해야 합</li></ul></li><li><code>이벤트에 실행할 자바스크립트 코드를 전달하는 것이 아니라, 함수 형태의 값을 전달</code><ul><li>HTML에서 이벤트를 설정할 때는 큰따옴표 안에 실행 코드를 넣었지만, 리액트에서는 함수 형태의 객체를 전달</li><li>위 버튼 예제에도 화살표 함수로 함수를 만들어 전달</li><li>이렇게 함수를 만들어 전달해도 되고, 렌더링 부분 외부에 미리 만들어서 전달해도 됨</li></ul></li><li><code>DOM 요소에만 이벤트를 설정 가능</code><ul><li><code>div, button, input, form, span</code>등의 DOM 요소에는 이벤트를 설정할 수 있지만,</li><li>직접 만든 컴포넌트에는 이벤트를 자체적으로 설정할 수 없음</li></ul></li></ul><p>예를 들어 다음처럼 직접 만든 <code>MyComponent</code>에 <code>onClick</code>값을 설정하면</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyComponent onClick=&#123;doSomething&#125;/&gt;</span><br></pre></td></tr></table></figure><ul><li><code>MyComponent</code>를 클릭할 때, <code>doSomething</code>함수를 실행하는 것이 아니라,</li><li>그냥 이름이 <code>onClick</code>인 <code>props</code>를 <code>MyComponent</code>에게 전달하는 것임</li></ul><hr><h1 id="3-지원하는-이벤트-종류"><a href="#3-지원하는-이벤트-종류" class="headerlink" title="3. 지원하는 이벤트 종류"></a>3. 지원하는 이벤트 종류</h1><p>React의 이벤트들은 이벤트 버블링 단계에서 호출됨</p><ul><li><a href="https://ko.reactjs.org/docs/events.html#clipboard-events">Clipboard 이벤트</a></li><li><a href="https://ko.reactjs.org/docs/events.html#composition-events">Composition 이벤트</a></li><li><a href="https://ko.reactjs.org/docs/events.html#keyboard-events">Keyboard 이벤트</a></li><li><a href="https://ko.reactjs.org/docs/events.html#focus-events">Focus 이벤트</a></li><li><a href="https://ko.reactjs.org/docs/events.html#form-events">Form 이벤트</a></li><li><a href="https://ko.reactjs.org/docs/events.html#generic-events">Generic 이벤트</a></li><li><a href="https://ko.reactjs.org/docs/events.html#mouse-events">Mouse 이벤트</a></li><li><a href="https://ko.reactjs.org/docs/events.html#pointer-events">Pointer 이벤트</a></li><li><a href="https://ko.reactjs.org/docs/events.html#selection-events">Selection 이벤트</a></li><li><a href="https://ko.reactjs.org/docs/events.html#touch-events">Touch 이벤트</a></li><li><a href="https://ko.reactjs.org/docs/events.html#ui-events">UI 이벤트</a></li><li><a href="https://ko.reactjs.org/docs/events.html#wheel-events">Wheel 이벤트</a></li><li><a href="https://ko.reactjs.org/docs/events.html#media-events">Media 이벤트</a></li><li><a href="https://ko.reactjs.org/docs/events.html#image-events">Image 이벤트</a></li><li><a href="https://ko.reactjs.org/docs/events.html#animation-events">Animation 이벤트</a></li><li><a href="https://ko.reactjs.org/docs/events.html#transition-events">Transition 이벤트</a></li><li><a href="https://ko.reactjs.org/docs/events.html#other-events">기타 이벤트</a></li><li>c.f. <a href="https://reactjs.org/docs/events.html">React 공식문서 합성이벤트(SyntheticEvent)</a></li></ul><hr><h1 id="4-예시"><a href="#4-예시" class="headerlink" title="4. 예시"></a>4. 예시</h1><ul><li>캡처링 &#x3D; 부모 요소의 어떤 자식이 불렀는지 체크함</li><li>버블링 &#x3D; 자식 요소가 부모 요소에 불렀는지 체크함<ul><li>캡처링 이후에 수행</li><li>캡처링 단계에서 쓰고 싶으면…<ul><li>즉, 자식이 부모보다 먼저 인식되게 만들고 싶을 떄 사용</li></ul></li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Event</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;버튼 눌렀네?🤡 - 세번쨰 호출&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClickCapture</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;handleClickCapture 버튼👽 - 첫번쨰 호출&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClickCapture2</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;handleClickCapture2 버튼🤪 - 두번쨰 호출&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClickBubble</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;handleClickBubble 버튼😫 - 네번쨰 호출&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClickCapture</span>=<span class="string">&#123;handleClickCapture&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">onClickCapture</span>=<span class="string">&#123;handleClickCapture2&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClickBubble&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li><a href="https://reactjs.org/docs/handling-events.html">Handling Events in React</a></li><li><a href="https://reactjs.org/docs/events.html">Synthetic Events in React</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-10-Rendering - Refs Hooks</title>
      <link href="/2022/12/22/Front-React-Basic-10-rendering04/"/>
      <url>/2022/12/22/Front-React-Basic-10-rendering04/</url>
      
        <content type="html"><![CDATA[<h1 id="1-useRef-변수-관리"><a href="#1-useRef-변수-관리" class="headerlink" title="1. useRef : 변수 관리"></a>1. useRef : 변수 관리</h1><h2 id="1-1-개념"><a href="#1-1-개념" class="headerlink" title="1.1 개념"></a>1.1 개념</h2><p>함수형 컴포넌트에서 useRef를 부르면, ref 오브젝트를 반환합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ref = <span class="title function_">useRef</span>(value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ref 오브젝트는 &#123; currnt: value &#125; &lt;- 이런 식으로 생성됨</span></span><br><span class="line"><span class="comment">// useRef의 인자로 넣어준 value는 ref안에 current에 저장됨</span></span><br><span class="line"><span class="comment">// ref 오브젝트는 수정이 가능하기 때문에, 언제든 원하는 값으루 수정할 수 있음</span></span><br></pre></td></tr></table></figure><p>반환된 ref는 컴포넌트의 전체 생애주기를 통과해도 유지가 됩니다.<br>즉, 컴포넌트가 <code>unmount(연결 해제)</code>되기 전까지는 값을 그대로 유지할 수 있다는 소리입니다.</p><p>useRef가 유용한 상황 2가지</p><ol><li>ref가 state와 비슷하게,<code> 저장공간으로 사용하는 경우</code><ul><li>State의 변화 → 렌더링 → 컴포넌트 내부 변수들 초기화</li><li><code>Ref의 변화 → No 렌더링 → 변수들의 값이 유지됨</code></li><li>State의 변화 → 렌더링 → 그래도 Ref의 값은 유지됨</li></ul></li><li><code>DOM 요소에 접근하는 경우</code><ul><li>e.g. Input요소를 클릭하지 않아도, focus를 주고싶은 경우<ul><li>사용자가 로그인화면에 들어갔을 떄, 마우스로 입력 란을 클릭하지 않아도,</li><li>foucs효과를 있고, 바로 키보드로 입력을 할 수 있게 해줌</li><li>마치 Vanila JS의 <code>Document.querySelector()</code>의 역할</li></ul></li></ul></li></ol><hr><h2 id="1-2-예제-Ref와-State-비교"><a href="#1-2-예제-Ref와-State-비교" class="headerlink" title="1.2 예제 : Ref와 State 비교"></a>1.2 예제 : Ref와 State 비교</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// React에서 state가 변경되는 것 = 컴포넌트가 리렌더링</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Ref는 아무리 수정해도, 컴포넌트를 다시 렌더링하지 않음</span></span><br><span class="line">  <span class="keyword">const</span> countRef = <span class="title function_">useRef</span>(<span class="number">0</span>); <span class="comment">// countRef.current로 접근</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;렌더링&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increaseCountState</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increaseCountRef</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    countRef.<span class="property">current</span> = countRef.<span class="property">current</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Ref :&#x27;</span>, countRef.<span class="property">current</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>State : &#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Ref : &#123;countRef.current&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increaseCountState&#125;</span>&gt;</span>State 올려<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increaseCountRef&#125;</span>&gt;</span>Ref 올려<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="1-3-예제2-Ref와-변수-비교"><a href="#1-3-예제2-Ref와-변수-비교" class="headerlink" title="1.3 예제2 : Ref와 변수 비교"></a>1.3 예제2 : Ref와 변수 비교</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 컴포넌트가 렌더링 된다는 것 = 컴포넌트를 나타내는 함수가 다시 불린다는 것</span></span><br><span class="line">  <span class="comment">// 함수가 불릴 떄마다 함수 내부의 변수들은 초기화됨</span></span><br><span class="line">  <span class="comment">// 그렇지만 Ref는 아무리 렌더링되도 값을 유지함</span></span><br><span class="line">  <span class="keyword">const</span> [renderer, setRenderer] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> countRef = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">let</span> countVar = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">doRendering</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setRenderer</span>(renderer + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increaseRef</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    countRef.<span class="property">current</span> = countRef.<span class="property">current</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ref: &#x27;</span>, countRef.<span class="property">current</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increaseVar</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    countVar = countVar + <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;var: &#x27;</span>, countVar);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">printResults</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`ref : <span class="subst">$&#123;countRef.current&#125;</span>, var: <span class="subst">$&#123;countVar&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Ref : &#123;countRef.current&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Var : &#123;countVar&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;doRendering&#125;</span>&gt;</span>렌더!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increaseRef&#125;</span>&gt;</span>Ref 올려<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increaseVar&#125;</span>&gt;</span>Var 올려<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;printResults&#125;</span>&gt;</span>Ref, Var 값 출력<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="1-4-예제3-무한루프"><a href="#1-4-예제3-무한루프" class="headerlink" title="1.4 예제3 : 무한루프"></a>1.4 예제3 : 무한루프</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useRef, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> renderCount = <span class="title function_">useRef</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 무한 루프에 빠짐, State끼리 서로 렌더링되어서</span></span><br><span class="line">  <span class="comment">// const [renderCount, setRenderCount] = useState(1);</span></span><br><span class="line">  <span class="comment">// useEffect(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(&#x27;렌더링&#x27;);</span></span><br><span class="line">  <span class="comment">//   setRenderCount(renderCount + 1);</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Ref는 리렌더링을 발생시키지 않으니까, 무한루프에 안빠짐</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    renderCount.<span class="property">current</span> = renderCount.<span class="property">current</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;렌더링 수 :&#x27;</span>, renderCount.<span class="property">current</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>countVar : &#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;올려!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><hr><h1 id="2-useRef-DOM-요소-접근"><a href="#2-useRef-DOM-요소-접근" class="headerlink" title="2. useRef : DOM 요소 접근"></a>2. useRef : DOM 요소 접근</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(inputRef);</span></span><br><span class="line">    inputRef.<span class="property">current</span>.<span class="title function_">focus</span>(); <span class="comment">// 렌더링되면 자동으로 focus됨</span></span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">login</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`환영합니다 <span class="subst">$&#123;inputRef.current.value&#125;</span>`</span>);</span><br><span class="line">    inputRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;username&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;login&#125;</span>&gt;</span>로그인<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li><a href="https://reactjs.org/docs/refs-and-the-dom.html">공식 사이트 Refs and DOM</a></li><li><a href="https://youtu.be/LwvXVEHS638">https://youtu.be/LwvXVEHS638</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-09-Rendering - Render Props - 작성중</title>
      <link href="/2022/12/22/Front-React-Basic-09-rendering03/"/>
      <url>/2022/12/22/Front-React-Basic-09-rendering03/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Render-Props"><a href="#1-Render-Props" class="headerlink" title="1. Render Props"></a>1. Render Props</h1><p>Render Props &#x3D; <strong>무엇을 렌더링 할지 컴포넌트에 알려주는 함수</strong></p><ul><li><p><strong>React 컴포넌트 간에 코드를 공유하기 위해 함수 props를 이용</strong>하는 법</p></li><li><p>코드 재사용을 위한 방법 중 하나 <code>( Composition | HOC | Render Props ... )</code></p></li><li><p>Render &#x3D; (뭔가) 제공, 주다</p></li><li><p>Render Props를 사용하는 라이브러리는 <a href="https://reacttraining.com/react-router/web/api/Route/Route-render-methods">React Router</a>, <a href="https://github.com/paypal/downshift">Downshift</a>, <a href="https://github.com/jaredpalmer/formik">Formik</a></p></li><li><p>c.f. <a href="https://ko.reactjs.org/docs/render-props.html">https://ko.reactjs.org/docs/render-props.html</a></p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">DataProvider</span> render=&#123;<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;data.target&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p>Render Props 패턴으로 구현된 컴포넌트는 자체적으로 렌더링 로직을 구현하는 대신,<br>React 엘리먼트 요소를 반환하고 이를 호출하는 함수를 사용한다.</p><hr><h1 id="2-횡단-관심사-Cross-Cutting-Concerns"><a href="#2-횡단-관심사-Cross-Cutting-Concerns" class="headerlink" title="2. 횡단 관심사(Cross-Cutting Concerns)"></a>2. 횡단 관심사(Cross-Cutting Concerns)</h1><p>Cross-Cutting Concerns</p><ul><li>컴포넌트 A, B, C 간의 공통된 기능을 할 떄, <strong>핵심 적인 기능이 아닌 중간중간 삽입되어야 할 기능들</strong></li><li>e.g. 로깅, 보안, 트랜잭션 처리 등 비즈니스 핵심적인 기능이 아닌 다양한 횡단 관심이 발생</li><li>c.f. <code>관점 지향 프로그래밍(Aspect Oriented Programming; AOP)</code><ul><li>횡단 관심사(cross-cutting concern)의 분리를 허용함으로써, 모듈성을 증가시키는 것이 목적인 프로그래밍 패러다임</li><li>다시 말해, 코드 상에서 각각의 관점을 <strong>핵심적인 관점과, 부가적인 관점으로 나누어보고</strong>,<ul><li>그 관점을 기준으로 <strong>각각 분리</strong>하는 것을 의미</li></ul></li></ul></li></ul><hr><h1 id="3-예시"><a href="#3-예시" class="headerlink" title="3. 예시"></a>3. 예시</h1><p>마우스를 따라다니는 이미지를 붙이고 싶으면?</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 마우스가 움직일 때마다 좌표를 알 수 있는 Mouse 컴포넌트</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Mouse</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [mousePosition, setMousePosition] = <span class="title function_">useState</span>(&#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseMove</span> = (<span class="params">event</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setMousePosition</span>(&#123; <span class="attr">x</span>: event.<span class="property">clientX</span>, <span class="attr">y</span>: event.<span class="property">clientY</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> &#x27;<span class="attr">100vh</span>&#x27; &#125;&#125; <span class="attr">onMouseMove</span>=<span class="string">&#123;handleMouseMove&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Image</span> <span class="attr">position</span>=<span class="string">&#123;mousePosition&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      Mouse X = &#123;mousePosition.x&#125; Y = &#123;mousePosition.y&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// styled components 라이브러리를 사용해서 이미지 대신 사용함</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Image</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  width: 30px;</span></span><br><span class="line"><span class="string">  height: 30px;</span></span><br><span class="line"><span class="string">  background-color: red;</span></span><br><span class="line"><span class="string">  position: absolute;</span></span><br><span class="line"><span class="string">  left: <span class="subst">$&#123;(&#123; position &#125;) =&gt; position.x&#125;</span>px;</span></span><br><span class="line"><span class="string">  top: <span class="subst">$&#123;(&#123; position &#125;) =&gt; position.y&#125;</span>px;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p>위와 같이 하드코딩하면, 다른 이미지를 렌더링 하고 싶을 땐 또다시 하드코딩으로 바꿔야 한다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Mouse</span> <span class="keyword">from</span> <span class="string">&#x27;./components/renderProps/Mouse&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Image</span> <span class="keyword">from</span> <span class="string">&#x27;./components/renderProps/Image&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* Mouse 컴포넌트에 render props로 렌더링 할 컴포넌트를 넘김 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Mouse</span> <span class="attr">render</span>=<span class="string">&#123;(position)</span> =&gt;</span> <span class="tag">&lt;<span class="name">Image</span> <span class="attr">position</span>=<span class="string">&#123;position&#125;</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그래서 재사용을 위해서는 Mouse 컴포넌트에 render props로 렌더링 할 컴포넌트를 넘겨준다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. props로 render를 받음</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Mouse</span>(<span class="params">&#123; render &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [mousePosition, setMousePosition] = <span class="title function_">useState</span>(&#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseMove</span> = (<span class="params">event</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setMousePosition</span>(&#123; <span class="attr">x</span>: event.<span class="property">clientX</span>, <span class="attr">y</span>: event.<span class="property">clientY</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> &#x27;<span class="attr">100vh</span>&#x27; &#125;&#125; <span class="attr">onMouseMove</span>=<span class="string">&#123;handleMouseMove&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;render(mousePosition)&#125;</span></span><br><span class="line"><span class="language-xml">      마우스의 X좌표 = &#123;mousePosition.x&#125;, Y좌표 = &#123;mousePosition.y&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mouse 컴포넌트에서 props로 render를 받아서 사용하게 되면 어떤 이미지를 넘겨주어도 사용 가능</p><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li><a href="https://reactjs.org/docs/render-props.html">React 공식문서 Render Props</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-08-Rendering - Lists and Keys</title>
      <link href="/2022/12/22/Front-React-Basic-08-rendering02/"/>
      <url>/2022/12/22/Front-React-Basic-08-rendering02/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Lists"><a href="#1-Lists" class="headerlink" title="1. Lists"></a>1. Lists</h1><h2 id="1-1-JS-map"><a href="#1-1-JS-map" class="headerlink" title="1.1 JS map()"></a>1.1 JS map()</h2><p>for 반복문은 JSX 중괄호 안에서 사용할 수 없어서 <code>map()</code>을 대신 사용합니다.<br>모든 array 자료 우측엔 map() 함수를 붙일 수 있습니다.</p><h3 id="1-1-1-배열-요소만큼-반복실행"><a href="#1-1-1-배열-요소만큼-반복실행" class="headerlink" title="1.1.1 배열 요소만큼 반복실행"></a>1.1.1 배열 요소만큼 반복실행</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">array.<span class="title function_">map</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>); <span class="comment">// 1이 3번 출력</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="1-1-2-콜백함수"><a href="#1-1-2-콜백함수" class="headerlink" title="1.1.2 콜백함수"></a>1.1.2 콜백함수</h3><p>콜백함수에 파라미터 아무렇게나 작명하면, 그 파라미터는 array 안에 있던 모든 자료를 하나씩 출력해줍니다.<br>(그냥 소괄호안에 있는 함수를 <code>콜백함수</code>라고 합니다).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">array.<span class="title function_">map</span>(<span class="function">(<span class="params">Element</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Element</span>); <span class="comment">// 2, 3, 4</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="1-1-3-요소-조작해-새-배열로"><a href="#1-1-3-요소-조작해-새-배열로" class="headerlink" title="1.1.3 요소 조작해 새 배열로"></a>1.1.3 요소 조작해 새 배열로</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">map</span>(<span class="function">(<span class="params">Element</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Element</span> * <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray); <span class="comment">// [20, 30, 40]</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-2-Rendering-Multiple-Components"><a href="#1-2-Rendering-Multiple-Components" class="headerlink" title="1.2 Rendering Multiple Components"></a>1.2 Rendering Multiple Components</h2><ul><li>Rendering Multiple Components &#x3D; 다수 컴포넌트 렌더링</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> listItems = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">numbers</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;numbers&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 전체 listItems 배열을 &lt;ul&gt; 요소 안에 삽입한 뒤 DOM에서 렌더링</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;listItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>); <span class="comment">// 1부터 5까지의 숫자로 이루어진 리스트</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-3-Basic-List-Component"><a href="#1-3-Basic-List-Component" class="headerlink" title="1.3 Basic List Component"></a>1.3 Basic List Component</h2><p>보통 리스트를 컴포넌트 안에서 렌더링합니다.<br>위 코드의 <code>numbers</code> 배열을 받아서 순서없는 목록을 출력하는 컴포넌트로 리팩토링할 수 있습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">NumberList</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.<span class="property">numbers</span>;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">number</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;number.toString()&#125;</span>&gt;</span>&#123;number&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;listItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">NumberList</span> <span class="attr">numbers</span>=<span class="string">&#123;numbers&#125;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure><p>이 코드를 실행하면, 리스트 아이템에 키를 넣어야한다는 경고가 표시됩니다.<br><code>키(key)</code>는 요소 리스트를 만들 때 포함해야하는 특수한 문자열 속성입니다.</p><hr><h1 id="2-Key"><a href="#2-Key" class="headerlink" title="2. Key"></a>2. Key</h1><ul><li><code>key</code> &#x3D; 어떤 아이템인지 인식하는 판별하는 ID<ul><li>key 값은 고유해야 함</li></ul></li><li>key 값은 html을 랜더링 할 때, 변경된 html만 랜더링, 최적화 하기 위해 사용</li></ul><p>키를 선택하는 가장 좋은 방법은 리스트 아이템의 형제 중 리스트 아이템을 고유하게 식별할 수 있는 문자열을 사용하는 것입니다.<br>대부분의 경우 데이터의 ID를 키로 사용합니다.</p><p><strong>아이템의 순서가 바뀔 수 있는 경우 키에 인덱스를 사용하지 않는 게</strong> 좋습니다.<br>이로 인해 성능이 저하되거나 컴포넌트의 state에 따른 문제가 발생할 수 있습니다</p><hr><h2 id="2-1-key로-컴포넌트-추출"><a href="#2-1-key로-컴포넌트-추출" class="headerlink" title="2.1 key로 컴포넌트 추출"></a>2.1 key로 컴포넌트 추출</h2><p>key는 주변 배열의 컨텍스트에서만 의미가 있습니다.</p><p>예를 들어, <code>ListItem</code> 컴포넌트를추출한 경우,<br><code>ListItem</code> 자체의 루트 <code>&lt;li&gt;</code> 요소가 아닌 배열의 <code>&lt;ListItem /&gt;</code> 요소가 키를 가지고 있어야합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ListItem</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="comment">// Correct! There is no need to specify the key here:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;props.value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">NumberList</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.<span class="property">numbers</span>;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">number</span>) =&gt;</span> (</span><br><span class="line">    <span class="comment">// Correct! Key should be specified inside the array.</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ListItem</span> <span class="attr">key</span>=<span class="string">&#123;number.toString()&#125;</span> <span class="attr">value</span>=<span class="string">&#123;number&#125;</span> /&gt;</span></span></span><br><span class="line">  ));</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;listItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">NumberList</span> <span class="attr">numbers</span>=<span class="string">&#123;numbers&#125;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-JSX에서-map-포함하는-법"><a href="#2-2-JSX에서-map-포함하는-법" class="headerlink" title="2.2 JSX에서 map() 포함하는 법"></a>2.2 JSX에서 map() 포함하는 법</h2><p>JSX는 <strong>중괄호를 이용하면 모든 표현식을 포함</strong>할 수 있기 때문에 map() 도 인라인으로 포함시킬 수 있습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ListItem</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;props.value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">NumberList</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.<span class="property">numbers</span>;</span><br><span class="line">  <span class="comment">// 중광호를 이용해 map() 넣을 수 있음</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;numbers.map((number) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ListItem</span> <span class="attr">key</span>=<span class="string">&#123;number.toString()&#125;</span> <span class="attr">value</span>=<span class="string">&#123;number&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">NumberList</span> <span class="attr">numbers</span>=<span class="string">&#123;numbers&#125;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure><p>때로는 코드가 더 명확해질 수도 있지만 이 스타일도 악용될 수 있습니다.<br>JS와 마찬가지로 가독성을 위해 변수로 추출해야할 지에 대한건 개발자가 판단해야합니다.<br>map() 바디가 너무 중첩되어있다면, 컴포넌트로 추출 하는 것이 좋습니다.</p><hr><h1 id="3-예제"><a href="#3-예제" class="headerlink" title="3. 예제"></a>3. 예제</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [inputValue, setInputValue] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [list, setList] = <span class="title function_">useState</span>([<span class="string">&#x27;밥먹기&#x27;</span>, <span class="string">&#x27;코딩하기&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">addTodoList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setList</span>(<span class="function">(<span class="params">prevList</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> [inputValue, ...prevList];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">setInputValue</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;inputValue&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setInputValue(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addTodoList&#125;</span>&gt;</span>추가<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;list.map((item) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>콘솔 창을 보면, key가 없다고 Warning 창이 나옴</p><ul><li>뿐만 아니라, Elements탭을 킨 채로 값을 추가해보면, 모든 DOM li 요소가 한번에 업데이트됨</li><li>왜냐하면 key값이 없어서, React는 어떤 항목이 업데이트됐는지 몰라서, 모든 항목을 업데이트해줌</li><li>만약 항목이 100만개 있다면, 새 항목을 추가할 떄마다 100만개를 업데이트해줌 (비효율적)</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 생략</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;inputValue&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setInputValue(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addTodoList&#125;</span>&gt;</span>추가<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;list.map((item) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          // key값이 없으면 경고가 뜬다. key값은 고유한 값이어야 하고, index를 사용하면 안된다.</span></span><br><span class="line"><span class="language-xml">          // 이제 전체 항목을 업데이트하는 것이 아니라, 특정 key값의 항목만 추가한다.</span></span><br><span class="line"><span class="language-xml">          return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>key값을 추가해주면, 항목을 추가할 때, 전체 항목을 업데이트하는 것이 아니라, 특정 key값의 항목만 추가한다.</p><hr><h2 id="3-1-key값으로-index를-사용X⭐"><a href="#3-1-key값으로-index를-사용X⭐" class="headerlink" title="3.1 key값으로 index를 사용X⭐"></a>3.1 key값으로 index를 사용X⭐</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 생략</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;inputValue&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setInputValue(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addTodoList&#125;</span>&gt;</span>추가<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;list.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          // key값이 없으면 경고가 뜬다. key값은 고유한 값이어야 하고, index를 사용하면 안된다.</span></span><br><span class="line"><span class="language-xml">          // index는 안정적(고정적)이지 않기 때문에, 새 항목을 추가하면, index 순서가 추가한 만큼 밀림</span></span><br><span class="line"><span class="language-xml">          // 그래서 React는 key값이 고정적이지 않다고 판단해서, 새 항목을 추가하면, 전체 항목을 업데이트함</span></span><br><span class="line"><span class="language-xml">          return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>추가적으로 key값으로 index를 쓰면 안됩니다.<br>왜냐하면 <strong>index는 안정적(고정적)이지 않기 때문</strong>에, <strong>새 항목을 추가하면, index 순서가 추가한 만큼 밀리게 됩니다</strong>.<br>그래서 React는 key값이 고정적이지 않다고 판단해서, <strong>새 항목을 추가하면, 전체 항목을 업데이트</strong>합니다.</p><hr><h2 id="3-2-key값은-고유해야-함"><a href="#3-2-key값은-고유해야-함" class="headerlink" title="3.2 key값은 고유해야 함"></a>3.2 key값은 고유해야 함</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [inputValue, setInputValue] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [list, setList] = <span class="title function_">useState</span>([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;밥먹기&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;코딩하기&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">addTodoList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setList</span>(<span class="function">(<span class="params">prevList</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: list.<span class="property">length</span> + <span class="number">1</span> + <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">value</span>: inputValue,</span><br><span class="line">        &#125;,</span><br><span class="line">        ...prevList,</span><br><span class="line">      ];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">setInputValue</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;inputValue&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setInputValue(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addTodoList&#125;</span>&gt;</span>추가<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;list.map((item) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="참고-공식문서"><a href="#참고-공식문서" class="headerlink" title="[참고] 공식문서"></a>[참고] 공식문서</h1><ul><li><a href="https://reactjs.org/docs/lists-and-keys.html">Official DocsLists and Keys</a></li><li>별코딩</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-07-Rendering - Component Life Cycle</title>
      <link href="/2022/12/22/Front-React-Basic-07-rendering01/"/>
      <url>/2022/12/22/Front-React-Basic-07-rendering01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Component-Life-Cycle"><a href="#1-Component-Life-Cycle" class="headerlink" title="1. Component Life Cycle"></a>1. Component Life Cycle</h1><p>컴포넌트한테도 인생이 있음. 컴포넌트는</p><ol><li><strong>생성</strong>이 될 수도 있고 (<strong>mount</strong>)</li><li><strong>재렌더링</strong>이 될 수도 있고 (<strong>update</strong>)</li><li><strong>삭제</strong>가 될 수도 있습니다. (<strong>unmount</strong>)</li></ol><p>컴포넌트의 인생을 배우는 이유는 <strong>컴포넌트 인생 중간중간에 간섭할 수 있기 때문</strong>입니다.</p><ul><li>간섭이 뭐냐면? 그냥 코드실행<ul><li><strong>컴포넌트가 장착이 될 때, 특정 코드를 실행</strong></li><li><strong>컴포넌트가 업데이트될 때, 특정 코드를 실행</strong></li></ul></li></ul><p>예시</p><ul><li>“<strong>App 컴포넌트 등장 전에</strong> 이것좀 해줘”</li><li>“<strong>App 컴포넌트 사라지기 전에</strong> 이것좀 해줘”</li><li>“<strong>App 컴포넌트 업데이트 되고나서</strong> 이것좀 해줘”</li></ul><p>이렇게 코드좀 실행해달라고 간섭할 수 있는데, 간섭은 <code>갈고리(Hooks)</code>를 달아서 합니다.<br>그래서 저걸 <strong>Lifecycle hook</strong>이라고 부름</p><hr><h1 id="2-class-컴포넌트에서-Life-Cycle"><a href="#2-class-컴포넌트에서-Life-Cycle" class="headerlink" title="2. class 컴포넌트에서 Life Cycle"></a>2. class 컴포넌트에서 Life Cycle</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이렇게 class 문법을 사용해서 선언함</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// App 컴포넌트가 로드되고나서 실행할 코드</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// App 컴포넌트가 업데이트 되고나서 실행할 코드</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// App 컴포넌트가 삭제되기전에 실행할 코드</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;react&#x27;</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://ko.reactjs.org/docs/react-component.html">https://ko.reactjs.org/docs/react-component.html</a><ul><li>예전에 작성한 코드를 볼 떄, 유지보수해야할 떄 찾아서 보기</li></ul></li></ul><hr><h1 id="참고-공식문서"><a href="#참고-공식문서" class="headerlink" title="[참고] 공식문서"></a>[참고] 공식문서</h1><ul><li><a href="https://reactjs.org/docs/react-component.html#the-component-lifecycle">The Component Lifecycle</a> (컴포넌트의 생명주기)</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-06-Components Basic - Composition vs Inheritance</title>
      <link href="/2022/12/22/Front-React-Basic-06-components05/"/>
      <url>/2022/12/22/Front-React-Basic-06-components05/</url>
      
        <content type="html"><![CDATA[<h1 id="1-컴포넌트단위로-합성-composition-vs-상속-inheritance"><a href="#1-컴포넌트단위로-합성-composition-vs-상속-inheritance" class="headerlink" title="1. 컴포넌트단위로 합성(composition) vs 상속(inheritance)"></a>1. 컴포넌트단위로 합성(composition) vs 상속(inheritance)</h1><p>React는 강력한 구성 모델을 가지고 있어서, 코드를 재사용하려면 상속 대신 합성을 사용하는 것이 좋습니다.</p><ul><li><code>상속(inheritance)</code><ul><li>extends 키워드를 사용해서 부모의 모든 속성과 메서드를 물려받는 방법</li><li>상속은 부모와 자식간에 의존성이 강하게 결합되어있어서 유연함이 부족하므로 좋은 방법은 아님</li></ul></li><li><code>컴포넌트단위로 합성(composition)</code><ul><li>컴포넌트끼리 합쳐서 사용하는 방법</li><li>Facebook에서도 수천개의 컴포넌트를 사용하고 있지만 상속을 안쓰고, Props 와 컴포지션을 사용</li></ul></li></ul><p>UI가 아닌 기능을 여러 컴포넌트에서 재사용하기를 원한다면, 별도의 JavaScript 모듈로 분리하는 것이 좋습니다.<br>상속받을 필요없이, 컴포넌트에서 해당 함수, 객체, 클래스 등을 import 하여 사용할 수 있습니다.</p><hr><h1 id="2-Containment-x3D-컴포넌트에서-다른-컴포넌트를-담기"><a href="#2-Containment-x3D-컴포넌트에서-다른-컴포넌트를-담기" class="headerlink" title="2. Containment &#x3D; 컴포넌트에서 다른 컴포넌트를 담기"></a>2. Containment &#x3D; 컴포넌트에서 다른 컴포넌트를 담기</h1><p>어떤 컴포넌트들은 어떤 자식 엘리먼트가 들어올 지 미리 예상할 수 없는 경우가 있습니다.<br>범용적인 ‘박스’ 역할을 하는 <code>Sidebar</code> 혹은 <code>Dialog</code>와 같은 컴포넌트에서 특히 자주 볼 수 있습니다.</p><p>이러한 컴포넌트에서는자식 prop을 사용하여 자식 엘리먼트를 출력에 그대로 전달하는 것이 좋습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FancyBorder</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>&#x27;<span class="attr">FancyBorder</span> <span class="attr">FancyBorder-</span>&#x27; + <span class="attr">props.color</span>&#125;&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">WelcomeDialog</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// &lt;FancyBorder&gt; JSX 태그 안에 있는 것들이 FancyBorder 컴포넌트의 자식 prop으로 전달</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">FancyBorder</span> <span class="attr">color</span>=<span class="string">&#x27;blue&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>제목<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>설명 뭐시기<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">FancyBorder</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">WelcomeDialog</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure><hr><h1 id="3-Specialization-특수화"><a href="#3-Specialization-특수화" class="headerlink" title="3. Specialization(특수화)"></a>3. Specialization(특수화)</h1><p>때로는 어떤 컴포넌트의 “특수한 경우”인 컴포넌트를 고려해야 하는 경우가 있습니다.<br>예를 들어, <code>WelcomeDialog</code>는 <code>Dialog</code>의 특수한 경우라고 할 수 있습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FancyBorder</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>&#x27;<span class="attr">FancyBorder</span> <span class="attr">FancyBorder-</span>&#x27; + <span class="attr">props.color</span>&#125;&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dialog</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">FancyBorder</span> <span class="attr">color</span>=<span class="string">&#x27;blue&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&#x27;Dialog-title&#x27;</span>&gt;</span>&#123;props.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;Dialog-message&#x27;</span>&gt;</span>&#123;props.message&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">FancyBorder</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 특수 기능을 가진 WelcomeDialog</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">WelcomeDialog</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Dialog</span> <span class="attr">title</span>=<span class="string">&#x27;특수화&#x27;</span> <span class="attr">message</span>=<span class="string">&#x27;쉽네&#x27;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>더 “구체적인” 컴포넌트가 “일반적인” 컴포넌트를 렌더링하고 props를 통해 내용을 구성합니다.</p><hr><h1 id="참고-공식문서"><a href="#참고-공식문서" class="headerlink" title="[참고] 공식문서"></a>[참고] 공식문서</h1><ul><li><a href="https://reactjs.org/docs/composition-vs-inheritance.html">Composition vs Inheritance</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-05-Components Basic - Conditional Rendering(조건부 렌더링)</title>
      <link href="/2022/12/22/Front-React-Basic-05-components04/"/>
      <url>/2022/12/22/Front-React-Basic-05-components04/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Conditional-Rendering-이란"><a href="#1-Conditional-Rendering-이란" class="headerlink" title="1. Conditional Rendering 이란?"></a>1. Conditional Rendering 이란?</h1><ul><li><a href="https://reactjs.org/docs/conditional-rendering.html">Conditional Rendering</a></li><li><code>조건부 렌더링</code> &#x3D; 특정 조건에 따라 다른 결과물을 렌더링 하는 것</li><li>JSX 에서 <strong>null, false, undefined 를 렌더링하게 된다면 아무것도 나타나지 않음</strong></li><li>React의 조건부 렌더링은 JS랑 똑같이 동작함<ul><li>if 또는 조건 연산자같은 JS 연산자를 사용하여 현재 상태를 나타내는 요소를 만들고,</li><li>이에 맞게 React가 UI를 업데이트함</li></ul></li><li>조건부 렌더링하는 방법<ul><li>삼항연산자 사용</li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Hello</span>(<span class="params">&#123; color, name, isSpecial &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// isSpecial 값이 true 라면 &lt;b&gt;*&lt;/b&gt; 를, 그렇지 않다면 null</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isSpecial ? <span class="tag">&lt;<span class="name">b</span>&gt;</span>*<span class="tag">&lt;/<span class="name">b</span>&gt;</span> : null&#125;</span></span><br><span class="line"><span class="language-xml">      안녕하세요 &#123;name&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="2-Truthy-and-Falsy"><a href="#2-Truthy-and-Falsy" class="headerlink" title="2. Truthy and Falsy"></a>2. Truthy and Falsy</h1><ul><li><code>Truthy</code> : true 같은 값을 가지는 것<ul><li>e.g. <code>true, &#123;&#125;, [], 42, -42, “0”, “false”, new Date(), Infinity, 3.14</code></li><li><a href="https://developer.mozilla.org/ko/docs/Glossary/Truthy">MDN Truthy</a></li></ul></li><li><code>Falsy</code> : false 같은 값을 가지는 것<ul><li>e.g. <code>false, null, undefined, 0, -0, NaN, “”</code></li><li><a href="https://developer.mozilla.org/ko/docs/Glossary/Falsy">MDN Falsy</a></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">person</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;메시&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// print함수의 파라미터가 비어있으면 에러💥</span></span><br><span class="line"><span class="title function_">print</span>(); <span class="comment">// TypeError: Cannot read property &#x27;name&#x27; of undefined</span></span><br></pre></td></tr></table></figure><p>만약에 다음과 같이 print 에 null 값이 파라미터로 전달되면 어떨까요?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">person</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (person === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person이 없네요&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">print</span>(person); <span class="comment">// TypeError: Cannot read property &#x27;name&#x27; of null</span></span><br></pre></td></tr></table></figure><p>person 이 undefined 이거나, null 인 상황을 대비하려면 다음과 같이 코드를 작성합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">person</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (person === <span class="literal">undefined</span> || person === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person이 없네요&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">print</span>(person);</span><br></pre></td></tr></table></figure><hr><h2 id="2-1-undefined와-null인-경우"><a href="#2-1-undefined와-null인-경우" class="headerlink" title="2.1 undefined와 null인 경우"></a>2.1 undefined와 null인 경우</h2><p>위 코드는 다음과 같이 축약해서 작성 할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">person</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. undefined 와 null 은 Falsy 한 값</span></span><br><span class="line">  <span class="comment">// 2. Falsy 한 값 앞에 느낌표를 붙여주면 true 로전환</span></span><br><span class="line">  <span class="keyword">if</span> (!person) &#123;</span><br><span class="line">    <span class="comment">// &lt;- 📝 person이 undefined나 null인 경우</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person이 없네요&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">print</span>(person);</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-if문에서-Truthy-한-값-체크"><a href="#2-2-if문에서-Truthy-한-값-체크" class="headerlink" title="2.2 if문에서 Truthy 한 값 체크"></a>2.2 if문에서 Truthy 한 값 체크</h2><p>Truthy 한 값과 Falsy 한 값은 if 문에서도 사용 가능</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. value 가 Truthy 한 값이기 때문에, 콘솔에 메시지가 출력됨</span></span><br><span class="line"><span class="comment">// 2. 반면, value 가 null, undefined, 0, &#x27;&#x27;, NaN 중 하나라면, 나타나지 않음</span></span><br><span class="line"><span class="keyword">if</span> (value) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;value 가 Truthy 하네요.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="3-short-circuit-evaluation-단축평가-계산"><a href="#3-short-circuit-evaluation-단축평가-계산" class="headerlink" title="3. short-circuit evaluation(단축평가 계산)"></a>3. short-circuit evaluation(단축평가 계산)</h1><h2 id="3-1-AND-OR-연산자"><a href="#3-1-AND-OR-연산자" class="headerlink" title="3.1 AND, OR 연산자"></a>3.1 AND, OR 연산자</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 📝 AND(&amp;&amp;) 연산자</span></span><br><span class="line"><span class="literal">true</span> &amp;&amp; <span class="literal">true</span>; <span class="comment">// true</span></span><br><span class="line"><span class="literal">true</span> &amp;&amp; <span class="literal">false</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 📝 OR(||) 연산자</span></span><br><span class="line"><span class="literal">true</span> || <span class="literal">false</span>; <span class="comment">// true</span></span><br><span class="line"><span class="literal">false</span> || <span class="literal">true</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-2-if문에서-Truthy-한-값-체크"><a href="#3-2-if문에서-Truthy-한-값-체크" class="headerlink" title="3.2 if문에서 Truthy 한 값 체크"></a>3.2 if문에서 Truthy 한 값 체크</h2><p>예를 들어, 다음과 같은 코드가 있다고 가정합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dog = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;멍멍이&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">animal</span>) &#123;</span><br><span class="line">  <span class="comment">// 2. animal 객체가 undefined 이기 때문에</span></span><br><span class="line">  <span class="keyword">return</span> animal.<span class="property">name</span>; <span class="comment">// 3. undefined 에서 name 값을 조회 할 수 없어서 에러 발생😭</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. getName의 파라미터에 제대로된 객체가 주어지지 않으면?</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="title function_">getName</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br></pre></td></tr></table></figure><p>함수에서 animal 값이 제대로 주어졌을 때만 name을 조회하고, 그렇지 않을때는 그냥 undefined를 반환하게 하고 싶으면?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">animal</span>) &#123;</span><br><span class="line">  <span class="comment">// animal 값이 제대로 주어졌을 때만 name을 조회</span></span><br><span class="line">  <span class="comment">// animal 값이 없으면 undefined 반환</span></span><br><span class="line">  <span class="keyword">if</span> (animal) &#123;</span><br><span class="line">    <span class="keyword">return</span> animal.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3-amp-amp-연산자로-코드-단축"><a href="#3-3-amp-amp-연산자로-코드-단축" class="headerlink" title="3.3 &amp;&amp; 연산자로 코드 단축"></a>3.3 &amp;&amp; 연산자로 코드 단축</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dog = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;멍멍이&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">animal</span>) &#123;</span><br><span class="line">  <span class="comment">// animal 값이 제대로 주어졌을 때만 animal.name 반환</span></span><br><span class="line">  <span class="comment">// animal 값이 없으면 undefined 반환</span></span><br><span class="line">  <span class="keyword">return</span> animal &amp;&amp; animal.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="title function_">getName</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>추가 예시</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &amp;&amp; <span class="string">&#x27;hello&#x27;</span>); <span class="comment">// hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &amp;&amp; <span class="string">&#x27;hello&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span> &amp;&amp; <span class="string">&#x27;bye&#x27;</span>); <span class="comment">// bye</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> &amp;&amp; <span class="string">&#x27;hello&#x27;</span>); <span class="comment">// null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> &amp;&amp; <span class="string">&#x27;hello&#x27;</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="string">&#x27;hello&#x27;</span>); <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> &amp;&amp; <span class="string">&#x27;hello&#x27;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &amp;&amp; <span class="string">&#x27;hello&#x27;</span>); <span class="comment">// hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &amp;&amp; <span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-4-연산자로-코드-단축"><a href="#3-4-연산자로-코드-단축" class="headerlink" title="3.4 || 연산자로 코드 단축"></a>3.4 || 연산자로 코드 단축</h2><p>만약 어떤 값이 Falsy 하다면 대체로 사용할 값을 지정해줄 때, 사용 가능</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">animal</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> name = animal &amp;&amp; animal.<span class="property">name</span>;</span><br><span class="line">  <span class="keyword">if</span> (!name) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;이름이 없는 동물입니다&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 <code>||</code> 연산자를 사용하면 다음과 같이 단축시킬 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">animal</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> name = animal &amp;&amp; animal.<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// name이 falsy한값이라면, ||의 오른쪽의 값 출력</span></span><br><span class="line">  <span class="keyword">return</span> name || <span class="string">&#x27;이름이 없는 동물입니다.&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="4-Conditional-Rendering"><a href="#4-Conditional-Rendering" class="headerlink" title="4.. Conditional Rendering"></a>4.. Conditional Rendering</h1><p>보통 삼항연산자를 사용한 조건부 렌더링을 주로 특정 조건에 따라 보여줘야 하는 내용이 다를 때 사용합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Hello</span>(<span class="params">&#123; name, isSpecial &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// isSpecial이 false일땐 false이고, isSpecial이 true 일 땐 &lt;b&gt;*&lt;/b&gt;</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isSpecial &amp;&amp; <span class="tag">&lt;<span class="name">b</span>&gt;</span>*<span class="tag">&lt;/<span class="name">b</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      안녕하세요 &#123;name&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-1-props-값-설정을-생략하면-x3D-true"><a href="#4-1-props-값-설정을-생략하면-x3D-true" class="headerlink" title="4.1 props 값 설정을 생략하면 &#x3D;{true}"></a>4.1 props 값 설정을 생략하면 &#x3D;{true}</h2><p>컴포넌트의 props 값을 설정하게 될 때 만약 props 이름만 작성하고 값 설정을 생략한다면, 이를 <code>true</code> 로 설정한 것으로 간주함</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* isSpecial 이름만 넣어주면 isSpecial=&#123;true&#125;와 동일한 의미 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">&#x27;react&#x27;</span> <span class="attr">color</span>=<span class="string">&#x27;red&#x27;</span> <span class="attr">isSpecial</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Hello</span> <span class="attr">color</span>=<span class="string">&#x27;pink&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-04-Components Basic - Props vs State</title>
      <link href="/2022/12/22/Front-React-Basic-04-components03/"/>
      <url>/2022/12/22/Front-React-Basic-04-components03/</url>
      
        <content type="html"><![CDATA[<h1 id="1-State"><a href="#1-State" class="headerlink" title="1. State"></a>1. State</h1><ul><li><a href="https://reactjs.org/docs/faq-state.html">Component State</a></li><li>React v16.8 이전 버전에서는 함수형 컴포넌트에 staet를 사용 불가능했음</li><li>리액트 v16.8 업데이트 이후 <code>Hooks</code>라는 기능이 도입되면서, 함수형 컴포넌트에 staet를 사용 가능</li><li>그래서 리액트에는 두 가지 종류의 <code>state</code>가 있음<ol><li><code>클래스형 컴포넌트</code>에서 쓰는<code>state</code></li><li><code>함수형 컴포넌트</code>에서 <code>useState()</code>라는 함수를 통해 사용하는 <code>state</code></li></ol></li><li><code>State</code> &#x3D; 바뀌는 데이터</li></ul><hr><h2 id="1-1-함수형-컴포넌트에서-state-사용"><a href="#1-1-함수형-컴포넌트에서-state-사용" class="headerlink" title="1.1 함수형 컴포넌트에서 state 사용"></a>1.1 함수형 컴포넌트에서 state 사용</h2><blockquote><p>💡 JS 문법 : Destructuring (비구조화 할당)</p><p>Array에 있는 데이터들을 변수로 쉽게 저장하고 싶으면 쓰는 문법</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 배열에 있는 값이 유용해서 변수로 빼려면? */</span></span><br><span class="line"><span class="comment">// 📝 기존 방법</span></span><br><span class="line"><span class="keyword">let</span> num = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> a = num[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> b = num[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//  📝 Destructuring 문법 : Array에 있는 값을 변수로 빼줌</span></span><br><span class="line"><span class="comment">// 왼쪽 오른쪽 형식을 똑같이 맞춰주시면 자동으로 알아서 변수가 생성됨</span></span><br><span class="line"><span class="keyword">let</span> [c, d] = [<span class="number">1</span>, <span class="number">2</span>];</span><br></pre></td></tr></table></figure></blockquote><p>state 쓰려면 react로부터 import 해와야 합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>; <span class="comment">// 추가</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// [초기변수, 변경도와주는 함수] = useState(초기값)</span></span><br><span class="line">  <span class="keyword">let</span> [a, b] = <span class="title function_">useState</span>(<span class="string">&#x27;저쩌구&#x27;</span>); <span class="comment">// [&#x27;저쩌구&#x27;, state변경을 도와주는 함수]</span></span><br><span class="line">  <span class="comment">// a 변수에는 &#x27;저쩌구&#x27;라는 값이 초기값으로 할당</span></span><br><span class="line">  <span class="comment">// b 함수는 a 변수의 값의 수정을 도와주는 함수가 항당</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;a&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-2-변수-대신-state-쓰는-이유"><a href="#1-2-변수-대신-state-쓰는-이유" class="headerlink" title="1.2 변수 대신 state 쓰는 이유"></a>1.2 변수 대신 state 쓰는 이유</h2><ul><li><code>state</code> &#x3D; <strong>값이 변하는 변수같은 거</strong><ul><li>변동사항이 생기면 state쓰는 HTML도 자동으로 재렌더링해줌</li><li>e.g. 상품명, 글제목, 가격처럼 자주 변할 것 같은 데이터들</li></ul></li><li>그렇다면 바뀌지 않는 데이터들은? state로 굳이 저장할 필요없음<ul><li>e.g. 로고같은 것들</li></ul></li></ul><hr><h1 id="2-Props"><a href="#2-Props" class="headerlink" title="2. Props"></a>2. Props</h1><ul><li><code>Props</code> &#x3D; 컴포넌트 속성을 설정할 때 사용하는 요소<ul><li><strong>부모의 state 가져오기</strong></li><li><strong>함수 파라미터</strong>랑 같은 문법</li></ul></li><li>컴포넌트 2개가 부모&#x2F;자식 관계인 경우엔 가능</li><li>부모 컴포넌트의 state를 자식 컴포넌트로 전송</li><li>c.f. properties(속성)의 약어</li><li>c.f. <a href="https://reactjs.org/docs/components-and-props.html">https://reactjs.org/docs/components-and-props.html</a></li><li>c.f. <a href="https://ko.reactjs.org/docs/components-and-props.html">https://ko.reactjs.org/docs/components-and-props.html</a></li></ul><hr><h2 id="2-1-컴포넌트-합성-Composing-Components"><a href="#2-1-컴포넌트-합성-Composing-Components" class="headerlink" title="2.1 컴포넌트 합성(Composing Components)"></a>2.1 컴포넌트 합성(Composing Components)</h2><ul><li>컴포넌트 합성(Composing) &#x3D; <strong>여러 개의 컴포넌트들을 하나로 만드는 것</strong></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 부모 컴포넌트의 state를 자식 컴포넌트 &lt;Modal&gt;에 전송</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Composition</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&#x27;메시&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&#x27;호날두&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&#x27;네이마르&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 자식컴포넌트 만드는 곳에 가서 props라는 파라미터 등록 후`props.받아온 부모state`로 사용</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-컴포넌트-추출-Extracting-Components"><a href="#2-2-컴포넌트-추출-Extracting-Components" class="headerlink" title="2.2 컴포넌트 추출(Extracting Components)"></a>2.2 컴포넌트 추출(Extracting Components)</h2><ul><li>컴포넌트 추출(Extracting) &#x3D; <strong>하나로 된 컴포넌트에서 의미있는 값들을 분리(추출)</strong></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formatDate</span>(<span class="params">date</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> date.<span class="title function_">toLocaleDateString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Comment</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;Comment&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;UserInfo&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&#x27;Avatar&#x27;</span> <span class="attr">src</span>=<span class="string">&#123;props.author.avatarUrl&#125;</span> <span class="attr">alt</span>=<span class="string">&#123;props.author.name&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;UserInfo-name&#x27;</span>&gt;</span>&#123;props.author.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;Comment-text&#x27;</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;Comment-date&#x27;</span>&gt;</span>&#123;formatDate(props.date)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> comment = &#123;</span><br><span class="line">  <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&#x27;I hope you enjoy learning React!&#x27;</span>,</span><br><span class="line">  <span class="attr">author</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Hello Kitty&#x27;</span>,</span><br><span class="line">    <span class="attr">avatarUrl</span>: <span class="string">&#x27;http://placekitten.com/g/64/64&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Extraction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Comment</span> <span class="attr">date</span>=<span class="string">&#123;comment.date&#125;</span> <span class="attr">text</span>=<span class="string">&#123;comment.text&#125;</span> <span class="attr">author</span>=<span class="string">&#123;comment.author&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드에서 의미있는 값들을 추출(분리)하면 아래처럼 추출(분리)할 수 있음</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formatDate</span>(<span class="params">date</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> date.<span class="title function_">toLocaleDateString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Comment 컴포넌트 안에 있던 여러 데이터들을 의미있는 값들을 기준으로 분리함</span></span><br><span class="line"><span class="comment">// 이렇게 분리하면 재사용성 좋음</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Avatar</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&#x27;Avatar&#x27;</span> <span class="attr">src</span>=<span class="string">&#123;props.user.avatarUrl&#125;</span> <span class="attr">alt</span>=<span class="string">&#123;props.user.name&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserInfo</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;UserInfo&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">user</span>=<span class="string">&#123;props.user&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;UserInfo-name&#x27;</span>&gt;</span>&#123;props.user.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Comment</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;Comment&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">UserInfo</span> <span class="attr">user</span>=<span class="string">&#123;props.author&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;Comment-text&#x27;</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;Comment-date&#x27;</span>&gt;</span>&#123;formatDate(props.date)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> comment = &#123;</span><br><span class="line">  <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&#x27;I hope you enjoy learning React!&#x27;</span>,</span><br><span class="line">  <span class="attr">author</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Hello Kitty&#x27;</span>,</span><br><span class="line">    <span class="attr">avatarUrl</span>: <span class="string">&#x27;http://placekitten.com/g/64/64&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Extraction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Comment</span> <span class="attr">date</span>=<span class="string">&#123;comment.date&#125;</span> <span class="attr">text</span>=<span class="string">&#123;comment.text&#125;</span> <span class="attr">author</span>=<span class="string">&#123;comment.author&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-03-Components Basic - Component</title>
      <link href="/2022/12/22/Front-React-Basic-03-components02/"/>
      <url>/2022/12/22/Front-React-Basic-03-components02/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Components란"><a href="#1-Components란" class="headerlink" title="1. Components란?"></a>1. Components란?</h1><ul><li><code>Components</code> &#x3D; 독립되고 재사용가능한 단위 모듈<ul><li>e.g. 유저가 사용하는 시스템에 대한 조작장치<ul><li><strong>page</strong> : 모든 구성요소를 포함하는 가장 큰 단위로 single template와 multi-page template로 구분</li><li><strong>dialog</strong> : 대화상자</li><li><strong>header bar</strong> : 상단에 위치하면서 제목을 표시하고 페이지 이동과 관련된 버튼이 위치</li><li><strong>footer bar</strong> : 페이지 하단에 위치하면서 버튼이 위치</li><li><strong>navbars</strong> : 일반적으로 header bar나 footer bar 내에 위치하면서 특정한 페이지로 이동하는 메뉴의 역할</li><li><strong>button</strong> : 버튼</li><li><strong>form</strong> : 사용자로부터 데이터를 입력받는 컨트롤</li><li><strong>list view</strong> : 여러개의 항목을 열거하는데 사용되는 컨트롤</li></ul></li><li>e.g. 최신식 음식점<ul><li>키오스크</li><li>음식 만드는 인간</li><li>서빙하는 인간</li><li>손님앉을 자리</li><li>식재료 보관함 등등</li></ul></li></ul></li><li><code>React</code> &#x3D; Components들을 조합한 것들</li><li>공식 문서<ul><li><a href="https://reactjs.org/docs/components-and-props.html">Components and Props</a></li><li><a href="https://reactjs.org/docs/react-component.html">Components in Depth</a></li></ul></li></ul><hr><h1 id="2-Component를-선언하는-2가지-방법"><a href="#2-Component를-선언하는-2가지-방법" class="headerlink" title="2. Component를 선언하는 2가지 방법"></a>2. Component를 선언하는 2가지 방법</h1><p>컴포넌트를 선언하는 방식은 두 가지입니다.</p><ol><li><code>클래스형 컴포넌트</code> : 옛날에 나온 거</li><li><code>함수형 컴포넌트</code> : 권장하는 방식</li></ol><hr><h2 id="2-1-클래스형-컴포넌트"><a href="#2-1-클래스형-컴포넌트" class="headerlink" title="2.1 클래스형 컴포넌트"></a>2.1 클래스형 컴포넌트</h2><ul><li>React 초창기 방식, 이제 안씀</li><li>함수형 컴포넌트과 차이점<ul><li>뒤에서 배울 <code>state</code>기능 및 라이프사이클 기능을 사용 가능</li><li>임의 메서드를 정의할 수 있음</li><li><code>render()</code> 함수가 꼭 있어야 함</li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이렇게 class 문법을 사용해서 선언함</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// App 컴포넌트가 로드되고나서 실행할 코드</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// App 컴포넌트가 업데이트 되고나서 실행할 코드</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// App 컴포넌트가 삭제되기전에 실행할 코드</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;react&#x27;</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-함수형-컴포넌트"><a href="#2-2-함수형-컴포넌트" class="headerlink" title="2.2 함수형 컴포넌트"></a>2.2 함수형 컴포넌트</h2><ul><li>React에서 권장하는 방식</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;리액트&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;react&#x27;</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><ul><li>장점<ul><li>클래스형 컴포넌트보다 보기 좋음</li><li>메모리 자원도 클래스형 컴포넌트보다 덜 사용함</li></ul></li><li>단점<ul><li><code>state</code>와 라이프사이클 API의 사용 불가능,</li><li>위 단점은 리액트 v16.8 업데이트 이후 <code>Hooks</code>라는 기능이 도입되면서 해결됨</li></ul></li></ul><hr><h2 id="2-3-컴포넌트-생성-스니펫"><a href="#2-3-컴포넌트-생성-스니펫" class="headerlink" title="2.3 컴포넌트 생성 스니펫"></a>2.3 컴포넌트 생성 스니펫</h2><p>VSCode 확장 Reacts Code snippets을 사용하거나, 또는 직접 <code>global.code-snippets.json</code>을 작성해도 됩니다.<br><code>Ctrl + Shift + P</code>를 치고 <code>global.code-snippets</code>를 찾습니다.</p><ul><li><strong>스니펫(snippet) &#x3D; 코드 빨리 생성하기 위해 템플릿(&#x3D;틀)을 만들어둔 약어 모음집</strong></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// Place your snippets for javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and</span></span><br><span class="line">  <span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line">  <span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the</span></span><br><span class="line">  <span class="comment">// same ids are connected.</span></span><br><span class="line">  <span class="comment">// Example:</span></span><br><span class="line">  <span class="comment">// &quot;Print to console&quot;: &#123;</span></span><br><span class="line">  <span class="comment">// &quot;prefix&quot;: &quot;log&quot;,</span></span><br><span class="line">  <span class="comment">// &quot;body&quot;: [</span></span><br><span class="line">  <span class="comment">// &quot;console.log(&#x27;$1&#x27;);&quot;,</span></span><br><span class="line">  <span class="comment">// &quot;$2&quot;</span></span><br><span class="line">  <span class="comment">// ],</span></span><br><span class="line">  <span class="comment">// &quot;description&quot;: &quot;Log output to console&quot;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="attr">&quot;reactFunction&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rfc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;import React from &#x27;react&#x27;;\n\nexport default function $&#123;1:$&#123;TM_FILENAME_BASE&#125;&#125;() &#123;\n\treturn (\n\t\t&lt;div&gt;\n\t\t\t\n\t\t&lt;/div&gt;\n\t);\n&#125;\n\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Creates a React Function component&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;reactStatelessImplicitReturn&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rsi&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;import React from &#x27;react&#x27;;\n\nexport const $&#123;1:$&#123;TM_FILENAME_BASE&#125;&#125; = (props) =&gt; (\n\t\t\t$0\n\t);&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Creates a React Function component&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Import Module CSS&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icss&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;import styles from &#x27;./$TM_FILENAME_BASE.module.css&#x27;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Import PostCSS&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ClassName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;className=&#123;styles.$1&#125;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Adding className&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>rfc</code> : react 컴포넌트 생성</li><li><code>rsi</code></li><li><code>icss</code> : postCSS 추가</li><li><code>cn</code> : className 추가</li></ul><p>이제 빈 폴더에 위 명령어 입력하고 <code>Shift + Enter</code>하면 스니펫(코드 틀)이 자동 생성됨</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-02-Components Basic - JSX</title>
      <link href="/2022/12/22/Front-React-Basic-02-components01/"/>
      <url>/2022/12/22/Front-React-Basic-02-components01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-JSX-란"><a href="#1-JSX-란" class="headerlink" title="1. JSX 란?"></a>1. JSX 란?</h1><ul><li><a href="https://reactjs.org/docs/introducing-jsx.html">Introduction to JSX</a></li><li><a href="https://transform.tools/html-to-jsx">HTML 코드를 JSX 코드로 변환해주는 사이트</a></li><li>JSX<ul><li>자바스크립트 확장 문법</li><li>.js 파일에서 쓰는 HTML 대용품</li><li>왜 쓰냐<ul><li>가독성 높고 코드 작성하기 쉬워서</li></ul></li></ul></li><li>JSX는 공식적인 자바스크립트 문법이 아님<ul><li>Babel에서는 여러 문법을 지원할 수 있도록 preset 및 plugin을 설정</li><li>Babel을 통해 개발자들이 임의로 만든 문법, 혹은 차기 자바스크립트의 문법들을 사용 가능</li></ul></li></ul><blockquote><p>💡 .js vs .jsx</p><p>React 또는 React Native 프로젝트를 할 때 .js 확장자를 사용하는 경우도 있고 .jsx 확장자를 사용하는 경우도 있음</p><ul><li><a href="https://stackoverflow.com/questions/46169472/reactjs-js-vs-jsx">스택오버플로우 js vs jsx</a><ul><li>.js와 .jsx의 확장자로서의 차이는 없다고 함</li><li>React 코드를 JS로 바꾸는 과정에서 JSX들을 표준적인 js 파일로 바꿈</li><li>둘 중 하나 골라서 일관된 방법으로 확장자를 쓰기</li></ul></li></ul></blockquote><hr><h1 id="2-JSX-문법"><a href="#2-JSX-문법" class="headerlink" title="2. JSX 문법"></a>2. JSX 문법</h1><h2 id="2-1-감싸인-요소"><a href="#2-1-감싸인-요소" class="headerlink" title="2.1 감싸인 요소"></a>2.1 감싸인 요소</h2><p>컴포넌트에 여러 요소가 있다면 반드시 부모 요소 하나로 감싸야 함</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 여러 요소가 있다면 반드시 부모 요소(div) 하나로 감싸야 한다.</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>뭐시기<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>저시기<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>부모 요소에 div 사용하기 싫으면? React v16부터 도입된 <code>Fragment</code> 기능 쓰자</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 마땅히 감쌀 요소를 생각안나면, Fragment</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>뭐시기<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>저시기<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Fragment는 다음처럼 생략 가능</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>뭐시기<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>저시기<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-HTML에-JS-표현-로-표현"><a href="#2-2-HTML에-JS-표현-로-표현" class="headerlink" title="2.2 HTML에 JS 표현 : {}로 표현"></a>2.2 HTML에 JS 표현 : {}로 표현</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;리액트&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* &#123;&#125;로 감싸서 표현 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>데이터바인딩</code> : 변수에 있던걸 HTML에 꽂아넣는 것</li></ul><hr><h2 id="2-3-if문-대신-삼항-연산자"><a href="#2-3-if문-대신-삼항-연산자" class="headerlink" title="2.3 if문 대신 삼항 연산자"></a>2.3 if문 대신 삼항 연산자</h2><ul><li><strong>JSX 내부의 자바스크립트 표현식에서 if문을 사용 못함</strong></li><li>대신 <strong>삼항연산자</strong>을 사용하면 됨</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;리액트&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;name === &#x27;리액트&#x27; ? <span class="tag">&lt;<span class="name">h1</span>&gt;</span>리액트<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> : <span class="tag">&lt;<span class="name">h1</span>&gt;</span>리액트 아님<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4-for문-대신-map"><a href="#2-4-for문-대신-map" class="headerlink" title="2.4 for문 대신 map()"></a>2.4 for문 대신 map()</h2><ul><li><strong>JSX 내부의 자바스크립트 표현식에서 for문을 사용 못함</strong></li><li>대신 **map()**을 사용하면 됨</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">array.<span class="title function_">map</span>(<span class="function">(<span class="params">Element</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Element</span>); <span class="comment">// 2, 3, 4</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>JSX에서 HTML을 반복 생성하고 싶으면, 다음처럼 사용</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// `&lt;div&gt;안녕&lt;/div&gt;`이 3개 생성됨</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;[1, 2, 3].map(function () &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">div</span>&gt;</span>안녕<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 일반 for문 쓸려고 하면, 다음처럼 쓸 수는 있지만, 귀찮으니 map이 좋음</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>안녕<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;arr&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-5-AND-연산자로-조건부-렌더링"><a href="#2-5-AND-연산자로-조건부-렌더링" class="headerlink" title="2.5 AND 연산자로 조건부 렌더링"></a>2.5 AND 연산자로 조건부 렌더링</h2><ul><li>특정 조건을 만족할 때만 내용을 보여주고, 만족하지 않을 때는 아무것도 렌더링안할 떄,</li><li><code>AND 연산자(&amp;&amp;)</code>를 사용해서 조건부 렌더링 가능</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;리액트 아님&#x27;</span>;</span><br><span class="line">  <span class="comment">// name이 &#x27;리액트&#x27;이면, &lt;h1&gt;리액트입니다.&lt;/h1&gt;이거 보여주고</span></span><br><span class="line">  <span class="comment">// name이 다른 거라면, null 반환하셈</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;name === &#x27;리액트&#x27; &amp;&amp; <span class="tag">&lt;<span class="name">h1</span>&gt;</span>리액트임<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 위 문법과 같은 문법</span></span><br><span class="line">  <span class="comment">// return &lt;div&gt;&#123;name === &#x27;리액트&#x27; ? &lt;h1&gt;리액트입니다.&lt;/h1&gt; : null&#125;&lt;/div&gt;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-6-OR-연산자로-undefined-렌더링-안하기"><a href="#2-6-OR-연산자로-undefined-렌더링-안하기" class="headerlink" title="2.6 OR 연산자로 undefined 렌더링 안하기"></a>2.6 OR 연산자로 undefined 렌더링 안하기</h2><ul><li><code>OR(||) 연산자</code>를 사용하면 값이 <code>undefined</code>일 때, 오류를 방지 가능</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="comment">// 값이 undefined라서 오류가 날 떄, 오류 처리할 때</span></span><br><span class="line">  <span class="keyword">return</span> name || <span class="string">&#x27;값이 undefined임&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-7-인라인-스타일링"><a href="#2-7-인라인-스타일링" class="headerlink" title="2.7 인라인 스타일링"></a>2.7 인라인 스타일링</h2><ul><li>React에서 DOM 요소 스타일 적용할 떄는, 문자열이 아닌 객체 형태로 넣어야 됨</li><li><code>background-color</code>처럼 <code>-</code>문자가 포함되는 이름은 <code>카멜 표기법(camelCase)</code>으로 작성<ul><li>JS에서 -를 숫자 -로 인식해서 카멜표기법 사용하는 것임</li><li><code>background-color</code>는 <code>backgroundColor</code>로</li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> style = &#123;</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;aqua&#x27;</span>,</span><br><span class="line">    <span class="attr">fontSize</span>: <span class="string">&#x27;48px&#x27;</span>, <span class="comment">// font-size -&gt; fontSize</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span> 글씨 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또는</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&#123;&#123; <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>, <span class="attr">fontSize</span>: <span class="string">&#x27;30px&#x27;</span> &#125;&#125;&gt; 글씨 &lt;/div&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="2-8-HTML에-class-대신-className"><a href="#2-8-HTML에-class-대신-className" class="headerlink" title="2.8 HTML에 class 대신 className"></a>2.8 HTML에 class 대신 className</h2><ul><li>HTML에 class명을 <code>class=&quot; &quot;</code>가 아니라 <code>className=&quot; &quot;</code>이렇게 씀</li><li>왜냐하면 -를 숫자 -로 인식해서 카멜표기법으로 작성하는 것처럼,</li><li>JS에서 사용하는 예약어인 <code>class</code>라는 키워드가 있어 구분하기 위해서 <code>className</code>이라고 씀</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// class가 아니라 className 사용</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;react&#x27;</span>&gt;</span>글씨<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-9-주석"><a href="#2-9-주석" class="headerlink" title="2.9 주석"></a>2.9 주석</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 여기 주석은 이렇게 씀</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 주석은 이렇게 씀 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;react&#x27;</span>&gt;</span>글씨<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-React-Basic-01-React 쓰는 이유 &amp; 개발환경(CLI Tools)</title>
      <link href="/2022/12/22/Front-React-Basic-01-CLI/"/>
      <url>/2022/12/22/Front-React-Basic-01-CLI/</url>
      
        <content type="html"><![CDATA[<h1 id="1-React-쓰는-이유"><a href="#1-React-쓰는-이유" class="headerlink" title="1. React 쓰는 이유"></a>1. React 쓰는 이유</h1><ul><li>React &#x3D; User Interface를 만들기 위한 <strong>JavaScript 라이브러리</strong><ul><li>Facebook(Meta), AirBnb, Netflix, Instagram 등 정말 많은 곳에서 React를 사용</li><li>2013년 Facebook의 Jordan Walke가 만듬<ul><li><a href="https://twitter.com/jordwalke">Jordan Walke Twitter</a></li><li><a href="https://github.com/jordwalke">Jordan Walke GitHub</a></li></ul></li></ul></li></ul><p>Instagram 등의 같은 앱에 들어가면, 새로고침 없이 부드럽게 동작합니다.<br>이런 걸<code>Single Page Application (SPA)</code>이라고 함</p><ul><li>HTML 파일을 1개만 쓰고, 다른 페이지를 보여주고 싶을 때, HTML 일부분만 바꿔서 보여줌<ul><li>그래서 부드럽게 동작</li></ul></li><li>큰 프로젝트일 수록 HTML 관리 편해짐</li><li>React Native를 쓰면 같은 리액트 문법으로 모바일 앱개발도 가능</li></ul><hr><h2 id="1-1-SPA-CSR-SSG-SSR"><a href="#1-1-SPA-CSR-SSG-SSR" class="headerlink" title="1.1 SPA, CSR, SSG, SSR"></a>1.1 SPA, CSR, SSG, SSR</h2><ul><li><code>SPA (Single Page Application)</code><ul><li>사용자가 버튼을 클릭했을 떄, 다른 페이지를 다운로드하면 깜빡거리는 것이 아니라,</li><li>한 어플리케이션 내에서 어떤 컴포넌트를 보여줬다가 숨기는 등 페이지 내에서 동작하는 것</li></ul></li><li><code>CSR (Client Side Rendering)</code><ul><li>사용자가 웹 어플리케이션에 접속했을 떄, 즉각적으로 HTML을 보는 것이 아니라,</li><li>작성한 JS, React 라이브러리 등을 모두 다운로드 받은 후에 Client(사용자) 측에서 Rendering이 이루어짐</li></ul></li></ul><p>그 외 React와 함께 Gatsby, Next.js 프레임워크를 사용하면, SSG&#x2F;SSR를 함께 구현 가능</p><ul><li><code>SSG (Static Site Generation)</code></li><li><code>SSR (Server Side Rendering)</code></li></ul><hr><h2 id="1-2-라이브러리-vs-프레임워크"><a href="#1-2-라이브러리-vs-프레임워크" class="headerlink" title="1.2 라이브러리 vs 프레임워크"></a>1.2 라이브러리 vs 프레임워크</h2><ul><li><code>FrameWorks</code> : 무언가 만드는데 필요한 모든 것을 제공<ul><li>정해진 틀이 있고, 틀 안에서 원하는 것을 만듬</li><li>e.g. Angular, Android, IOS</li><li>단점<ul><li>프레임워크에서 권장하는 것을 모두 공부해야 함</li><li>자율성이 떨어짐. 정해진 규칙만 따라가야 함</li></ul></li></ul></li><li><code>Library</code> : 큰 골격이 정해져 있고, 좁은 문제를 해결하기 위한 솔루션 단위<ul><li>e.g. React</li><li>웹 어플리케이션을 만드는데 UI를 만드는 것을 도와주는 라이브러리 중 하나가 React</li><li>UI 관련 문제만 해결하는 라이브러리이기 때문에 배울 것이 상대적으로 적고, 진입장벽이 낮음</li></ul></li></ul><hr><h1 id="2-React-개발환경"><a href="#2-React-개발환경" class="headerlink" title="2. React 개발환경"></a>2. React 개발환경</h1><h2 id="2-1-준비물"><a href="#2-1-준비물" class="headerlink" title="2.1 준비물"></a>2.1 준비물</h2><ul><li><a href="https://nodejs.org/ko/">Node.js</a><ul><li>브라우저 밖에서 JavaScript를 실행할 수 있게 해주는 환경</li><li>Node.js 설치하면 NPM도 같이 설치됨</li></ul></li><li>NPM (Package Manager)<ul><li>외부 라이브러리를 쉽게 설치하고, 버전을 관리할 수 있게 해주는 도구</li><li>NPM을 쓰면, <code>package.json</code> 파일이 프로젝트 root에 자동으로 생성되는데, </li><li>여기에 프로젝트명, 프로젝트 버전, 모든 외부 라이브러의 버전이 적혀있음</li></ul></li><li>NPX<ul><li>npm 라이브러리를 개별적으로 실행하고 싶을 떄, 쓰는 도구</li><li><code>NPM</code>이 <strong>패키지를 관리</strong>한다면, <code>NPX</code>는 <strong>패키지를 개별적으로 실행하는 도구</strong></li></ul></li><li><a href="https://yarnpkg.com/getting-started/install">Yarn 쓰려면</a> (Package Manager)<ul><li>NPM과 같은 Package Manager로 NPM을 대체하는 것으로 yarn으로 facebook에서 만듬</li><li>NPM과 Yarn은 서로 호환이 되기 때문에, 추천하는 방식은 아니지만, NPM 썻다가 Yarn 썻다가 해도 됨</li><li>다만 NPM이든 Yarn이든 한 가지를 일관성있게 사용하는 것이 좋음</li><li>Yarn 쓰는 이유<ul><li>NPM은 사용하는 외부 라이브러리가 많을 수록 프로젝트를 실행하는 속도가 현저히 떨어짐</li><li>왜냐하면 필요한 라이브러리들을 하나씩 순차적으로 실행하고 설치하기 때문</li><li>Yarn은 필요한 라이브러리를 동시에 병렬적으로 설치하고 실행</li><li>NPM에 비해 상대적으로 빠르고, 보안 측면에서도 Yarn이 더 뛰어나다고 알려짐</li></ul></li></ul></li><li><a href="https://git-scm.com/downloads">Git</a></li><li>편집기 e.g. VSCode</li><li>북마크 해놓고 보기<ul><li><a href="https://reactjs.org/">React 공식 사이트</a> </li><li><a href="https://beta.reactjs.org/">React 베타 문서</a></li></ul></li></ul><hr><h2 id="2-2-React-개발에-자주-쓰는-CLI-Tool"><a href="#2-2-React-개발에-자주-쓰는-CLI-Tool" class="headerlink" title="2.2 React 개발에 자주 쓰는 CLI Tool"></a>2.2 React 개발에 자주 쓰는 CLI Tool</h2><ol><li><p><a href="https://create-react-app.dev/">create-react-app</a> (줄여서 CRA)</p><ul><li>Webpack bundler 사용</li></ul></li><li><p><a href="https://vitejs.dev/">vite</a></p><ol><li>Esbuild bundler 사용</li><li>Esbuild  &#x3D; go 언어로 작성된 자바스크립트 빌트툴</li><li>CRA보다 빠름</li></ol></li></ol><hr><h2 id="2-3-React-프로젝트-생성"><a href="#2-3-React-프로젝트-생성" class="headerlink" title="2.3 React 프로젝트 생성"></a>2.3 React 프로젝트 생성</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CRA 프로젝트 생성</span></span><br><span class="line">$ npx create-react-app 원하는프로젝트명</span><br><span class="line">$ <span class="built_in">cd</span> 생성한프로젝트명 <span class="comment"># 폴더 이동</span></span><br><span class="line">$ npm start</span><br><span class="line"></span><br><span class="line"><span class="comment"># Vite 프로젝트 생성</span></span><br><span class="line">$ npm create vite@latest</span><br><span class="line">$ yarn create vite</span><br><span class="line">$ npm run dev <span class="comment"># Vite 실행</span></span><br></pre></td></tr></table></figure><blockquote><p>💡 Vite 템플릿</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm 6.x</span></span><br><span class="line">npm create vite@latest <span class="variable">$&#123;디렉터리 명&#125;</span> --template <span class="variable">$&#123;템플릿 명&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># npm 7+</span></span><br><span class="line">npm create vite@latest <span class="variable">$&#123;디렉터리 명&#125;</span> -- --template <span class="variable">$&#123;템플릿 명&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JavaScript react 템플릿 생성</span></span><br><span class="line">npm create vite@latest vite-test -- --template react</span><br><span class="line"></span><br><span class="line"><span class="comment"># TypeScript react-ts 템플릿 생성</span></span><br><span class="line">npm create vite@latest vite-test -- --template react-ts</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="2-4-React-폴더-구조"><a href="#2-4-React-폴더-구조" class="headerlink" title="2.4 React 폴더 구조"></a>2.4 React 폴더 구조</h2><p>CRA 기준</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">React 프로젝트</span><br><span class="line">└─ 프로젝트명 <span class="comment"># 만든 프로젝트 명 </span></span><br><span class="line">   ├─ node_modules <span class="comment"># Node.js 라이브러리들 보관함</span></span><br><span class="line">   ├─ public <span class="comment"># static 파일 모아놓은 곳 (e.g. HTML, 이미지 등)</span></span><br><span class="line">   │  ├─ favicon.ico</span><br><span class="line">   │  ├─ index.html</span><br><span class="line">   │  ├─ logo192.png</span><br><span class="line">   │  ├─ logo512.png</span><br><span class="line">   │  ├─ manifest.json</span><br><span class="line">   │  └─ robots.txt</span><br><span class="line">   └─ src <span class="comment"># 코드 짜는 곳</span></span><br><span class="line">      ├─ App.css</span><br><span class="line">      ├─ App.js <span class="comment"># 메인 페이지</span></span><br><span class="line">      ├─ App.test.js</span><br><span class="line">      ├─ index.css</span><br><span class="line">      ├─ index.js</span><br><span class="line">      ├─ logo.svg</span><br><span class="line">      ├─ reportWebVitals.js</span><br><span class="line">      └─ setupTests.js</span><br><span class="line">   ├─ package-lock.json</span><br><span class="line">   ├─ package.json <span class="comment"># Node 프로젝트 정보(라이브러리 등)를 기입하는 곳</span></span><br><span class="line">   ├─ README.md</span><br></pre></td></tr></table></figure><hr><h1 id="3-React-특징-Virtual-Dom-Tree"><a href="#3-React-특징-Virtual-Dom-Tree" class="headerlink" title="3. React 특징 : Virtual Dom Tree"></a>3. React 특징 : Virtual Dom Tree</h1><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/React_1_1.png" alt="React_1_1"></p><p>HTML은 DOM Tree를 만들어서 웹페이지 구조를 tree 형태로 구현합니다.<br>DOM Tree에 변화가 일어나면 웹 브라우저가 CSS를 다시 연산하고, 레이아웃을 구성하고, 페이지를 리페인트합니다.<br>DOM Tree의 변경사항을 수정하는 과정이 시간이 허비됩니다.</p><p>그래서 React는 바로  브라우저의 Dom Tree를 바로 변경하는 것이 아니라, Virtual Dom Tree를 가집니다.<br>그래서 React에서 무언가 변경되면, 바로 Virtual DOM에 업데이트하는 것이 아니라,<br><strong>변경되기 이전에 Virtual DOM Tree와 비교</strong>를 하고, 다른 점을 판단한 다음에, 실제 DOM Tree에 업데이트를 합니다.</p><ul><li>그래서 React에서 아무리 state를 많이 변경해도, 브라우저에서는 실제 업데이트 노드만 업데이트되기 때문에 효율적</li><li>사용자가 느끼기에 빠르게 업데이트 되기 위해서는 최소 60fps속도가 되어야 함 (1초에 60개의 화면)</li></ul><hr><h1 id="참고"><a href="#참고" class="headerlink" title="[참고]"></a>[참고]</h1><ul><li><a href="https://roadmap.sh/react">React Developer 로드맵</a></li><li><a href="https://ko.reactjs.org/docs/getting-started.html">React 공식문서</a></li><li><a href="https://beta.reactjs.org/">React 공식 베타문서</a></li><li><a href="https://create-react-app.dev/">Create React App 공식문서</a></li><li><a href="https://vitejs.dev/">Vite 공식문서</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>영어 발음기호와 영영사전</title>
      <link href="/2022/12/21/En-Voca-01/"/>
      <url>/2022/12/21/En-Voca-01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-영어-발음-기호"><a href="#1-영어-발음-기호" class="headerlink" title="1. 영어 발음 기호"></a>1. 영어 발음 기호</h1><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/voca_1_1.png" alt="voca_1_1"></p><hr><h2 id="1-1-구글에-영어-발음-치는-법"><a href="#1-1-구글에-영어-발음-치는-법" class="headerlink" title="1.1. 구글에 영어 발음 치는 법"></a>1.1. 구글에 영어 발음 치는 법</h2><p>검색 창에 “corona pronunciation”라고 쳐보세요. 그러면 아래와 같이 발음 기호와 소리가 나옵니다.</p><blockquote><p>corona pronunciation [pruh · nuhn · see · <strong>ei</strong> · shn]</p></blockquote><ul><li>pronounce [pruh · nuhn · see] &#x3D; 뭔가 말하는 그림</li></ul><hr><h2 id="1-2-발음-교정"><a href="#1-2-발음-교정" class="headerlink" title="1.2 발음 교정"></a>1.2 발음 교정</h2><ul><li><a href="https://youtu.be/i4g0iCpa81g">th 발음 고치기</a></li><li><a href="https://youtu.be/gHvNze8qoks">F와 P 발음 고치기</a></li><li><a href="https://youtu.be/cfhIVs92sf4">L과 R 발음 고치기</a></li></ul><hr><h1 id="2-영영사전-검색법"><a href="#2-영영사전-검색법" class="headerlink" title="2. 영영사전 검색법"></a>2. 영영사전 검색법</h1><p>또 네이버 영어사전에서 <code>condescending</code>을 검색하면 자신을 낮추는, 잘난체하는 이라고 정반대의 의미가 나옵니다. 한영사전은 일본이 번역한 것을 우리말로 번역한 것이고 번역자들이 대충 만들어서 정확한 의미전달이 안된 경우도 많습니다. 그래서 영영사전을 사용해야 합니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/voca_1_2.png" alt="voca_1_2"></p><p>이번에는 미국 구글 사이트에서 영어로 검색해보겠습니다.</p><p><a href="https://www.google.com/webhp?hl=en">https://www.google.com/webhp?hl=en</a></p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/voca_1_3.png" alt="voca_1_3"></p><p>이런 영영사전의 문제점은 나와도 설명하는 단어를 몰라서 다시 해당 단어를 찾아야 되는 점들이 있습니다.<br>그래서 추천드리는 사전은 콜린스 사전입니다. 앱이 있지만 안쓰는 것을 권합니다.<br>이 사전은 단어로 설명하는 게 아니라 문장으로 설명해줍니다.</p><ul><li>Collins Dictionary : <a href="https://www.collinsdictionary.com/">https://www.collinsdictionary.com/</a></li></ul><p>예시로 love를 검색해보겠습니다.</p><blockquote><p>💡 Love </p><p>(1) Verb </p><p>If you love someone, you  feel romantically or sexually  attracted to them, and they are very important to you.</p></blockquote><p>아까 네이버 사전에서 찾은 <code>condescending</code>은 Collns에서는 다음과 같이 설명합니다.</p><blockquote><p>💡 condescending</p><p>If you say that someone is condescending, you are showing your disapproval of the fact that they talk or behave in a way which shows that they think they are superior to other people.</p><p>만약 당신이 condescending이라고 말한다면, 당신은 당신의 마음에 안드는 사실을 보여준 것입니다. 그들이 말하거나 그들이 다른 사람들보다 우월하다고 생각한다는 것을 보여주는 방법을 보여주거는</p><p>즉, 잘난척하는 그림</p></blockquote><p>Collins 영영사전은 정말 필수 단어로만 설명하기에 모르는 단어는 무조건 알아야 합니다.<br>그리고 모든 단어를 영영사전으로 찾지 마세요! 품사에 따라 순위를 정하세요.<br>대표적으로 <strong>명사는 찾는 것이 별 도움이 안됩니다.</strong> 영한사전에 명사를 찾는게 편합니다. </p><p>영영사전을 활용한다고 100% 영영사전만 쓰는 게 아니라 <strong>동사만큼은 영영사전을 사용</strong>하고,<br><strong>형용사, 부사 등을 조절해서 영영사전</strong>을 찾아보세요.</p><p>그리고 그 다음 하지 말아야 할 것이 <strong>영어를 쓸 떄 한글을 떠올리고 영어로 바꾸는 방식</strong>입니다.<br>왜냐하면 문화 자체가 틀리기에 정, 나이 문화같은 것은 영어로 표현할 수 가 없습니다.<br>예를 들어 “오는 정이 고와야 가능 정이 곱다”라는 말을 영어로 표현할 수 있을까요? 불가능합니다.</p>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> 발음기호 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 발음기호 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>En-Grammar-14-어순이 달라진 문장들</title>
      <link href="/2022/12/21/En-Grammar-14/"/>
      <url>/2022/12/21/En-Grammar-14/</url>
      
        <content type="html"><![CDATA[<h1 id="1-영어-문장의-어순"><a href="#1-영어-문장의-어순" class="headerlink" title="1. 영어 문장의 어순"></a>1. 영어 문장의 어순</h1><blockquote><p>행위자 → 동작 → 대상 → 상황 정보</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Steve picks an apple from a tree.</span><br></pre></td></tr></table></figure><hr><h1 id="2-명령문의-어순"><a href="#2-명령문의-어순" class="headerlink" title="2. 명령문의 어순"></a>2. 명령문의 어순</h1><p>명령문은 기본적으로 ‘행위자’없이 ‘동작’으로 시작하는 어순입니다.</p><blockquote><p>동작 → 대상 → 상황 정보</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pick an apple from a tree.</span><br><span class="line">Stop talking.</span><br><span class="line">Be quiet.</span><br></pre></td></tr></table></figure><p>명령문에서 행위자 ‘you’를 쓰면 명령을 강조하는 느낌을 주게 됩니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You stop talking.</span><br></pre></td></tr></table></figure><p>‘~을 하지 마라’라고 할 떄는 Don’t를 붙이면 됩니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Don&#x27;t stop talking.</span><br><span class="line">Don&#x27;t be quiet.</span><br></pre></td></tr></table></figure><p>Don’t를 붙인 부정 명령문에서 행위자 you를 쓸 수도 있습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Don&#x27;t you stop talking.</span><br><span class="line">Don&#x27;t you be quiet.</span><br></pre></td></tr></table></figure><hr><h1 id="3-의문문의-어순"><a href="#3-의문문의-어순" class="headerlink" title="3. 의문문의 어순"></a>3. 의문문의 어순</h1><p>일반 동사가 사용된 문장에서는 do &#x2F; does &#x2F; did 를 문장 맨 앞에 씁니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Does steve pick an apple from a tree?</span><br></pre></td></tr></table></figure><p>be 동사가 사용된 문장에서는 be 동사를 문장 맨 앞에 보냅니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Is Steve a student?</span><br></pre></td></tr></table></figure><p>조동사가 사용된 문장에서는 조동사를 문장 맨 앞으로 보냅니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can Steve swim?</span><br></pre></td></tr></table></figure><p>have(had) + p.p. 형태의 문장에서는 have (had)를 문장 맨 앞으로 보냅니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Have you seen a dog?</span><br></pre></td></tr></table></figure><p>정리하면, 어순을 파괴시키는 것과 함께, 억양을 바꾸고 물음표를 붙이면서 ‘의문문’이라는 특별한 문장을 만든 것이라고 생각하면 됩니다.</p><p>“명령문”과 “의문문”은 모두 일반적인 어순을 파괴하면서 다른 의미를 전달하는 문장들입니다.</p><blockquote><p>💡 도치  : 문장 안에서 일반적인 어순이 바뀌어 있는 것</p></blockquote><hr><h1 id="4-기타-도치-문장"><a href="#4-기타-도치-문장" class="headerlink" title="4. 기타 도치 문장"></a>4. 기타 도치 문장</h1><p>Boy는 명사로 ‘소년’이라는 뜻 외에도, 감탄사로 ‘어머나, 맙소사, 이런’의뜻도 가지고 있습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Boy, was I wrong.</span><br><span class="line">Wow, is she beautiful.</span><br></pre></td></tr></table></figure><p>there &#x2F; here 가 쓰이는 경우에도 관습적으로 도치가 발생합니다. there의 의미(거기에)가 거의 희미해져서 그냥 하나의 관용 표현처럼 사용되기도 합니다.</p><blockquote><p>there is &#x2F; are ~ : ~이 있다.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">There is a book. | (도치)</span><br><span class="line">A book is there. | (원래 문장)</span><br><span class="line"></span><br><span class="line">Here comes the bus  | (도치)</span><br><span class="line">The bus comes here. | (원래 문장)</span><br></pre></td></tr></table></figure><p>부정의 의미가 담긴 부사(not &#x2F; never &#x2F; hardly )로 문장이 시작되는 경우 관습적으로 도치가 발생합니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Not only did he win the race, but also he broke the record.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>En-Grammar-13-가정법</title>
      <link href="/2022/12/21/En-Grammar-13/"/>
      <url>/2022/12/21/En-Grammar-13/</url>
      
        <content type="html"><![CDATA[<h1 id="가정법"><a href="#가정법" class="headerlink" title="가정법"></a>가정법</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">시제</span><br><span class="line">├─ 시간 개념</span><br><span class="line">└─ 현실성 개념</span><br><span class="line"></span><br><span class="line">If we play tennis, I will win. </span><br><span class="line">우리가 테니스를 치면, 내가 이길거야.</span><br><span class="line"></span><br><span class="line">If we played tennis, I would win.</span><br><span class="line">우리가 테니스를 쳤다면, 내가 이겼을 거야. -&gt; 현실성 개념</span><br></pre></td></tr></table></figure><p>과거 시제는 ‘현실에서 한 발 물러선 개념’을 담고 있습니다. 그래서 현재 사실에 대한 상상 &#x2F; 가정 &#x2F; 비현실적 상황을 이야기할 떄에 ‘과거 시제’를 사용합니다. 이렇게 쓰인 <code>과거 시제</code>는 시간 개념으로 설명할 수 없기 때문에, ‘시간 개념의 과거’와 구분하여 <code>가정법 과거</code>라고 부릅니다. </p><p>과거 시제가 ‘현실에서 한 발 물러선 개념’을 담는 것은, 영어만 그런 것이 아니라 한국어도 마찬가지입니다. 영어의 시제 역시 같은 논리로 작동한다는 것을 기억하고, 한국어와 비교해보면서 자연스럽게 받아들여 보세요.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// be 동사가 가정법 과거로 쓰이면, 예외적으로 무조건 were만 사용합니다.</span><br><span class="line">If i were a student, I would study really hard.</span><br><span class="line">내가 학생이었다면, 정말 열심히 공부했을 거야.</span><br></pre></td></tr></table></figure><blockquote><p>be 동사에 고대 영어의 흔적이 남아서, </p><ul><li><code>시간 과거</code>는 인칭에 따라 was &#x2F; were 를 선택해서 쓰지만</li><li><code>가정법 과거</code>는 무조건 were만 사용합니다.</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// had + ~ed(p.p.) = 과거 + 과거 </span><br><span class="line">   -&gt; 과거 사실에 대한 상상/가정/비현실</span><br><span class="line"></span><br><span class="line">If we had played tennis, I would have won.</span><br><span class="line">(그 당시에) 우리가 테니스를 쳤었다면, 내가 이겼었을 거야.</span><br><span class="line"></span><br><span class="line">If i had studied harder, I would have passed the exam.</span><br><span class="line">(그 당시에) 내가 더 열심히 공부했었다면, 나는 시험에 통과했었을 거야.</span><br></pre></td></tr></table></figure><p>정리해보겠습니다.</p><ul><li>If + 현재형, … will 동사 원형</li><li>If + 과거형&#x2F;were, … would 동사원형</li><li>If + had p.p., … would have p.p.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">If we play tennis, I will win.</span><br><span class="line">If we played tennis, I would win.</span><br><span class="line">If we had played tennis, I would have won.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>En-Grammar-12-have p.p. 형태의 활용 및 과거 완료 시제</title>
      <link href="/2022/12/21/En-Grammar-12/"/>
      <url>/2022/12/21/En-Grammar-12/</url>
      
        <content type="html"><![CDATA[<h1 id="조동사"><a href="#조동사" class="headerlink" title="조동사"></a>조동사</h1><ul><li>조동사 다음에는 동사원형이 와야 합니다.</li><li>조동사는 기본적으로 미래지향적인 의미가 있습니다.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Steve may come.</span><br><span class="line">Steve might come.</span><br><span class="line"></span><br><span class="line">// 조동사 + 과거 의미</span><br><span class="line">Steve should do it.</span><br><span class="line">Steve should have done it yesterday.</span><br></pre></td></tr></table></figure><ul><li><code>조동사 + have + ~ed(p.p.)</code> <ul><li>조동사의 의미 + 과거 의미(한국어 ‘-었&#x2F;았-‘)</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">should + have + ~ed (p.p.)</span><br><span class="line">would + have + ~ed (p.p.)</span><br><span class="line">could + have + ~ed (p.p.)</span><br><span class="line">must + have + ~ed (p.p.)</span><br><span class="line">may / might + have + ~ed (p.p.)</span><br></pre></td></tr></table></figure><ul><li><code>to + have + ~ed (p.p.)</code><ul><li>to 부정사 개념 + 과거 의미</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">omething seems to happen.</span><br><span class="line">Something seems to have happened.</span><br><span class="line"></span><br><span class="line">I am the luckiest guy to marry you.</span><br><span class="line">I am the luckiest guy to have married you.</span><br></pre></td></tr></table></figure><ul><li><code>having + ~ed (p.p.)</code><ul><li>~ing 개념 + 과거 의미</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Having finished his work, Steve went home. | 일을 끝내면서</span><br><span class="line">Finishing his work, Steve went home.       | 일을 끝내두고 나서</span><br><span class="line"></span><br><span class="line">Steve forgets most things. But having said that, he always remembers my birthday.</span><br><span class="line"></span><br><span class="line">* having said that = 그렇게(that) 앞서 언급했던 상황(having said)에서</span><br><span class="line">  = 그렇게 말하긴 했지만, 그렇긴 해도</span><br></pre></td></tr></table></figure><ul><li><code>had + ~ed (p.p.)</code><ul><li>과거 + 과거</li><li>‘과거 시제’보다 더 먼저 일어난 일이라는 것을 명확히 표시</li><li>일종의 비교시제로 ‘과거’와 비교해서 그보다 먼저 일어났음을 표시해줍니다.</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I had met Steve before you introduced him.</span><br><span class="line"></span><br><span class="line">When i arrived at the party, Steve had gone home. | 왔을 때 이미 갔었다 (명확히 표시)</span><br><span class="line">When i arrived at the party, Steve went home.     | 마주쳤을 수도 있고 모름</span><br></pre></td></tr></table></figure><p>정리하자면, 어떤 상황이든 have + ed(p,p,)가 쓰였다면 과거 개념이 담긴 ~ed (p.p.) 부분을 중심으로 의미를 파악하면 됩니다.</p>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>영어 학습방법 잡다한 것 정리 - 작성중</title>
      <link href="/2022/12/21/En-Info-02/"/>
      <url>/2022/12/21/En-Info-02/</url>
      
        <content type="html"><![CDATA[<p>미국 언어학자가 말하는 영어 공부법<br>스티븐 크라센 (미국 언어학자)<br>Reading(독서)가 정답이다.</p><p>Free voluntary reading is the source in my opinon of our reading ability.<br>내 생각에는 (자율독서)가 우리의 읽기 능력의 근원이다.</p><p><a href="https://youtu.be/L-BeTa50HSc">“영어뇌” 만드는 유일한 방법(뇌과학)</a></p><ul><li>GTM (Grammar Translation Method, 문법 번역식 교수법)</li><li><a href="https://namu.wiki/w/%EB%AC%B8%EB%B2%95%20%EB%B2%88%EC%97%AD%EC%8B%9D%20%EA%B5%90%EC%88%98%EB%B2%95">나무위키 문법 번역식 교수법</a></li><li><strong>청화식 교수법으로 공부</strong>하기<ul><li>대화로 대화를 연습하면서</li><li>계속 강도높은 말하기 훈련</li></ul></li><li>문장 규칙을 **뇌 바깥쪽에서 뇌 안쪽(절차 기억)**으로 활성화<ul><li>방법은 대화를 많이 해보는 것</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> 정보 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 영어 </tag>
            
            <tag> 작성중 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>En-Grammar-11-현재 시제, 과거 시제, 현재 완료 시제</title>
      <link href="/2022/12/21/En-Grammar-11/"/>
      <url>/2022/12/21/En-Grammar-11/</url>
      
        <content type="html"><![CDATA[<h1 id="현재-시제-Simple-Present-Tense"><a href="#현재-시제-Simple-Present-Tense" class="headerlink" title="현재 시제(Simple Present Tense)"></a>현재 시제(Simple Present Tense)</h1><p><code>시제(Tense)</code> 란 말하는 시점을 기준으로 언급하는 사건이 일어난 시간적 위치를 표시하는 문법 범주를 말합니다.</p><p>시제는 2가지 개념을 갖고 있습니다.</p><ul><li>시간 개념</li><li>현실성 개념</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 시간 개념</span><br><span class="line">Steve lives in Seoul. | (현재 살고 있다) + (서울사람이다)</span><br><span class="line"></span><br><span class="line">// 현실성의 개념</span><br><span class="line">He catches. | (야구에서 선수가 공을 잡고 공수교대시간에 해설자가 한 말)</span><br><span class="line">The Earth goes around the Sun. | (일반적인 사실)</span><br><span class="line">Steve eats. | (스티브는 잘 먹는 사람이라는 의미)</span><br></pre></td></tr></table></figure><blockquote><p>현재 눈 앞에 벌어지는 일 → 현실성이 높은 일 → ‘일반적 사실’을 언급할 때도 현재 시제를 사용합니다.</p></blockquote><p>시제의 현실성 개념을 덜어내고 ‘시간 개념’에 집중할 떄는 be + V-ing 형태를 사용합니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Steve is eating.</span><br></pre></td></tr></table></figure><hr><h1 id="과거-시제-Simple-Past-Tense"><a href="#과거-시제-Simple-Past-Tense" class="headerlink" title="과거 시제(Simple Past Tense)"></a>과거 시제(Simple Past Tense)</h1><p>지나간 일, 이미 끝난 일 → ‘현실에서 한 발 물러선 개념’을 담습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Steve worked.</span><br><span class="line"></span><br><span class="line">// would는 will보다 과거, 즉 한 발 물러선 개념으로 물어보니 공손이라는 뉘앙스를 가지게 됩니다.</span><br><span class="line">Will you open the window?</span><br><span class="line">Would you open the window?</span><br><span class="line"></span><br><span class="line">// may보다 과거 might, 한 발 물러선 개념으로 의미가 추측이라는 뉘앙스를 가집니다.</span><br><span class="line">Steve may come.</span><br><span class="line">Steve might come.</span><br></pre></td></tr></table></figure><hr><h1 id="현재-완료-시제-Present-Perfect-Tense"><a href="#현재-완료-시제-Present-Perfect-Tense" class="headerlink" title="현재 완료 시제(Present Perfect Tense)"></a>현재 완료 시제(Present Perfect Tense)</h1><ul><li><code>have + ~ed (p.p.)</code> : 현재와 연관된 과거</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">have    +   ~ed (p.p.)</span><br><span class="line">의미 x       의미 O</span><br><span class="line">현재         과거</span><br></pre></td></tr></table></figure><p>‘과거’의 사건이 ‘현재’와 연관성이 있을 떄 ‘현재 완료 시제’를 사용합니다. 즉, have는 의미가 없고 현재와 연관시켜서 과거만 해석하면 됩니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 개를 보고, 나중에 한 사람이 와서 개 어딨는지 물어볼 떄</span><br><span class="line">I have seen a dog.</span><br><span class="line">- 개를 봤어요 (과거) + 그래서 지금 어디로 갔는지 알아요(현재와 연관)</span><br><span class="line"></span><br><span class="line">// 다리가 부러졌다 오늘 다 나아서 수업 시간에 운동하려 할 때</span><br><span class="line">I have broken my leg.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>En-Info-01-영어의 역사</title>
      <link href="/2022/12/21/En-Info-01/"/>
      <url>/2022/12/21/En-Info-01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-로마-라틴어의-영향"><a href="#1-로마-라틴어의-영향" class="headerlink" title="1. 로마 라틴어의 영향"></a>1. 로마 라틴어의 영향</h1><p>로마는 초 거대 제국으로 로마의 공식 언어는 ‘라틴어’였고 이 역시 영어에 영향을 미쳤습니다.<br>‘군사, 생활’에 관련한 단어들이 유입되었는데,<br>대표적으로 Anchor(닻), Butter(버터), Cheese(치즈), Kitchen(주방), Church(교회), Dish(접시) 등이 있습니다.</p><hr><h2 id="1-1-mile과-pound"><a href="#1-1-mile과-pound" class="headerlink" title="1.1 mile과 pound"></a>1.1 mile과 pound</h2><p>mile(마일, 길이를 나타내는 단위), pound(파운드, 무게를 나타내는 단위)도 라틴어에서 들어왔습니다.</p><p>여기서 Mile은 라틴어 mille passuum에서 기원했습니다.<br>영어로 번역하면 ‘a thousand paces’라는 뜻으로 pace는 ‘속도’를 의미하고,<br>고대 로마인에게 One pace는 다섯 걸음을 걷는 거리를 의미했습니다. </p><p>거기다 1000을 곱하면 5,000 걸음으로 mile passuum은 로마인이 5,000 걸음 걷는 거리라고 보면 됩니다.<br>그래서 mile은 현대 단위로 환산하면 5,280 feet입니다.<br>이것도 원래 5,000 feet 였는데 16세기 영국 엘리자베스 1세 시기에 280 feet를 추가했습니다.</p><p>Pound 역시 라틴어 pondus에서 유래했습니다. pondus는 ‘무게, 저울추’라는 뜻이며, 라틴어 동사 pendere(매달다)에서 왔습니다.<br>즉, 예전에는 무게를 잴 떄, 추를 써서 추가 얼마나 내려가느냐를 보고 쟀는데,<br>이것이 pondus이고 ‘무게’ 자체를 의미하는 단위가 되었습니다.</p><hr><h2 id="1-2-chester-지명"><a href="#1-2-chester-지명" class="headerlink" title="1.2 chester 지명"></a>1.2 chester 지명</h2><p>그리고 기원 후 43년 로마가 영국 섬을 정복하면서 410년까지 영국을 통치했습니다.<br>지명에서 당시 흔적을 살펴볼 수 있는데 바로 <code>‘-chester’</code>가 들어간 지명들입니다. 라틴어로 castra은 ‘병영’을 의미합니다.<br>이 단어와 켈트어를 합성한 것이 ‘-chester’의 기원입니다.<br>대표적인 지명 Manchester는 Mamm(가슴처럼 생긴 언덕)+chester의 합성어입니다.</p><hr><h2 id="1-3-기독교의-영향"><a href="#1-3-기독교의-영향" class="headerlink" title="1.3 기독교의 영향"></a>1.3 기독교의 영향</h2><p>기원후 7세기경 영국섬에 로마제국을 통해 기독교가 들어오면서 생겨난 단어들이 있습니다. 당시 영어에는 기존에 없었던 말이었기 떄문에 라틴어 그대로 받아낸 경우가 있습니다. Altar(제단), Offer(바치다), Angel(천사), Candle(촛불), Disciple(제자), Martyr(순교자), Rule(규칙&#x2F;다스리다), Temple(사원, 성전) 등 라틴어들이 그대로 들어옵니다. </p><p>라틴어를 그대로 들여오지 않고 라틴어 단어를 영어 식으로 번역한 것도 있는데, 대표적인 것이 gospel(복음, 신조)입니다. Gospel은 라틴어 Evangelium을 고대영어로 번역한 것인데, Evangelium은 그리스어 euangelion에서 왔습니다. ‘euangelion’은 <code>[en:기쁜 좋은]+[angelos: 전령, 소식을 전하는 자]</code>의 합성어로 이루어졌습니다. 그래서 <code>[good:좋은]+[spell:말, 소식, 이야기]</code>의 합성어로 gospel이 만들어 졌습니다.</p><hr><h1 id="2-켈트족과-앵글로색슨족"><a href="#2-켈트족과-앵글로색슨족" class="headerlink" title="2. 켈트족과 앵글로색슨족"></a>2. 켈트족과 앵글로색슨족</h1><p>영어의 역사는 게르만어를 쓰던 몇 민족들이 기원후 5세기경 영국 섬에 정착하면서 시작되었습니다.<br>원래 영국 섬에는 켈트인이 거주하고 있었습니다. 이들이 쓰는 언어는 ‘켈트어’라고 하며 영어와는 다른 계열의 언어입니다.</p><p>기원후 410년 로마가 자국의 내란으로 영국 섬에서 철수하자 권력의 공백이 생기기 시작했습니다.로마는 A.D.120년 경에 하드리아누스 황제가 세운 하드리안 성벽을 기준으로 북쪽의 스코트족과 픽트족으로부터 로마 영토를 보호해 왔는데 로마가 영국 섬에서 철수하자 스코트족과 픽트족으로부터 켈트인들을 보호해줄 권력이 사라진 것입니다. 이에 켈트인 족장의 한 사람인 보티건(Vortigern)이 대륙에 살던 게르만인들에게 보호를 요청합니다. 이떄 보티건의 요청으로 영국 섬에 들어온 게르만 족들이 바로 앵글족, 샌슨족, 주트족입니다.</p><p>이 중 제일 먼저 들어온 주트족의 영국섬 상륙 년도인 449년을 <code>고대 영어의 시작</code>으로 봅니다. 로마인들은 게르만족들을 총칭하여 Angli라고 불렀습니다. 여기서 <code>England</code>라는 지명이 탄생했습니다. <code>Angli + land</code> 즉, ‘앵글족의 나라’라는 뜻입니다. 이들은 영국 각지에 정착해 왕국을 세웠는데 이 시기를 7왕국 시대라고 부릅니다. (노섬브리아, 머시아 이스트 앵글리아, 에섹스, 서섹스, 웨섹스, 켄트)</p><p>7개의 소왕국에 사는 게르만인들은 모두 같은 뿌리의 언어를 썼습니다. 이것이 ‘서 게르만어’에 속하는 ‘영어’의 시작입니다. 이들은 완전히 똑같지는 않지만 의사소통은 가능했는데 이것이 영어 방언의 시초입니다. 서로 말은 통하지만 어휘나 발음이 조금씩 다른 이들의 언어는 오늘날 악명 높은 영국 사투리들의 조상이라 할 수 있습니다. </p><p>기원후 5세기에 이 켈트인들을 몰아내고 영국을 지배하기 시작한 부족이 앵글로 색슨족(정확히는 Angles, Saxons, Jutes)입니다. 앵글로 색슨족은 대륙에 살던 게르만 족에 속해 있었고 이들이 쓰던 게르만어의 한 종류가 지속적으로 발달하면서 오늘날의 영어가 되었습니다. 그래서 앵글로 색슨의 영국 침략시기인 5세기경부터 ‘고대영어’ 시기라고 부릅니다.</p><p>현대 독일어, 네덜란드어, 스웨덴어, 덴마크어, 노르웨어어 등의 공통 조상이 바로 <code>원시 게르만어(Proto-Germanic Lanague)</code>입니다. 그리고 이 언어를 쓰던 부족 중에 앵글족, 색슨족, 주트족이 있었습니다. 그리고 이들끼리는 서로 의사소통이 가능했습니다.</p><hr><h2 id="2-1-지명으로-남아있는-켈트어"><a href="#2-1-지명으로-남아있는-켈트어" class="headerlink" title="2.1 지명으로 남아있는 켈트어"></a>2.1 지명으로 남아있는 켈트어</h2><p>먼저, 원래 영국 섬의 주인이었던 켈트어에서 유래한 단어들이 있습니다. 그러나 켈트인들은 피지배층이었기 때문에 그들의 언어가 현대 영어에는 많은 영향을 미치지는 못했습니다. 대신에 ‘지명’에 많이 녹아들어 있습니다. 대표적인 예가 영국의 수도 London입니다. London은 켈트어 단어 2개를 합친 합성어인데, 켈트인들이 모시던 신 중에 하나인 Lug와 켈트어로 ‘요새’를 뜻하는 ‘Dunn’의 합성어입니다. 그래서 <code>Lug의 요새</code>, LugDunn이라는 말이 만들어 졌고 이것이 발음이 바뀌면서 오늘날 London이 되었습니다.</p><p>영국연방의 한 국가인 Wales라는 이름은 앵글로 색슨족들이 쓰던 고대영어에 ‘Wealh’에서 유래했습니다. Wealh은 ‘이방인, 외국인’이라는 뜻으로 앵글로 색슨족들이 켈트인을 몰아내는 과정에서 켈트인에게 붙인 이름이었습니다. 대륙에서 침략한 앵글로 색슨족은 영국 동남부에서 상륙해 켈트인들을 서쪽으로 몰아냈습니다. 그래서 웨일스는 영국 섬 최 서부에 있습니다.</p><hr><h1 id="3-바이킹"><a href="#3-바이킹" class="headerlink" title="3. 바이킹"></a>3. 바이킹</h1><p>8세기 중반에서 11세기 중반까지의 시기를 <code>바이킹 시기</code>라고 부릅니다. 바이킹(Viking)이라는 말은 고대 노르드어 vik ‘a boy’에서 온 것으로 ‘만(bay)에 자주 출물하는 사람’이라는 뜻입니다. 이후 이 단어가 wicing이 되고 고대 영어에서 <code>해적(pirate)</code>이라는 뜻으로 쓰였습니다. 즉, ‘만에 출몰하는 사람’이라는 뜻이 이후 ‘해적’으로 변한 것입니다. 이렇게 언어는 역사를 반영합니다.</p><blockquote><p>Language is the archives of history.<br>- Ralph Waldo Emerson</p></blockquote><p>A.D.865년 대규모 덴마크인으로 구성된 바이킹족이 영국 동부에 상륙합니다. 앵글로 색슨족은 이를 제압하지 못하고 886년 타협하기 시작합니다. 당시 영국의 대세였던 웨섹스 왕국의 왕 앨프레드는 바이킹 족의 두목 구스럼과 ‘웨드모어 조약’이라는 것을 맺는데, 바이킹의 영구정착을 허락한다는 내용이었습니다.</p><hr><h2 id="3-1-발음-변화"><a href="#3-1-발음-변화" class="headerlink" title="3.1 발음 변화"></a>3.1 발음 변화</h2><p>바이킹들은 Danelaw에 정착했는데 말 그대로 ‘덴마크인들의 법’이 적용되는 곳입니다. 이때부터 바이킹족(스칸디나비아인)들과 앵글로색슨간의 융합이 자연스럽게 이루어집니다. 그리고 이는 당연히 영어에 영향을 미칩니다. 바이킹어와 앵글로색슨족이 쓰던 게르만어는 공통조상에 이루어졌으나 발음이 달랐습니다.</p><p>대표적인 예가 skirt와 skirt입니다. 원래 이 두 단어는 그냥 ‘옷’을 의미하는 똑같은 단어였으나 발음 변화를 겪으며 다른 뜻을 가진 두 단어로 나뉘었습니다. 앵글로 색슨족들이 쓰던 shirt와 스칸디나비아인들이 쓰던 skirt가 공존하게 되었습니다. 그래서 shirt(윗옷)과 skirt(치마)로 분리되었습니다.</p><p>한 언어집단이 다른 언어집단의 침략을 받아도 일상생활에 자주 쓰는 토종어휘들은 잘 변하지 않습니다. 한글이 발명 전 한자를 사용하던 시기에도 우리나라는 ‘엄마’, ‘아빠’, ‘누나’, ‘형’ 등은 모두 순 우리말입니다.</p><p>반면에, 바이킹들의 언어는 앵글로 색슨의 고대영어와 같은 계열의 언어였고, 바이킹들은 ‘침략, 지배’했다기보다 앵글로 색슨족들과 ‘공존’하며 살았습니다. 이로 인해 일상생활에 쓰는 기본 어휘들까지 흔들리기 시작했습니다. 대표적으로 Law(법), Husband(남편), Fellow(친구, 동료), Call(부르다) 등이 있습니다. 이들은 모두 초기 바이킹 시대에 들어왔습니다.</p><p>Law는 거슬러 올라가면 lay(놓다, 두다)와 같은 어원에서 출발했습니다. 무언가 놓아지고 설정된 것이 ‘법’이라는 것을 생각해보면 이해할 수 있죠.</p><p>Husband는 <code>Hus + bondi</code>의 합성어인데 Hus는 House(집), bondi는 ‘사는 사람’정도로 집을 지키는 사람이라는 뜻에서 ‘남편’이라는 뜻을 갖게 되었습니다.</p><p>그리고 12세기 초에 이르러서는 die, take, skin, knife 등이 들어왔는데 Take(취하다, 잡다)는 원래 touch와 같은 어원에서 출발했습니다. take가 들어오기 전 쓰던 단어는 niman인데 이는 영어에서 사라져 버렸습니다. 그러나 영어와 가까운 언어인 독일어는 현대에도 nehman이라는 단어를 take의 뜻으로 쓰고 있습니다.</p><p>심지어 영어의 인칭 대명사도 영향을 많이 받았는데, 원래 영어에서 ‘그들’이라는 단어는 ‘Hi’였습니다. 이떄 바이킹들이 쓰던 ‘they’가 ‘he(그)’와 구분하기 쉬웠는지 아예 대체되어 버렸습니다. 즉, 지금의 ‘they’, ‘their’, ‘them’은 바이킹들의 말이었습니다.</p>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> 역사 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 역사 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>En-Grammar-10-원형 부정사 (Bare Infinitive)</title>
      <link href="/2022/12/21/En-Grammar-10/"/>
      <url>/2022/12/21/En-Grammar-10/</url>
      
        <content type="html"><![CDATA[<h1 id="원형-부정사-Bare-Infinitive"><a href="#원형-부정사-Bare-Infinitive" class="headerlink" title="원형 부정사(Bare Infinitive)"></a>원형 부정사(Bare Infinitive)</h1><p>Bare은 벌거벗은, 빈이란 느낌으로 원형 부정사는 to 부정사가 빠져있는 것을 의미합니다. to 부정사는 시간차의 개념이라 했었는데 원형 부정사는 to를 뺸 것이니 시간차의 개념이 빠졌다고 생각하면 됩니다.</p><blockquote><p>💡 사역 동사</p><p>문장의 주체가 스스로 행하지 않고, 남에게 동작을 하도록 시키는 의미를 담은 동사 →  make, have, let</p><p>추가적으로 help도 습관적으로 to를 뺴기도 합니다. 그래서 준사역동사라고 부릅니다.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 5형식</span><br><span class="line">// 주어 -&gt; (주어의)서술어 -&gt; 대상 -&gt; (대상의)서술어</span><br><span class="line">Steve asked Peter to clean the room.</span><br><span class="line">Steve helped Peter to clean the room.</span><br><span class="line">Steve helped Peter clean the room. (준사역 help)</span><br><span class="line"></span><br><span class="line">// to를 뺸 원형부정사</span><br><span class="line">Steve made Peter clean the room. | to clean -&gt; clean</span><br><span class="line">Steve let Peter clean the romm   | to clean -&gt; clean</span><br><span class="line"></span><br><span class="line">// 지각 동사</span><br><span class="line">// 원형 부정사가 쓰이면 전체 과정을 지켜봤다는 의미</span><br><span class="line">// V-ing가 쓰이면 행동이 진행되고 있는 것을 봤다는 의미</span><br><span class="line">Steve saw Peter clean the romm.</span><br><span class="line">Steve saw Peter cleaning the room.</span><br></pre></td></tr></table></figure><p>to V 형태가 가진 ‘시간차 &#x2F; 미래지향적’ 개념은 필연적으로 불확실성의 뉘앙스를 내포하게 됩니다. 이것이 make가 가진 ‘확실성’의 의미와 어울리지 않기 때문에 make 다음에 오는 to V 형태에서는 to를 제거합니다.</p><blockquote><p>💡 지각 동사</p><p>보고, 듣고, 느끼는 등 감각의 작용을 나타내는 동사들은 동시성의 개념이 있어 to와 어울리지 않아 to를 빼줍니다.</p><p>→ see, watch, look at, hear, feel, notice</p></blockquote><p>정리하면 동작이 ‘확실성’ 혹은 ‘동시성’ 의미를 가진 경우는 to V의 ‘시간차 &#x2F; 미래지향적’ 개념이 어울리지 않아 ‘시간차 개념’인 to를 빼고 쓰는 것이 <code>원형 부정사</code>라고 부르는 것입니다. 중요한 것은 좌에서 우로 문장을 읽었을 떄 한 번에 파악되는 가입니다. </p><p>추가적으로 우리나라에서는 ‘동사 원형’과 ‘원형 부정사’를 별개의 문법 용어처럼 다루지만 실제로는 같은 말입니다. 즉, 여기서 배운 경우 외에도 ‘동사 원형’이 쓰이는 모든 상황에서 Bare Infinitive(원형 부정사)라는 용어를 사용해야 합니다.</p>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>En-Grammar-09-to V(to 부정사) 그리고 V-ing(동명사)</title>
      <link href="/2022/12/21/En-Grammar-09/"/>
      <url>/2022/12/21/En-Grammar-09/</url>
      
        <content type="html"><![CDATA[<h1 id="to-부정사와-동명사-비교"><a href="#to-부정사와-동명사-비교" class="headerlink" title="to 부정사와 동명사 비교"></a>to 부정사와 동명사 비교</h1><ul><li><code>to V (to 부정사)</code><ul><li>시간차</li></ul></li><li><code>V-ing</code><ul><li>진행 &#x2F; 능동</li><li>현재 분사(Present Participle), 동명사 (Gerund) 분석 X</li></ul></li></ul><p>stop, remember, forget, try 등 암기하지 말고 to V &#x2F; V-ing 각각의 개념을 넣어보면 굳이 암기하지 않아도 자연스럽게 의미를 파악할 수 있습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Steve stopped to smoke. | 담배를 피는 것을 위해 멈췄다.</span><br><span class="line">Steve stopped smoking.  | 담배피는 것을 멈췄다(끊었다). </span><br><span class="line"></span><br><span class="line">I remember to meet Steve. | 만나는 것을 기억했다.</span><br><span class="line">I remember meeting Steve. | 예전에 만났던것을 기억했다.</span><br><span class="line"></span><br><span class="line">I forgot to meet Steve.       | 만나는 것을 잊다</span><br><span class="line">I won&#x27;t forget meeting Steve. | 만났던 것을 잊지 않을 것</span><br><span class="line"></span><br><span class="line">Steve tried to drive a car. | 운전하는 것을 시도</span><br><span class="line">Steve tried driving a car.  | (시험삼아) 운전을 해보다</span><br><span class="line">- 운전이 진행되고 있는 차를 시도하다 </span><br></pre></td></tr></table></figure><p>want, decide, expect, hope, wish, plan, promise같은 원하는 동사들은 동사 의미 자체가 to V의 개념과 어울리기 떄문에 함께 사용하는 것이지 따로 외울 필요가 없습니다.</p><blockquote><p>to V의 개념은 어떤 방향으로 나아가는 것이고 원하는 동사들은 미래로 나아가는 방향이라 잘 어울림</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Steve wanted to read a book.</span><br><span class="line">Steve decided to study.</span><br><span class="line">Steve hoped to succeed.</span><br></pre></td></tr></table></figure><p>마찬가지로 외우는 것이 아니라 enjoy, finish, keep, imagine, give up, mind, avoid같은 동사들은 의미 자체가 ing가 어울려서 사용하는 것입니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Steve enjoys playing basketball.</span><br><span class="line">Steve finished studying.</span><br><span class="line">Steve kept reading a book.</span><br><span class="line">steve didn&#x27;t mind waiting outside.</span><br><span class="line">Steve avoided singing a song.</span><br></pre></td></tr></table></figure><p>추가적으로 start, begin continue like, love, prefer, hate같은 동사들은 to와 -ing의 의미 차이가 크지 않고 둘 다 잘 어울려서 둘 다 쓸 수 있습니다.</p><blockquote><p>시작하고 좋아하고 싫어하는 동사들<br>start, begin continue like, love, prefer, hate</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Steve started [ to talk ] about basketball.</span><br><span class="line">                talking</span><br><span class="line"></span><br><span class="line">Steve continued [ to read ] a book.</span><br><span class="line">                  reading</span><br><span class="line">                  </span><br><span class="line">I hate [ to work ] on weekends.</span><br><span class="line">         working</span><br><span class="line"></span><br><span class="line">I prefer [ to stay ] in bed.</span><br><span class="line">           staying</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>En-Grammar-08-to 부정사(to V)</title>
      <link href="/2022/12/21/En-Grammar-08/"/>
      <url>/2022/12/21/En-Grammar-08/</url>
      
        <content type="html"><![CDATA[<h1 id="to-부정사-to-infinitive"><a href="#to-부정사-to-infinitive" class="headerlink" title="to 부정사 (to infinitive)"></a>to 부정사 (to infinitive)</h1><p>동사(Verb)에 특정 개념을 덧붙여서 재활용</p><ul><li>V-ing</li><li>V-ed</li></ul><blockquote><p>동사(V) 앞에 to가 붙으면서 ‘앞으로 행해질, 이제 일어날’정도의 개념이 덧붙습니다.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// to의 시간차</span></span><br><span class="line">a book to read                  | (아직 안읽은 책)</span><br><span class="line">Peter told Steve to study hard. | (Steve가 공부를 안하는 상태)</span><br><span class="line">Steve promised to study.        | (아직 공부 안한 상태)</span><br><span class="line">Steve decided to read a book.   </span><br><span class="line">Steve studied hard to pass the exam | (아직 공부시작안한 상태)</span><br></pre></td></tr></table></figure><p>영어 문장을 보고 빠르게 의미를 파악하는 것이 중요하지,<br>이미 파악한 의미를 기반으로 문법적으로 분류하는 것은 그다지 필요하지도, 중요하지도 않습니다.</p><p>V-ing &#x2F; to V를 만날 떄마다 각각 덧붙는 개념을 넣으면서 의미를 파악해보세요!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Steve promised to study.</span><br><span class="line">Steve finished studying.</span><br><span class="line"></span><br><span class="line">Steve deciede to read a book.</span><br><span class="line">Steve kept reading a book.</span><br></pre></td></tr></table></figure><p>그런데 to에 ‘시간차’ 개념에 추가적인 개념이 있습니다.<br>영어가 만들어지던 옛날에는 to의 개념에 진행과 시간의 흐름 2가지 개념이 존재했습니다.<br>그러다 훗날에 ing가 생겨나면서 진행 역할을 분담을 해가면서 가져갔지만 여전히 to의 남아있던 흔적들이 바로 다음 예시들입니다. </p><p>그래서 ‘시간차’ 개념이 명백하지 않고 희미한 경우가 다음 예시들입니다.<br>80~90% to는 ‘시간차’ 개념으로 받아들이면 대부분 의미 파악에 문제가 없습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">To understand is to be free.</span><br><span class="line">I am sorry to hear that.</span><br><span class="line">Nice to meet you.</span><br></pre></td></tr></table></figure><p>정리하면 다음과 같습니다.</p><ul><li><code>to V (to 부정사, to infinitive)</code><ul><li>부정사 : 인칭&#x2F;시제에 따라 모양이 정해지지 않는 동사 원형 형태</li><li>시간차</li><li>즉, to 부정사는 <code>to 동사원형</code>이란 뜻입니다.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>En-Grammar-07-V-ing 그리고 V-ed</title>
      <link href="/2022/12/21/En-Grammar-07/"/>
      <url>/2022/12/21/En-Grammar-07/</url>
      
        <content type="html"><![CDATA[<h1 id="V-ing와-V-ed의-배경"><a href="#V-ing와-V-ed의-배경" class="headerlink" title="V-ing와 V-ed의 배경"></a>V-ing와 V-ed의 배경</h1><p>영어가 만들어지던 유럽권에서는 전쟁이 많이 일어나던 곳으로 빠른 의사전달이 필수였습니다.<br>그래서 영어는 효율성을 굉장히 중요하게 생각합니다.<br>그래서 뭔가 하나의 의미, 단어를 여기저기에 재활용하는 경우가 굉장히 많습니다.<br>V-ing와 V-ed도 이와 같은 경우로 동사(Verb)에 특정 개념을 덧붙여서 재활용합니다.</p><hr><h1 id="V-ing"><a href="#V-ing" class="headerlink" title="V-ing"></a>V-ing</h1><p>V-ing는 진행&#x2F;능동의 의미로 경우에 따라 다음처럼 부릅니다.</p><ul><li><code>현재 분사(Present Participle)</code> : 현재형 개념에서 분리되어 나온 형용사</li><li><code>동명사 (Gerund)</code> : 동사의 명사형</li></ul><blockquote><p>V-ing가 명사처럼 쓰이면 ‘동명사’라고 부르고, 형용사처럼 쓰면 ‘현재 분사’라고 부른다.</p></blockquote><p>그렇지만 이름 차이로 구분하는 것은 의미가 없습니다.<br>원어민들도 별로 의미가 없다고 생각하며 영미권에서도 굳이 명칭을 구분하지 않고 ‘~ing form’이라고 부르는 것이 일반적입니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 현재 분사</span><br><span class="line">a sleeping baby  (자고있는 아기)</span><br><span class="line">The boy sitting in the room is Peter.</span><br><span class="line">Steve is eating a banana.</span><br><span class="line"></span><br><span class="line">// 동명사</span><br><span class="line">a sleeping pill  (수면제=잠이 유지되는 약)</span><br><span class="line">Steve finished studying.</span><br><span class="line">Steve kept reading a book.</span><br></pre></td></tr></table></figure><p>중요한 것은 용법을 구분하는 것이 아니라 동사(V)에 -ing가 붙으면 <code>진행/능동</code>개념이 붙는다는 사실입니다.<br>이 개념을 맥락에 맞춰 유연하게 의미를 파악하면 되는 것입니다.</p><hr><h1 id="V-ed"><a href="#V-ed" class="headerlink" title="V-ed"></a>V-ed</h1><p>V-ed는 다음을 의미합니다.</p><ul><li><code>과거 분사(Past Participle, P.P.)</code> : 과거형 개념에서 분리되어 나온 형용사</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">want - wanted - wanted</span><br><span class="line">write - wrote - written </span><br><span class="line">(여기서 마지막 written과 wanted가 과거 분사)</span><br></pre></td></tr></table></figure><p>과거 분사는 <code>완료/수동</code>의 의미를 가집니다. 추가적으로 자주 쓰이는 과거 분사는 사전에 아예 형용사로 등록되어 있기도 합니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a book written by Steve</span><br><span class="line">A door is closed.</span><br><span class="line">Steve is gone.</span><br><span class="line"></span><br><span class="line">// (lead - led - led: 이끌다, 지휘하다)</span><br><span class="line">The army led by Steve won the war. </span><br><span class="line"></span><br><span class="line">// (read - read read: 읽다)</span><br><span class="line">The book read most in the world is the Bible.</span><br></pre></td></tr></table></figure><p>문장에 따라 V-ed가 ‘과거’인지 아니면 ‘과거 분사’인지 혼란스러울 수 있습니다.<br>이럴 떄는 문장 구조를 정확히 보고 맥락에 맞춰 판단해야 의미 파악이 가능합니다.</p><p>정리하면 다음과 같습니다.</p><ul><li>V-ing(현재 분사) : 진행 &#x2F; 능동</li><li>V-ed(과거 분사)  : 완료 &#x2F; 수동</li></ul>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>En-Grammar-06-영어 수식의 어순</title>
      <link href="/2022/12/21/En-Grammar-06/"/>
      <url>/2022/12/21/En-Grammar-06/</url>
      
        <content type="html"><![CDATA[<h1 id="영어는-후치-수식이-기본"><a href="#영어는-후치-수식이-기본" class="headerlink" title="영어는 후치 수식이 기본"></a>영어는 후치 수식이 기본</h1><blockquote><p>💡 후치 수식 : 수식하는 말이 수식받는 말 ‘뒤’에 위치한다.</p><p>물체 &#x2F; 객체(명사)에 대한 자세한 설명(수식) 은 그 ‘뒤’에 덧붙입니다.</p></blockquote><p>영어는 그림기반의 언어라고 했죠?<br>그리고 그림으로 뭔가를 전달하는 방식이 영어 어순이 된거죠? 뭔가 하나를 잡고 뭔가를 설명하는 순이죠?</p><blockquote><p>행위자 → 동사 → 대상 → 상황 정보</p></blockquote><p>위 어순에다가 뒤에 설명하는 부분을 덧붙이는 형태로 영어 어순을 구성합니다. 예를 들어보겠습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a book on the table (테이블 위에 있는 책)</span><br><span class="line">a book to read (읽을 책)</span><br><span class="line">a book written by Steve (스티브에 의해 쓰여진 책)</span><br><span class="line">a book which has an interesting story (재미있는 이야기가 담긴 책)</span><br></pre></td></tr></table></figure><p>어?! 🤔 그런데 다음 문장은 뒤에서 꾸며준게 아니라 앞에서 꾸며주고 있습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">재미있는 책</span><br><span class="line">an interesting book (o) </span><br><span class="line">a book interesting  (x)</span><br></pre></td></tr></table></figure><p>고대 영어 (현대 영어의 모체가 된5C ~ 12C 잉글랜드 영어)의 어순에 따르면 <code>a book interesting</code>이었습니다.<br>그런데 이후 영어가 다른 언어에 영향을 받으면서 예외적으로 수식하는 정보가 짧을 경우에만 앞에 붙입니다!</p><blockquote><p>참고로 실제 미드같은 곳에서 엘프나 고대 영어를 하는 대사를 보면 a book interesting로대사를 합니다.</p></blockquote><p>한 번 문장을 수식하는 예를 보겠습니다.</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Steve picks an apple from a tree</span><br><span class="line">Steve who is a farmer picks an apple from a tree standing on the yard.</span><br></pre></td></tr></table></figure><blockquote><p>다만, 위 문장은 영어 수식의 어순을 효과적으로 설명하기 위한 예시 문장입니다. 원어민은 조금 작위적으로 느껴질 수 있는 문장이라는 것을 참고하세요.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>En-Grammar-05-다양한 연결 동사(Linking Verb)</title>
      <link href="/2022/12/21/En-Grammar-05/"/>
      <url>/2022/12/21/En-Grammar-05/</url>
      
        <content type="html"><![CDATA[<h1 id="다양한-연결-동사"><a href="#다양한-연결-동사" class="headerlink" title="다양한 연결 동사"></a>다양한 연결 동사</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Steve is happy. (그냥 스티브는 행복하다)</span><br></pre></td></tr></table></figure><p>be 동사 외의 연결 동사들은 자신이 가진 의미를 덧붙이며 다음 정보로 연결합니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Steve looks happy. (스티브는 행복해 보인다)</span><br><span class="line">Steve feels happy. (스티브는 행복감을 느낀다)</span><br><span class="line">Steve gets happy.  (스티브는 안행복했다가 행복해졌다)</span><br></pre></td></tr></table></figure><p>be 동사 이외 연결 동사들은 동작 동사로 쓰이기도 합니다.<br>굳이 둘은 구분하는 방법은 연결 동사로 쓰인 경우는 be동사로 교체해도 의미가 통합니다.<br>반면에 동작 동사로 쓰인 경우는 be동사로 교체해도 의미가 통하지 않습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Steve feels happy.    (실제 동작이 없음, 연결 동사, be동사로 교체 가능)</span><br><span class="line">Steve feels the wall. (실제 동작이 있음, 동작 동사)</span><br></pre></td></tr></table></figure><p>그렇지만 별로 실용적으로 쓰이지는 않습니다.<br>그냥 ‘연결 동사’로도 쓰일 수 있다는 것을 생각하며 맥락에 맞게 의미를 자연스럽게 파악하면 됩니다.</p><p>대표적인 연결 동사들을 보면 다음과 같습니다.</p><table><thead><tr><th align="center">1. 감각 동사들</th><th align="center">2. 뭔가 변하는 동사들</th><th align="center">3. 뭔가 유지하는 동사들</th></tr></thead><tbody><tr><td align="center">look</td><td align="center">get</td><td align="center">stay</td></tr><tr><td align="center">seem</td><td align="center">become</td><td align="center">remain</td></tr><tr><td align="center">appear</td><td align="center">grow</td><td align="center"></td></tr><tr><td align="center">feel</td><td align="center">turn</td><td align="center"></td></tr><tr><td align="center">sound</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">smell</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">taste</td><td align="center"></td><td align="center"></td></tr></tbody></table><hr><h1 id="동작-동사-get과-연결-동사-get-예시"><a href="#동작-동사-get과-연결-동사-get-예시" class="headerlink" title="동작 동사 get과 연결 동사 get 예시"></a>동작 동사 get과 연결 동사 get 예시</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 동작 동사 get</span><br><span class="line">I got a letter from Steve.</span><br><span class="line">Steve got a cold</span><br><span class="line">Steve didn&#x27;t get the joke.</span><br><span class="line"></span><br><span class="line">// 연결 동사 get</span><br><span class="line">As you get old, your memory gets worse.</span><br><span class="line">My watch got broken yesterday.</span><br><span class="line">Steve got to Seoul yesterday.</span><br></pre></td></tr></table></figure><p>암기할 필요없이 (존재나 상태가 변하는) + (뒤에 나오는 단어)를 조합하면 됩니다. </p><ul><li>get up</li><li>get well</li><li>get ready</li><li>get to do</li><li>get moving</li><li>get married</li></ul><p>일반적으로 학교에서 동사를 배울 때는 자동사, 타동사, 수여동사, 지각동사, 사역동사 등 많이 구분하는데,<br>실제 영어 동사는 2가지로 구분할 수 있습니다. 즉, 행위자로 시작하는 것은 경우에 따라 2가지로 나눕니다. </p><ol><li>동작 동사 (Action Verb)</li><li>연결 동사 (Linking Verb)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(동작 동사) 행위자 → 동작 → 대상 → 상황 정보    </span><br><span class="line">(연결 동사) 행위자 → 연결 동사 → 존재·상태 정보 </span><br></pre></td></tr></table></figure><blockquote><p>원어민들이 쓰는 동사를 빅데이터를 이용해 분석해보면 동작 동사 약 50%, 연결 동사 약 50%이라고 합니다.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>En-Grammar-04-be 동사의 개념</title>
      <link href="/2022/12/21/En-Grammar-04/"/>
      <url>/2022/12/21/En-Grammar-04/</url>
      
        <content type="html"><![CDATA[<h1 id="be-동사-연결-동사-Linking-Verb"><a href="#be-동사-연결-동사-Linking-Verb" class="headerlink" title="be 동사: 연결 동사 (Linking Verb)"></a>be 동사: 연결 동사 (Linking Verb)</h1><p>우리는 be 동사를 다음과 같이 알고 있습니다. </p><blockquote><p>be 동사 : “~이다 &#x2F; 있다”</p></blockquote><p>그렇지만 이는 잘못 알고 있는 것은 아니지만 조금 부족하게 알고 있는 것입니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Steve happy. -&gt; (행위자) (동작)</span><br></pre></td></tr></table></figure><p>위 문장을 보면 동작이 없습니다. 동작을 넣어주고 싶은데 움직임은 없는 것이 be동사입니다. 즉, be 동사는 행위자를 상태정보로 연결시켜주는 역할을 합니다. 위 문장은 아래와 같이 적어야 올바른 문장입니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Steve is happy.</span><br></pre></td></tr></table></figure><p>즉, be 동사는 연결시켜주는 것이 핵심입니다. 그렇지만 해석할 떄 “존재와 상태는 ~”을 붙이지 말고 머리 속에 이해하기만 하면 더 쉽게 와닿습니다.</p><blockquote><p>be 동사는 동사이기는 하지만 움직임&#x2F;동작의 의미는 없다! </p></blockquote><p>반대로 <code>동작 동사(Action Verb)</code>가 있습니다. 동작 동사는 움직임 의미가 있는 동사를 말합니다</p><hr><h2 id="be-ing-진행형"><a href="#be-ing-진행형" class="headerlink" title="be + ~ing (진행형)"></a>be + ~ing (진행형)</h2><p>be 동사는 연결 동사, ~ing는 뭔가 진행된다는 그림이죠. 즉, 존재와 상태가 뭔가 진행중인 의미가 됩니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Steve is eating a banana.</span><br></pre></td></tr></table></figure><hr><h2 id="be-ed-수동태"><a href="#be-ed-수동태" class="headerlink" title="be + ~ed (수동태)"></a>be + ~ed (수동태)</h2><p>be 동사는 연결 동사, ~ed는 이미 지난 것, 끝난 이라는 의미죠.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A door is closed.  (문이 닫혀진 상태)</span><br><span class="line">A door is closing. (문이 닫혀지고 있는 상태)</span><br></pre></td></tr></table></figure><p>be 동사의 개념을 제대로 이해하고 있어야 다른 문법 기능과 유기적으로 연결할 수 있습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Steve is gone. (스티브는 어디로 간 상태)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>En-Grammar-03-동사, 의미에 충실하라</title>
      <link href="/2022/12/21/En-Grammar-03/"/>
      <url>/2022/12/21/En-Grammar-03/</url>
      
        <content type="html"><![CDATA[<h1 id="동사의-핵심"><a href="#동사의-핵심" class="headerlink" title="동사의 핵심"></a>동사의 핵심</h1><p>정보가 나열되는 순서와 방식을 염두에 두고 받아들여, 머릿속에서 ‘그림’을 구현해 나가면 됩니다! 글자를 보면서 그림을 만들어갑니다. ‘자동사’와 ‘타동사’를 문법적으로 구분하는 것은 실용적인 관점에서 별로 의미가 없습니다. 😀</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Steve goes to a house.</span><br><span class="line">Steve walks his dog.</span><br><span class="line">Steve helps Peter to clean a room.</span><br></pre></td></tr></table></figure><blockquote><p>문법 용어를 정확히 구분하는 것은 중요하지 않습니다! 제시된 순서대로 정보를 조합하여 의미를 파악하는 것이 휠씬 중요합니다!</p></blockquote><p>‘대상’에는 기본적으로 ‘방향성’ 정보가 같이 담겨 있습니다. 그리고 ‘대상’에서 ‘방향성’ 정보를 분리하여 제시할 떄에는 ‘방향성’ 정보를 대상보다 먼저 제시합니다. 동작이라는 행위 자체가 뭔가를 방향을 잡고 움직이는 것이 맞죠?</p><blockquote><p>행위자 → 동작 → 대상 → 상황 정보</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Steve gives a book to Peter. (to라는 방향성을 써서 아래 문장보다 강조)</span><br><span class="line">Steve gives Peter a book. (평범하게 나열된 문장)</span><br></pre></td></tr></table></figure><p>‘동사’는 문법적으로 분석하지 말고 단어가 가진 ‘동작 의미’ 자체에 집중하세요!</p>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>En-Grammar-02-영어 문장의 서순</title>
      <link href="/2022/12/21/En-Grammar-02/"/>
      <url>/2022/12/21/En-Grammar-02/</url>
      
        <content type="html"><![CDATA[<h1 id="영어의-어순"><a href="#영어의-어순" class="headerlink" title="영어의 어순"></a>영어의 어순</h1><p>1장에서 봤듯이 그림으로 의미를 전달하는 방식이 “영어의 어순”으로 굳어졌습니다.</p><blockquote><p>💡 영어의 어순</p><p>영어의 어순은 행위자를 가장 먼저 제시하고, 가까운 순서(시간, 공간, 논리, 인과적)대로 나열됩니다.   </p><p>행위자 → 동작 → 대상 → 상황 정보</p><ul><li><code>행위자</code> : 행위를 하는 사람 or 이야기를 풀어가는 주체</li><li><code>동작</code> : 행위자가 행하는 움직임</li><li><code>대상</code> : 동작이 향하는, 동작이 일어나는 물체</li><li><code>상황 정보</code> : 일이 벌어직 있는 상황에 대한 더 자세한 정보</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/one_point_1_2.png" alt="one_point_1_2"></p><blockquote><p>💡 주어(Subject) - 동사(Verb) - 목적어(Object)</p><p>학계에서는 주어, 동사, 목적어라고 많이 사용하지만 주어와 목적어는 문장 구성 성분이고 동사는 품사입니다. 그렇지만 이런 용어 자체는 잘 와닿지 않습니다. </p><ul><li><code>Object</code> : 물체, 물건, 대상, 목표, </li><li>문법 용어로 ‘동작이 향하는 대상’이라는 의미</li></ul><p>그래서 위 방식보다 아래 방식으로 이해하면 이해하기 편합니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">행위자 -&gt; 동작 -&gt; 대상 -&gt; 상황 정보</span><br></pre></td></tr></table></figure><blockquote><p>사실 용어 자체는 그렇게 중요한게 아니라 이해하기만 하면 됩니다.</p></blockquote></blockquote><p>한 번 정리해보겠습니다.</p><ol><li>영어는 그림에서 시작된 언어다.</li><li>행위자를 먼저 제시하고, 행위자에 가까운 순서대로 정보를 나열한다.</li><li>행위자 → 동작 → 대상 → 상황 정보</li></ol>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>En-Grammar-01-영어는 그림에서 시작된 언어</title>
      <link href="/2022/12/21/En-Grammar-01/"/>
      <url>/2022/12/21/En-Grammar-01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>출처 : 이수영 - 원포인트문법</p></blockquote><p>영문법같은 많은 내용을 완벽히 암기하는 것을 불가능합니다. 그래서 상황에 따라 유연하게 대처하기 힘듭니다.<br>영어 고수의 접근법은 영어를 관통하는 단순한 핵심 원리를 머릿속에 먼저 장착 후 경험을 통해 배웁니다.</p><blockquote><p>Simplicity is the ultimate sophistication. - Leonardo da Vinci</p><p>단순함이 궁극의 정교함이다 - 레오나르도 다 빈치</p></blockquote><h1 id="영어-알파벳-Alphabet-의-기원"><a href="#영어-알파벳-Alphabet-의-기원" class="headerlink" title="영어, 알파벳(Alphabet)의 기원"></a>영어, 알파벳(Alphabet)의 기원</h1><p> 알파벳이란 그리스 문자, 로마자 따위의 서양 언어를 표기하는 데 쓰는 문자들을 통틀어 이르는 말입니다.<br>흔히 ‘로마자’를 가리키기도 하는데, 그것은 알파벳이 로마인들이 쓰던 라틴어 알파벳의 영향을 받아서 그렇답니다.</p><p> 알파벳은 일반적으로 이집트 문자와 수메르 문자의 영향을 받아서 페니키아인이 만들었다고 합니다.<br>페니키아 문자는 그리스, 라틴 문자를 거쳐 오늘날의 형태로 발전합니다.<br>페니키아인이 만든 알파벳은 그리스인에게 가장 먼저 전해졌습니다. </p><p>그리스 인은 글자를 몇 개 추가하여 그리스 알파벳을 만들어 사용했습니다.<br>그 뒤 페니키아와 그리스가 로마에게 멸망당했는데,<br>로마는 그리스 알파벳을 받아들여 오늘날의 알파벳과 거의 비슷한 알파벳을 만들었습니다.</p><p> 알파벳의 사용으로 인해 지식의 대중화가 가능해졌습니다. 당시만 하더라도 문자는 성직자나 귀족 등 소수 엘리트의 전유물이었습니다.<br>한자를 알려면 최소 1000자, 메소포타미아의 서기들은 600자의 설형문자를 알아야 문자생활이 가능했습니다.</p><p>그러나 그리스인들은 24자의 알파벳만 알고 있으면 자유자재로 사물과 추상적 관념을 표현할 수 있었습니다.<br>문자를 연구하는 학자들은 알파벳의 발명이야말로 지식의 대중화를 가져온 혁명적인 사건이라고 평가합니다.<br>즉, 알파벳을 통해서 대중 교육이 가능해졌습니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/one_point_1_1.png" alt="one_point_1_1"></p><p>그림의 특징은 그림에 영향을 많이 주는 것부터 시작합니다. 즉, 영어의 ‘어순’에 반영됩니다!<br>아래 그림을 보면 Steve부터 출발해서 tree로 끝납니다.</p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/one_point_1_2.png" alt="one_point_1_2"></p><p>문장에 관사나 전치사 등이 추가로 붙이면 영어 어순이 됩니다. 행위자를 가장 먼저 제시하고,<br>그와 가까운 순서대로(시간적&#x2F; 공간적&#x2F; 논리적 &#x2F; 인과적 순서로) 나열합니다.</p><blockquote><p>행위 →  동작 → 대상 → 상황 정보</p></blockquote><p>영어 문장을 읽을 떄 <code>Steve picks an apple from a tree.</code>라는 문장에서 위 그림이 떠올라야 합니다. 한국어는 그림 기반의 언어가 아닙니다. 위 그림을 한국어는 “스티브가 나무에서 사과를 가져왔다”라는 등의 어순이 왔다갔다 합니다.</p><p> 영어는 하나의 단어가 다양한 품사, 의미로 쓰이는 특징이 있습니다. 명사도 되기도 하고 동사가 되기도 합니다. </p><blockquote><p>“Hand”라는 단어를 보면, 2가지 뜻이 있습니다.</p><ul><li>손</li><li>건네주다</li></ul><p>회의를 끝마치고 서로 악수하는 장면에서도 손이라는 그림이 있습니다. 즉, 이미지가 글자가 되었기 떄문에 여러 의미가 담겨있습니다. 그래서 영어 단어는 이미지를 이해하는 것이 중요합니다. 특히, 기본적인 단어일 수 록 이런 특징이 두드러집니다.</p></blockquote><blockquote><p> 또 다른 예로 “Book”은 책, 예약하다, 기록하다라는 의미가 있죠.</p><ul><li>책</li><li>예약하다, 기록하다  (Book으로 뭔가 하는 장면들)</li></ul></blockquote><blockquote><p>“Cup”은 컵, 손을 컵 모양으로 쥐다라는 의미가 있습니다.</p><ul><li>컵</li><li>손을 컵 모양으로 쥐다</li></ul></blockquote><p>이 단어들을 단순 암기하는 것보다 ‘이미지’적으로 확장시켜 상황과 맥락에 맞춰 유연하게 의미를 파악할 수 있습니다.</p><p>반대로 <code>한국어</code>는 <strong>소리 기반의 언어</strong>입니다.<br>한국어는 소리가 먼저 만들어지고 글자가 나중에 만들어졌기 떄문에 소리로 표현되는 것을 모두 글자로 표기했습니다. </p><p>예를 들어 [뷁], [낢] 같은 단어들을 쓰지는 않지만 모두가 똑같이 읽을 수 있습니다.<br>그래서 한글은 ‘글자’와 ‘소리’가 규칙적으로 대응하므로, 같은 글자는 예외없이 모든 사람이 동일하게 읽을 수 있습니다.</p><hr><p><code>영어</code>는 <strong>그림 기반의 언어</strong>라고 했죠? 그림에서 시작된 글자에서 나중에 언어로 쓸 수 있는 소리로 발전했습니다. 한국어와 반대죠. </p><p>[Sage], [Nafe] 등의 영어 단어들을 미국, 영국, 인도, 독일, 기타 영어권 국가들은 읽는 방법이 다 제각각입니다.<br>즉, 영어 알파벳은 소리를 내는 기본 규칙은 있지만 예외가 많아서 상황과 사람에 따라 다르게 읽을 수 있습니다.</p><blockquote><p>참고로 일본어도 소리 기반 언어입니다. 그리고 중국어는 그림 기반의 언어죠.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 영어 </category>
          
          <category> Grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-02-변수(Variable)</title>
      <link href="/2022/12/20/Front-JS-Basic-02-Variable/"/>
      <url>/2022/12/20/Front-JS-Basic-02-Variable/</url>
      
        <content type="html"><![CDATA[<h1 id="1-컴퓨터-구성요소"><a href="#1-컴퓨터-구성요소" class="headerlink" title="1. 컴퓨터 구성요소"></a>1. 컴퓨터 구성요소</h1><p>컴퓨터를 구성하는 가장 중요한 요소 3가지는 <code>하드디스크, CPU, 메모리</code>입니다.</p><p>컴퓨터에서 문서 파일을 실행시키면, 다음과 같은 과정이 진행됩니다.</p><ol><li>하드디스크에 저장된 폴더 안에 들어와서 파일을 선택하고, 어떤 것을 여는지를 CPU가 처리<ol><li>하드디스크에 있는 문서 파일을 인식하고 메모리 상으로 가지고 옴</li><li>파일을 열고 처리할 수 있는 어플리케이션을 모니터에 출력</li></ol></li><li>사용자가 수정하는 내용들을 메모리 상에 주기적으로 업데이트하면서 작업을 처리</li><li>작업한 내용을 저장하고 어플리케이션을 종료하면, 메모리 상에 있는 데이터를 하드디스크 안에 다시 저장</li></ol><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/js-2-1.png" alt="js-2-1"></p><p>어플리케이션을 열고 무언가를 처리하는 데는 메모리 상에 데이터를 보관하고, 읽고, 쓰는 등의 작업을 합니다.</p><ul><li>메모리는 <code>‘메모리 셀’</code>이라고 불리는 단위로 동작하며, </li><li>각각의 메모리 셀은 1 Byte(&#x3D;8 Bit) 단위로 구성됨</li></ul><p>컴퓨터에서 여러 개의 어플리케이션을 사용하면, 어플리케이션 마다 필요한 메모리들이 할당됩니다.<br>사용자가 앱을 많이 열어서 메모리가 더 필요하다면, (A앱과 B앱이 있다고 가정)</p><ul><li>A앱을 사용 중일 떄는, B앱은 사용하지 않기 때문에 B앱은 잠시 하드디스크에 저장합니다.</li><li>c.f. 만약 내 컴퓨터 메모리보다 앱이 더 많은 메모리를 요구한다면, 에러가 발생하고 앱이 정상 동작하지 않음</li></ul><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/js-2-2.png" alt="js-2-2"></p><p>어플리케이션이 메모리에 올라왔을 때, Code, Data, Stack, Heap의 4개의 구조로 구성됩니다.</p><ul><li><code>Code</code> : 개발자들이 작성하는 <strong>코드를 저장하는 공간</strong></li><li><code>Data</code> : 어플리케이션이 전반적인 필요로 하는 <strong>변수, 데이터 등을 저장하는 공간</strong></li><li><code>Stack</code> : 어플리케이션이 함수를 호출하는 <strong>실행 순서를 저장하는 공간</strong></li><li><code>Heap</code> : 어플리케이션에서 단순한 데이터가 아니라 <strong>여러 개의 데이터타입을 묶은 복잡한 데이터(객체)를 저장하는 공간</strong></li></ul><hr><h2 id="1-1-비트와-바이트"><a href="#1-1-비트와-바이트" class="headerlink" title="1.1 비트와 바이트"></a>1.1 비트와 바이트</h2><p>컴퓨터는 0과 1밖에 이해하지 못합니다. 컴퓨터가 처리할 수 있는 가장 작은 정보 단위는 <code>비트(Bit)</code>입니다. </p><ul><li>Bit는 0 또는 1이라는 정보를 담을 수 있음</li><li>신호가 없고 있는 등의 정보만 처리</li><li>사람은 10개의 손가락을 이용해 숫자 1~10까지 10진수를 다루지만, → <code>10진수</code></li><li>컴퓨터는 신호가 있고 없고의 딱 2가지만 다룸 → <code>2진수</code></li></ul><p>2진수(Binary Digit)들이 모여 좀 더 큰 범위의 데이터를 다룰 수 있습니다.</p><p>경우의 수 공식을 이용해보면, 한 비트당 2가지 경우를 나타낼 수 있으므로</p><ul><li>1bit는 2가지 정보를 표현</li><li>2bit는 4가지의 정보를 표현</li><li>3bit는 8 (2x2x2)가지 정보를 표현</li><li>8bit는 총 256개의 다른 정보를 나타낼 수 있습니다.</li></ul><p>컴퓨터에서 데이터를 처리할 떄, 가장 기본적인 단위를 <code>1 Byte</code>라고 애기하는데,<br><code>1 Byte</code>는 <code>8 Bit</code>로 구성되어 있기 때문에, 256가지의 다른 정보를 담을 수 있습니다. </p><hr><h2 id="1-2-진수-변환"><a href="#1-2-진수-변환" class="headerlink" title="1.2 진수 변환"></a>1.2 진수 변환</h2><h3 id="1-2-1-10진수-→-2진수"><a href="#1-2-1-10진수-→-2진수" class="headerlink" title="1.2.1 10진수 → 2진수"></a>1.2.1 10진수 → 2진수</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 10진수 29를 2진수로 바꾸려면?</span><br><span class="line">// 1. 29를 2로 계속 나눗셈!</span><br><span class="line">// 2. 나머지를 연결하면 2진수</span><br><span class="line"></span><br><span class="line">2 | 29</span><br><span class="line">2 | 14  ----- 1</span><br><span class="line">2 |  7  ----- 0</span><br><span class="line">2 |  3  ----- 1</span><br><span class="line">     1  ----- 1</span><br><span class="line">     </span><br><span class="line">29를 2진수로 바꾸면, `11101`</span><br></pre></td></tr></table></figure><hr><h3 id="1-2-2-2진수-→-10진수"><a href="#1-2-2-2진수-→-10진수" class="headerlink" title="1.2.2 2진수 → 10진수"></a>1.2.2 2진수 → 10진수</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 2진수 `11101`을 다시 10진수로 바꾸려면?</span><br><span class="line">// 1. 오른쪽부터 2^0부터 적고, 각 자리의 비트와 곱셈</span><br><span class="line">// 2. 각 자리의 곱셈한 결과를 다 더하면 10진수</span><br><span class="line"></span><br><span class="line">  1    1    1    0    1  </span><br><span class="line">  *    *    *    *    *</span><br><span class="line">2^4  2^3  2^2  2^1  2^0</span><br><span class="line">------------------------</span><br><span class="line"> 16 +  8 +  4 +  0  + 1 = 29</span><br></pre></td></tr></table></figure><hr><h2 id="1-3-메가와-메비의-차이"><a href="#1-3-메가와-메비의-차이" class="headerlink" title="1.3 메가와 메비의 차이"></a>1.3 메가와 메비의 차이</h2><table><thead><tr><th align="center"><code>PC용</code></th><th align="center">단축이름</th><th align="center">용량</th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center">B</td><td align="center">Byte</td><td align="center"></td></tr><tr><td align="center">kilobyte</td><td align="center">KB</td><td align="center">1024 Byte</td><td align="center">$2^{10}$ Bytes</td></tr><tr><td align="center">megabyte</td><td align="center">MB</td><td align="center">1024 KByte</td><td align="center">$2^{20}$ Bytes</td></tr><tr><td align="center">gigabyte</td><td align="center">GB</td><td align="center">1024 MByte</td><td align="center">$2^{30}$ Bytes</td></tr><tr><td align="center">terabyte</td><td align="center">TB</td><td align="center">1024 GByte</td><td align="center">$2^{40}$ Bytes</td></tr></tbody></table><p><code>윈도우, 맥, 리눅스 같은 PC 운영체제</code>에서는 <strong>1024씩 곱해서 2진수 단위로 저장</strong>합니다.</p><table><thead><tr><th align="center"><code>외장디스크, USB용</code></th><th align="center">단축이름</th><th align="center">용량</th><th align="center"></th><th align="center">PC용 용량</th></tr></thead><tbody><tr><td align="center"></td><td align="center">B</td><td align="center">Byte</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">kilobyte</td><td align="center">KB</td><td align="center"><strong>1000 Byte</strong></td><td align="center">1000 Bytes</td><td align="center">10<strong>24 Byte</strong></td></tr><tr><td align="center">megabyte</td><td align="center">MB</td><td align="center">1000 KByte</td><td align="center">$1000^2$ Bytes</td><td align="center"></td></tr><tr><td align="center">gigabyte</td><td align="center">GB</td><td align="center">1000 MByte</td><td align="center">$1000^3$ Bytes</td><td align="center"></td></tr><tr><td align="center">terabyte</td><td align="center">TB</td><td align="center"><strong>1000 GByte</strong></td><td align="center">$1000^4$ Bytes</td><td align="center">10<strong>24 GByte</strong></td></tr></tbody></table><p><code>외장디스크나 USB</code>는 <strong>1000씩 곱해서 10진수 단위로 저장</strong>합니다.<br>옛날에는 컴퓨터의 용량과 하드디스크의 크기도 적었기 때문에 이런 차이가 큰 문제가 되지 않았습니다.<br>KB 단위는 10진수 1000, 2진수 1024는 24Byte밖에 차이가 나지 않았습니다.<br>그러나 TB 단위에서는 24GByte나 차이가 나게 됩니다.</p><p>그래서 100MB로 표기된 하드디스크나 USB 등을 구매해서 운영체제에 꼽으면,<br>실제 저장할 수 있는 사이즈는 95.37MB라고 뜹니다.<br>이는 10진수 표기법과 2진수 표기법으로 계산된 결과가 다르기 때문입니다.<br>(c.f. 옛날에는 이걸로 제조사에 항의하는 일이 많았다고 함)</p><table><thead><tr><th align="center"><code>IEC 1998 표기법</code></th><th align="center">단축이름</th><th align="center">용량</th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center">B</td><td align="center">Byte</td><td align="center"></td></tr><tr><td align="center">ki<strong>bi</strong>byte</td><td align="center">KB</td><td align="center">1024 Byte</td><td align="center">$2^{10}$ Bytes</td></tr><tr><td align="center">me<strong>bi</strong>byte</td><td align="center">MB</td><td align="center">1024 KByte</td><td align="center">$2^{20}$ Bytes</td></tr><tr><td align="center">gi<strong>bi</strong>byte</td><td align="center">GB</td><td align="center">1024 MByte</td><td align="center">$2^{30}$ Bytes</td></tr><tr><td align="center">te<strong>bi</strong>byte</td><td align="center">TB</td><td align="center">1024 GByte</td><td align="center">$2^{40}$ Bytes</td></tr></tbody></table><p>이런 혼란을 잠재우고자 1998년 IEC 단체에서 다른 표기법을 제안합니다.</p><ul><li><strong>KB, MB는 기존의 사람들이 쓰는 10진수로</strong> 남겨두고,</li><li>Binary형태로 애기할 떄는, 뒤에 2진수(binary)를 붙여서 <strong>kibibyte, mebibyte</strong>라고 부르자고 약속을 하게 되었습니다. </li><li>(c.f. 물론 아직 사람들이 kilobyte와 kibibyte를 혼동해서 부르곤 합니다.)</li></ul><hr><h2 id="1-4-문자-인코딩"><a href="#1-4-문자-인코딩" class="headerlink" title="1.4 문자 인코딩"></a>1.4 문자 인코딩</h2><p>지구 상에 존재하는 수 많은 언어들을 0과 1로 표현할 수 있었을까요?<br>예전에는 각각의 나라별로 EUC-KR, EUC-JP 등 언어마다 다양한 텍스트 인코딩이 존재했는데,<br>서로 다른 인코딩 규격때문에 웹사이트가 깨지거나 한글 문서가 읽어지지 않는 문제점 등이 많이 발생했습니다. </p><p>이것을 해결하기 위해 나온 것이 <code>UTF-8</code>(Unicode Transformation For mat, 8bit)입니다. </p><ul><li>기존 ASCII 코드뿐만 아니라 모든 Unicode 코드를 나타낼 수 있는 웹사이트에서 기본적으로 사용</li><li>통상적으로 가장 많이 사용하는 텍스트 인코딩</li><li>‘가변길이 유니코드 인코딩’ 방식으로 <strong>길이가 정해져 있지 않고, 필요에 의해서 길어질 수 있음</strong></li><li>모든 ASCII 코드는 7 bit로 나타낼 수 있기 때문에 <strong>1 Byte로 표현</strong>하고, Unicode 코드는 2 ~ 4 Byte로 표현</li><li>1 Byte로 표현할 수 있다면 그대로 데이터를 표현하고, <ul><li>만약 2 Byte 이상이 필요하다면, 총 문자를 나타내는데 몇 Byte가 필요한지 힌트를 줌</li></ul></li><li>c.f. Rob Pike, Ken Thompson(Go언어 창시자들)이 개발</li></ul><p><code>UTF-16</code>이라는 다른 방식도 있는데 이것도 가변길이이지만 <strong>기본적으로 2 Byte를 사용</strong>합니다.<br>그래서 <strong>1 Byte를 사용할 떄도 2 Byte를 사용</strong>하기에 통상적으로 <strong>UTF-8이 가장 보편적</strong>으로 사용되고 있습니다.</p><hr><h1 id="2-변수-선언-Variable-Declarations"><a href="#2-변수-선언-Variable-Declarations" class="headerlink" title="2. 변수 선언(Variable Declarations)"></a>2. 변수 선언(Variable Declarations)</h1><p><code>변수(Variables)</code>는 <code>값을 저장하는 공간</code>을 의미합니다.</p><ul><li>컴퓨터적으로는 <code>자료를 저장할 수 있는 이름이 주어진 기억장소</code></li><li>JS는 총 3가지 변수 생성 문법을 제공합니다.<ul><li><code>var, let</code> : 변수 선언</li><li><code>const</code> : 상수 선언</li></ul></li></ul><hr><h2 id="1-1-var"><a href="#1-1-var" class="headerlink" title="1.1 var"></a>1.1 var</h2><ul><li>변수만드는걸 <strong>선언</strong></li><li>변수에 뭐 집어넣는걸 <strong>할당</strong></li><li>재선언 가능, 재할당 가능</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 선언</span></span><br><span class="line"><span class="keyword">var</span> age;</span><br><span class="line"><span class="keyword">var</span> age; <span class="comment">// 재선언 가능</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 할당</span></span><br><span class="line">age = <span class="number">20</span>;</span><br><span class="line">age = <span class="number">30</span>; <span class="comment">// 다른 값으로 재할당 가능</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-2-변수를-쓰는-이유"><a href="#1-2-변수를-쓰는-이유" class="headerlink" title="1.2 변수를 쓰는 이유"></a>1.2 변수를 쓰는 이유</h2><p>메모리는 각각의 메모리 셀마다 메모리 주소라는 것이 있습니다.<br>그런데 변수에 이름을 사용하지 않고, 메모리의 주소를 사용한다면 어떨까요? </p><p><img src="https://raw.githubusercontent.com/berenickt/image-server/main/img/js-2-3.png" alt="js-2-3"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="number">0x000006</span> = <span class="number">0</span>; <span class="comment">// 무엇을 의미하는지 알 수 없다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 변수명(Variable Name) = 식별자(Idetifier)</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>이것의 문제점은 너무 길고 메모리의 주소가 어떤 것을 의미하는지 알 수 없습니다.<br>그래서 변수를 사용해 프로그래머가 보기 쉽게 사용합니다.</p><hr><h2 id="1-3-let과-const"><a href="#1-3-let과-const" class="headerlink" title="1.3 let과 const"></a>1.3 let과 const</h2><ul><li>let과 const는 2015 ES6가 나오면서 등장한 변수 문법입니다.</li><li>그래서 그 이전까지는 변수와 상수 구분없이 var키워드만을 사용했습니다.</li></ul><hr><h1 id="3-var-vs-let"><a href="#3-var-vs-let" class="headerlink" title="3. var vs let"></a>3. var vs let</h1><p>var와 let은 크게 3가지 관점에 다릅니다.</p><ul><li><code>스코프(Scope, 범위)</code> : 코드가 변수에 접근할 수 있는 범위</li><li><code>중복선언(Variable Redeclaration)</code></li><li><code>호이스팅(Hoisting)</code></li></ul><hr><h2 id="3-1-스코프-Scope-범위"><a href="#3-1-스코프-Scope-범위" class="headerlink" title="3.1 스코프(Scope, 범위)"></a>3.1 스코프(Scope, 범위)</h2><p>스코프는 크게 3개로 구분합니다.</p><ul><li><code>Function Scope(함수 범위)</code><ul><li>함수 내부에서만 변수에 접근이 가능</li><li>var키워드로 선언한 변수</li></ul></li><li><code>Block Scope(블록 범위)</code><ul><li>블록 내부에서만 변수에 접근이 가능</li><li>let키워드로 선언한 변수</li><li>cf. 다른 대부분의 언어는 변수를 선언하게 되면, 블록 범위를 가집니다.</li></ul></li><li><code>Global Scope(전역 범위)</code> : 변수가 어느 곳에도 속하지 않은 최상위에 선언한 변수</li></ul><h3 id="3-1-1-Function-Scope-함수-범위"><a href="#3-1-1-Function-Scope-함수-범위" class="headerlink" title="3.1.1 Function Scope(함수 범위)"></a>3.1.1 Function Scope(함수 범위)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 밖에 접근하면, ReferenceError: x is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 그런데 블록 밖에서 호출했는데도 값에 접근이 가능하다?</span></span><br><span class="line">  <span class="comment">// 이것이 가능한 이유는 var 키워드로 선언한 변수는 자동으로 Function Scope를 갖습니다.</span></span><br><span class="line">  <span class="comment">// 즉, 함수 내부라면 어디서든지 접근이 가능합니다.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>(); <span class="comment">// hi</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-1-2-Block-Scope-블록-범위"><a href="#3-1-2-Block-Scope-블록-범위" class="headerlink" title="3.1.2 Block Scope(블록 범위)"></a>3.1.2 Block Scope(블록 범위)</h3><p>그러면 var 키워드를 let으로 바꿔보겠습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// ReferenceError: x is not defined</span></span><br><span class="line">  <span class="comment">// let은 Block Scope이기 때문에 블록 내부에서만 접근이 가능합니다.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><p>다른 예를 들어보면,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">    <span class="comment">// let 블록범위이기 때문에 x는 블록 내부에서만 유효하다.</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// hello</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><p>for문 역시 블록이기 때문에 마찬가지입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// ReferenceError: i is not defined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><hr><h3 id="3-1-3-Global-Scope-전역-범위"><a href="#3-1-3-Global-Scope-전역-범위" class="headerlink" title="3.1.3 Global Scope(전역 범위)"></a>3.1.3 Global Scope(전역 범위)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aVar = <span class="string">&#x27;varHello&#x27;</span>; <span class="comment">// var키워드로 선언한 변수는 window 전역 객체의 속성이 된다.</span></span><br><span class="line"><span class="keyword">let</span> aLet = <span class="string">&#x27;letHello&#x27;</span>; <span class="comment">// let키워드는 window 전역객체에 등록되지 않는다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// window 전역 객체는 브라우저의 정보를 갖고있는 유일한 객체입니다.</span></span><br><span class="line"><span class="comment">// window 객체는 코드, 모든 라이브러리들이 공유하므로,</span></span><br><span class="line"><span class="comment">// window 객체에 속성을 추가하는 것은 위험할 수 있습니다.</span></span><br><span class="line"><span class="comment">// 왜냐하면 여러 곳에서 접근을 할 수 있고 값을 변경할 수 있기 때문입니다.</span></span><br><span class="line"><span class="comment">// 그래서 var 키워드를 쓰는 것은 위험한 것입니다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="3-2-중복-선언"><a href="#3-2-중복-선언" class="headerlink" title="3.2 중복 선언"></a>3.2 중복 선언</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;안녕하세요&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 코드 수천 줄이 있다고 가정</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;하이&#x27;</span>; <span class="comment">// 어떤 개발자가 변경, 값을 덮어씌워 버림, 코드를 헷갈리게 만듬</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 하이</span></span><br></pre></td></tr></table></figure><p><code>var</code>키워드는 같은 이름으로 중복 선언 가능합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="string">&#x27;안녕하세요&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 코드 수천 줄이 있다고 가정</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="string">&#x27;하이&#x27;</span>; <span class="comment">// SyntaxError : x가 이미 선언됨</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); </span><br></pre></td></tr></table></figure><p><code>let</code>키워드는 같은 이름으로 중복 선언 불가능합니다.</p><ul><li>에러가 나온다는 것은 좋은 것입니다.<ul><li>훨씬 더 안전하게 코딩 가능</li></ul></li><li>에러가 나오지 않은 채 오류가 발생하는 경우가 가장 무서운 경우임</li></ul><hr><h2 id="3-3-호이스팅-Hoisting-끌어올리다"><a href="#3-3-호이스팅-Hoisting-끌어올리다" class="headerlink" title="3.3 호이스팅 (Hoisting, 끌어올리다)"></a>3.3 호이스팅 (Hoisting, 끌어올리다)</h2><ul><li>자바스크립트 엔진이 <code>코드를 실행하기 전, 변수, 함수, 클래스의 선언문을 끌어 올리는 것</code></li><li>다시 말해, <code>변수의 선언과 초기화를 분리</code>한 후, <code>선언만 코드의 최상단</code>으로 옮김</li><li>자바스크립트 엔진 &#x3D; 번역기, Interpreter</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>아직 아무것도 할당되지 않은 변수에 접근하는 것은 의미없는 일입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 에러 : num을 초기화하기 전에 접근할 수 없다.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// ReferenceError : &#x27;num&#x27; before initialization</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// let으로 선언된 변수는 호이스팅되어서 선언문이 맨 위로 끌어올려지기는 하는데,</span></span><br><span class="line"><span class="comment">// 코드 상에 선언문에 접근하기 까지는</span></span><br><span class="line"><span class="comment">// num은 TDZ(Temporal Dead Zone; 일시적 사각지대)에 들어갑니다.</span></span><br><span class="line"><span class="comment">// JS는 TDZ에 들어가있는 변수에는 접근을 허용하지 않습니다.</span></span><br><span class="line"><span class="comment">// 이것 덕분에 변수 선언문 전에 접근하는 이상한 일을 막을 수 있습니다.</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-const"><a href="#4-const" class="headerlink" title="4. const"></a>4. const</h1><ul><li>Block Scope</li><li>중복 선언 불가</li><li>선언문 이전 접근 불가</li><li>상수 선언이라 한 번 값을 할당하면, 또 다시 할당 연산자로 값을 다시 할당하는 것은 불가능<ul><li>재할당 X</li><li>선언만 할 수 없음</li><li>선언 시 꼭 초기화를 해줘야 함</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> price = <span class="number">3000</span>;</span><br><span class="line">price = <span class="number">4000</span>;  <span class="comment">// 에러 : 값의 재할당 불가능</span></span><br></pre></td></tr></table></figure><p>const에 객체를 할당하면, 속성을 바꾸는 것은 가능합니다. </p><ul><li>이게 가능한 이유는, 새로운 객체를 할당하는 게 아니라</li><li>내부적인 속성은 유지하면서 내부적인 속성을 바꾸는 것이라 가능한 것입니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체 속성을 바꾸는 것은 가능함</span></span><br><span class="line">a.<span class="property">x</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// Object &#123; x: 3, y: 2 &#125;</span></span><br></pre></td></tr></table></figure><p>근데 객체의 속성을 변경하는 것도 막고 싶으면, (&#x3D;객체의 불변성을 유지하고 싶으면) <code>freeze()</code>를 사용하면 됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.freeze()로 객체 속성을 바꾸는 것은 막을 수 있음</span></span><br><span class="line">a.<span class="property">x</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// Object &#123; x: 1, y: 2 &#125;</span></span><br></pre></td></tr></table></figure><hr><h1 id="5-변수-정리"><a href="#5-변수-정리" class="headerlink" title="5. 변수 정리"></a>5. 변수 정리</h1><table><thead><tr><th align="center">종류</th><th align="center"></th><th align="center">재선언 여부</th><th align="center">재할당 여부</th></tr></thead><tbody><tr><td align="center">var</td><td align="center">Function-scoped</td><td align="center">O</td><td align="center">O</td></tr><tr><td align="center">let</td><td align="center">{Block-scoped}</td><td align="center">X</td><td align="center">O</td></tr><tr><td align="center">const</td><td align="center">{Block-scoped}</td><td align="center">X</td><td align="center">X</td></tr></tbody></table><p>결론 : var쓰지말고, let과 const만 쓰자.</p><hr><h1 id="6-Comment-주석"><a href="#6-Comment-주석" class="headerlink" title="6. Comment (주석)"></a>6. Comment (주석)</h1><p>주석은 코드 자체를 설명하는 것이 아니라, 왜(WHY)와 어떻게(HOW)를 설명하는것이 좋음</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 한 줄 주석 다는 법</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 여러 줄 주석 다는 법</span></span><br><span class="line"><span class="comment"> * 다음줄로 자동으로 넘어감</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><hr><h2 id="6-1-JSDoc"><a href="#6-1-JSDoc" class="headerlink" title="6.1 JSDoc"></a>6.1 JSDoc</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JS DOC은 함수 위에서 &#x27;/**&#x27;을 입력하면 자동완성됨</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 이름, 나이 입력하면 합쳐서 문자로 뱉어주는 함수</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; name 문자 형태로 사람이름</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; age 숫자 형태로 나이</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 두 개 합쳐서 문자로 뱉어줌</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.3.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> https://naver.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@readonly</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@const</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@todo</span> 내일까지 뺄셈 기능 추가</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@deprecated</span> 이제 이거 그만쓰고 다른거 쓰세요</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type</span> &#123;<span class="type">string | number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> name + age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sum()에 마우스를 올려보면 JSDoc으로 적어둔 주석이 표시됨</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="string">&#x27;kim&#x27;</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/jsdoc/jsdoc">JS Doc</a></li></ul><hr><h1 id="7-Variable-Nameing-Rules-변수명-규칙"><a href="#7-Variable-Nameing-Rules-변수명-규칙" class="headerlink" title="7. Variable Nameing Rules(변수명 규칙)"></a>7. Variable Nameing Rules(변수명 규칙)</h1><p><strong>변수의 이름을 지을 때는 저장된 값을 잘 나타낼 수 있는 의미있는 이름으로</strong> 짓기</p><ul><li>라틴문자(0-9, a-z, A-Z, ), </li><li>대소문자를 구분함</li><li>추천: camelCase (e.g. listThis)</li><li>주석 등 설명할 떄 제외하고, 코드 작성할 때는 영어로</li><li>예약어 ❌</li><li>숫자로 시작 ❌</li><li>특수문자 ❌ (_, $ 두가지는 예외)</li><li>이모지 ❌</li><li>여러 개의 변수를 1, 2, 3 숫자로 구분 ❌ → 최대한 의미있게, 구체적인 이름으로</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 좋은 변수명 예시</span></span><br><span class="line"><span class="keyword">let</span> myAge = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> backgroundAudio;</span><br><span class="line"><span class="keyword">let</span> windAudio;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 나쁜 변수명 예시</span></span><br><span class="line"><span class="keyword">let</span> number = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> audio1;</span><br><span class="line"><span class="keyword">let</span> audio2;</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/ko/docs/Learn/JavaScript/First_steps/Variables">MDN 변수</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords">예약어 종류</a></li></ul><hr><h2 id="7-1-명명-규칙-naming-convention"><a href="#7-1-명명-규칙-naming-convention" class="headerlink" title="7.1 명명 규칙(naming convention)"></a>7.1 명명 규칙(naming convention)</h2><p><code>네이밍 컨벤션(naming convention)</code></p><ul><li>하나 이상의 영어 단어로 구성된 식별자를 만들 떄 가독성 좋게 단어를 한눈에 구분하기 위해 규정한 명명 규칙</li><li>네이밍 컨벤션을 잘 지키면 읽기 좋은 이름을 만들 수 있음</li><li>다음과 같은 4가지 유형의 네이밍 컨벤션이 자주 사용됨<ul><li><code>카멜 케이스</code> : 변수나 함수의 이름지을 때</li><li><code>스네이크 케이스</code></li><li><code>파스칼 케이스</code> : 생성자 함수, 클래스 이름지을 때</li><li><code>헝가리언 케이스</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ⭐ 카멜 케이스 (camelCase) : 변수나 함수의 이름지을 때</span></span><br><span class="line"><span class="keyword">var</span> firstName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ❌ 스네이크 케이스 (snake_case)</span></span><br><span class="line"><span class="keyword">var</span> first_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ⭐ 파스칼 케이스 (PascalCase) : 생성자 함수, 클래스 이름지을 때</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">FirstName</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ❌ 헝가리언 케이스 (typeHungarianCase)</span></span><br><span class="line"><span class="keyword">var</span> strFirstName; <span class="comment">// type + identifier</span></span><br><span class="line"><span class="keyword">var</span> $elem = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myId&#x27;</span>); <span class="comment">// DOM 노드</span></span><br><span class="line"><span class="keyword">var</span> observable$ = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>); <span class="comment">// RxJS 옵저버블</span></span><br></pre></td></tr></table></figure><p>ECMAScript사양에 정의된 객체와 함수들도 카멜 케이스와 파스칼 케이스를 사용합니다.<br>코드 전체의 가독성을 높이려면 <strong>카멜 케이스</strong>와 <strong>파스칼 케이스</strong>를 따릅시다.</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-JS-Basic-01-소개</title>
      <link href="/2022/12/20/Front-JS-Basic-01-Introduce/"/>
      <url>/2022/12/20/Front-JS-Basic-01-Introduce/</url>
      
        <content type="html"><![CDATA[<h1 id="1-JavaScript란"><a href="#1-JavaScript란" class="headerlink" title="1. JavaScript란?"></a>1. JavaScript란?</h1><p>JavaScript &#x3D; HTML을 동적으로 조작하기 위한 언어</p><hr><h1 id="2-JavaScript의-역사"><a href="#2-JavaScript의-역사" class="headerlink" title="2. JavaScript의 역사"></a>2. JavaScript의 역사</h1><p>1989년 <a href="https://ko.wikipedia.org/wiki/%ED%8C%80_%EB%B2%84%EB%84%88%EC%8A%A4%EB%A6%AC">팀 버너스리</a>가 최초의 브라우저를 개발했습니다. (HTML 설계 및 구현, HTTP 프로토콜, URL 창시)</p><p>1990년대 중반, 웹 브라우저 시장의 약 90%를 장악하던 넷스케이프 커뮤니케이션즈(이하 넷스케이프)</p><ul><li>이 당시 웹은 HTML로만 이루어져 정적인 기능만 제공 (링크만 존재하는 워드 느낌)</li><li>로직의 필요성을 느낀 넷 스케이프 사는 프로그래밍 언어를 브라우저에 내장하기로 결정</li></ul><p>넷 스케이프에서 일하던 <a href="https://ko.wikipedia.org/wiki/%EB%B8%8C%EB%A0%8C%EB%8D%98_%EC%95%84%EC%9D%B4%ED%81%AC">브렌던 아이크</a>가 웹 브라우저인 네비게이터2.0에 <strong>스킴</strong>이라는 프로그래밍 언어를 내장하려다,<br>스캄이 맘에 안들어서 10일만에 <code>모카(Mocha)</code>라는 언어를 창시하고 네비게이터2.0에 탑재함.</p><ul><li>그 해 9월, Mocha를 <code>LiveScript</code>로 이름 변경</li><li>Java가 큰 인기를 끌자, <strong>단순히 마케팅 효과를 얻기 위해</strong> 이름을 <code>JavaScript</code>로 변경</li><li>즉, JavasScript는 10일 만에 개발되었다. 그래서 현재까지 기능을 보완하는 식으로 발전해오고 있다.</li></ul><p>이후 웹 페이지 동작을 향상시키는 경량의 프로그래밍 언어가 인기를 끌자,<br>Microsoft사 에서 IE 3.0에서 동작하는 ‘JScript’라는 매우 비슷한 언어를 만들었고,<br>다양한 브라우저들이 JS 문법을 만듭니다.</p><p>이렇게 되자 브라우저 간의 호환성(크로스 브라우징) 문제가 발생해 표준화의 필요성이 대두되었습니다.<br>이를 위해 1996년 11월, 넷스케이프 사는 ECMA 인터네셔널에 자바스크립트의 표준화를 요청합니다.</p><blockquote><p>💡 ECMA 인터네셔널 (Ecma International) : 정보 통신 시스템을 표준화하는 비영리 협회</p></blockquote><p>1997년 7월, JS의 표준화 초판이 완성되었고 <strong>2015년도부터 매해 새로운 문법이 추가되어 배포</strong>되고 있습니다.<br>ECMA Script는 ECMA 인터내셔널에서 정의한 ECMA-262 기술 규격을 토대로 만든 표준 스크립트 프로그래밍 언어</p><ul><li><a href="https://www.ecma-international.org/">ECMA 인터내셔널</a></li><li><a href="https://github.com/tc39/proposals">ECMAScript 버전별 특징</a></li></ul><hr><h1 id="3-JavaScript-버전"><a href="#3-JavaScript-버전" class="headerlink" title="3. JavaScript 버전"></a>3. JavaScript 버전</h1><p>ES6 이전까지의 문법은 여러 불편함이 존재했는데,<br>ES2015 (ES6, 2015년)부터 불편함을 해결해주는 문법들이 대거 추가되어 가독성과 유지보수성이 향상되었습니다.</p><p>그래서 ES6+ 이상의 버전들을 <code>모던 JavaScript</code>라고 부릅니다.</p><hr><h2 id="3-1-버전별-주요-개념"><a href="#3-1-버전별-주요-개념" class="headerlink" title="3.1 버전별 주요 개념"></a>3.1 버전별 주요 개념</h2><ol><li><code>ES1 (1997)</code> : 초판</li><li><code>ES2 (1998)</code> : ISO&#x2F;IEC 16262 국제 표준</li><li><code>ES3 (1999)</code> : 정규 표현식, <code>try...catch</code></li><li><code>ES5 (2009)</code><ul><li>HTML5와 함께 출현한 표준안</li><li>JSON</li><li>strict mode</li><li>접근자 프로퍼티</li><li>프로퍼티 어트리뷰트 제어</li><li>향상된 배열 조작 기능(forEach map, filter, reduce, some, every)</li></ul></li><li><code>ES6 (2015), ECMAScript</code><ul><li>let&#x2F;const</li><li>클래스</li><li>화살표 함수</li><li>템플릿 리터럴</li><li>디스트릭처링 할당</li><li>스프레드 문법</li><li>rest 파라미터 심벌</li><li>프로미스</li><li>Map&#x2F;Set, 이터러블</li><li><code>for...of</code></li><li>제너레이터</li><li>Proxy</li><li>모듈 import&#x2F;export</li></ul></li><li><code>ES7 (2016)</code><ul><li>지수(<code>**</code>)연산자</li><li><code>Array.prototype.includes</code></li><li><code>String.prototype.includes</code></li></ul></li><li><code>ES8 (2017)</code><ul><li>async&#x2F;await</li><li>Object 정적 메서드(<code>Object.values</code>, <code>Object.entries</code>, <code>Object.getOwnPropertyDescriptors</code>)</li></ul></li><li><code>ES9 (2018)</code><ul><li>Object rest&#x2F;spread 프로퍼티</li><li><code>Promise.prototype.finally</code>, <code>async generator</code>, <code>for await...of</code></li></ul></li><li><code>ES10 (2019)</code><ul><li><code>Object.fromEntries</code></li><li>Array.prototype.flat, Array.prototype.flatMap, optional catch binding</li></ul></li><li><code>ES11 (2020)</code><ul><li><code>String.prototype.matchAll</code>, <code>BigInt, globalThis</code>, <code>Promise.allSettled</code></li><li>null 병합 연산자, 옵셔널 체이닝 연산자, <code>for...in enumeration order</code></li></ul></li></ol><p>cf.</p><ul><li><a href="https://www.ecma-international.org/">ECMA 인터내셔널</a></li><li><a href="https://github.com/tc39/proposals">ECMAScript 버전별 특징</a></li></ul><hr><h1 id="4-JavaScript-Runtime-실행-방법"><a href="#4-JavaScript-Runtime-실행-방법" class="headerlink" title="4. JavaScript Runtime (실행 방법)"></a>4. JavaScript Runtime (실행 방법)</h1><p>JavaScript 언어가 실행될 수 있는 환경을 <code>JavaScript runtime</code>이라고 부릅니다.<br>자바스크립트는 다양한 환경 등에서 실행이 가능한데, 브라우저와 Node.js이 대표적입니다.</p><hr><h2 id="4-1-Browser"><a href="#4-1-Browser" class="headerlink" title="4.1 Browser"></a>4.1 Browser</h2><p>브라우저 마다 각기 다른 자바스크립트 엔진이 존재하며, 종류는 다음과 같습니다.</p><ul><li><code>V8 (Google Chrome, Opera, Edge)</code><ul><li>2008년 등장한 구글의 V8 엔진은 가장 빠른 성능을 자랑</li><li>Node.js, Chrome 브라우저 등에서 사용</li><li><a href="https://v8.dev/">v8 공식사이트</a>, C++로 구성</li></ul></li><li><code>spidermonkey (Firefox)</code> <ul><li>넷스케이프 사에 의해 개발이 된 최초의 자바스크립트 엔진</li><li>Mozilla Firefox에서 사용</li></ul></li><li><code>JavaScript Core (IOS, Safari)</code><ul><li>애플이 사파리를 위해 개발한 엔진</li><li>Nitro 라고도 부름</li></ul></li></ul><p><a href="https://kangax.github.io/compat-table/es6/">브라우저별 ES6 지원현황</a></p><p>대부분의 브라우저에서 ES6를 지원하지만, Internet Explorer는 지원하지 않습니다.<br>22년 6월 15일 Explorer 지원이 중단되므로 사실상 거의 다 된다고 보면 됩니다.</p><hr><h2 id="4-2-Node-js"><a href="#4-2-Node-js" class="headerlink" title="4.2 Node.js"></a>4.2 Node.js</h2><p>Node.js는 구글 V8엔진으로 빌드되어, 브라우저 이외의 환경에서도 JS를 동작하게 해주는 Runtime입니다.</p><ul><li>주로 서버 측 개발을 하는데 사용</li><li>라이언 달(Ryan Dahl)의 ‘비동기로 작업을 처리할 수 없을까?’ 라는 발상에서부터 개발되어 2009년 세상에 공개<ul><li>라이언 달은 현재 Deno 런타임 환경 개발</li></ul></li><li>서버 사이드 에플리케이션 개발에 필요한 모듈이나 HTTP, 파일 시스템과 같은 내장 API를 제공<ul><li>모듈의 설치, 업데이트, 제거, 수정 등의 작업을 자동 관리해 주는 기능을 가진 툴을 <strong>Package Manager</strong>라고 부름</li><li>Node.js의 package manager로는 <strong>npm</strong>, <strong>yarn</strong>이 존재</li></ul></li><li><a href="https://nodejs.org/en/">Nodejs 공식사이트</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>프론트엔드 로드맵</title>
      <link href="/2022/12/15/Roadmap-Front/"/>
      <url>/2022/12/15/Roadmap-Front/</url>
      
        <content type="html"><![CDATA[<h1 id="참고-RoadMap-사이트"><a href="#참고-RoadMap-사이트" class="headerlink" title="[참고] RoadMap 사이트"></a>[참고] RoadMap 사이트</h1><ul><li><a href="https://roadmap.sh/frontend">https://roadmap.sh/frontend</a></li><li><a href="https://roadmap.sh/javascript">https://roadmap.sh/javascript</a></li><li><a href="https://roadmap.sh/react">https://roadmap.sh/react</a></li><li><a href="https://roadmap.sh/backend">https://roadmap.sh/backend</a></li></ul><hr><h1 id="1-Front-end-RoadMap"><a href="#1-Front-end-RoadMap" class="headerlink" title="1. Front-end RoadMap"></a>1. Front-end RoadMap</h1><hr><h1 id="2-JavaScript-RoadMap"><a href="#2-JavaScript-RoadMap" class="headerlink" title="2. JavaScript RoadMap"></a>2. JavaScript RoadMap</h1><ol><li><p>JavaScript 소개</p><ol><li>JavaScript란?</li><li>JavaScript의 역사</li><li>JavaScript 버전</li><li>JavaScript 실행 방법</li></ol></li><li><p>변수에 대한 모든 것</p><ol><li>변수 선언(Variable Declarations)</li><li>Hoisting</li><li>Variable Nameing Rules</li><li>Variable Scopes<ol><li>Block, Function, Global</li></ol></li></ol></li><li><p>데이터 타입(Data Types)</p><ol><li>primitive Type<ol><li>string</li><li>number</li><li>boolean</li><li>undefined</li><li>bigint</li><li>null</li><li>symbol</li></ol></li><li>Object<ol><li>Object Prototype</li><li>Prototypal Inheritance</li><li>Built-in Objects</li></ol></li><li>typeof operator</li></ol></li><li><p>Type Casting</p><ol><li>Type Conversion vs Coercion</li><li>Explicit Type Casting</li><li>Implicit Type Casting</li></ol></li><li><p>Data Structures(자료구조 기본)</p><ol><li>Keyed Collections<ol><li>Map</li><li>Set</li></ol></li></ol></li><li><p>Equality Comparisons(동등 비교)</p></li><li><p>Loops and Iterations(반복문)</p><ol><li><p>Loops</p><ol><li>for, do…while, while</li></ol></li><li><p>Iterations</p><ol><li>for…in, for…of, break, continue</li></ol></li></ol></li><li><p>Control Flow(조건문) &amp; Exception handling(에러처리)</p><ol><li><p>Conditional</p><ol><li>if…else</li><li>switch</li></ol></li><li><p>Exception handling(에러 처리)</p></li></ol></li><li><p>Express and Operators (표현 연산자)</p></li><li><p>Functions (함수)</p><ul><li><p>함수 파라미터</p><ul><li>기본 파라미터</li><li>파라터 초기화</li></ul></li><li><p>화살표 함수</p></li></ul></li><li><p>Strict Mode</p></li><li><p>Using this</p></li><li><p>asynchronous(비동기)</p><ol><li>setTimeout</li><li>setInterval</li><li>Calbacks , Calback Hell</li><li>Promises</li><li>async&#x2F;await</li></ol></li><li><p>class(클래스)</p></li><li><p>iterators and generators</p></li><li><p>module(모듈)</p></li><li><p>memory management(메모리 관리)</p></li><li><p>using chrome dev tools</p></li></ol><hr><h1 id="3-React-RoadMap"><a href="#3-React-RoadMap" class="headerlink" title="3. React RoadMap"></a>3. React RoadMap</h1><ol><li>React 개발에 가장 일반적인 CLI 도구(Tool)<ol><li><a href="https://create-react-app.dev/">create-react-app</a></li><li><a href="https://vitejs.dev/">vite</a></li></ol></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 정보 </category>
          
          <category> Roadmap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Roadmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CheatSheet-Linux Command-명령어 정리</title>
      <link href="/2022/12/14/CheatSheet-Linux/"/>
      <url>/2022/12/14/CheatSheet-Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Shell-Commands-Shell-종류들"><a href="#1-Shell-Commands-Shell-종류들" class="headerlink" title="1. Shell Commands (Shell 종류들)"></a>1. Shell Commands (Shell 종류들)</h1><p>많은 Unix Shell이 존재하지만, 하나만 잘 사용하면, 명령어가 비슷해서 다양한 Shell을 사용할 수 있습니다.<br>그리고 Unix Shell을 알아두면, Linux, Mac OS의 Shell Command, WSL에도 사용 가능합니다.</p><blockquote><p>💡 참고</p><ul><li>WSL(Windows Subsystem for Linux)<ul><li>WSL을 사용하면 Windows안에서도 Linux 명령어를 사용 가능 (Window 10 이상부터)</li></ul></li><li>뭐 설치하기 귀찮으면, Native Terminal을 사용하면 됩니다.<ul><li>Window는 PowerShell</li><li>PowerShell은 Unix 명령어들을 사용할 수 있게 Aliases(별명)를 제공함</li></ul></li><li>Mac OS 추천 터미널<ul><li>iTerm2 : <a href="https://iterm2.com/">https://iterm2.com/</a></li></ul></li><li>Windows 추천 터미널<ul><li>cmder (git이 내장으로 이미 설치됨)</li><li><a href="https://cmder.app/">https://cmder.app/</a></li></ul></li></ul></blockquote><hr><h1 id="2-Manual"><a href="#2-Manual" class="headerlink" title="2. Manual"></a>2. Manual</h1><h2 id="2-1-man-명령어의-사용법-출력"><a href="#2-1-man-명령어의-사용법-출력" class="headerlink" title="2.1 man (명령어의 사용법 출력)"></a>2.1 man (명령어의 사용법 출력)</h2><p><code>man</code>은 <code>Manual</code>의 약자로, 어떤 명령어의 사용법을 보여줍니다. man을 나가고 싶다면 <code>q</code>를 입력하면 됩니다.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ man man</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-clear"><a href="#2-2-clear" class="headerlink" title="2.2 clear"></a>2.2 clear</h2><p><code>clear</code>은 터미널의 모든 텍스트를 지워주는 명령어입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clear</span><br></pre></td></tr></table></figure><hr><h1 id="3-Navigating-File-System"><a href="#3-Navigating-File-System" class="headerlink" title="3. Navigating File System"></a>3. Navigating File System</h1><h2 id="3-1-pwd-현재-자신이-위치한-디렉토리"><a href="#3-1-pwd-현재-자신이-위치한-디렉토리" class="headerlink" title="3.1 pwd (현재 자신이 위치한 디렉토리)"></a>3.1 pwd (현재 자신이 위치한 디렉토리)</h2><p><code>pwd</code>는 <code>Print Working Directory</code>의 약자로, 내가 있는 곳의 전체 경로를 보여줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-2-ls-현재-자신이-속해있는-폴더-내의-파일-폴더-표시"><a href="#3-2-ls-현재-자신이-속해있는-폴더-내의-파일-폴더-표시" class="headerlink" title="3.2 ls (현재 자신이 속해있는 폴더 내의 파일, 폴더 표시)"></a>3.2 ls (현재 자신이 속해있는 폴더 내의 파일, 폴더 표시)</h2><p><code>ls</code>는 <code>list</code>의 약자로, 현재 디렉토리에 있는 폴더와 파일의 명들을 보여줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">dir1 dir2 file1.txt file2.txt</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> dir1 <span class="comment"># dir1이라는 폴더 안 폴더와 파일명 출력</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -l (long의 약자)</span></span><br><span class="line">$ <span class="built_in">ls</span> -l <span class="comment"># 파일에 내용을 자세히 알고 싶을 떄</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -a (all의 약자)</span></span><br><span class="line">$ <span class="built_in">ls</span> -a <span class="comment"># 숨겨진 파일까지 모두 출력</span></span><br><span class="line">$ <span class="built_in">ls</span> -la <span class="comment"># -l옵션과 -a옵션을 같이 사용 가능</span></span><br><span class="line"></span><br><span class="line">$ open . <span class="comment"># 현재 디렉토리를 파일 탐색기로 열기</span></span><br><span class="line">$ explorer . <span class="comment"># PowerShell에서 현재 디렉토리를 파일 탐색기로 열기</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-3-cd-디렉토리-이동"><a href="#3-3-cd-디렉토리-이동" class="headerlink" title="3.3 cd (디렉토리 이동)"></a>3.3 cd (디렉토리 이동)</h2><p><code>cd</code>는 <code>change directory</code>의 약자로, 현재 있는 경로의 위치를 변경해주는 명령입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> dir1</span><br><span class="line">$ <span class="built_in">cd</span> .. <span class="comment"># 현재 경로의 바로 상위 경로 폴더로 이동</span></span><br><span class="line">$ <span class="built_in">cd</span> ~ <span class="comment"># 현재 설정된 사용자의 최상위 경로(Home 디렉토리)로 이동</span></span><br><span class="line">$ <span class="built_in">cd</span> - <span class="comment"># 바로 이전 경로로 이동</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-4-find-특정한-파일을-찾기"><a href="#3-4-find-특정한-파일을-찾기" class="headerlink" title="3.4 find (특정한 파일을 찾기)"></a>3.4 find (특정한 파일을 찾기)</h2><p><code>find</code>는 파일 시스템에서 특정 파일이나 디렉토리를 찾는 명령어입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ find . -<span class="built_in">type</span> file -name <span class="string">&quot;*.txt&quot;</span>   <span class="comment"># txt 파일을 찾기</span></span><br><span class="line">$ find . -<span class="built_in">type</span> file -name <span class="string">&quot;*.json&quot;</span>  <span class="comment"># json 파일을 찾기</span></span><br><span class="line">$ find . -<span class="built_in">type</span> directory -name <span class="string">&quot;*2&quot;</span> <span class="comment"># 이름이 2로 끝나는 폴더 찾기  </span></span><br></pre></td></tr></table></figure><p>PowerShell에서는 find alias를 지원하지 않아서 직접 작성해줘야 합니다.</p><hr><h2 id="3-5-which-특정-명령어의-위치"><a href="#3-5-which-특정-명령어의-위치" class="headerlink" title="3.5 which (특정 명령어의 위치)"></a>3.5 which (특정 명령어의 위치)</h2><p><code>which</code>는 내가 실행하고자 하는 명령이 어디에 설치되어 있는지 어디에 설정되어 있는지 경로를 확인할 떄 사용하는 명령어입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">which</span> node <span class="comment"># node의 실행결로를 확인</span></span><br><span class="line">$ <span class="built_in">which</span> code <span class="comment"># visual studio의 실행경로를 확인</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-Create-and-mangae-files"><a href="#4-Create-and-mangae-files" class="headerlink" title="4. Create and mangae files"></a>4. Create and mangae files</h1><h2 id="4-1-touch-파일-생성"><a href="#4-1-touch-파일-생성" class="headerlink" title="4.1 touch (파일 생성)"></a>4.1 touch (파일 생성)</h2><p><code>touch</code>는 원하는 파일을 작성하면 새로운 파일을 만들 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> new_file1.txt <span class="comment"># new_file1.txt라는 파일 생성</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-2-cat-파일의-내용을-화면에-출력"><a href="#4-2-cat-파일의-내용을-화면에-출력" class="headerlink" title="4.2 cat (파일의 내용을 화면에 출력)"></a>4.2 cat (파일의 내용을 화면에 출력)</h2><p><code>cat</code>은 <code>concatenate(연결하다)</code>약자로, 파일 안의 내용을 터미널 상에서 확인할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> new_file1.txt</span><br><span class="line">First Line</span><br><span class="line">$ <span class="built_in">touch</span> new_file2.txt</span><br><span class="line">$ <span class="built_in">cat</span> new_file1.txt new_file2.txt</span><br><span class="line">First Line</span><br><span class="line">Second Line</span><br></pre></td></tr></table></figure><hr><h2 id="4-3-echo"><a href="#4-3-echo" class="headerlink" title="4.3 echo"></a>4.3 echo</h2><p>echo 다음에 문자열을 입력하면 문자열을 터미널에 echo(메아리)칠 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo 명령어 단독으로는 별 영향이 없지만</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> &gt; new_file3.txt <span class="comment"># &gt;로 새로운 파일을 만들면서 파일 내용으로 작성됩니다.</span></span><br><span class="line">$ <span class="built_in">cat</span> new_file3.txt</span><br><span class="line">Hello World</span><br><span class="line"></span><br><span class="line"><span class="comment">#  &gt;을 사용할 떄 주의할 점은 파일 내용을 덮어씌운다는 점입니다.</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Hello Brave New world&quot;</span> &gt; new_file3.txt</span><br><span class="line">$ <span class="built_in">cat</span> new_file3.txt</span><br><span class="line">Hello Brave New world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 덮어씌우는 게 아니라 붙이고 싶다면 &gt;&gt;을 사용합니다.</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Goodbye world&quot;</span> &gt;&gt; new_file3.txt</span><br><span class="line">$ <span class="built_in">cat</span> new_file3.txt</span><br><span class="line">Hello Brave New world</span><br><span class="line">Goodbye world</span><br></pre></td></tr></table></figure><hr><h2 id="4-4-mkdir-디렉토리-생성"><a href="#4-4-mkdir-디렉토리-생성" class="headerlink" title="4.4 mkdir (디렉토리 생성)"></a>4.4 mkdir (디렉토리 생성)</h2><p><code>mkdir</code>은 <code>make directory</code>의 약자로, 폴더(directory)를 만드는 명령어입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> dir3 <span class="comment"># dir3이라는 폴더 생성</span></span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 폴더 내 폴더같이 모든 서브 폴더들을 만들고 싶다면 -p 옵션</span></span><br><span class="line">$ <span class="built_in">mkdir</span> -p dir4/subdir1/subdir2</span><br></pre></td></tr></table></figure><p>반대 명령어로 <code>rmdir(디렉토리 삭제)</code></p><hr><h2 id="4-5-cp-파일-복사"><a href="#4-5-cp-파일-복사" class="headerlink" title="4.5 cp (파일 복사)"></a>4.5 cp (파일 복사)</h2><p><code>cp</code>는 <code>copy</code>의 약자로, 파일이나 폴더를 복사하는 명령어입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cp [파일] [원하는 위치]</span></span><br><span class="line">$ <span class="built_in">cp</span> file1.txt dir1/ <span class="comment"># file1.txt를 dir1에 복사</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-6-mv-파일-이동"><a href="#4-6-mv-파일-이동" class="headerlink" title="4.6 mv (파일 이동)"></a>4.6 mv (파일 이동)</h2><p><code>mv</code>는 <code>move</code>의 약자로, 복사하지 않고 파일이나 폴더를 이동시키는 명령어입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mv</span> file2.txt dir1/ <span class="comment"># file2.txt를 dir1으로 이동</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 새로운 파일로 복사하고 싶다면</span></span><br><span class="line">$ <span class="built_in">mv</span> file1.txt file2.txt </span><br></pre></td></tr></table></figure><hr><h2 id="4-7-rm-파일-삭제"><a href="#4-7-rm-파일-삭제" class="headerlink" title="4.7 rm (파일 삭제)"></a>4.7 rm (파일 삭제)</h2><p><code>rm</code>은 <code>remove</code>의 약자로, 파일을 삭제합니다. (디렉토리를 삭제하려고 하면 경고가 나옵니다.)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> file2.txt <span class="comment"># file2.txt 파일을 삭제</span></span><br><span class="line">$ <span class="built_in">rm</span> dir2 <span class="comment"># 폴더(directory)라 지울 수 없음</span></span><br><span class="line"><span class="built_in">rm</span>: dir2: is a directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 디렉토리를 삭제하려면 -r옵션은 사용해야 합니다.</span></span><br><span class="line">$ <span class="built_in">rm</span> -r dir2 <span class="comment"># dir2안에 서브 경로들도 모두 삭제</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-8-grep-특정-패턴으로-파일을-찾기"><a href="#4-8-grep-특정-패턴으로-파일을-찾기" class="headerlink" title="4.8 grep (특정 패턴으로 파일을 찾기)"></a>4.8 grep (특정 패턴으로 파일을 찾기)</h2><p><code>grep</code>은 <code>Global Regular Expression Print</code>의 약자로, 파일이나 프로젝트 한에서 키워드 검색하는 명령어입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grep [검색키워드] [파일종류]</span></span><br><span class="line">$ grep <span class="string">&quot;world&quot;</span> *.txt  <span class="comment"># txt파일 내에서 world라는 단어 검색</span></span><br><span class="line">new_file3.txt:Goodbye world</span><br><span class="line"></span><br><span class="line"><span class="comment"># -n 몇번쨰 줄에 있는지</span></span><br><span class="line">$ grep -n <span class="string">&quot;world&quot;</span> *.txt <span class="comment"># txt파일 내에서 world라는 단어가 몇 번쨰 줄에 있는지 검색</span></span><br><span class="line">new_file3.txt:2:Goodbye world</span><br><span class="line"></span><br><span class="line"><span class="comment"># -i 대소문자 구분X</span></span><br><span class="line">$ grep -ni <span class="string">&quot;world&quot;</span> *.txt <span class="comment"># 대소문자 상관없이 world라는 단어가 몇 번쨰 줄에 있는지 검색</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -r 현재 폴더의 모든 서브 시스템까지 포함해서</span></span><br><span class="line">$ grep -nir <span class="string">&quot;world&quot;</span> . <span class="comment"># 현재 경로와 그 하위 서브경로를 포함해 검색</span></span><br></pre></td></tr></table></figure><hr><h1 id="5-Work-with-environment-variables"><a href="#5-Work-with-environment-variables" class="headerlink" title="5. Work with environment variables"></a>5. Work with environment variables</h1><p>환경변수(environment variables)은 내 컴퓨터에서 특정한 키워드가 어떠한 일을 하거나, 경로를 저장할 수 있도록 만들어 줍니다.</p><hr><h2 id="5-1-export-환경변수를-설정"><a href="#5-1-export-환경변수를-설정" class="headerlink" title="5.1 export (환경변수를 설정)"></a>5.1 export (환경변수를 설정)</h2><p>export는 환경변수를 설정하는 명령어입니다. (환경변수는 보통 대문자로 작성, 단어 사이에는 언더바(_) 사용)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> MY_DIR=<span class="string">&quot;dir1&quot;</span> <span class="comment"># 내 환경변수(컴퓨터상에 변수)를 설정</span></span><br></pre></td></tr></table></figure><hr><h2 id="5-2-env-환경변수를-출력"><a href="#5-2-env-환경변수를-출력" class="headerlink" title="5.2 env (환경변수를 출력)"></a>5.2 env (환경변수를 출력)</h2><p><code>env</code>는 설정된 모든 환경변수를 출력합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">env</span> <span class="comment"># 모든 환경변수 출력</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$MY_DIR</span> <span class="comment"># 환경변수를 사용할 떄는 앞에 $를 붙여서 사용</span></span><br></pre></td></tr></table></figure><p>우리가 프로그래밍을 할 떄, 변수를 설정하는 것처럼 우리 컴퓨터 상에서 변수처럼 사용가능합니다.</p><hr><h2 id="5-3-unset-환경변수를-삭제"><a href="#5-3-unset-환경변수를-삭제" class="headerlink" title="5.3 unset (환경변수를 삭제)"></a>5.3 unset (환경변수를 삭제)</h2><p><code>unset</code>은 환경변수를 삭제하는 명령어입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">unset</span> MY_DIR <span class="comment"># 환경변수 삭제</span></span><br></pre></td></tr></table></figure><hr><h1 id="6-Network"><a href="#6-Network" class="headerlink" title="6. Network"></a>6. Network</h1><ul><li><code>ping</code> : 네트워크 상태 점검 및 도메인 IP 확인</li><li><code>ifconfig</code> : 리눅스 IP 확인 및 설정</li><li><code>netstat</code> : 네트워크의 상태</li><li><code>nbstat</code> : IP 충돌 시, 충돌된 컴퓨터를 찾기 위함</li><li><code>traceroute</code> : 알고 싶은 목적지까지 경로를 찾아줌</li><li><code>route</code> : 라우팅 테이블 구성 상태</li><li><code>clock</code> : 시간 조절 명령어</li><li><code>date</code> : 시간, 날짜 출력 및 시간과 날짜 변경</li></ul><hr><h1 id="7-File"><a href="#7-File" class="headerlink" title="7. File"></a>7. File</h1><ul><li><code>tar, gzip 등</code> : 압축 파일 묶거나 품</li></ul><hr><h1 id="8-User"><a href="#8-User" class="headerlink" title="8. User"></a>8. User</h1><ul><li><code>useradd</code> : 새로운 사용자 계정 생성</li><li><code>password</code> : 사용자 계정의 비밀번호 설정</li><li><code>userdel</code> : 사용자 계정 삭제</li><li><code>usermod</code> : 사용자 계정 수정</li><li><code>groupadd</code> : 그룹 생성</li><li><code>groupdel</code> : 그룹 삭제</li><li><code>groups</code> : 그룹 확인</li><li><code>newgrp</code> : 자신이 속한 그룹 변경</li><li><code>mesg</code> : 메시지 응답 가능 및 불가 설정</li><li><code>talk</code> : 로그인한 사용자끼리 대화</li><li><code>wall</code> : 시스템 로그인한 모든 사용자에게 메시지 전송</li><li><code>write</code> : 로그인한 사용자에게 메시지 전달</li><li><code>dd</code> : 블럭 단위로 파일을 복사하거나 변환</li></ul><hr><h1 id="9-System"><a href="#9-System" class="headerlink" title="9. System"></a>9. System</h1><ul><li><code>shutdown</code>, <code>halt</code>, <code>init 0</code>, <code>poweroff</code> : 시스템 종료</li><li><code>reboot</code>, <code>init 6</code>, <code>shutdown -r now</code> : 시스템 재부팅</li></ul><hr><h1 id="10-VIM"><a href="#10-VIM" class="headerlink" title="10. VIM"></a>10. VIM</h1><p>Vi 또는 Vim이라 불리는 터미널 텍스트 에디터는 터미널뿐만 아니라 Visual Studio Code, IntellJ같은 IDE에서도 사용할 수 있습니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vim file1.txt <span class="comment"># file1.txt이라는 파일 생성하면서 파일 내부로 에디터모드에 들어감</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i를 눌러야 편집 가능 (insert)⭐</span></span><br><span class="line"><span class="comment"># 다 편집했으면 키보드 ESC를 클릭⭐</span></span><br><span class="line"><span class="comment"># :w (write changes)는 수정한 내용 저장</span></span><br><span class="line"><span class="comment"># :q (quit) 그냥 나가기(수정사항이 있으면 경고창 표시)</span></span><br><span class="line"><span class="comment"># :q! 경고창안띄우고 강제로 그냥 나가기⭐</span></span><br><span class="line"><span class="comment"># :wq 수정한 내용을 저장하면서 나가기⭐</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CheatSheet </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CheatSheet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CheatSheet-Git-명령어 정리</title>
      <link href="/2022/12/14/CheatSheet-Git/"/>
      <url>/2022/12/14/CheatSheet-Git/</url>
      
        <content type="html"><![CDATA[<h1 id="1-git-초기-설정"><a href="#1-git-초기-설정" class="headerlink" title="1. git 초기 설정"></a>1. git 초기 설정</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 현재 위치에서 지역 저장소를 생성</span></span><br><span class="line">$ git init</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 깃 환경에서 사용자 이름을 [사용자명]으로 지정</span></span><br><span class="line">$ git config --global user.name <span class="string">&quot;[사용자명]&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 깃 환경에서 사용자 이메일을 [사용자이메일명]으로 지정</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;[사용자이메일명]&quot;</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-git-스테이징"><a href="#2-git-스테이징" class="headerlink" title="2. git 스테이징"></a>2. git 스테이징</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [파일명.확장자명]을 스테이지에 올림</span></span><br><span class="line">$ git add [파일명.확장자명]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 상태를 확인</span></span><br><span class="line">$ git status</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 파일 add 취소</span></span><br><span class="line">$ git restore --staged 파일명</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 전체 add 취소</span></span><br><span class="line">$ git reset HEAD</span><br></pre></td></tr></table></figure><hr><h1 id="3-git-커밋"><a href="#3-git-커밋" class="headerlink" title="3. git 커밋"></a>3. git 커밋</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 커밋 메시지 [메시지명]을 붙여 커밋</span></span><br><span class="line">$ git commit -m <span class="string">&quot;[메시지명]&quot;</span></span><br><span class="line">$ git commit -am <span class="string">&quot;[메시지명]&quot;</span> <span class="comment"># 스테이징과 커밋을 동시에 진행</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 최근 순서대로 커밋을 취소</span></span><br><span class="line">$ git reset HEAD^ <span class="comment"># 현재 HEAD의 이전 커밋으로 되돌리기</span></span><br><span class="line">$ git reset HEAD~n <span class="comment"># 현재로 부터 n 번째 이전 커밋으로 되돌리기</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 롤백할 커밋을 지정</span></span><br><span class="line">$ git reset [커밋 해시]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># - reset의 3가지 옵션</span></span><br><span class="line">$ git reset --soft [커밋ID]  <span class="comment"># head 만 바뀜</span></span><br><span class="line">$ git reset --mixed [커밋ID] <span class="comment"># staging 도 그 때로 바뀜</span></span><br><span class="line">$ git reset --hard [커밋ID] <span class="comment"># working디렉토리/staging 모두 그 때로 바꿈 </span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 커밋을 삭제하지않고 이전 커밋을 새로 복사 추가하는 식으로 롤백</span></span><br><span class="line">$ git revert [커밋 해시] <span class="comment"># 해당 커밋 이전상태로 되돌린다라는 명령</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 커밋 수정하는 법</span></span><br><span class="line"><span class="comment"># ... 파일 수정 한 뒤</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git commit --amend <span class="comment"># 최신 커밋 수정</span></span><br></pre></td></tr></table></figure><hr><h1 id="4-git-이력-확인"><a href="#4-git-이력-확인" class="headerlink" title="4. git 이력 확인"></a>4. git 이력 확인</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 커밋 내역 확인</span></span><br><span class="line">$ git <span class="built_in">log</span>           <span class="comment"># 전체 이력을 보여준다.</span></span><br><span class="line">$ git shortlog     </span><br><span class="line">$ git <span class="built_in">log</span> --oneline <span class="comment"># 커밋과 커밋 메시지를 조회</span></span><br><span class="line"> </span><br><span class="line">$ git <span class="built_in">log</span> -p        <span class="comment"># 이력을 보여줄 때, 변경된 데이터도 보여준다.</span></span><br><span class="line">$ git <span class="built_in">log</span> [filename] <span class="comment"># 특정 파일에 대한 이력을 보여준다.</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [filename] <span class="comment"># 특정 파일의 이력과 변경된 데이터를 보여준다.</span></span><br><span class="line"> </span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span>    <span class="comment"># 커밋마다 파일의 추가/삭제된 통계데이터를 보여줌</span></span><br><span class="line">$ git <span class="built_in">log</span> --graph   <span class="comment"># 브랜치 분기 및 병합내용을 아스키 그래프로 보여줌</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 특정 커밋 내역 확인</span></span><br><span class="line">$ git show [커밋 <span class="built_in">id</span>]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 최근 버전과 작업 폴더의 수정 파일 사이의 차이를 출력</span></span><br><span class="line">$ git diff               <span class="comment"># modified 상태의 file과 마지막 commit 비교</span></span><br><span class="line">$ git diff --staged      <span class="comment"># staged 상태의 file과 마지막 commit 비교</span></span><br><span class="line">$ git diff --color-words <span class="comment"># 변경사항을 color 풀하게 비교</span></span><br><span class="line">$ git diff [브랜치이름]    <span class="comment"># 현재브랜치와 선택된 브랜치와 차이점 비교</span></span><br><span class="line">$ git diff [이전커밋 <span class="built_in">id</span>] [이후커밋 <span class="built_in">id</span>] <span class="comment"># 커밋 비교</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">git log 명령어 예시</th><th>설명</th></tr></thead><tbody><tr><td align="left">git log</td><td>HEAD와 관련된 commit들이 자세하게 나옴</td></tr><tr><td align="left">git log –oneline</td><td>간단히 commit 해시와 제목만 보고 싶을 때</td></tr><tr><td align="left">git log –oneline –graph –decorate</td><td>HEAD와 관련된 commit들을 조금 더 자세히 보고 싶을 때</td></tr><tr><td align="left">git log –oneline –graph –all –decorate</td><td>모든 branch들을 보고 싶을 때 사용하는 명령어</td></tr><tr><td align="left">git log –oneline -n7</td><td>내 branch의 최신 commit을 7개만 보고 싶을 때 사용</td></tr></tbody></table><hr><h1 id="5-원격-저장소"><a href="#5-원격-저장소" class="headerlink" title="5. 원격 저장소"></a>5. 원격 저장소</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 원격 저장소에 연결</span></span><br><span class="line">$ git remote add origin [github 레포지 주소]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 옵션 종류 보기</span></span><br><span class="line">$ git remote --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 추가한 원격저장소의 목록 확인 </span></span><br><span class="line">$ git remote</span><br><span class="line">$ git remote -v <span class="comment"># 상세히</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 특정 원격 저장소의 정보를 확인할 수 있다.</span></span><br><span class="line">$ git remote show 이름</span><br><span class="line"></span><br><span class="line"><span class="comment"># 원격저장소 이름 변경</span></span><br><span class="line">$ git remote rename 기존이름 변경할이름</span><br><span class="line"></span><br><span class="line"><span class="comment"># 원격저장소를 제거</span></span><br><span class="line">$ git remote <span class="built_in">rm</span> 이름</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 지역 저장소의 커밋을 맨 처음 원격 저장소에 올리는 경우</span></span><br><span class="line">$ git push -u origin master</span><br><span class="line"> </span><br><span class="line"><span class="comment"># -u로 등록한 후에 지역 저장소의 커밋을 원격 저장소에 올리는 경우(업로드)</span></span><br><span class="line">$ git push</span><br><span class="line">$ git push origin master</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 원격 저장소의 커밋을 지역 저장소로 가져옴</span></span><br><span class="line">$ git pull origin master</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 원격 저장소 복제하기</span></span><br><span class="line">$ git <span class="built_in">clone</span> [원격 저장소 주소]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 원격 저장소의 커밋을 가져오기만 하고 merge하지 않는다</span></span><br><span class="line">$ git fetch</span><br><span class="line"><span class="comment"># 이후엔 diff 로 비교</span></span><br><span class="line">$ git diff <span class="built_in">test</span> origin/test <span class="comment"># 브랜치 이름이 test일 경우 예시</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 원격저장소 삭제(끊기)</span></span><br><span class="line">$ git remote remove origin</span><br></pre></td></tr></table></figure><hr><h1 id="6-저장소-파일-삭제"><a href="#6-저장소-파일-삭제" class="headerlink" title="6. 저장소 파일 삭제"></a>6. 저장소 파일 삭제</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 로컬저장소 원격저장소 둘다 파일 삭제</span></span><br><span class="line">$ git <span class="built_in">rm</span> [filename]    </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 원격저장소 파일만 삭제. 로컬저장소 파일은 냅둠</span></span><br><span class="line">$ git <span class="built_in">rm</span> --cached [filename]</span><br></pre></td></tr></table></figure><hr><h1 id="7-git-branch"><a href="#7-git-branch" class="headerlink" title="7. git branch"></a>7. git branch</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 브랜치 확인</span></span><br><span class="line">$ git branch               </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 브랜치 추가 / 삭제</span></span><br><span class="line">$ git branch [branch name]  </span><br><span class="line">$ git branch -d [branch name] <span class="comment"># -delete</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 브랜치로 이동</span></span><br><span class="line">$ git switch [branch name]</span><br><span class="line">$ git checkout [branch name]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 브랜치 추가하고 바로 이동</span></span><br><span class="line">$ git switch -c [branch name]</span><br><span class="line">$ git checkout -b [branch name]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 현재 브랜치에서 다른 브랜치를 merge</span></span><br><span class="line">$ git merge [branch name]</span><br></pre></td></tr></table></figure><hr><h1 id="8-git-cherry-pick"><a href="#8-git-cherry-pick" class="headerlink" title="8. git cherry-pick"></a>8. git cherry-pick</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 만일 내가 X 브랜치에 있고</span></span><br><span class="line"><span class="comment"># 브랜치 Y의 커밋 중 76ae30ef와 13af32cc만 골라 현재 브랜치인 X에 적용하고 싶을때</span></span><br><span class="line">$ git cherry-pick 76ae30ef 13af32cc</span><br></pre></td></tr></table></figure><hr><h1 id="9-git-stash"><a href="#9-git-stash" class="headerlink" title="9. git stash"></a>9. git stash</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># staged, modified 상태의 파일을 저장</span></span><br><span class="line">$ git stash     </span><br><span class="line"> </span><br><span class="line"><span class="comment"># stash로 저장한 리스트를 출력</span></span><br><span class="line">$ git stash list         </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 가장 최근에 저장한 stash를 반영</span></span><br><span class="line">$ git stash apply      </span><br><span class="line">$ git stash apply stash@&#123;1&#125;  <span class="comment"># 지정한 stash를 반영</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 지정한 stash를 삭제</span></span><br><span class="line">$ git stash drop stash@&#123;1&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># stash를 반영하고 자동 삭제</span></span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><hr><h1 id="10-git-tag"><a href="#10-git-tag" class="headerlink" title="10. git tag"></a>10. git tag</h1><ul><li><code>light weight 태그</code> : 단순 커밋 태그용. 커밋을 바로 가리킴</li><li><code>annotated 태그</code> : 태그 메세지도 첨부할수 있어 자체 해시값을 가짐. ^{}이 커밋을 가리킴</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 태그 추가</span></span><br><span class="line">$ git tag [태그이름]           </span><br><span class="line">$ git tag [태그이름] [커밋번호]  <span class="comment"># 특정 해쉬에 태그 추가</span></span><br><span class="line">$ git tag -a [태그이름] [커밋번호] <span class="comment"># 특정 해쉬에 annotated 태그 추가</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 태그 조회</span></span><br><span class="line">$ git tag</span><br><span class="line">$ git tag -l <span class="string">&#x27;v1.*&#x27;</span>  <span class="comment"># 와일드카드 패턴으로 검색조회</span></span><br><span class="line">$ git show [태그이름]  <span class="comment"># 특정 태그 조회</span></span><br><span class="line">$ git show-ref --tags  <span class="comment"># 해쉬값과 태그 조회</span></span><br></pre></td></tr></table></figure><hr><h1 id="11-git-blame"><a href="#11-git-blame" class="headerlink" title="11. git blame"></a>11. git blame</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git 프로젝트에서 어떤 코드를 누가 수정했는지, 어떤 commit으로 수정이 되었는지 궁금할 때</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 해당 파일에 대한 모든 수정 내역</span></span><br><span class="line">$ git blame &lt;파일명&gt;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># author name과 timestamp는 출력하지 않음.</span></span><br><span class="line">$ git blame -s &lt;파일명&gt;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># description과 수정사항을 보여줌</span></span><br><span class="line">$ git show &lt;커밋번호&gt;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 파일내용을 start부터 end 라인까지의 수정 내역만 보여줌</span></span><br><span class="line">$ git blame -L &lt;start,end&gt; &lt;파일명&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CheatSheet </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CheatSheet </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
